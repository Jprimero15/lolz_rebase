	.cpu cortex-a15
	.fpu softvfp
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 2
	.eabi_attribute 30, 2
	.eabi_attribute 34, 1
	.eabi_attribute 18, 4
	.file	"android.c"
#APP
	.section	.text.unlikely,"ax",%progbits
	.align	2
	.type	reset_config, %function
reset_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	stmfd	sp!, {r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r5, r0
	ldr	r3, [r0, #12]
	mov	r6, #0
	ldr	r4, [r3, #36]
	sub	r4, r4, #72
.L2:
	ldr	r3, [r5, #12]
	add	r2, r4, #72
	mov	r0, r4
	mov	r1, #0
	add	r3, r3, #36
	cmp	r2, r3
	beq	.L10
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L3
	blx	r3
.L3:
	ldr	r3, [r4, #72]
	str	r6, [r4, #80]
	sub	r4, r3, #72
	b	.L2
.L10:
	str	r1, [r5, #12]
	str	r1, [r5, #56]
	ldmfd	sp!, {r4, r5, r6, pc}
	.fnend
	.size	reset_config, .-reset_config
	.text
	.align	2
	.type	composite_setup_complete, %function
composite_setup_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	composite_setup_complete, .-composite_setup_complete
	.align	2
	.type	debug_reset_stats, %function
debug_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	lr, .L23
.LPIC0:
	add	lr, pc, lr
	ldr	r3, [lr]
	cmp	lr, r3
	sub	r3, r3, #4
	beq	.L21
	mov	ip, #0
.L15:
	ldr	r1, [r3, #20]
	cmp	r1, #0
	beq	.L14
	str	ip, [r1, #128]
	str	ip, [r1, #132]
	str	ip, [r1, #136]
.L14:
	ldr	r3, [r3, #4]
	cmp	lr, r3
	sub	r3, r3, #4
	bne	.L15
.L21:
	mov	r0, r2
	ldr	pc, [sp], #4
.L24:
	.align	2
.L23:
	.word	.LANCHOR0-(.LPIC0+8)
	.fnend
	.size	debug_reset_stats, .-debug_reset_stats
	.align	2
	.type	debug_open, %function
debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_open, .-debug_open
	.align	2
	.type	rmnet_smd_debug_open, %function
rmnet_smd_debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	rmnet_smd_debug_open, .-rmnet_smd_debug_open
	.align	2
	.type	rmnet_sdio_set_modem_cbits_w, %function
rmnet_sdio_set_modem_cbits_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #-12]
	bx	lr
	.fnend
	.size	rmnet_sdio_set_modem_cbits_w, .-rmnet_sdio_set_modem_cbits_w
	.align	2
	.type	rmnet_sdio_disconnect_work, %function
rmnet_sdio_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	rmnet_sdio_disconnect_work, .-rmnet_sdio_disconnect_work
	.align	2
	.type	rmnet_sdio_reset_stats, %function
rmnet_sdio_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #124]
	mov	r1, #0
	mov	r0, r2
	str	r1, [r3, #356]
	str	r1, [r3, #360]
	str	r1, [r3, #368]
	str	r1, [r3, #372]
	str	r1, [r3, #328]
	str	r1, [r3, #364]
	bx	lr
	.fnend
	.size	rmnet_sdio_reset_stats, .-rmnet_sdio_reset_stats
	.align	2
	.type	debug_rmnet_sdio_open, %function
debug_rmnet_sdio_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	debug_rmnet_sdio_open, .-debug_rmnet_sdio_open
	.section	.text.unlikely
	.align	2
	.type	xport_to_str, %function
xport_to_str:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	sub	r0, r0, #1
	cmp	r0, #9
	addls	pc, pc, r0, asl #2
	b	.L32
.L34:
	b	.L44
	b	.L35
	b	.L36
	b	.L37
	b	.L38
	b	.L39
	b	.L40
	b	.L41
	b	.L42
	b	.L43
	.p2align 1
.L35:
	ldr	r0, .L45
.LPIC4:
	add	r0, pc, r0
	bx	lr
.L36:
	ldr	r0, .L45+4
.LPIC5:
	add	r0, pc, r0
	bx	lr
.L37:
	ldr	r0, .L45+8
.LPIC6:
	add	r0, pc, r0
	bx	lr
.L38:
	ldr	r0, .L45+12
.LPIC7:
	add	r0, pc, r0
	bx	lr
.L39:
	ldr	r0, .L45+16
.LPIC8:
	add	r0, pc, r0
	bx	lr
.L40:
	ldr	r0, .L45+20
.LPIC9:
	add	r0, pc, r0
	bx	lr
.L41:
	ldr	r0, .L45+24
.LPIC10:
	add	r0, pc, r0
	bx	lr
.L42:
	ldr	r0, .L45+28
.LPIC11:
	add	r0, pc, r0
	bx	lr
.L43:
	ldr	r0, .L45+32
.LPIC12:
	add	r0, pc, r0
	bx	lr
.L32:
	ldr	r0, .L45+36
.LPIC13:
	add	r0, pc, r0
	bx	lr
.L44:
	ldr	r0, .L45+40
.LPIC3:
	add	r0, pc, r0
	bx	lr
.L46:
	.align	2
.L45:
	.word	.LC1-(.LPIC4+8)
	.word	.LC2-(.LPIC5+8)
	.word	.LC3-(.LPIC6+8)
	.word	.LC4-(.LPIC7+8)
	.word	.LC5-(.LPIC8+8)
	.word	.LC6-(.LPIC9+8)
	.word	.LC7-(.LPIC10+8)
	.word	.LC8-(.LPIC11+8)
	.word	.LC9-(.LPIC12+8)
	.word	.LC10-(.LPIC13+8)
	.word	.LC0-(.LPIC3+8)
	.fnend
	.size	xport_to_str, .-xport_to_str
	.text
	.align	2
	.type	rmnet_mux_suspend, %function
rmnet_mux_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #372]
	cmp	r3, #0
	beq	.L47
	ldr	r3, [r0, #352]
	bic	r3, r3, #2
	str	r3, [r0, #352]
.L47:
	bx	lr
	.fnend
	.size	rmnet_mux_suspend, .-rmnet_mux_suspend
	.align	2
	.type	rmnet_mux_unbind, %function
rmnet_mux_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #0
	str	r3, [r1, #172]
	bx	lr
	.fnend
	.size	rmnet_mux_unbind, .-rmnet_mux_unbind
	.align	2
	.type	rmnet_mux_reset_stats, %function
rmnet_mux_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #124]
	mov	r1, #0
	mov	r0, r2
	str	r1, [r3, #408]
	str	r1, [r3, #416]
	str	r1, [r3, #420]
	str	r1, [r3, #404]
	str	r1, [r3, #400]
	str	r1, [r3, #312]
	str	r1, [r3, #412]
	str	r1, [r3, #424]
	bx	lr
	.fnend
	.size	rmnet_mux_reset_stats, .-rmnet_mux_reset_stats
	.align	2
	.type	dbg_rmnet_mux_open, %function
dbg_rmnet_mux_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	dbg_rmnet_mux_open, .-dbg_rmnet_mux_open
	.align	2
	.type	audio_control_complete, %function
audio_control_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	audio_control_complete, .-audio_control_complete
	.align	2
	.type	audio_pcm_prepare, %function
audio_pcm_prepare:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	ip, r0
	str	lr, [sp, #4]
	ldr	r1, [r0, #212]
	mov	lr, #0
	mov	r0, lr
	ldr	r4, [r1, #80]
	ldr	r2, [r1, #60]
	ldr	r3, [r1, #200]
	mul	r2, r2, r4
	str	lr, [r3, #128]
	mov	r2, r2, lsr #3
	str	r2, [r3, #124]
	ldr	r2, [r1, #540]
	str	r2, [r3, #112]
	ldr	r1, [ip, #212]
	ldr	ip, [r1, #80]
	ldr	r1, [r1, #68]
	str	r2, [r3, #120]
	mul	r1, r1, ip
	add	r2, r2, r1, lsr #3
	str	r2, [r3, #116]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_prepare, .-audio_pcm_prepare
	.align	2
	.type	audio_pcm_pointer, %function
audio_pcm_pointer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #212]
	ldr	r2, [r3, #200]
	ldr	r0, [r3, #80]
	ldr	r3, [r2, #120]
	ldr	r2, [r2, #112]
	rsb	r3, r2, r3
	mov	r3, r3, asl #3
	udiv	r0, r3, r0
	bx	lr
	.fnend
	.size	audio_pcm_pointer, .-audio_pcm_pointer
	.align	2
	.type	ffs_ep0_ioctl, %function
ffs_ep0_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #124]
	movw	r0, #26496
	cmp	r1, r0
	ldr	r0, [r3]
	beq	.L71
	cmp	r0, #0
	beq	.L67
	ldr	r3, [r0]
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L67
	bx	r3
.L71:
	ldr	r3, [r3, #132]
	cmp	r3, #0
	beq	.L64
	.save {lr}
	str	lr, [sp, #-4]!
	mov	ip, r2
	ldr	r2, [r3, #8]
	ldr	lr, [r3, #32]
	ldrh	r1, [r2, #178]
	cmp	r1, #0
	beq	.L65
	uxtb	ip, ip
	mov	r2, lr
.L63:
	mov	r0, r2
	ldrh	r3, [r2], #2
	sxth	r3, r3
	cmp	r3, #0
	blt	.L62
	cmp	r3, ip
	beq	.L72
.L62:
	subs	r1, r1, #1
	bne	.L63
.L65:
	mvn	r0, #32
	ldr	pc, [sp], #4
.L72:
	rsb	r0, lr, r0
	mov	r0, r0, asr #1
	ldr	pc, [sp], #4
.L64:
	mvn	r0, #18
	bx	lr
.L67:
	mvn	r0, #24
	bx	lr
	.fnend
	.size	ffs_ep0_ioctl, .-ffs_ep0_ioctl
	.align	2
	.type	fsg_lun_release, %function
fsg_lun_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	fsg_lun_release, .-fsg_lun_release
	.align	2
	.type	serial_debug_open, %function
serial_debug_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	mov	r0, #0
	str	r3, [r1, #124]
	bx	lr
	.fnend
	.size	serial_debug_open, .-serial_debug_open
	.align	2
	.type	debug_sdio_open, %function
debug_sdio_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_sdio_open, .-debug_sdio_open
	.align	2
	.type	debug_smd_open, %function
debug_smd_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	debug_smd_open, .-debug_smd_open
	.align	2
	.type	gbam_endless_rx_complete, %function
gbam_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gbam_endless_rx_complete, .-gbam_endless_rx_complete
	.align	2
	.type	gbam_endless_tx_complete, %function
gbam_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gbam_endless_tx_complete, .-gbam_endless_tx_complete
	.align	2
	.type	gbam_wake_cb, %function
gbam_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #16]
	ldr	r3, [r3, #128]
	ldr	r0, [r3]
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L80
	bx	r3
.L80:
	mvn	r0, #94
	bx	lr
	.fnend
	.size	gbam_wake_cb, .-gbam_wake_cb
	.align	2
	.type	ghsic_ctrl_receive, %function
ghsic_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxeq	lr
	ldr	r3, [r0, #52]
	cmp	r3, #0
	beq	.L84
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #8]
	blx	r3
	ldr	r3, [r4, #100]
	add	r3, r3, #1
	str	r3, [r4, #100]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L84:
	mov	r0, r3
	bx	lr
	.fnend
	.size	ghsic_ctrl_receive, .-ghsic_ctrl_receive
	.align	2
	.type	ghsic_ctrl_status, %function
ghsic_ctrl_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #8]
	str	r1, [r0, #92]
	cmp	r3, #0
	beq	.L87
	ldr	r2, [r3, #136]
	cmp	r2, #0
	beq	.L87
	mov	r0, r3
	bx	r2
.L87:
	bx	lr
	.fnend
	.size	ghsic_ctrl_status, .-ghsic_ctrl_status
	.align	2
	.type	modem_open, %function
modem_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L96
	mov	r2, #0
	mov	r0, r2
.LPIC22:
	add	r3, pc, r3
	str	r2, [r3]
	bx	lr
.L97:
	.align	2
.L96:
	.word	.LANCHOR1-(.LPIC22+8)
	.fnend
	.size	modem_open, .-modem_open
	.align	2
	.type	modem_close, %function
modem_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	modem_close, .-modem_close
	.align	2
	.type	modem_poll, %function
modem_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r2, r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L100
	ldr	r3, .L110
	ldr	ip, [r2]
.LPIC23:
	add	r3, pc, r3
	cmp	ip, #0
	cmnne	r3, #4
	add	r1, r3, #4
	beq	.L100
	blx	ip
.L100:
	ldr	r3, .L110+4
	ldr	r4, [sp]
	add	sp, sp, #4
.LPIC25:
	ldr	r0, [pc, r3]		@ tls_load_dot_plus_eight
	cmp	r0, #0
	movne	r0, #65
	ldr	pc, [sp], #4
.L111:
	.align	2
.L110:
	.word	.LANCHOR1-(.LPIC23+8)
	.word	.LANCHOR1-(.LPIC25+8)
	.fnend
	.size	modem_poll, .-modem_poll
	.align	2
	.type	ccid_bulk_release, %function
ccid_bulk_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #124]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #152]
	bx	lr
	.fnend
	.size	ccid_bulk_release, .-ccid_bulk_release
	.align	2
	.type	ccid_ctrl_release, %function
ccid_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #124]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #116]
	bx	lr
	.fnend
	.size	ccid_ctrl_release, .-ccid_ctrl_release
	.align	2
	.type	f_midi_disable, %function
f_midi_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	bx	r3
	.fnend
	.size	f_midi_disable, .-f_midi_disable
	.align	2
	.type	f_midi_snd_free, %function
f_midi_snd_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_snd_free, .-f_midi_snd_free
	.align	2
	.type	f_midi_in_open, %function
f_midi_in_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #28]
	ldr	r3, [r0, #12]
	ldr	r2, [r2, #200]
	add	r3, r2, r3, asl #2
	ldr	r1, [r3, #232]
	cmp	r1, #0
	beq	.L119
	str	r0, [r3, #104]
	ldr	r3, [r0, #12]
	mov	r1, #0
	mov	r0, r1
	add	r3, r3, #58
	ldr	r3, [r2, r3, asl #2]
	strb	r1, [r3, #9]
.L118:
	bx	lr
.L119:
	mvn	r0, #21
	b	.L118
	.fnend
	.size	f_midi_in_open, .-f_midi_in_open
	.align	2
	.type	f_midi_in_close, %function
f_midi_in_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_in_close, .-f_midi_in_close
	.align	2
	.type	f_midi_out_open, %function
f_midi_out_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r1, [r0, #28]
	mov	r2, r0
	ldr	r3, [r0, #12]
	ldr	r1, [r1, #200]
	cmp	r3, #15
	addle	r3, r3, #42
	movle	r0, #0
	mvngt	r0, #21
	strle	r2, [r1, r3, asl #2]
	bx	lr
	.fnend
	.size	f_midi_out_open, .-f_midi_out_open
	.align	2
	.type	f_midi_out_close, %function
f_midi_out_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	f_midi_out_close, .-f_midi_out_close
	.align	2
	.type	acc_hid_start, %function
acc_hid_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_start, .-acc_hid_start
	.align	2
	.type	acc_hid_stop, %function
acc_hid_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_stop, .-acc_hid_stop
	.align	2
	.type	acc_hid_open, %function
acc_hid_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	acc_hid_open, .-acc_hid_open
	.align	2
	.type	acc_hid_close, %function
acc_hid_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	acc_hid_close, .-acc_hid_close
	.align	2
	.type	rndis_response_available, %function
rndis_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #176
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #172]
	ldr	ip, [r1]
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L140
.L129:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L140:
	ldr	r2, [r0, #168]
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L129
	mov	r4, r0
	mov	r0, #0
	str	r3, [ip]
	mov	r2, #32
	str	r0, [ip, #4]
	ldr	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L129
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	b	.L129
	.fnend
	.size	rndis_response_available, .-rndis_response_available
	.align	2
	.type	rndis_response_complete, %function
rndis_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, [r1, #32]
	str	r6, [sp, #8]
	ldr	r2, [r1, #44]
	str	lr, [sp, #12]
	ldr	r3, [r4, #20]
	cmp	r3, #0
	beq	.L141
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L141
	cmn	r2, #108
	beq	.L146
	cmn	r2, #104
	beq	.L146
	ldr	r3, [r4, #168]
	cmp	r3, r0
	beq	.L164
.L141:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L146:
	mov	r3, #0
	str	r3, [r4, #176]
	b	.L141
.L164:
	add	r5, r4, #176
#APP
@ 99 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #0
	beq	.L141
	ldr	r0, [r4, #168]
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L141
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	b	.L141
	.fnend
	.size	rndis_response_complete, .-rndis_response_complete
	.align	2
	.type	ecm_qc_get_alt, %function
ecm_qc_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #120]	@ zero_extendqisi2
	cmp	r3, r1
	moveq	r0, #0
	beq	.L166
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
.L166:
	bx	lr
	.fnend
	.size	ecm_qc_get_alt, .-ecm_qc_get_alt
	.align	2
	.type	mbim_get_alt, %function
mbim_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #196]	@ zero_extendqisi2
	cmp	r3, r1
	moveq	r0, #0
	beq	.L169
	ldrb	r3, [r0, #197]	@ zero_extendqisi2
	cmp	r3, r1
	ldreqb	r0, [r0, #198]	@ zero_extendqisi2
	mvnne	r0, #21
.L169:
	bx	lr
	.fnend
	.size	mbim_get_alt, .-mbim_get_alt
	.align	2
	.type	bam_data_endless_rx_complete, %function
bam_data_endless_rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	bam_data_endless_rx_complete, .-bam_data_endless_rx_complete
	.align	2
	.type	bam_data_endless_tx_complete, %function
bam_data_endless_tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	bam_data_endless_tx_complete, .-bam_data_endless_tx_complete
	.align	2
	.type	ecm_notify_complete, %function
ecm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, [r1, #32]
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	cmn	r3, #108
	beq	.L176
	cmn	r3, #104
	beq	.L176
.L175:
	ldr	r3, [r5, #20]
	cmp	r1, #0
	str	r1, [r5, #168]
	ldr	r0, [r3, #24]
	beq	.L174
	ldrb	r2, [r5, #172]	@ zero_extendqisi2
	ldr	r3, [r1]
	cmp	r2, #1
	beq	.L180
	bcc	.L174
	cmp	r2, #2
	bne	.L179
	mov	r2, #0
	mov	ip, #8
	mov	r4, #42
	mov	lr, #16
	strb	r2, [r3, #2]
	strb	r4, [r3, #1]
	strb	r2, [r3, #3]
	strb	r2, [r3, #7]
	strb	ip, [r3, #6]
	ldr	ip, [r1]
	str	lr, [r1, #4]
	ldr	r2, [r0]
	ldr	r0, [r2, #20]
	cmp	r0, #4
	bhi	.L197
	cmp	r0, #2
	movls	r2, #28672
	movtls	r2, 148
	bls	.L183
	ldr	r2, [r2, #16]
.L184:
	mov	r0, #28672
	mov	lr, #0
	cmp	r2, #3
	movt	r0, 148
	movt	lr, 6500
	movne	r2, r0
	moveq	r2, lr
.L183:
	mov	r0, #0
	str	r2, [ip, #8]
	str	r2, [ip, #12]
	strb	r0, [r5, #172]
.L179:
	mvn	r0, #94
	mov	ip, #0
	mov	r2, #32
	mov	r4, r1
	strb	r0, [r3]
	ldrb	r0, [r5, #148]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r5, #164]
	str	ip, [r5, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r4, [r5, #168]
.L174:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L176:
	mov	r3, #0
	strb	r3, [r5, #172]
	b	.L175
.L180:
	mov	r2, #0
	mov	ip, #8
	mov	r0, #2
	strb	r2, [r3, #1]
	ldrb	lr, [r5, #173]	@ zero_extendqisi2
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	strh	lr, [r3, #2]	@ unaligned
	str	ip, [r1, #4]
	strb	r0, [r5, #172]
	b	.L179
.L197:
	ldr	r2, [r2, #16]
	cmp	r2, #5
	bne	.L184
	mov	r2, #0
	movt	r2, 13000
	b	.L183
	.fnend
	.size	ecm_notify_complete, .-ecm_notify_complete
	.align	2
	.type	ecm_get_alt, %function
ecm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, r1
	moveq	r0, #0
	beq	.L199
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
.L199:
	bx	lr
	.fnend
	.size	ecm_get_alt, .-ecm_get_alt
	.align	2
	.type	eth_qc_start_xmit, %function
eth_qc_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	eth_qc_start_xmit, .-eth_qc_start_xmit
	.align	2
	.type	f_audio_get_alt, %function
f_audio_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L207
.LPIC27:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldrb	r2, [r3, #8]	@ zero_extendqisi2
	cmp	r2, r1
	beq	.L206
	ldrb	r3, [r3, #9]	@ zero_extendqisi2
	cmp	r3, r1
	ldreqb	r0, [r0, #249]	@ zero_extendqisi2
	movne	r0, #0
	bx	lr
.L206:
	ldrb	r0, [r0, #248]	@ zero_extendqisi2
	bx	lr
.L208:
	.align	2
.L207:
	.word	uac1_ac_header_desc(GOT_PREL)+(.-(.LPIC27+8))
	.fnend
	.size	f_audio_get_alt, .-f_audio_get_alt
	.align	2
	.type	generic_set_cmd, %function
generic_set_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, #4
	str	r2, [r0, r1, asl #2]
	mov	r0, #0
	bx	lr
	.fnend
	.size	generic_set_cmd, .-generic_set_cmd
	.align	2
	.type	generic_get_cmd, %function
generic_get_cmd:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	add	r1, r1, #4
	ldr	r0, [r0, r1, asl #2]
	bx	lr
	.fnend
	.size	generic_get_cmd, .-generic_get_cmd
	.align	2
	.type	conn_gadget_out_max_packet_size_store, %function
conn_gadget_out_max_packet_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r3
	bx	lr
	.fnend
	.size	conn_gadget_out_max_packet_size_store, .-conn_gadget_out_max_packet_size_store
	.align	2
	.type	conn_gadget_in_max_packet_size_store, %function
conn_gadget_in_max_packet_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r3
	bx	lr
	.fnend
	.size	conn_gadget_in_max_packet_size_store, .-conn_gadget_in_max_packet_size_store
	.align	2
	.type	ncm_ep0out_complete, %function
ncm_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	mov	r2, #0
	ldr	ip, [r1, #32]
	str	r2, [r1, #32]
	cmp	r3, r2
	bne	.L218
	ldr	r2, [r1, #48]
	ldr	r3, [r1, #4]
	cmp	r2, r3
	beq	.L219
.L218:
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	bx	r3
.L219:
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	r1, [r1]
	ldrb	r3, [r1, #2]	@ zero_extendqisi2
	ldrb	lr, [r1, #1]	@ zero_extendqisi2
	ldrb	r2, [r1]	@ zero_extendqisi2
	ldrb	r1, [r1, #3]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	orr	r3, r3, lr, asl #8
	orr	r3, r3, r2
	orr	r3, r3, r1, asl #24
	cmp	r3, #2048
	bcc	.L214
	ldr	r2, .L220
.LPIC28:
	add	r2, pc, r2
	ldr	r2, [r2, #4]
	cmp	r2, r3
	strcs	r3, [ip, #112]
	bcs	.L216
.L214:
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	lr, [sp], #4
	ldr	r3, [r3, #24]
	bx	r3
.L216:
	ldr	pc, [sp], #4
.L221:
	.align	2
.L220:
	.word	.LANCHOR2-(.LPIC28+8)
	.fnend
	.size	ncm_ep0out_complete, .-ncm_ep0out_complete
	.align	2
	.type	ncm_get_alt, %function
ncm_get_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #148]	@ zero_extendqisi2
	cmp	r3, r1
	moveq	r0, #0
	beq	.L223
	ldr	r3, [r0, #88]
	ldr	r0, [r3]
	adds	r0, r0, #0
	movne	r0, #1
.L223:
	bx	lr
	.fnend
	.size	ncm_get_alt, .-ncm_get_alt
	.align	2
	.type	qdss_function_init, %function
qdss_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	qdss_function_init, .-qdss_function_init
	.align	2
	.type	ptp_function_init, %function
ptp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ptp_function_init, .-ptp_function_init
	.align	2
	.type	ptp_function_cleanup, %function
ptp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	ptp_function_cleanup, .-ptp_function_cleanup
	.align	2
	.type	audio_source_function_unbind_config, %function
audio_source_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mvn	r2, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	bx	lr
	.fnend
	.size	audio_source_function_unbind_config, .-audio_source_function_unbind_config
	.align	2
	.type	uasp_function_init, %function
uasp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	uasp_function_init, .-uasp_function_init
	.align	2
	.type	uasp_function_cleanup, %function
uasp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	uasp_function_cleanup, .-uasp_function_cleanup
	.align	2
	.type	uasp_function_bind_config, %function
uasp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mvn	r0, #18
	bx	lr
	.fnend
	.size	uasp_function_bind_config, .-uasp_function_bind_config
	.align	2
	.type	android_unbind_config, %function
android_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L252
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #24]
.LPIC29:
	add	r1, pc, r1
	ldr	r3, [r1, #16]!
	cmp	r3, r1
	sub	r2, r3, #520
	bne	.L236
	b	.L233
.L251:
	ldr	r3, [r2, #520]
	cmp	r3, r1
	sub	r2, r3, #520
	beq	.L233
.L236:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L251
.L233:
	ldr	r3, [r0]
	mov	r6, r5
	ldrb	r2, [r3, #378]	@ zero_extendqisi2
	cmp	r2, #0
	movne	r2, #0
	strneb	r2, [r3, #378]
	ldr	r4, [r6, #112]!
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L232
.L240:
	ldr	r0, [r4]
	mov	r1, r5
	ldr	r3, [r0, #44]
	cmp	r3, #0
	beq	.L239
	blx	r3
.L239:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L240
.L232:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L253:
	.align	2
.L252:
	.word	.LANCHOR1-(.LPIC29+8)
	.fnend
	.size	android_unbind_config, .-android_unbind_config
	.align	2
	.type	audio_set_endpoint_complete, %function
audio_set_endpoint_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #44]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [r1, #32]
	str	r3, [sp, #4]
	cmp	r5, r3
	bne	.L254
	ldr	r6, [r4, #272]
	cmp	r6, r3
	beq	.L254
	ldmia	r1, {r1, r2}
	add	r0, sp, #4
	bl	memcpy(PLT)
	ldr	r2, [sp, #4]
	mov	r0, r6
	ldr	r3, [r6, #36]
	ldrb	r1, [r4, #268]	@ zero_extendqisi2
	blx	r3
	str	r5, [r4, #272]
.L254:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_set_endpoint_complete, .-audio_set_endpoint_complete
	.align	2
	.type	midi_function_init, %function
midi_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L267
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC33:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L261
	mov	r4, r0
	movw	r1, #32976
	mov	r0, r3
	mov	r2, #8
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4, #4]
	beq	.L264
.L263:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
.L265:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L261:
	mov	r2, #16
	mov	r3, r2
	str	r2, [r0, #4]
	b	.L263
.L264:
	mvn	r0, #11
	b	.L265
.L268:
	.align	2
.L267:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC33+8))
	.fnend
	.size	midi_function_init, .-midi_function_init
	.align	2
	.type	ecm_function_init, %function
ecm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L276
.LPIC35:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3, #24]
	cmp	r3, #0
	beq	.L270
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #32976
	mov	r4, r0
	mov	r2, #6
	mov	r0, r3
	str	lr, [sp, #4]
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r3, #11
	movne	r3, #0
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L270:
	mov	r2, #16
	str	r2, [r0, #4]
	mov	r0, r3
	bx	lr
.L277:
	.align	2
.L276:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC35+8))
	.fnend
	.size	ecm_function_init, .-ecm_function_init
	.align	2
	.type	rndis_function_init, %function
rndis_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L285
.LPIC37:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L279
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #32976
	mov	r4, r0
	mov	r2, #272
	mov	r0, r3
	str	lr, [sp, #4]
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r4, #4]
	mvneq	r3, #11
	movne	r3, #0
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L279:
	mov	r2, #16
	str	r2, [r0, #4]
	mov	r0, r3
	bx	lr
.L286:
	.align	2
.L285:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC37+8))
	.fnend
	.size	rndis_function_init, .-rndis_function_init
	.align	2
	.type	audio_source_function_init, %function
audio_source_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L295
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
.LPIC39:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L290
	movw	r1, #32976
	mov	r2, #8
	bl	kmem_cache_alloc_trace(PLT)
	subs	r3, r0, #0
	beq	.L294
.L288:
	mvn	r2, #0
	mov	r0, #0
	str	r2, [r3]
	str	r2, [r3, #4]
	str	r3, [r4, #4]
.L289:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L290:
	mov	r3, #16
	b	.L288
.L294:
	mvn	r0, #11
	b	.L289
.L296:
	.align	2
.L295:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC39+8))
	.fnend
	.size	audio_source_function_init, .-audio_source_function_init
	.align	2
	.type	midi_alloc_ep_req, %function
midi_alloc_ep_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	mov	r1, #32
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L298
	str	r5, [r4, #4]
	mov	r0, r5
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L303
.L298:
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L303:
	ldr	r2, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L298
	.fnend
	.size	midi_alloc_ep_req, .-midi_alloc_ep_req
	.align	2
	.type	ccid_function_unbind, %function
ccid_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L305
	ldr	r0, [r1, #8]
	bl	kfree(PLT)
.L305:
	ldr	r0, [r4, #16]
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
	.fnend
	.size	ccid_function_unbind, .-ccid_function_unbind
	.align	2
	.type	ghsuart_ctrl_receive, %function
ghsuart_ctrl_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	beq	.L309
	ldr	r3, [r5, #68]
	cmp	r3, #0
	moveq	r4, r3
	beq	.L308
	ldr	r0, [r5, #12]
	blx	r3
	ldr	r3, [r5, #100]
	mov	r4, r0
	add	r3, r3, #1
	str	r3, [r5, #100]
.L308:
	mov	r0, r6
	bl	kfree(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L309:
	mov	r4, r5
	b	.L308
	.fnend
	.size	ghsuart_ctrl_receive, .-ghsuart_ctrl_receive
	.align	2
	.type	audio_source_function_cleanup, %function
audio_source_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #4]
	b	kfree(PLT)
	.fnend
	.size	audio_source_function_cleanup, .-audio_source_function_cleanup
	.align	2
	.type	mass_storage_function_cleanup, %function
mass_storage_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	mass_storage_function_cleanup, .-mass_storage_function_cleanup
	.align	2
	.type	ecm_function_cleanup, %function
ecm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_function_cleanup, .-ecm_function_cleanup
	.align	2
	.type	rndis_function_cleanup, %function
rndis_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #4]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_function_cleanup, .-rndis_function_cleanup
	.align	2
	.type	midi_function_cleanup, %function
midi_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #4]
	b	kfree(PLT)
	.fnend
	.size	midi_function_cleanup, .-midi_function_cleanup
	.align	2
	.type	rmnet_smd_notify_complete, %function
rmnet_smd_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r5, [r1, #32]
	cmn	r2, #104
	ldr	r7, [r5, #84]
	beq	.L322
	cmp	r2, #0
	mov	r6, r0
	mov	r4, r1
	beq	.L323
	cmn	r2, #108
	beq	.L322
	ldr	r0, [r7]
	ldr	r1, .L345
	add	r0, r0, #32
.LPIC40:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L323:
	ldr	r3, [r5, #96]
	cmp	r3, r6
	beq	.L344
.L320:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L322:
	mov	r3, #0
	str	r3, [r5, #172]
	b	.L320
.L344:
	add	r6, r5, #172
#APP
@ 99 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #0
	beq	.L320
	ldr	r0, [r5, #96]
	mov	r2, #32
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L320
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L345+4
	ldr	r0, [r7]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
.LPIC41:
	add	r1, pc, r1
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err(PLT)
.L346:
	.align	2
.L345:
	.word	.LC11-(.LPIC40+8)
	.word	.LC12-(.LPIC41+8)
	.fnend
	.size	rmnet_smd_notify_complete, .-rmnet_smd_notify_complete
	.align	2
	.type	rmnet_sdio_notify_complete, %function
rmnet_sdio_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r1, #32]
	cmn	r2, #104
	ldr	r7, [r4, #84]
	beq	.L349
	cmp	r2, #0
	mov	r5, r1
	beq	.L350
	cmn	r2, #108
	beq	.L349
	ldr	r0, [r7]
	ldr	r1, .L372
	add	r0, r0, #32
.LPIC42:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L350:
	ldr	r3, [r4, #324]
	tst	r3, #2
	beq	.L347
	add	r6, r4, #196
#APP
@ 99 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #0
	bne	.L371
.L347:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L349:
	mov	r3, #0
	str	r3, [r4, #196]
	b	.L347
.L371:
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L347
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L372+4
	ldr	r0, [r7]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
.LPIC43:
	add	r1, pc, r1
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err(PLT)
.L373:
	.align	2
.L372:
	.word	.LC13-(.LPIC42+8)
	.word	.LC14-(.LPIC43+8)
	.fnend
	.size	rmnet_sdio_notify_complete, .-rmnet_sdio_notify_complete
	.align	2
	.type	ecm_setup, %function
ecm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r2, #8515
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	lr, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrb	ip, [r1]	@ zero_extendqisi2
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	ldrh	r4, [r1, #4]	@ unaligned
	ldr	r5, [lr, #24]
	ldrh	lr, [r1, #2]	@ unaligned
	orr	r3, r3, ip, asl #8
	ldrh	ip, [r1, #6]	@ unaligned
	cmp	r3, r2
	ldr	r3, [r5, #4]
	bne	.L379
	cmp	ip, #0
	beq	.L382
.L379:
	mvn	r6, #94
.L375:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L382:
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	cmp	r2, r4
	bne	.L379
	strh	lr, [r0, #98]	@ movhi
	ldrb	r0, [r3, #26]	@ zero_extendqisi2
	mov	r4, r1
	str	ip, [r3, #4]
	mov	r1, r3
	mov	r2, #32
	bfi	r0, ip, #1, #1
	strb	r0, [r3, #26]
	ldr	r3, [r5]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	bge	.L375
	ldr	r0, [r5]
	str	r6, [sp]
	ldr	r1, .L383
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	add	r0, r0, #32
.LPIC44:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L375
.L384:
	.align	2
.L383:
	.word	.LC15-(.LPIC44+8)
	.fnend
	.size	ecm_setup, .-ecm_setup
	.align	2
	.type	rmnet_mux_notify_complete, %function
rmnet_mux_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r1, #32]
	cmn	r2, #104
	ldr	r7, [r4, #84]
	beq	.L387
	cmp	r2, #0
	mov	r5, r1
	beq	.L388
	cmn	r2, #108
	beq	.L387
	ldr	r0, [r7]
	ldr	r1, .L407
	add	r0, r0, #32
.LPIC45:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L388:
	add	r6, r4, #376
#APP
@ 99 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #0
	bne	.L406
.L385:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L406:
	ldr	r0, [r4, #96]
	mov	r2, #32
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	beq	.L385
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r1, r3, [r6]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L407+4
	ldr	r0, [r7]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
.LPIC46:
	add	r1, pc, r1
	ldr	lr, [sp, #20]
	add	r0, r0, #32
	add	sp, sp, #24
	b	dev_err(PLT)
.L387:
	mov	r3, #0
	str	r3, [r4, #376]
	b	.L385
.L408:
	.align	2
.L407:
	.word	.LC16-(.LPIC45+8)
	.word	.LC14-(.LPIC46+8)
	.fnend
	.size	rmnet_mux_notify_complete, .-rmnet_mux_notify_complete
	.align	2
	.type	composite_suspend, %function
composite_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	add	r0, r0, #32
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L413
	ldr	r4, [r3, #36]!
	cmp	r3, r4
	sub	r4, r4, #72
	beq	.L413
.L415:
	ldr	r2, [r4, #56]
	mov	r0, r4
	cmp	r2, #0
	beq	.L414
	blx	r2
	ldr	r3, [r6, #12]
	add	r3, r3, #36
.L414:
	ldr	r4, [r4, #72]
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L415
.L413:
	ldr	r3, .L422
.LPIC47:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L412
	mov	r0, r6
	blx	r3
.L412:
	ldrb	r3, [r6, #16]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #16]
	ldr	r3, [r5]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L409
	mov	r0, r5
	ldr	r6, [sp, #8]
	mov	r1, #2
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L409:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L423:
	.align	2
.L422:
	.word	.LANCHOR1-(.LPIC47+8)
	.fnend
	.size	composite_suspend, .-composite_suspend
	.align	2
	.type	composite_resume, %function
composite_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	ldr	r3, .L445
	mov	r5, r0
.LPIC48:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	ldr	r3, [r3, #40]
	cmp	r3, #0
	beq	.L425
	blx	r3
.L425:
	ldr	r1, [r5, #12]
	cmp	r1, #0
	beq	.L427
	mov	r2, r1
	ldr	r4, [r2, #36]!
	cmp	r2, r4
	sub	r4, r4, #72
	beq	.L428
.L430:
	ldr	r3, [r4, #60]
	mov	r0, r4
	cmp	r3, #0
	beq	.L429
	blx	r3
	ldr	r1, [r5, #12]
	add	r2, r1, #36
.L429:
	ldr	r4, [r4, #72]
	cmp	r2, r4
	sub	r4, r4, #72
	bne	.L430
.L428:
	ldrb	r1, [r1, #23]	@ zero_extendqisi2
	cmp	r1, #0
	ldrne	r3, [r5, #64]
	moveq	r1, #500
	mulne	r1, r3, r1
	ldr	r3, [r6]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L427
	mov	r0, r6
	blx	r3
.L427:
	ldrb	r3, [r5, #16]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r5, #16]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L446:
	.align	2
.L445:
	.word	.LANCHOR1-(.LPIC48+8)
	.fnend
	.size	composite_resume, .-composite_resume
	.align	2
	.type	rndis_ethaddr_store, %function
rndis_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, #2
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	bl	dev_get_drvdata(PLT)
	ldr	ip, [r0, #4]
	mov	r0, #0
	movw	r3, #26215
	ldr	lr, .L454
	mov	r1, r0
	movt	r3, 26214
	add	r2, ip, r5
	strb	r0, [ip, #1]
.LPIC57:
	add	lr, pc, lr
	strb	r0, [r2], #1
	strb	r0, [r2], #1
	strb	r0, [r2], #1
	strb	r0, [r2]
	strb	r5, [ip]
	b	.L448
.L449:
	rsb	r2, r2, r1
	add	r1, r1, #1
	add	r2, r2, #1
	cmp	r1, #256
	ldrb	r0, [ip, r2]	@ zero_extendqisi2
	eor	r0, r0, r5
	strb	r0, [ip, r2]
	beq	.L452
.L448:
	add	r5, lr, #28
	smull	r2, r0, r3, r1
	mov	r2, r1, asr #31
	ldrb	r5, [r1, r5]	@ zero_extendqisi2
	rsb	r2, r2, r0, asr #1
	cmp	r5, #0
	add	r2, r2, r2, asl #2
	bne	.L449
.L452:
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L455:
	.align	2
.L454:
	.word	.LANCHOR1-(.LPIC57+8)
	.fnend
	.size	rndis_ethaddr_store, .-rndis_ethaddr_store
	.align	2
	.type	prealloc, %function
prealloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L481
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	cmp	r0, r5
	sub	r5, r5, #36
	beq	.L458
	sub	r4, r2, #1
	b	.L459
.L461:
	cmp	r4, #0
	mov	r4, r3
	beq	.L460
.L459:
	ldr	r0, [r5, #36]
	sub	r3, r4, #1
	cmp	r0, r6
	sub	r5, r0, #36
	bne	.L461
	ldr	r3, [r7, #28]
	cmp	r4, #0
	sub	r4, r4, #1
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	mov	r3, r3, lsr #7
	beq	.L482
.L462:
	cmp	r3, #0
	bne	.L464
	ldr	r5, .L484
.LPIC58:
	add	r5, pc, r5
	b	.L466
.L483:
	str	r5, [r3, #28]
	ldr	r2, [r6]
	bl	__list_add(PLT)
	cmp	r4, #0
	sub	r4, r4, #1
	beq	.L482
.L466:
	ldr	r3, [r7, #8]
	mov	r1, #32
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r1, r6
	add	r0, r3, #36
	bne	.L483
	ldr	r3, [r6]
	cmp	r6, r3
	beq	.L457
.L482:
	mov	r0, #0
.L479:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L460:
	ldr	r4, [r5, #36]
	bl	list_del(PLT)
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	sub	r5, r4, #36
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r4, r6
	mov	r0, r4
	bne	.L460
	b	.L482
.L464:
	ldr	r5, .L484+4
.LPIC59:
	add	r5, pc, r5
	b	.L469
.L468:
	str	r5, [r3, #28]
	ldr	r2, [r6]
	bl	__list_add(PLT)
	cmp	r4, #0
	sub	r4, r4, #1
	beq	.L482
.L469:
	ldr	r3, [r7, #8]
	mov	r1, #32
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r1, r6
	add	r0, r3, #36
	bne	.L468
	ldr	r3, [r6]
	cmp	r6, r3
	bne	.L482
.L457:
	mvn	r0, #11
	b	.L479
.L458:
	ldr	r3, [r1, #28]
	sub	r4, r2, #1
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	mov	r3, r3, lsr #7
	b	.L462
.L481:
	mvn	r0, #11
	bx	lr
.L485:
	.align	2
.L484:
	.word	rx_complete-(.LPIC58+8)
	.word	tx_complete-(.LPIC59+8)
	.fnend
	.size	prealloc, .-prealloc
	.align	2
	.type	diag_read_complete, %function
diag_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	str	lr, [sp, #20]
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	ldr	r3, [r1, #48]
	ldr	r6, [r1, #32]
	ldr	r4, [r0]
	str	r3, [r6, #8]
	ldr	r3, [r1, #44]
	add	r7, r4, #108
	mov	r0, r7
	str	r3, [r6, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	add	r2, r4, #92
	ldr	r1, [r4, #96]
	add	r0, r5, #36
	bl	__list_add(PLT)
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #132]
	ldr	r2, [r4, #124]
	add	r3, r3, #1
	cmp	r2, #0
	str	r3, [r4, #132]
	beq	.L486
	ldr	r3, [r2, #12]
	cmp	r3, #0
	beq	.L486
	ldr	r0, [r2, #16]
	mov	r1, #3
	mov	r2, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L486:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	diag_read_complete, .-diag_read_complete
	.align	2
	.type	diag_write_complete, %function
diag_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0]
	ldr	r7, [r1, #32]
	ldr	ip, [r5, #136]
	sub	r2, ip, #1
	str	r2, [r5, #136]
	ldr	r2, [r1, #44]
	cmp	r2, #0
	bne	.L496
	ldrh	r2, [r0, #20]
	ldr	r0, [r1, #4]
	cmp	r0, r2
	bcc	.L496
	udiv	lr, r0, r2
	mls	r0, r2, lr, r0
	cmp	r0, #0
	beq	.L509
.L496:
	add	r6, r5, #108
	mov	r4, r3
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	ldr	r1, [r5, #104]
	add	r0, r4, #36
	add	r2, r5, #100
	bl	__list_add(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L510
.L497:
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5, #124]
	cmp	r3, #0
	beq	.L495
	ldr	ip, [r3, #12]
	cmp	ip, #0
	beq	.L495
	mov	r2, r7
	ldrd	r4, [sp]
	mov	r1, #2
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r0, [r3, #16]
	bx	ip	@ indirect register sibling call
.L510:
	ldr	r3, [r4, #48]
	str	r3, [r7, #8]
	ldr	r3, [r4, #44]
	str	r3, [r7, #12]
	b	.L497
.L495:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L509:
	str	ip, [r5, #136]
	ldr	ip, [r1, #48]
	mov	r2, #32
	str	r0, [r1, #4]
	str	ip, [r7, #8]
	ldr	r3, [r1, #44]
	str	r3, [r7, #12]
	ldr	r0, [r5, #88]
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
	.fnend
	.size	diag_write_complete, .-diag_write_complete
	.align	2
	.type	diag_function_disable, %function
diag_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #108
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r0, r5
	mov	r6, #0
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r6, [r4, #112]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #124]
	cmp	r3, r6
	beq	.L512
	ldr	ip, [r3, #12]
	cmp	ip, r6
	beq	.L512
	ldr	r0, [r3, #16]
	mov	r2, r6
	mov	r1, #1
	blx	ip
.L512:
	ldr	r0, [r4, #88]
	mov	r5, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #84]
	str	r5, [r3]
	ldr	r3, [r4, #124]
	cmp	r3, r5
	strne	r5, [r3, #20]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	diag_function_disable, .-diag_function_disable
	.align	2
	.type	qdss_ctrl_read_complete, %function
qdss_ctrl_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	str	lr, [sp, #20]
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	ldr	r3, [r1, #48]
	ldr	r6, [r1, #32]
	ldr	r4, [r0]
	str	r3, [r6, #8]
	ldr	r3, [r1, #44]
	add	r7, r4, #188
	mov	r0, r7
	str	r3, [r6, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	ldr	r1, [r4, #144]
	add	r0, r5, #36
	add	r2, r4, #140
	bl	__list_add(PLT)
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	ip, [r4, #124]
	cmp	ip, #0
	beq	.L524
	ldr	r0, [r4, #128]
	mov	r2, r6
	mov	r1, #2
	ldrd	r4, [sp]
	mov	r3, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L524:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	qdss_ctrl_read_complete, .-qdss_ctrl_read_complete
	.align	2
	.type	qdss_ctrl_write_complete, %function
qdss_ctrl_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r5, [r0]
	ldr	r6, [r1, #32]
	cmp	r2, #0
	bne	.L528
	ldrh	r2, [r0, #20]
	ldr	r0, [r1, #4]
	cmp	r0, r2
	bcc	.L528
	udiv	ip, r0, r2
	mls	r2, r2, ip, r0
	cmp	r2, #0
	beq	.L535
.L528:
	add	r7, r5, #188
	mov	r4, r3
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	ldr	r1, [r5, #152]
	add	r0, r4, #36
	add	r2, r5, #148
	bl	__list_add(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L536
.L529:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	ip, [r5, #124]
	cmp	ip, #0
	beq	.L527
	ldr	r0, [r5, #128]
	mov	r2, r6
	mov	r1, #4
	ldrd	r4, [sp]
	mov	r3, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	ip	@ indirect register sibling call
.L536:
	ldr	r3, [r4, #48]
	str	r3, [r6, #8]
	ldr	r3, [r4, #44]
	str	r3, [r6, #12]
	b	.L529
.L527:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L535:
	ldr	r0, [r1, #48]
	str	r2, [r1, #4]
	mov	r2, #32
	str	r0, [r6, #8]
	ldr	r3, [r1, #44]
	str	r3, [r6, #12]
	ldr	r0, [r5, #104]
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	r3, [r0, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #16]
	bx	r3
	.fnend
	.size	qdss_ctrl_write_complete, .-qdss_ctrl_write_complete
	.align	2
	.type	rmnet_smd_debug_reset_stats, %function
rmnet_smd_debug_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	add	r5, r4, #164
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, #0
	mov	r1, r0
	mov	r0, r5
	str	r3, [r4, #424]
	str	r3, [r4, #428]
	str	r3, [r4, #432]
	str	r3, [r4, #436]
	str	r3, [r4, #440]
	str	r3, [r4, #444]
	str	r3, [r4, #448]
	str	r3, [r4, #452]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_debug_reset_stats, .-rmnet_smd_debug_reset_stats
	.align	2
	.type	rmnet_sdio_control_rx_work, %function
rmnet_sdio_control_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #32
	strd	r8, [sp, #16]
	sub	r8, r0, #112
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r9, [r0, #-136]
	b	.L542
.L545:
	bl	list_del(PLT)
	ldr	r3, [r5, #-104]
	mov	r1, r10
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r5, #-104]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #-4]
	cmn	r3, #19
	bne	.L544
	ldr	r3, [r5, #152]
	add	r3, r3, #1
	str	r3, [r5, #152]
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
.L542:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #-112]
	mov	r10, r0
	cmp	r4, r8
	mov	r0, r4
	sub	r7, r4, #8
	bne	.L545
	mov	r0, r6
	mov	r1, r10
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L544:
	ldr	r0, [r9]
	ldr	r1, .L546
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	r0, r0, #32
	ldr	r10, [sp, #24]
.LPIC60:
	add	r1, pc, r1
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	dev_err(PLT)
.L547:
	.align	2
.L546:
	.word	.LC17-(.LPIC60+8)
	.fnend
	.size	rmnet_sdio_control_rx_work, .-rmnet_sdio_control_rx_work
	.align	2
	.global	usb_rmnet_mux_ctrl_release
	.type	usb_rmnet_mux_ctrl_release, %function
usb_rmnet_mux_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	mov	r4, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r1, #124]
	add	r7, r6, #368
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r4, [r6, #356]
	mov	r0, r7
	str	r4, [r5, #124]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	usb_rmnet_mux_ctrl_release, .-usb_rmnet_mux_ctrl_release
	.align	2
	.type	audio_pcm_close, %function
audio_pcm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #8]
	add	r6, r5, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r4, [r5, #92]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	audio_pcm_close, .-audio_pcm_close
	.align	2
	.type	debug_write_reset, %function
debug_write_reset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, #0
	mov	r1, r0
	mov	r0, r4
	str	r3, [r4, #140]
	str	r3, [r4, #136]
	str	r3, [r4, #132]
	str	r3, [r4, #128]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	debug_write_reset, .-debug_write_reset
	.align	2
	.type	gs_chars_in_buffer, %function
gs_chars_in_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r4, #92]
	mov	r1, r0
	mov	r0, r4
	ldr	r2, [r4, #104]
	ldr	r3, [r4, #100]
	add	r2, r2, ip
	rsb	r3, r3, r2
	udiv	r4, r3, ip
	mls	r4, ip, r4, r3
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gs_chars_in_buffer, .-gs_chars_in_buffer
	.align	2
	.type	gs_write_room, %function
gs_write_room:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #4]
	mov	r1, r0
	cmp	r3, #0
	beq	.L558
	ldr	r5, [r4, #92]
	ldr	r3, [r4, #100]
	ldr	r2, [r4, #104]
	add	r3, r3, r5
	rsb	r3, r2, r3
	sub	r3, r3, #1
	udiv	r2, r3, r5
	mls	r5, r5, r2, r3
.L557:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L558:
	mov	r5, r3
	b	.L557
	.fnend
	.size	gs_write_room, .-gs_write_room
	.align	2
	.type	debug_sdio_reset_stats, %function
debug_sdio_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	ldr	r8, .L567
	strd	r10, [sp, #24]
	mov	r10, r2
	strd	r6, [sp, #8]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.LPIC69:
	add	r8, pc, r8
	ldr	r3, [r8, #284]
	cmp	r3, #0
	beq	.L565
	mov	r5, #0
	add	fp, r8, #288
	mov	r6, r5
	mov	r9, r5
.L561:
	add	r3, fp, r5
	add	r6, r6, #1
	ldr	r4, [r3, #20]
	add	r5, r5, #104
	add	r7, r4, #4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r9, [r4, #184]
	mov	r0, r7
	str	r9, [r4, #188]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r8, #284]
	cmp	r6, r3
	bcc	.L561
.L565:
	mov	r0, r10
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L568:
	.align	2
.L567:
	.word	.LANCHOR1-(.LPIC69+8)
	.fnend
	.size	debug_sdio_reset_stats, .-debug_sdio_reset_stats
	.align	2
	.type	debug_smd_reset_stats, %function
debug_smd_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	ldr	r8, .L576
	strd	r10, [sp, #24]
	mov	r10, r2
	strd	r6, [sp, #8]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.LPIC72:
	add	r8, pc, r8
	ldr	r3, [r8, #496]
	cmp	r3, #0
	beq	.L574
	mov	r5, #0
	add	fp, r8, #500
	mov	r6, r5
	mov	r9, r5
.L570:
	add	r3, fp, r5
	add	r6, r6, #1
	ldr	r4, [r3, #20]
	add	r5, r5, #104
	add	r7, r4, #4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r9, [r4, #172]
	mov	r0, r7
	str	r9, [r4, #168]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r8, #496]
	cmp	r6, r3
	bcc	.L570
.L574:
	mov	r0, r10
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L577:
	.align	2
.L576:
	.word	.LANCHOR1-(.LPIC72+8)
	.fnend
	.size	debug_smd_reset_stats, .-debug_smd_reset_stats
	.align	2
	.type	gsmd_ctrl_reset_stats, %function
gsmd_ctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, #0
	strd	r8, [sp, #16]
	ldr	r8, .L586
	mov	r9, r2
	strd	r6, [sp, #8]
	mov	r7, r5
	str	r10, [sp, #24]
	str	lr, [sp, #28]
.LPIC75:
	add	r8, pc, r8
.L580:
	add	r3, r8, #708
	ldr	r4, [r5, r3]
	add	r5, r5, #84
	cmp	r4, #0
	add	r6, r4, #108
	mov	r0, r6
	beq	.L579
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r7, [r4, #96]
	mov	r0, r6
	str	r7, [r4, #92]
	bl	_raw_spin_unlock_irqrestore(PLT)
.L579:
	cmp	r5, #504
	bne	.L580
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L587:
	.align	2
.L586:
	.word	.LANCHOR1-(.LPIC75+8)
	.fnend
	.size	gsmd_ctrl_reset_stats, .-gsmd_ctrl_reset_stats
	.align	2
	.type	rmnet_ctrl_release, %function
rmnet_ctrl_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, #0
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r4, [r1, #124]
	add	r6, r4, #52
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	strb	r5, [r4, #4]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r3, r4, #16
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_ctrl_release, .-rmnet_ctrl_release
	.align	2
	.type	gctrl_reset_stats, %function
gctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	str	r10, [sp, #24]
	ldr	r10, .L601
	strd	r8, [sp, #16]
	mov	r9, r2
	strd	r6, [sp, #8]
	str	lr, [sp, #28]
.LPIC76:
	add	r10, pc, r10
	ldr	r3, [r10, #1212]
	cmp	r3, #0
	beq	.L599
	mov	r5, #0
	mov	r6, r5
	mov	r8, r5
.L593:
	add	r4, r10, #1216
	add	r6, r6, #1
	ldr	r4, [r5, r4]
	add	r5, r5, #104
	cmp	r4, #0
	add	r7, r4, #4
	mov	r0, r7
	beq	.L592
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r8, [r4, #100]
	mov	r0, r7
	str	r8, [r4, #96]
	str	r8, [r4, #104]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r10, #1212]
.L592:
	cmp	r6, r3
	bcc	.L593
.L599:
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L602:
	.align	2
.L601:
	.word	.LANCHOR1-(.LPIC76+8)
	.fnend
	.size	gctrl_reset_stats, .-gctrl_reset_stats
	.align	2
	.type	ghsic_data_reset_stats, %function
ghsic_data_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	ldr	r9, .L614
	strd	r10, [sp, #24]
	mov	r10, r2
	strd	r6, [sp, #8]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.LPIC79:
	add	r9, pc, r9
	ldr	r3, [r9, #1632]
	cmp	r3, #0
	beq	.L612
	mov	r6, #0
	mov	r7, r6
	mov	r5, r6
.L606:
	add	r4, r9, #1632
	add	r7, r7, #1
	add	r4, r4, #4
	ldr	r4, [r6, r4]
	add	r6, r6, #104
	cmp	r4, #0
	add	r8, r4, #80
	add	fp, r4, #48
	mov	r0, r8
	beq	.L605
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r5, [r4, #188]
	mov	r0, r8
	str	r5, [r4, #212]
	str	r5, [r4, #204]
	str	r5, [r4, #208]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, fp
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r5, [r4, #192]
	mov	r0, fp
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #216]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r9, #1632]
.L605:
	cmp	r7, r3
	bcc	.L606
.L612:
	mov	r0, r10
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L615:
	.align	2
.L614:
	.word	.LANCHOR1-(.LPIC79+8)
	.fnend
	.size	ghsic_data_reset_stats, .-ghsic_data_reset_stats
	.align	2
	.type	ghsuart_ctrl_reset_stats, %function
ghsuart_ctrl_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L627
	strd	r8, [sp, #16]
	mov	r8, r2
	str	r10, [sp, #24]
	str	lr, [sp, #28]
.LPIC82:
	add	r6, pc, r6
	ldr	r3, [r6, #2052]
	cmp	r3, #0
	beq	.L625
	mov	r5, #0
	mov	r7, r5
	mov	r9, r5
.L619:
	add	r4, r6, #2048
	add	r7, r7, #1
	add	r4, r4, #8
	ldr	r4, [r5, r4]
	add	r5, r5, #84
	cmp	r4, #0
	add	r10, r4, #8
	mov	r0, r10
	beq	.L618
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r9, [r4, #100]
	mov	r0, r10
	str	r9, [r4, #96]
	str	r9, [r4, #104]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r6, #2052]
.L618:
	cmp	r7, r3
	bcc	.L619
.L625:
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L628:
	.align	2
.L627:
	.word	.LANCHOR1-(.LPIC82+8)
	.fnend
	.size	ghsuart_ctrl_reset_stats, .-ghsuart_ctrl_reset_stats
	.align	2
	.type	ghsuart_data_reset_stats, %function
ghsuart_data_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L640
	strd	r8, [sp, #16]
	mov	r9, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.LPIC85:
	add	r6, pc, r6
	ldr	r3, [r6, #2224]
	cmp	r3, #0
	beq	.L638
	mov	r5, #0
	mov	r7, r5
	mov	r8, r5
.L632:
	add	r4, r6, #2224
	add	r7, r7, #1
	add	r4, r4, #4
	ldr	r4, [r5, r4]
	add	r5, r5, #84
	cmp	r4, #0
	add	fp, r4, #104
	add	r10, r4, #72
	mov	r0, fp
	beq	.L631
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r8, [r4, #204]
	mov	r0, fp
	str	r8, [r4, #212]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r10
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r8, [r4, #208]
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r6, #2224]
.L631:
	cmp	r7, r3
	bcc	.L632
.L638:
	mov	r0, r9
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L641:
	.align	2
.L640:
	.word	.LANCHOR1-(.LPIC85+8)
	.fnend
	.size	ghsuart_data_reset_stats, .-ghsuart_data_reset_stats
	.align	2
	.type	ueth_change_mtu, %function
ueth_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #1152
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1156]
	mov	r1, r0
	cmp	r3, #0
	mvnne	r4, #15
	bne	.L643
	sub	r0, r6, #15
	movw	r2, #1499
	cmp	r0, r2
	mvnhi	r4, #33
	strls	r6, [r4, #356]
	movls	r4, r3
.L643:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ueth_change_mtu, .-ueth_change_mtu
	.align	2
	.type	ueth_qc_change_mtu, %function
ueth_qc_change_mtu:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #1152
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1156]
	mov	r1, r0
	cmp	r3, #0
	mvnne	r4, #15
	bne	.L648
	sub	r0, r6, #15
	movw	r2, #1499
	cmp	r0, r2
	mvnhi	r4, #33
	strls	r6, [r4, #356]
	movls	r4, r3
.L648:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	ueth_qc_change_mtu, .-ueth_qc_change_mtu
	.align	2
	.type	ccid_ctrl_open, %function
ccid_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L657
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC88:
	add	r3, pc, r3
	ldr	r4, [r3, #2396]
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L654
	ldr	r6, [r4, #116]
	cmp	r6, #0
	bne	.L655
	mov	r3, #1
	add	r7, r4, #92
	mov	r5, r1
	mov	r0, r7
	str	r3, [r4, #116]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r4, [r5, #124]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
.L653:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L655:
	mvn	r6, #15
	b	.L653
.L654:
	mvn	r6, #18
	b	.L653
.L658:
	.align	2
.L657:
	.word	.LANCHOR1-(.LPIC88+8)
	.fnend
	.size	ccid_ctrl_open, .-ccid_ctrl_open
	.align	2
	.type	ccid_bulk_open, %function
ccid_bulk_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L664
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC89:
	add	r3, pc, r3
	ldr	r4, [r3, #2396]
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L661
	ldr	r5, [r4, #152]
	cmp	r5, #0
	bne	.L662
	mov	r3, #1
	add	r7, r4, #92
	str	r5, [r4, #148]
	mov	r6, r1
	mov	r0, r7
	str	r3, [r4, #152]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r4, [r6, #124]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
.L660:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L662:
	mvn	r5, #15
	b	.L660
.L661:
	mvn	r5, #18
	b	.L660
.L665:
	.align	2
.L664:
	.word	.LANCHOR1-(.LPIC89+8)
	.fnend
	.size	ccid_bulk_open, .-ccid_bulk_open
	.align	2
	.type	audio_pcm_hw_params, %function
audio_pcm_hw_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, [r1, #296]
	movw	r2, #44100
	ldr	r3, [r1, #284]
	cmp	r3, #2
	cmpeq	ip, r2
	bne	.L672
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r3, [r0]
	.pad #12
	sub	sp, sp, #12
	ldr	r2, [r3]
	ldr	r2, [r2, #496]
	ldrd	r6, [r2, #248]
	orrs	r0, r6, r7
	beq	.L678
.L668:
	mov	r0, #2
	mov	ip, #0
	add	r2, r4, #188
	str	r0, [r4, #176]
	ldr	r0, [r3]
	ldr	r0, [r0, #496]
	str	ip, [r4, #196]
	str	r0, [r4, #180]
	ldr	r3, [r3]
	ldr	lr, [r1, #380]
	ldr	r0, [r3, #496]
	cmp	r0, ip
	beq	.L669
	ldr	ip, [r0, #276]
	cmp	ip, #0
	beq	.L669
.L670:
	mov	r6, #0
	mov	r5, r1
	mov	r3, #208
	mov	r1, lr
	str	r6, [sp]
	ldr	ip, [ip]
	blx	ip
	cmp	r0, r6
	str	r0, [r4, #184]
	beq	.L673
	ldr	r1, [r5, #380]
	adds	r2, r4, #176
	ldr	r3, [r4, #212]
	str	r1, [r4, #192]
	str	r2, [r3, #552]
	beq	.L671
	ldr	r2, [r4, #184]
	mov	r0, r6
	str	r2, [r3, #540]
	ldr	r2, [r4, #188]
	str	r2, [r3, #544]
	ldr	r2, [r4, #192]
	str	r2, [r3, #548]
.L667:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L678:
	mvn	r6, #0
	mov	r7, #0
	strd	r6, [r2, #248]
	ldr	r3, [r4]
	b	.L668
.L669:
	ldr	ip, .L679
.LPIC91:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	b	.L670
.L671:
	mov	r0, r2
	str	r2, [r3, #540]
	str	r2, [r3, #544]
	str	r2, [r3, #548]
	b	.L667
.L672:
	mvn	r0, #21
	bx	lr
.L673:
	mvn	r0, #11
	b	.L667
.L680:
	.align	2
.L679:
	.word	arm_dma_ops(GOT_PREL)+(.-(.LPIC91+8))
	.fnend
	.size	audio_pcm_hw_params, .-audio_pcm_hw_params
	.align	2
	.type	ffs_ep0_open, %function
ffs_ep0_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #328]
	ldr	r2, [r3, #92]
	cmp	r2, #3
	beq	.L683
	str	r3, [r1, #124]
	add	r2, r3, #84
#APP
@ 45 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	add	r2, r3, #88
#APP
@ 45 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	mov	r0, #0
	bx	lr
.L683:
	mvn	r0, #15
	bx	lr
	.fnend
	.size	ffs_ep0_open, .-ffs_ep0_open
	.align	2
	.type	rmnet_txcommand_complete, %function
rmnet_txcommand_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	add	r5, r4, #164
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #440]
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #440]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
	.fnend
	.size	rmnet_txcommand_complete, .-rmnet_txcommand_complete
	.align	2
	.type	ncm_notify_complete, %function
ncm_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	add	r6, r4, #188
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L688
	cmn	r3, #104
	beq	.L688
.L687:
	ldr	r3, [r4, #20]
	cmp	r5, #0
	str	r5, [r4, #168]
	ldr	r1, [r3, #24]
	beq	.L690
	ldrb	r2, [r4, #172]	@ zero_extendqisi2
	ldr	r3, [r5]
	cmp	r2, #1
	beq	.L692
	bcc	.L690
	cmp	r2, #2
	bne	.L691
	mov	r2, #0
	mov	r0, #8
	mov	lr, #42
	mov	ip, #16
	strb	r2, [r3, #2]
	strb	lr, [r3, #1]
	strb	r2, [r3, #3]
	strb	r2, [r3, #7]
	strb	r0, [r3, #6]
	ldr	r0, [r5]
	str	ip, [r5, #4]
	ldr	r2, [r1]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	movls	r2, #28672
	movtls	r2, 148
	bhi	.L705
.L694:
	mov	r1, #1
	str	r2, [r0, #8]
	str	r2, [r0, #12]
	strb	r1, [r4, #172]
.L691:
	mvn	r1, #94
	mov	r2, #0
	mov	r0, r6
	strb	r1, [r3]
	ldrb	r1, [r4, #148]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	str	r2, [r4, #168]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #164]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	cmp	r7, #0
	strlt	r5, [r4, #168]
.L690:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L688:
	mov	r3, #0
	strb	r3, [r4, #172]
	b	.L687
.L692:
	mov	r2, #0
	mov	r1, #8
	strb	r2, [r3, #1]
	ldrb	r0, [r4, #173]	@ zero_extendqisi2
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	strh	r0, [r3, #2]	@ unaligned
	str	r1, [r5, #4]
	strb	r2, [r4, #172]
	b	.L691
.L705:
	ldr	ip, [r2, #16]
	mov	r1, #28672
	mov	r2, #0
	movt	r1, 148
	movt	r2, 6500
	cmp	ip, #3
	movne	r2, r1
	b	.L694
	.fnend
	.size	ncm_notify_complete, .-ncm_notify_complete
	.align	2
	.type	rmnet_mux_setup, %function
rmnet_mux_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	ip, [r0, #20]
	ldr	r2, [r0, #372]
	ldrh	r3, [r1, #2]	@ unaligned
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r7, [ip, #24]
	cmp	r2, #0
	ldr	r5, [r7, #4]
	beq	.L715
	mov	r4, r0
	ldrb	r0, [r1]	@ zero_extendqisi2
	movw	r2, #8482
	ldrb	r1, [r1, #1]	@ zero_extendqisi2
	orr	r1, r1, r0, asl #8
	cmp	r1, r2
	beq	.L708
	movw	r2, #41217
	cmp	r1, r2
	beq	.L709
	cmp	r1, #8448
	beq	.L721
.L717:
	mvn	r0, #94
.L719:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L709:
	cmp	r3, #0
	bne	.L717
	add	r9, r4, #368
	mov	r0, r9
	bl	_raw_spin_lock(PLT)
	mov	r3, r4
	ldr	r8, [r3, #340]!
	cmp	r8, r3
	beq	.L722
	mov	r0, r8
	sub	r10, r8, #8
	bl	list_del(PLT)
	ldr	r3, [r4, #348]
	mov	r0, r9
	sub	r3, r3, #1
	str	r3, [r4, #348]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r8, #-4]
	ldr	r1, [r8, #-8]
	ldr	r0, [r5]
	cmp	r6, r3
	movcs	r9, r3
	movcc	r9, r6
	mov	r2, r9
	bl	memcpy(PLT)
	ldr	r3, .L723
	str	r4, [r5, #32]
.LPIC93:
	add	r3, pc, r3
	str	r3, [r5, #28]
	ldr	r0, [r8, #-8]
	bl	kfree(PLT)
	mov	r0, r10
	bl	kfree(PLT)
	ldr	r3, [r4, #416]
	cmp	r6, r9
	mov	r6, r9
	movle	ip, #0
	movgt	ip, #1
	add	r3, r3, #1
	str	r3, [r4, #416]
	b	.L711
.L721:
	ldr	r3, .L723+4
	mov	ip, #0
	str	r4, [r5, #32]
.LPIC92:
	add	r3, pc, r3
	str	r3, [r5, #28]
.L711:
	ldrb	r0, [r5, #26]	@ zero_extendqisi2
	str	r6, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r0, ip, #1, #1
	strb	r0, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L714
	mov	r0, r4
	b	.L719
.L708:
	ands	r3, r3, #1
	beq	.L713
	ldr	r3, [r4, #352]
	adds	ip, r6, #0
	mov	r6, #0
	movne	ip, #1
	orr	r3, r3, #2
	str	r3, [r4, #352]
	b	.L711
.L713:
	ldr	r2, [r4, #352]
	adds	ip, r6, #0
	mov	r6, r3
	movne	ip, #1
	bic	r2, r2, #2
	str	r2, [r4, #352]
	b	.L711
.L714:
	ldr	r0, [r7]
	mov	r2, r4
	ldr	r1, .L723+8
	add	r0, r0, #32
.LPIC94:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r4
	b	.L719
.L715:
	mvn	r0, #106
	b	.L719
.L722:
	mov	r0, r9
	bl	_raw_spin_unlock(PLT)
	mvn	r0, #94
	b	.L719
.L724:
	.align	2
.L723:
	.word	rmnet_mux_response_complete-(.LPIC93+8)
	.word	rmnet_mux_command_complete-(.LPIC92+8)
	.word	.LC18-(.LPIC94+8)
	.fnend
	.size	rmnet_mux_setup, .-rmnet_mux_setup
	.align	2
	.type	gbam_reset_stats, %function
gbam_reset_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L734
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC95:
	add	r3, pc, r3
	ldr	r2, [r3, #2400]
	cmp	r2, #0
	ble	.L730
	ldr	r4, [r3, #2404]
	cmp	r4, #0
	beq	.L730
	add	r5, r4, #4
	add	r6, r4, #8
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #264]
	str	r3, [r4, #260]
	str	r3, [r4, #240]
	str	r3, [r4, #244]
	str	r3, [r4, #248]
	str	r3, [r4, #268]
	str	r3, [r4, #272]
	str	r3, [r4, #276]
	str	r3, [r4, #280]
	bl	_raw_spin_unlock(PLT)
	mov	r0, r5
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
.L730:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L735:
	.align	2
.L734:
	.word	.LANCHOR1-(.LPIC95+8)
	.fnend
	.size	gbam_reset_stats, .-gbam_reset_stats
	.align	2
	.type	do_mode_sense, %function
do_mode_sense:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r3, [r0, #77]	@ zero_extendqisi2
	ldr	r5, [r1]
	ldr	r8, [r0, #104]
	ldrb	r7, [r0, #76]	@ zero_extendqisi2
	tst	r3, #247
	bne	.L748
	ldrb	r4, [r0, #78]	@ zero_extendqisi2
	mov	r9, r4, lsr #6
	and	r4, r4, #63
	cmp	r9, #3
	moveq	r3, #14592
	mvneq	r0, #21
	movteq	r3, 5
	streq	r3, [r8, #28]
	beq	.L738
	mov	r0, r5
	mov	r1, #8
	bl	__memzero(PLT)
	cmp	r7, #26
	sub	r2, r4, #63
	ldrb	r3, [r8, #24]	@ zero_extendqisi2
	clz	r2, r2
	mov	r2, r2, lsr #5
	beq	.L756
	and	r3, r3, #2
	add	r6, r5, #8
	cmp	r3, #0
	movw	r10, #65535
	movne	r3, #128
	moveq	r3, #0
	strb	r3, [r5, #3]
.L742:
	cmp	r4, #8
	orreq	r2, r2, #1
	cmp	r2, #0
	bne	.L757
	cmp	r4, #42
	beq	.L747
.L748:
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [r8, #28]
.L738:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L757:
	mov	r3, #10
	mov	r2, #8
	mov	r1, r3
	add	r0, r6, #2
	strb	r2, [r6]
	strb	r3, [r6, #1]
	bl	__memzero(PLT)
	cmp	r9, #1
	beq	.L745
	mvn	r3, #0
	mov	r2, #4
	strb	r3, [r6, #4]
	strb	r2, [r6, #2]
	strb	r3, [r6, #5]
	strb	r3, [r6, #8]
	strb	r3, [r6, #9]
	strb	r3, [r6, #10]
	strb	r3, [r6, #11]
.L745:
	add	r0, r6, #12
.L746:
	rsb	r0, r5, r0
	cmp	r10, r0
	blt	.L748
	cmp	r7, #26
	subeq	r3, r0, #1
	streqb	r3, [r5]
	beq	.L738
	sub	r3, r0, #2
	uxth	r3, r3
	mov	r2, r3, lsr #8
	strb	r3, [r5, #1]
	strb	r2, [r5]
	b	.L738
.L756:
	and	r3, r3, #2
	add	r6, r5, #4
	cmp	r3, #0
	mov	r10, #255
	movne	r3, #128
	moveq	r3, #0
	strb	r3, [r5, #2]
	b	.L742
.L747:
	mov	r3, #26
	add	r0, r6, #2
	strb	r4, [r6]
	mov	r1, r3
	strb	r3, [r6, #1]
	bl	__memzero(PLT)
	mov	r3, #2
	mov	r1, #4
	mov	r2, #40
	add	r0, r6, #28
	strb	r3, [r6, #2]
	strb	r3, [r6, #3]
	strb	r1, [r6, #4]
	strb	r2, [r6, #6]
	b	.L746
	.fnend
	.size	do_mode_sense, .-do_mode_sense
	.align	2
	.global	usb_rmnet_mux_ctrl_open
	.type	usb_rmnet_mux_ctrl_open, %function
usb_rmnet_mux_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L763
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC97:
	add	r3, pc, r3
	ldr	r5, [r3, #2488]
	add	r6, r5, #368
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #356]
	mov	r1, r0
	cmp	r4, #0
	bne	.L762
	mov	r3, #1
	mov	r0, r6
	str	r3, [r5, #356]
	str	r5, [r7, #124]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
.L760:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L762:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L763+4
	ldr	r1, .L763+8
.LPIC98:
	add	r0, pc, r0
.LPIC99:
	add	r1, pc, r1
	bl	printk(PLT)
	mvn	r0, #15
	b	.L760
.L764:
	.align	2
.L763:
	.word	.LANCHOR1-(.LPIC97+8)
	.word	.LC19-(.LPIC98+8)
	.word	.LANCHOR3-(.LPIC99+8)
	.fnend
	.size	usb_rmnet_mux_ctrl_open, .-usb_rmnet_mux_ctrl_open
	.align	2
	.type	audio_setup, %function
audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #20]
	ldrb	r2, [r1]	@ zero_extendqisi2
	ldr	r0, [r3, #24]
	cmp	r2, #34
	ldr	r3, [r0, #4]
	beq	.L767
	cmp	r2, #162
	beq	.L768
.L776:
	mvn	r4, #94
.L778:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L768:
	ldrh	r2, [r1, #2]	@ unaligned
	ldr	ip, [r3]
	cmp	r2, #256
	bne	.L776
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	sub	r2, r2, #129
	cmp	r2, #3
	bhi	.L776
	mov	r4, #68
	mvn	lr, #83
	mov	r1, #0
	mov	r2, #3
	strb	r4, [ip]
	strb	lr, [ip, #1]
	strb	r1, [ip, #2]
.L770:
	ldrb	lr, [r3, #26]	@ zero_extendqisi2
	str	r2, [r3, #4]
	mov	r1, r3
	ldr	ip, .L780
	mov	r2, #32
	bfc	lr, #1, #1
.LPIC101:
	add	ip, pc, ip
	strb	lr, [r3, #26]
	str	ip, [r3, #28]
	ldr	r3, [r0]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L778
	ldr	r0, .L780+4
	mov	r1, r4
.LPIC100:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L778
.L767:
	ldrb	ip, [r1, #1]	@ zero_extendqisi2
	ldrh	r2, [r1, #6]	@ unaligned
	sub	ip, ip, #1
	cmp	ip, #3
	bhi	.L776
	b	.L770
.L781:
	.align	2
.L780:
	.word	audio_control_complete-(.LPIC101+8)
	.word	.LC20-(.LPIC100+8)
	.fnend
	.size	audio_setup, .-audio_setup
	.align	2
	.type	gsmd_start_rx, %function
gsmd_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L796
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #4
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #68]
	mov	r7, r0
	cmp	r3, #0
	beq	.L784
	ldr	r8, [r3, #92]
	add	r9, r5, #12
	mov	r10, #2048
	b	.L785
.L798:
	ldr	r4, [r5, #12]
	cmp	r9, r4
	mov	r0, r4
	sub	fp, r4, #36
	beq	.L784
	bl	list_del(PLT)
	mov	r1, r7
	mov	r0, r6
	str	r10, [r4, #-32]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	fp, #0
	mov	r7, r0
	bne	.L797
.L785:
	ldr	r3, [r5, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	bne	.L798
.L784:
	mov	r0, r6
	mov	r1, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L797:
	ldr	r1, .L799
	mov	r2, r5
	ldr	r0, .L799+4
	ldr	r3, [r5]
.LPIC105:
	add	r1, pc, r1
	add	r1, r1, #24
.LPIC104:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	ldr	r1, [r5, #16]
	mov	r2, r9
	bl	__list_add(PLT)
	b	.L784
.L796:
	ldr	r1, .L799+8
	ldr	r0, .L799+12
.LPIC103:
	add	r1, pc, r1
.LPIC102:
	add	r0, pc, r0
	add	r1, r1, #24
	b	printk(PLT)
.L800:
	.align	2
.L799:
	.word	.LANCHOR3-(.LPIC105+8)
	.word	.LC22-(.LPIC104+8)
	.word	.LANCHOR3-(.LPIC103+8)
	.word	.LC21-(.LPIC102+8)
	.fnend
	.size	gsmd_start_rx, .-gsmd_start_rx
	.align	2
	.type	gbam_stop, %function
gbam_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L815
	add	r5, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L816
	ldr	r0, [r3, #84]
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	cmp	r0, #0
	bne	.L817
.L806:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
.L815:
	add	r5, r0, #4
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L818
	ldr	r0, [r3, #88]
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	cmp	r0, #0
	beq	.L806
	ldr	r1, .L819
	mov	r2, r0
	ldr	r0, .L819+4
.LPIC109:
	add	r1, pc, r1
	add	r1, r1, #40
.LPIC108:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L806
.L817:
	ldr	r1, .L819+8
	mov	r2, r0
	ldr	r0, .L819+12
.LPIC113:
	add	r1, pc, r1
	add	r1, r1, #64
.LPIC112:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L806
.L816:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L819+16
	ldr	r0, .L819+20
.LPIC111:
	add	r1, pc, r1
.LPIC110:
	add	r0, pc, r0
	add	r1, r1, #64
.L814:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk(PLT)
.L818:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L819+24
	ldr	r0, .L819+28
.LPIC107:
	add	r1, pc, r1
.LPIC106:
	add	r0, pc, r0
	add	r1, r1, #40
	b	.L814
.L820:
	.align	2
.L819:
	.word	.LANCHOR3-(.LPIC109+8)
	.word	.LC24-(.LPIC108+8)
	.word	.LANCHOR3-(.LPIC113+8)
	.word	.LC24-(.LPIC112+8)
	.word	.LANCHOR3-(.LPIC111+8)
	.word	.LC23-(.LPIC110+8)
	.word	.LANCHOR3-(.LPIC107+8)
	.word	.LC23-(.LPIC106+8)
	.fnend
	.size	gbam_stop, .-gbam_stop
	.align	2
	.type	ghsic_send_cpkt_tomodem, %function
ghsic_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L831
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC114:
	add	r3, pc, r3
	ldr	r2, [r3, #1212]
	cmp	r0, r2
	bcs	.L828
	mov	r2, #104
	mla	r0, r2, r0, r3
	ldr	r4, [r0, #1216]
	cmp	r4, #0
	beq	.L829
	mov	r6, r1
	mov	r0, r5
	mov	r1, #32
	bl	__kmalloc(PLT)
	subs	r7, r0, #0
	beq	.L826
	mov	r2, r5
	mov	r1, r6
	bl	memcpy(PLT)
	ldr	r2, [r4, #84]
	ands	r5, r2, #1
	beq	.L830
	ldr	r3, [r4, #96]
	mov	r5, #0
	add	r3, r3, #1
	str	r3, [r4, #96]
.L823:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L830:
	ldr	r3, [r4, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #104]
	bl	kfree(PLT)
	b	.L823
.L826:
	mvn	r5, #11
	b	.L823
.L829:
	ldr	r1, .L831+4
	mvn	r5, #18
	ldr	r0, .L831+8
.LPIC119:
	add	r1, pc, r1
	add	r1, r1, #88
.LPIC118:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L823
.L828:
	ldr	r1, .L831+12
	mov	r2, r0
	mvn	r5, #18
	ldr	r0, .L831+16
.LPIC116:
	add	r1, pc, r1
	add	r1, r1, #88
.LPIC115:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L823
.L832:
	.align	2
.L831:
	.word	.LANCHOR1-(.LPIC114+8)
	.word	.LANCHOR3-(.LPIC119+8)
	.word	.LC21-(.LPIC118+8)
	.word	.LANCHOR3-(.LPIC116+8)
	.word	.LC25-(.LPIC115+8)
	.fnend
	.size	ghsic_send_cpkt_tomodem, .-ghsic_send_cpkt_tomodem
	.align	2
	.type	ecm_qc_setup, %function
ecm_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	movw	r2, #8515
	str	lr, [sp, #8]
	ldrb	ip, [r1]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	lr, [r0, #20]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	ldrh	r4, [r1, #4]	@ unaligned
	ldrh	r5, [r1, #2]	@ unaligned
	ldr	lr, [lr, #24]
	orr	r3, r3, ip, asl #8
	ldrh	ip, [r1, #6]	@ unaligned
	cmp	r3, r2
	ldr	r3, [lr, #4]
	bne	.L838
	cmp	ip, #0
	beq	.L841
.L838:
	mvn	r5, #94
.L834:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L841:
	ldrb	r2, [r0, #120]	@ zero_extendqisi2
	cmp	r2, r4
	bne	.L838
	strh	r5, [r0, #98]	@ movhi
	ldrb	r0, [r3, #26]	@ zero_extendqisi2
	mov	r4, r1
	str	ip, [r3, #4]
	mov	r1, r3
	mov	r2, #32
	bfi	r0, ip, #1, #1
	strb	r0, [r3, #26]
	ldr	r3, [lr]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L834
	ldr	r1, .L842
	str	r5, [sp]
	ldr	r0, .L842+4
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
.LPIC121:
	add	r1, pc, r1
	add	r1, r1, #112
.LPIC120:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L834
.L843:
	.align	2
.L842:
	.word	.LANCHOR3-(.LPIC121+8)
	.word	.LC26-(.LPIC120+8)
	.fnend
	.size	ecm_qc_setup, .-ecm_qc_setup
	.align	2
	.type	mbim_ep0out_complete, %function
mbim_ep0out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r3, #0
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r2, [r1, #44]
	ldr	ip, [r1, #32]
	str	r3, [r1, #32]
	cmp	r2, r3
	bne	.L845
	ldr	r3, [r1, #48]
	ldr	r0, [r1, #4]
	cmp	r3, r0
	bne	.L845
	cmp	r3, #4
	beq	.L857
	cmp	r3, #8
	bne	.L851
	ldr	r0, [r1]
	ldrb	r3, [r0, #2]	@ zero_extendqisi2
	ldrb	lr, [r0, #1]	@ zero_extendqisi2
	ldrb	r1, [r0]	@ zero_extendqisi2
	ldrb	r2, [r0, #3]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	orr	r3, r3, lr, asl #8
	orr	r3, r3, r1
	orr	r2, r3, r2, asl #24
	cmp	r2, #2048
	bcc	.L852
	ldr	r3, .L858
.LPIC127:
	add	r3, pc, r3
	ldr	r3, [r3, #32]
	cmp	r3, r2
	bcc	.L852
	ldrb	r1, [r0, #5]	@ zero_extendqisi2
	ldrb	r3, [r0, #4]	@ zero_extendqisi2
	orr	r3, r3, r1, asl #8
	strh	r3, [ip, #228]	@ movhi
.L850:
	str	r2, [ip, #224]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L857:
	ldr	r2, [r1]
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	ldrb	r0, [r2, #1]	@ zero_extendqisi2
	ldrb	r1, [r2]	@ zero_extendqisi2
	ldrb	r2, [r2, #3]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	orr	r3, r3, r0, asl #8
	orr	r3, r3, r1
	orr	r2, r3, r2, asl #24
	cmp	r2, #2048
	bcc	.L849
	ldr	r3, .L858+4
.LPIC124:
	add	r3, pc, r3
	ldr	r3, [r3, #32]
	cmp	r3, r2
	bcs	.L850
.L849:
	ldr	r1, .L858+8
	ldr	r0, .L858+12
.LPIC126:
	add	r1, pc, r1
.LPIC125:
	add	r0, pc, r0
	add	r1, r1, #128
	bl	printk(PLT)
.L847:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	blx	r3
	ldr	r1, .L858+16
	ldr	r0, .L858+20
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC133:
	add	r1, pc, r1
	add	r1, r1, #128
.LPIC132:
	add	r0, pc, r0
	mov	r2, r1
	b	printk(PLT)
.L845:
	ldr	r1, .L858+24
	ldr	r0, .L858+28
.LPIC123:
	add	r1, pc, r1
	add	r1, r1, #128
.LPIC122:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L847
.L852:
	ldr	r1, .L858+32
	ldr	r0, .L858+36
.LPIC129:
	add	r1, pc, r1
	add	r1, r1, #128
.LPIC128:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L847
.L851:
	ldr	r1, .L858+40
	ldr	r0, .L858+44
.LPIC131:
	add	r1, pc, r1
	add	r1, r1, #128
.LPIC130:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L847
.L859:
	.align	2
.L858:
	.word	.LANCHOR2-(.LPIC127+8)
	.word	.LANCHOR2-(.LPIC124+8)
	.word	.LANCHOR3-(.LPIC126+8)
	.word	.LC28-(.LPIC125+8)
	.word	.LANCHOR3-(.LPIC133+8)
	.word	.LC30-(.LPIC132+8)
	.word	.LANCHOR3-(.LPIC123+8)
	.word	.LC27-(.LPIC122+8)
	.word	.LANCHOR3-(.LPIC129+8)
	.word	.LC28-(.LPIC128+8)
	.word	.LANCHOR3-(.LPIC131+8)
	.word	.LC29-(.LPIC130+8)
	.fnend
	.size	mbim_ep0out_complete, .-mbim_ep0out_complete
	.align	2
	.type	bam_data_stop, %function
bam_data_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	beq	.L876
	cmp	r3, #0
	beq	.L860
	ldr	r3, [r3, #8]
	ldr	r1, [r0, #40]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #20]
	blx	r3
	cmp	r0, #0
	bne	.L877
.L860:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L876:
	cmp	r3, #0
	beq	.L860
	ldr	r3, [r3, #12]
	ldr	r1, [r0, #36]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r3, [r2, #20]
	blx	r3
	cmp	r0, #0
	beq	.L860
	ldr	r1, .L878
	mov	r3, r0
	ldr	r0, .L878+4
.LPIC136:
	add	r1, pc, r1
.LPIC135:
	add	r0, pc, r0
	add	r1, r1, #152
	b	.L875
.L877:
	ldr	r1, .L878+8
	mov	r3, r0
	ldr	r0, .L878+12
.LPIC139:
	add	r1, pc, r1
.LPIC138:
	add	r0, pc, r0
	add	r1, r1, #180
.L875:
	ldr	r4, [sp]
	mov	r2, r1
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk(PLT)
.L879:
	.align	2
.L878:
	.word	.LANCHOR3-(.LPIC136+8)
	.word	.LC31-(.LPIC135+8)
	.word	.LANCHOR3-(.LPIC139+8)
	.word	.LC31-(.LPIC138+8)
	.fnend
	.size	bam_data_stop, .-bam_data_stop
	.align	2
	.type	rndis_qc_response_complete, %function
rndis_qc_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r4, [r5, #20]
	cmp	r4, #0
	beq	.L881
	ldr	r2, [r4, #24]
	cmp	r2, #0
	beq	.L881
	cmn	r3, #104
	beq	.L884
	cmp	r3, #0
	mov	r6, r0
	mov	r4, r1
	beq	.L885
	cmn	r3, #108
	beq	.L884
	ldr	r1, .L910
	ldr	r2, [r0, #4]
	ldr	lr, [r4, #48]
	ldr	ip, [r4, #4]
	ldr	r0, .L910+4
.LPIC145:
	add	r1, pc, r1
	add	r1, r1, #208
	str	lr, [sp]
	str	ip, [sp, #4]
.LPIC144:
	add	r0, pc, r0
	bl	printk(PLT)
.L885:
	ldr	r3, [r5, #156]
	cmp	r3, r6
	beq	.L909
.L880:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L884:
	mov	r3, #0
	str	r3, [r5, #164]
	b	.L880
.L909:
	add	r6, r5, #164
#APP
@ 99 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #0
	beq	.L880
	ldr	r0, [r5, #156]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L880
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	b	.L880
.L881:
	ldr	r1, .L910+8
	ldr	r0, .L910+12
.LPIC142:
	add	r1, pc, r1
	add	r1, r1, #208
.LPIC141:
	add	r0, pc, r0
	mov	r2, r1
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk(PLT)
.L911:
	.align	2
.L910:
	.word	.LANCHOR3-(.LPIC145+8)
	.word	.LC33-(.LPIC144+8)
	.word	.LANCHOR3-(.LPIC142+8)
	.word	.LC32-(.LPIC141+8)
	.fnend
	.size	rndis_qc_response_complete, .-rndis_qc_response_complete
	.align	2
	.type	rndis_qc_response_available, %function
rndis_qc_response_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #164
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r0, #160]
	ldr	ip, [r1]
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L920
.L912:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L920:
	mov	r4, r0
	mov	r0, #0
	str	r3, [ip]
	mov	r2, #32
	str	r0, [ip, #4]
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L912
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L921
	mov	r2, r0
	ldr	r0, .L921+4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
.LPIC147:
	add	r1, pc, r1
	ldr	lr, [sp, #12]
	add	sp, sp, #16
.LPIC146:
	add	r0, pc, r0
	add	r1, r1, #236
	b	printk(PLT)
.L922:
	.align	2
.L921:
	.word	.LANCHOR3-(.LPIC147+8)
	.word	.LC34-(.LPIC146+8)
	.fnend
	.size	rndis_qc_response_available, .-rndis_qc_response_available
	.align	2
	.type	f_audio_buffer_alloc, %function
f_audio_buffer_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L933
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC153:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L924
	movw	r1, #32800
	mov	r2, #16
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L931
.L927:
	mov	r0, r5
	movw	r1, #32800
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r4]
	movne	r0, r4
	beq	.L932
.L929:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L924:
	mov	r4, #16
	b	.L927
.L932:
	ldr	r1, .L933+4
	ldr	r0, .L933+8
.LPIC152:
	add	r1, pc, r1
	add	r1, r1, #264
.LPIC151:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	mvn	r0, #11
	b	.L929
.L931:
	ldr	r1, .L933+12
	ldr	r0, .L933+16
.LPIC150:
	add	r1, pc, r1
.LPIC149:
	add	r0, pc, r0
	add	r1, r1, #264
	bl	printk(PLT)
	mvn	r0, #11
	b	.L929
.L934:
	.align	2
.L933:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC153+8))
	.word	.LANCHOR3-(.LPIC152+8)
	.word	.LC36-(.LPIC151+8)
	.word	.LANCHOR3-(.LPIC150+8)
	.word	.LC35-(.LPIC149+8)
	.fnend
	.size	f_audio_buffer_alloc, .-f_audio_buffer_alloc
	.align	2
	.type	f_audio_setup, %function
f_audio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #20]
	.pad #24
	sub	sp, sp, #24
	ldrb	r2, [r1]	@ zero_extendqisi2
	ldrh	r0, [r1, #4]	@ unaligned
	ldrh	ip, [r1, #2]	@ unaligned
	ldr	r5, [r3, #24]
	cmp	r2, #34
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r4, [r5, #4]
	beq	.L937
	bls	.L1009
	cmp	r2, #161
	beq	.L940
	cmp	r2, #162
	bne	.L936
	ldr	r3, [r7, #260]!
	and	r0, r0, #127
	mov	ip, ip, lsr #8
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	cmp	r3, r7
	beq	.L985
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r1, r0
	beq	.L975
.L974:
	ldr	r3, [r3]
	cmp	r7, r3
	beq	.L985
	ldrb	lr, [r3, #16]	@ zero_extendqisi2
	cmp	lr, r0
	bne	.L974
.L975:
	ldr	r7, [r3, #8]!
	cmp	r7, r3
	beq	.L985
.L980:
	ldrb	r1, [r7, #12]	@ zero_extendqisi2
	cmp	r1, ip
	beq	.L979
	ldr	r7, [r7]
	cmp	r3, r7
	bne	.L980
.L985:
	ldr	r1, .L1013
	mvn	r4, #94
	ldr	r0, .L1013+4
.LPIC164:
	add	r1, pc, r1
	add	r1, r1, #312
.LPIC163:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L990
.L940:
	mov	r2, r7
	mvn	r8, #94
	ldrb	lr, [r1, #1]	@ zero_extendqisi2
	ldr	r3, [r2, #252]!
	mov	r0, r0, lsr #8
	str	r8, [sp, #20]
	cmp	r3, r2
	bne	.L958
.L952:
	ldr	r3, .L1013+8
	str	r7, [r4, #32]
	add	r1, sp, #20
	ldr	r0, [r4]
	mov	r2, r6
.LPIC155:
	add	r3, pc, r3
	str	r3, [r4, #28]
	bl	memcpy(PLT)
.L982:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r6, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	orr	r3, r3, #2
	strb	r3, [r4, #26]
	ldr	r3, [r5]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L1010
.L990:
	mov	r0, r4
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L955:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L952
.L958:
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r1, r0
	bne	.L955
	ldr	r0, [r3, #8]!
	cmp	r0, r3
	beq	.L952
	mov	ip, ip, lsr #8
	b	.L957
.L956:
	ldr	r0, [r0]
	cmp	r3, r0
	beq	.L952
.L957:
	ldrb	r2, [r0, #12]	@ zero_extendqisi2
	cmp	r2, ip
	bne	.L956
	ldr	r2, [r0, #40]
	cmp	r2, #0
	beq	.L956
	and	r1, lr, #15
	blx	r2
	str	r0, [sp, #20]
	b	.L952
.L1009:
	cmp	r2, #33
	bne	.L936
	mov	r2, r7
	ldrb	lr, [r1, #1]	@ zero_extendqisi2
	mov	r0, r0, lsr #8
	ldr	r3, [r2, #252]!
	and	lr, lr, #15
	cmp	r3, r2
	bne	.L950
.L942:
	ldr	r3, .L1013+12
	strb	lr, [r7, #268]
	str	r7, [r4, #32]
.LPIC154:
	add	r3, pc, r3
	str	r3, [r4, #28]
	b	.L982
.L945:
	ldr	r3, [r3]
	cmp	r3, r2
	beq	.L942
.L950:
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r1, r0
	bne	.L945
	ldr	r0, [r3, #8]!
	cmp	r0, r3
	beq	.L942
	ldrb	r2, [r0, #12]	@ zero_extendqisi2
	mov	ip, ip, lsr #8
	cmp	r2, ip
	bne	.L948
	b	.L946
.L949:
	ldrb	r2, [r0, #12]	@ zero_extendqisi2
	cmp	r2, ip
	beq	.L946
.L948:
	ldr	r0, [r0]
	cmp	r0, r3
	bne	.L949
	b	.L942
.L937:
	mov	r2, r7
	and	r0, r0, #127
	ldrb	lr, [r1, #1]	@ zero_extendqisi2
	ldr	r3, [r2, #260]!
	mov	ip, ip, lsr #8
	cmp	r3, r2
	beq	.L985
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r1, r0
	beq	.L962
.L1011:
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L985
	ldrb	r1, [r3, #16]	@ zero_extendqisi2
	cmp	r1, r0
	bne	.L1011
.L962:
	ldr	r0, [r3, #8]!
	cmp	r0, r3
	beq	.L985
	ldrb	r2, [r0, #12]	@ zero_extendqisi2
	cmp	r2, ip
	beq	.L966
.L1012:
	ldr	r0, [r0]
	cmp	r0, r3
	beq	.L985
	ldrb	r2, [r0, #12]	@ zero_extendqisi2
	cmp	r2, ip
	bne	.L1012
.L966:
	ands	lr, lr, #15
	beq	.L968
	cmp	lr, #4
	bls	.L969
	cmp	lr, #5
	beq	.L985
.L968:
	ldr	r1, .L1013+16
	ldr	r0, .L1013+20
.LPIC158:
	add	r1, pc, r1
	add	r1, r1, #288
.LPIC157:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L985
.L936:
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	stmib	sp, {r0, r6}
	ldr	r1, .L1013+24
	str	ip, [sp]
	ldr	r0, .L1013+28
.LPIC160:
	add	r1, pc, r1
	add	r1, r1, #312
.LPIC159:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L985
.L979:
	and	r2, r2, #15
	sub	r3, r2, #1
	cmp	r3, #3
	bhi	.L985
	add	r2, r2, #4
	add	r1, sp, #24
	ldr	r0, [r4]
	ldr	r3, [r7, r2, asl #2]
	mov	r2, r6
	str	r3, [r1, #-4]!
	bl	memcpy(PLT)
	b	.L982
.L969:
	ldr	r3, .L1013+32
	str	r0, [r7, #272]
	strb	lr, [r7, #268]
	str	r7, [r4, #32]
.LPIC156:
	add	r3, pc, r3
	str	r3, [r4, #28]
	b	.L982
.L946:
	str	r0, [r7, #272]
	b	.L942
.L1010:
	ldr	r1, .L1013+36
	mov	r2, r4
	ldr	r0, .L1013+40
.LPIC162:
	add	r1, pc, r1
	add	r1, r1, #312
.LPIC161:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L990
.L1014:
	.align	2
.L1013:
	.word	.LANCHOR3-(.LPIC164+8)
	.word	.LC40-(.LPIC163+8)
	.word	f_audio_complete-(.LPIC155+8)
	.word	f_audio_complete-(.LPIC154+8)
	.word	.LANCHOR3-(.LPIC158+8)
	.word	.LC37-(.LPIC157+8)
	.word	.LANCHOR3-(.LPIC160+8)
	.word	.LC38-(.LPIC159+8)
	.word	audio_set_endpoint_complete-(.LPIC156+8)
	.word	.LANCHOR3-(.LPIC162+8)
	.word	.LC39-(.LPIC161+8)
	.fnend
	.size	f_audio_setup, .-f_audio_setup
	.align	2
	.type	conn_gadget_release, %function
conn_gadget_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r0, .L1021
	ldr	r5, .L1021+4
	str	lr, [sp, #20]
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
.LPIC165:
	add	r0, pc, r0
.LPIC166:
	add	r5, pc, r5
	bl	printk(PLT)
	ldr	r0, [r5, #2492]
	add	r0, r0, #88
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	ldr	r0, [r5, #2492]
	mov	r2, r0
	ldr	r3, [r2, #136]!
	cmp	r3, r2
	ldr	r2, [r3], #-36
	bne	.L1020
.L1016:
	add	r0, r0, #88
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L1021+8
	mov	r0, #0
.LPIC172:
	add	r3, pc, r3
	ldr	r3, [r3, #2492]
	str	r0, [r3, #216]
	add	r2, r3, #116
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	ip, r1, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1020:
	ldr	r6, .L1021+12
	mov	r4, r3
	sub	r7, r2, #36
.LPIC168:
	add	r6, pc, r6
.L1017:
	add	r0, r0, #88
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	printk(PLT)
	ldr	r3, [r5, #2492]
	mov	r1, r4
	mov	r4, r7
	ldr	r0, [r3, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r0, [r5, #2492]
	add	r0, r0, #88
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	mov	r3, r7
	ldr	r0, [r5, #2492]
	ldr	r7, [r3, #36]!
	add	r2, r0, #136
	cmp	r3, r2
	sub	r7, r7, #36
	beq	.L1016
	b	.L1017
.L1022:
	.align	2
.L1021:
	.word	.LC41-(.LPIC165+8)
	.word	.LANCHOR1-(.LPIC166+8)
	.word	.LANCHOR1-(.LPIC172+8)
	.word	.LC42-(.LPIC168+8)
	.fnend
	.size	conn_gadget_release, .-conn_gadget_release
	.align	2
	.type	ncm_setup, %function
ncm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	movw	r1, #8586
	str	lr, [sp, #16]
	mov	lr, r0
	strd	r6, [sp, #8]
	ldr	ip, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	ldrb	r0, [r4]	@ zero_extendqisi2
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldrh	r2, [r4, #2]	@ unaligned
	ldr	r6, [ip, #24]
	ldrh	r7, [r4, #4]	@ unaligned
	orr	r3, r3, r0, asl #8
	ldrh	ip, [r4, #6]	@ unaligned
	mov	r0, r2
	cmp	r3, r1
	ldr	r5, [r6, #4]
	beq	.L1025
	ble	.L1074
	movw	r2, #41349
	cmp	r3, r2
	beq	.L1032
	bgt	.L1033
	movw	r2, #41344
	cmp	r3, r2
	beq	.L1034
	movw	r2, #41347
	cmp	r3, r2
	bne	.L1069
	cmp	ip, #1
	movhi	ip, #0
	movls	ip, #1
	cmp	r0, #0
	moveq	r0, ip
	orrne	r0, ip, #1
	cmp	r0, #0
	beq	.L1075
.L1069:
	mvn	r5, #94
.L1072:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L1074:
	movw	r1, #8580
	cmp	r3, r1
	beq	.L1027
	ble	.L1076
	movw	r2, #8582
	cmp	r3, r2
	beq	.L1030
	movw	r2, #8584
	cmp	r3, r2
	bne	.L1069
	cmp	ip, #2
	cmpeq	r0, #0
	bne	.L1069
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1069
	ldr	r3, .L1077
	str	lr, [r5, #32]
	mov	r7, #2
.LPIC180:
	add	r3, pc, r3
	str	r3, [r5, #28]
	b	.L1038
.L1033:
	movw	r2, #41351
	cmp	r3, r2
	beq	.L1036
	movw	r2, #41353
	cmp	r3, r2
	bne	.L1069
	cmp	ip, #1
	movhi	ip, #0
	movls	ip, #1
	cmp	r0, #0
	moveq	r0, ip
	orrne	r0, ip, #1
	cmp	r0, #0
	bne	.L1069
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1069
	ldrb	r2, [lr, #180]	@ zero_extendqisi2
	mov	r7, #2
	ldr	r3, [r5]
	strb	r2, [r3]
	strb	r0, [r3, #1]
	b	.L1038
.L1030:
	cmp	ip, #4
	cmpeq	r0, #0
	bne	.L1069
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1069
	ldr	r3, .L1077+4
	str	lr, [r5, #32]
	mov	r7, #4
.LPIC174:
	add	r3, pc, r3
	str	r3, [r5, #28]
	b	.L1038
.L1036:
	cmp	ip, #1
	movhi	ip, #0
	movls	ip, #1
	cmp	r0, #0
	moveq	r0, ip
	orrne	r0, ip, #1
	cmp	r0, #0
	bne	.L1069
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1069
	ldrh	r2, [lr, #182]
	mov	r7, #2
	ldr	r1, .L1077+8
	ldr	r3, [r5]
	ldr	r0, .L1077+12
	mov	ip, r2, lsr #8
.LPIC179:
	add	r1, pc, r1
	strb	r2, [r3]
	add	r1, r1, #328
	strb	ip, [r3, #1]
.LPIC178:
	add	r0, pc, r0
	ldrh	r2, [lr, #182]
	bl	printk(PLT)
	b	.L1038
.L1034:
	clz	r3, ip
	mov	r3, r3, lsr #5
	cmp	r0, #0
	moveq	r0, r3
	orrne	r0, r3, #1
	cmp	r0, #0
	bne	.L1069
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1069
	ldr	r1, .L1077+16
	cmp	ip, #28
	movcc	r7, ip
	movcs	r7, #28
	ldr	r0, [r5]
	mov	r2, r7
.LPIC173:
	add	r1, pc, r1
	bl	memcpy(PLT)
	b	.L1038
.L1076:
	movw	r1, #8515
	cmp	r3, r1
	bne	.L1069
	cmp	ip, #0
	bne	.L1069
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	moveq	r7, ip
	streqh	r2, [lr, #98]	@ movhi
	bne	.L1069
	b	.L1038
.L1027:
	cmp	ip, #0
	bne	.L1069
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1069
	cmp	r2, #0
	beq	.L1040
	cmp	r2, #1
	bne	.L1069
	ldr	r3, .L1077+20
	mov	r7, ip
.LPIC177:
	add	r3, pc, r3
	add	r3, r3, #100
	str	r3, [lr, #176]
	b	.L1038
.L1032:
	cmp	ip, #3
	movhi	ip, #0
	movls	ip, #1
	cmp	r0, #0
	moveq	r0, ip
	orrne	r0, ip, #1
	cmp	r0, #0
	bne	.L1069
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1069
	ldr	r2, [lr, #112]
	mov	r7, #4
	ldr	r3, [r5]
	mov	r1, r2, lsr #16
	ubfx	r0, r2, #8, #8
	strb	r2, [r3]
	mov	r2, r1, lsr #8
	strb	r0, [r3, #1]
	strb	r1, [r3, #2]
	strb	r2, [r3, #3]
	b	.L1038
.L1025:
	cmp	ip, #0
	bne	.L1069
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1069
	cmp	r2, #0
	beq	.L1042
	cmp	r2, #1
	bne	.L1069
	mov	r3, #16777216
	strb	r2, [lr, #180]
.L1044:
	ldr	r1, [lr, #176]
	mov	r7, #0
	ldr	r2, [r1, #4]
	bic	r2, r2, #16777216
	str	r2, [r1, #4]
	ldr	r2, [lr, #176]
	ldr	r1, [r2, #4]
	orr	r3, r1, r3
	str	r3, [r2, #4]
.L1038:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r7, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L1072
	ldr	r0, [r6]
	str	r5, [sp]
	ldr	r1, .L1077+24
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	add	r0, r0, #32
.LPIC181:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L1072
.L1075:
	ldrb	r3, [lr, #148]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L1069
	ldr	r3, .L1077+28
	mov	r7, #2
	ldr	r2, [lr, #176]
	ldr	r1, [r5]
.LPIC175:
	add	r3, pc, r3
	add	r3, r3, #56
	subs	r3, r2, r3
	strb	r0, [r1, #1]
	movne	r3, #1
	strb	r3, [r1]
	b	.L1038
.L1042:
	strb	r2, [lr, #180]
	mov	r3, r2
	b	.L1044
.L1040:
	ldr	r3, .L1077+32
	mov	r7, r2
.LPIC176:
	add	r3, pc, r3
	add	r3, r3, #56
	str	r3, [lr, #176]
	b	.L1038
.L1078:
	.align	2
.L1077:
	.word	ncm_setdgram_complete-(.LPIC180+8)
	.word	ncm_ep0out_complete-(.LPIC174+8)
	.word	.LANCHOR3-(.LPIC179+8)
	.word	.LC43-(.LPIC178+8)
	.word	.LANCHOR2-(.LPIC173+8)
	.word	.LANCHOR2-(.LPIC177+8)
	.word	.LC44-(.LPIC181+8)
	.word	.LANCHOR2-(.LPIC175+8)
	.word	.LANCHOR2-(.LPIC176+8)
	.fnend
	.size	ncm_setup, .-ncm_setup
	.align	2
	.type	ncm_setdgram_complete, %function
ncm_setdgram_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L1092
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r3, r1
	str	r6, [sp, #8]
	mov	r4, r0
	mov	r5, #0
	str	lr, [sp, #12]
	ldr	lr, [r1, #44]
	ldr	r0, [r1, #32]
.LPIC182:
	add	ip, pc, ip
	ldr	r1, [ip, #4]
	ldr	r2, [ip, #16]
	str	r5, [r3, #32]
	cmp	r1, r2
	movcs	r1, r2
	cmp	lr, r5
	bne	.L1080
	ldr	lr, [r3, #48]
	ldr	r2, [r3, #4]
	cmp	lr, r2
	bne	.L1080
	ldr	r3, [r3]
	movw	lr, #7500
	ldrb	r5, [r3, #1]	@ zero_extendqisi2
	ldrb	r2, [r3]	@ zero_extendqisi2
	orr	r2, r2, r5, asl #8
	sub	r3, r2, #1504
	sub	r3, r3, #10
	cmp	r3, lr
	bhi	.L1090
	ldrh	r3, [ip, #24]
	rsb	ip, r3, #0
	add	r3, r3, #11
	and	r3, r3, ip
	add	r3, r3, #12
	add	r3, r3, r2
	cmp	r1, r3
	bcc	.L1091
	ldr	r3, [r0, #184]
	strh	r2, [r0, #182]	@ movhi
	ldr	r0, .L1092+4
	cmp	r3, #0
	subne	r1, r2, #14
.LPIC192:
	add	r0, pc, r0
	strne	r1, [r3, #356]
	ldr	r1, .L1092+8
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
.LPIC193:
	add	r1, pc, r1
	add	r1, r1, #340
	b	printk(PLT)
.L1080:
	ldr	r1, .L1092+12
	ldr	r0, .L1092+16
.LPIC185:
	add	r1, pc, r1
.LPIC184:
	add	r0, pc, r0
	add	r1, r1, #340
	bl	printk(PLT)
.L1082:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #24]
	bx	r3
.L1090:
	ldr	r1, .L1092+20
	ldr	r0, .L1092+24
.LPIC187:
	add	r1, pc, r1
	add	r1, r1, #340
.LPIC186:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1082
.L1091:
	ldr	r1, .L1092+28
	ldr	r0, .L1092+32
.LPIC190:
	add	r1, pc, r1
	add	r1, r1, #340
.LPIC189:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L1092+36
.LPIC191:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1082
.L1093:
	.align	2
.L1092:
	.word	.LANCHOR2-(.LPIC182+8)
	.word	.LC49-(.LPIC192+8)
	.word	.LANCHOR3-(.LPIC193+8)
	.word	.LANCHOR3-(.LPIC185+8)
	.word	.LC45-(.LPIC184+8)
	.word	.LANCHOR3-(.LPIC187+8)
	.word	.LC46-(.LPIC186+8)
	.word	.LANCHOR3-(.LPIC190+8)
	.word	.LC47-(.LPIC189+8)
	.word	.LC48-(.LPIC191+8)
	.fnend
	.size	ncm_setdgram_complete, .-ncm_setdgram_complete
	.align	2
	.type	android_bind_config, %function
android_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L1120
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r0, #24]
.LPIC194:
	add	r1, pc, r1
	ldr	r3, [r1, #16]!
	cmp	r3, r1
	sub	r2, r3, #520
	bne	.L1098
	b	.L1095
.L1117:
	ldr	r3, [r2, #520]
	cmp	r3, r1
	sub	r2, r3, #520
	beq	.L1095
.L1098:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L1117
.L1095:
	mov	r5, r6
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L1107
.L1106:
	ldr	r0, [r4]
	mov	r1, r6
	ldr	r3, [r0, #40]
	blx	r3
	subs	r7, r0, #0
	bne	.L1118
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L1106
.L1107:
	mov	r0, #0
.L1115:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1118:
	ldr	r1, .L1120+4
	add	r5, r6, #36
	ldr	r3, [r4]
	ldr	r0, .L1120+8
.LPIC198:
	add	r1, pc, r1
	add	r1, r1, #364
	ldr	r3, [r3]
	mov	r2, r1
.LPIC197:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1103
.L1104:
	bl	list_del(PLT)
	ldr	r3, [r4, #-36]
	cmp	r3, #0
	bne	.L1119
.L1103:
	ldr	r4, [r6, #36]
	cmp	r4, r5
	mov	r0, r4
	sub	r8, r4, #72
	bne	.L1104
	ldr	r3, [r6, #12]
	cmp	r3, #0
	beq	.L1105
	mov	r0, r6
	blx	r3
.L1105:
	mov	r0, r7
	b	.L1115
.L1119:
	mov	r1, r8
	mov	r0, r6
	blx	r3
	b	.L1103
.L1121:
	.align	2
.L1120:
	.word	.LANCHOR1-(.LPIC194+8)
	.word	.LANCHOR3-(.LPIC198+8)
	.word	.LC50-(.LPIC197+8)
	.fnend
	.size	android_bind_config, .-android_bind_config
	.align	2
	.type	android_enable_function, %function
android_enable_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L1137
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r10, [sp, #24]
	mov	r10, r1
	mov	fp, r0
	strd	r8, [sp, #16]
.LPIC201:
	add	r5, pc, r5
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	add	r2, r5, #396
	ldr	r1, [r0, #8]
	ldr	r3, [r0, #4]
	str	r2, [sp, #12]
	ldr	r2, .L1137+4
	ldr	r6, [r0, #44]
	sub	r5, r3, #4
.LPIC200:
	add	r2, pc, r2
	str	r2, [sp, #8]
	ldr	r2, [r1]
	str	r2, [sp, #4]
.L1123:
	ldr	r4, [r5, #4]!
	mov	r0, r7
	cmp	r4, #0
	beq	.L1134
	ldr	r9, [r4]
	mov	r1, r9
	bl	strcmp(PLT)
	subs	r8, r0, #0
	bne	.L1123
	ldr	r1, [r4, #20]
	cmp	fp, r1
	cmpne	r1, #0
	bne	.L1135
	ldr	r3, .L1137+8
.LPIC205:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L1131
	movw	r1, #32976
	mov	r2, #12
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	beq	.L1136
.L1126:
	str	fp, [r4, #20]
	add	r2, r10, #112
	str	r4, [r0], #4
	ldr	r1, [r10, #116]
	bl	__list_add(PLT)
	ldr	r5, [r6, #44]
	ldr	r7, [r4]
	cmp	r5, #0
	ble	.L1127
	mov	r3, r5, asl #3
	add	r4, r6, #12
	add	r5, r3, r5, asl #1
	add	r5, r5, #12
	add	r5, r6, r5
	b	.L1129
.L1128:
	cmp	r4, r5
	beq	.L1127
.L1129:
	mov	r1, r4
	mov	r0, r7
	bl	strcmp(PLT)
	cmp	r0, #0
	add	r4, r4, #10
	bne	.L1128
	ldr	r2, [sp, #4]
	mov	r3, #1
	mov	r8, r0
	strb	r3, [r2, #378]
.L1127:
	mov	r0, r8
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1131:
	mov	r0, #16
	b	.L1126
.L1134:
	mvn	r8, #21
	b	.L1127
.L1135:
	mov	r2, r9
	ldrd	r0, [sp, #8]
	bl	printk(PLT)
	b	.L1123
.L1136:
	ldr	r1, .L1137+12
	mvn	r8, #11
	ldr	r0, .L1137+16
.LPIC204:
	add	r1, pc, r1
	add	r1, r1, #396
.LPIC203:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1127
.L1138:
	.align	2
.L1137:
	.word	.LANCHOR3-(.LPIC201+8)
	.word	.LC51-(.LPIC200+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC205+8))
	.word	.LANCHOR3-(.LPIC204+8)
	.word	.LC52-(.LPIC203+8)
	.fnend
	.size	android_enable_function, .-android_enable_function
	.align	2
	.type	acc_complete_set_string, %function
acc_complete_set_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r3, [r0]
	ldr	r5, [r1, #48]
	cmp	r2, #0
	bne	.L1155
	ldr	r2, [r3, #1640]
	cmp	r2, #5
	addls	pc, pc, r2, asl #2
	b	.L1141
.L1143:
	b	.L1142
	b	.L1144
	b	.L1145
	b	.L1146
	b	.L1147
	b	.L1148
	.p2align 1
.L1148:
	add	r7, r3, #1376
	add	r7, r7, #5
.L1149:
	cmp	r7, #0
	beq	.L1141
	add	r4, r3, #88
	mov	r6, r1
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r5, #255
	mov	r8, r0
	ldr	r1, [r6]
	movge	r5, #255
	mov	r0, r7
	mov	r2, r5
	bl	memcpy(PLT)
	mov	r3, #0
	mov	r0, r4
	mov	r1, r8
	strb	r3, [r7, r5]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L1142:
	add	r7, r3, #101
	b	.L1149
.L1144:
	add	r7, r3, #356
	add	r7, r7, #1
	b	.L1149
.L1145:
	add	r7, r3, #612
	add	r7, r7, #1
	b	.L1149
.L1146:
	add	r7, r3, #868
	add	r7, r7, #1
	b	.L1149
.L1147:
	add	r7, r3, #1120
	add	r7, r7, #5
	b	.L1149
.L1155:
	ldr	r0, .L1156
	mov	r1, r2
.LPIC206:
	add	r0, pc, r0
.L1154:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk(PLT)
.L1141:
	ldr	r0, .L1156+4
	mov	r1, r2
.LPIC207:
	add	r0, pc, r0
	b	.L1154
.L1157:
	.align	2
.L1156:
	.word	.LC53-(.LPIC206+8)
	.word	.LC54-(.LPIC207+8)
	.fnend
	.size	acc_complete_set_string, .-acc_complete_set_string
	.align	2
	.type	acc_release, %function
acc_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1162
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC208:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, .L1162+4
.LPIC209:
	add	r3, pc, r3
	ldr	r3, [r3, #2496]
	add	r3, r3, #1648
	add	r3, r3, #4
#APP
@ 37 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	mov	r2, #0
#APP
@ 52 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	r1, [r3]
	strex	r0, r2, [r3]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 98 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r1, r2
	beq	.L1161
.L1159:
	ldr	r3, .L1162+8
	mov	r0, #0
.LPIC211:
	add	r3, pc, r3
	ldr	r3, [r3, #2496]
	ldrb	r2, [r3, #100]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #100]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1161:
	ldr	r0, .L1162+12
	movw	r1, #799
.LPIC210:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L1159
.L1163:
	.align	2
.L1162:
	.word	.LC55-(.LPIC208+8)
	.word	.LANCHOR1-(.LPIC209+8)
	.word	.LANCHOR1-(.LPIC211+8)
	.word	.LC56-(.LPIC210+8)
	.fnend
	.size	acc_release, .-acc_release
	.align	2
	.type	acc_open, %function
acc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1168
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
.LPIC212:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	ip, .L1168+4
.LPIC213:
	add	ip, pc, ip
	ldr	r3, [ip, #2496]
	add	r3, r3, #1648
	add	r3, r3, #4
#APP
@ 37 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	mov	r0, #1
#APP
@ 52 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	@	__xchg4
1:	ldrex	r2, [r3]
	strex	r1, r0, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 98 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	bne	.L1166
	ldr	r3, [ip, #2496]
	mov	r0, r2
	ldrb	ip, [r3, #100]	@ zero_extendqisi2
	bfi	ip, r2, #1, #1
	strb	ip, [r3, #100]
	str	r3, [r4, #124]
.L1165:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1166:
	mvn	r0, #15
	b	.L1165
.L1169:
	.align	2
.L1168:
	.word	.LC57-(.LPIC212+8)
	.word	.LANCHOR1-(.LPIC213+8)
	.fnend
	.size	acc_open, .-acc_open
	.align	2
	.type	sua_version_info_store, %function
sua_version_info_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	ldr	r6, [r0, #4]
	cmp	r4, #100
	mov	r1, r5
	movls	r2, r4
	movhi	r2, #100
	ldr	r0, [r6, #96]
	add	r0, r0, #235
	bl	memcpy(PLT)
	ldr	ip, [r6, #96]
	mov	r2, r5
	mov	r3, #4
	ldr	r1, .L1174
	ldr	r0, .L1174+4
	add	ip, ip, #235
.LPIC216:
	add	r1, pc, r1
	add	r1, r1, #420
	str	ip, [sp]
.LPIC215:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1175:
	.align	2
.L1174:
	.word	.LANCHOR3-(.LPIC216+8)
	.word	.LC58-(.LPIC215+8)
	.fnend
	.size	sua_version_info_store, .-sua_version_info_store
	.align	2
	.type	rndis_qc_release_dev, %function
rndis_qc_release_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L1181
	ldr	r4, .L1181+4
	str	r6, [sp, #8]
	ldr	r0, .L1181+8
	str	lr, [sp, #12]
.LPIC218:
	add	r5, pc, r5
.LPIC219:
	add	r4, pc, r4
	add	r5, r5, #444
	add	r4, r4, #2496
	mov	r1, r5
.LPIC217:
	add	r0, pc, r0
	add	r4, r4, #4
	bl	printk(PLT)
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L1181+12
	mov	r6, r0
.LPIC225:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L1180
	add	r2, r3, #152
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	mov	r0, r4
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
.L1178:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1180:
	ldr	r0, .L1181+16
	mov	r1, r5
.LPIC221:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #18
	b	.L1178
.L1182:
	.align	2
.L1181:
	.word	.LANCHOR3-(.LPIC218+8)
	.word	.LANCHOR1-(.LPIC219+8)
	.word	.LC59-(.LPIC217+8)
	.word	_rndis_qc(GOT_PREL)+(.-(.LPIC225+8))
	.word	.LC60-(.LPIC221+8)
	.fnend
	.size	rndis_qc_release_dev, .-rndis_qc_release_dev
	.align	2
	.type	rndis_qc_open_dev, %function
rndis_qc_open_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L1191
	ldr	r5, .L1191+4
	strd	r6, [sp, #8]
	mov	r6, r1
	ldr	r0, .L1191+8
	str	lr, [sp, #20]
	str	r8, [sp, #16]
.LPIC227:
	add	r4, pc, r4
.LPIC228:
	add	r5, pc, r5
	add	r4, r4, #468
	add	r5, r5, #2496
	mov	r1, r4
.LPIC226:
	add	r0, pc, r0
	add	r5, r5, #4
	bl	printk(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r1, .L1191+12
	mov	r7, r0
.LPIC238:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	ldr	r3, [r1]
	cmp	r3, #0
	beq	.L1190
	add	r2, r3, #152
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r0, [r2]
	add	r0, r0, #1
	strex	ip, r0, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r0, #1
	beq	.L1186
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldr	r0, .L1191+16
	mov	r1, r4
	mvn	r5, #15
.LPIC232:
	add	r0, pc, r0
	bl	printk(PLT)
.L1185:
	ldr	r0, .L1191+20
	mov	r1, r7
.LPIC237:
	add	r0, pc, r0
	add	r0, r0, #2496
	add	r0, r0, #4
	bl	_raw_spin_unlock_irqrestore(PLT)
.L1188:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1186:
	ldr	r3, [r1]
	mov	r0, r5
	mov	r1, r7
	mov	r5, #0
	str	r3, [r6, #124]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L1191+24
	mov	r1, r4
.LPIC235:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1188
.L1190:
	ldr	r0, .L1191+28
	mov	r1, r4
	mvn	r5, #18
.LPIC230:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1185
.L1192:
	.align	2
.L1191:
	.word	.LANCHOR3-(.LPIC227+8)
	.word	.LANCHOR1-(.LPIC228+8)
	.word	.LC61-(.LPIC226+8)
	.word	_rndis_qc(GOT_PREL)+(.-(.LPIC238+8))
	.word	.LC63-(.LPIC232+8)
	.word	.LANCHOR1-(.LPIC237+8)
	.word	.LC64-(.LPIC235+8)
	.word	.LC62-(.LPIC230+8)
	.fnend
	.size	rndis_qc_open_dev, .-rndis_qc_open_dev
	.align	2
	.type	mtp_release, %function
mtp_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1195
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC239:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, .L1195+4
.LPIC240:
	add	r3, pc, r3
	ldr	r3, [r3, #2504]
	add	r2, r3, #108
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L1196:
	.align	2
.L1195:
	.word	.LC65-(.LPIC239+8)
	.word	.LANCHOR1-(.LPIC240+8)
	.fnend
	.size	mtp_release, .-mtp_release
	.align	2
	.type	ccid_notify_complete, %function
ccid_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r1, [r1, #44]
	cmn	r1, #104
	beq	.L1197
	cmp	r1, #0
	beq	.L1197
	cmn	r1, #108
	beq	.L1197
	ldr	r0, .L1209
.LPIC241:
	add	r0, pc, r0
	b	printk(PLT)
.L1197:
	bx	lr
.L1210:
	.align	2
.L1209:
	.word	.LC66-(.LPIC241+8)
	.fnend
	.size	ccid_notify_complete, .-ccid_notify_complete
	.align	2
	.type	frmnet_setup, %function
frmnet_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	str	lr, [sp, #32]
	mov	lr, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	ldr	ip, [r0, #120]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r0, #128]
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r8, [r1, #2]	@ unaligned
	cmp	ip, #0
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r5, [r7, #4]
	beq	.L1220
	ldrb	r2, [r1]	@ zero_extendqisi2
	movw	r3, #8482
	mov	r4, r0
	ldrb	ip, [r1, #1]	@ zero_extendqisi2
	orr	ip, ip, r2, asl #8
	cmp	ip, r3
	beq	.L1213
	movw	r3, #41217
	cmp	ip, r3
	beq	.L1214
	cmp	ip, #8448
	beq	.L1226
.L1222:
	mvn	r0, #94
.L1224:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1214:
	cmp	r8, #0
	bne	.L1222
	add	r10, r0, #132
	str	r1, [sp, #12]
	mov	r0, r10
	bl	_raw_spin_lock(PLT)
	ldr	fp, [r4, #144]!
	ldr	r1, [sp, #12]
	cmp	fp, r4
	beq	.L1227
	mov	r0, fp
	sub	r4, fp, #8
	bl	list_del(PLT)
	mov	r0, r10
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [fp, #-4]
	ldr	r1, [fp, #-8]
	ldr	r0, [r5]
	cmp	r6, r3
	movcc	r8, r6
	movcs	r8, r3
	mov	r2, r8
	bl	memcpy(PLT)
	ldr	r0, [fp, #-8]
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	cmp	r6, r8
	mov	r6, r8
	movle	r4, #0
	movgt	r4, #1
	b	.L1216
.L1226:
	ldr	r3, .L1228
	mov	r4, #0
	str	r0, [r5, #32]
.LPIC242:
	add	r3, pc, r3
	str	r3, [r5, #28]
.L1216:
	ldrb	ip, [r5, #26]	@ zero_extendqisi2
	str	r6, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	ip, r4, #1, #1
	strb	ip, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L1219
	mov	r0, r4
	b	.L1224
.L1213:
	ldr	r3, [r0, #100]
	cmp	r3, #0
	beq	.L1218
	ldrb	lr, [r0, #116]	@ zero_extendqisi2
	mov	r2, r8
	ldr	ip, .L1228+4
	mov	r1, lr, asl #5
.LPIC244:
	add	ip, pc, ip
	sub	r1, r1, lr, asl #3
	add	ip, ip, r1
	ldrb	r1, [ip, #2520]	@ zero_extendqisi2
	blx	r3
	adds	r4, r6, #0
	mov	r6, #0
	movne	r4, #1
	b	.L1216
.L1218:
	adds	r4, r6, #0
	mov	r6, r3
	movne	r4, #1
	b	.L1216
.L1219:
	ldr	r0, [r7]
	mov	r2, r4
	ldr	r1, .L1228+8
	add	r0, r0, #32
.LPIC245:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r4
	b	.L1224
.L1220:
	mvn	r0, #106
	b	.L1224
.L1227:
	ldrb	ip, [r1]	@ zero_extendqisi2
	mov	r3, r8
	str	r9, [sp]
	ldr	r0, .L1228+12
	ldrb	r2, [r1, #1]	@ zero_extendqisi2
	str	r6, [sp, #4]
	mov	r1, ip
.LPIC243:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r10
	bl	_raw_spin_unlock(PLT)
	mvn	r0, #94
	b	.L1224
.L1229:
	.align	2
.L1228:
	.word	frmnet_cmd_complete-(.LPIC242+8)
	.word	.LANCHOR1-(.LPIC244+8)
	.word	.LC68-(.LPIC245+8)
	.word	.LC67-(.LPIC243+8)
	.fnend
	.size	frmnet_setup, .-frmnet_setup
	.align	2
	.type	frmnet_notify_complete, %function
frmnet_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r1, #44]
	ldr	r4, [r5, #32]
	cmn	r1, #104
	beq	.L1232
	cmp	r1, #0
	beq	.L1233
	cmn	r1, #108
	beq	.L1232
	ldr	r0, .L1257
.LPIC246:
	add	r0, pc, r0
	bl	printk(PLT)
.L1233:
	ldr	r3, [r4, #124]
	cmp	r3, #0
	bne	.L1256
.L1230:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1256:
	add	r6, r4, #132
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #152]
	mov	r1, r0
	cmp	r3, #0
	beq	.L1236
	sub	r3, r3, #1
	mov	r0, r6
	cmp	r3, #0
	str	r3, [r4, #152]
	beq	.L1255
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #136]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L1230
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, r4
	mov	r7, r0
	ldr	r5, [r3, #144]!
	cmp	r5, r3
	beq	.L1239
	ldr	r2, [r4, #152]
	cmp	r2, #0
	beq	.L1240
	sub	r2, r2, #1
	mov	r0, r5
	sub	r8, r5, #8
	str	r2, [r4, #152]
	bl	list_del(PLT)
	ldr	r0, [r5, #-8]
	bl	kfree(PLT)
	mov	r0, r8
	bl	kfree(PLT)
.L1239:
	mov	r0, r6
	mov	r1, r7
	b	.L1255
.L1232:
	add	r5, r4, #132
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #152]
.L1255:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L1236:
	mov	r0, r6
	b	.L1255
.L1240:
	ldr	r1, .L1257+4
	ldr	r0, .L1257+8
.LPIC248:
	add	r1, pc, r1
	add	r1, r1, #488
.LPIC247:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1239
.L1258:
	.align	2
.L1257:
	.word	.LC69-(.LPIC246+8)
	.word	.LANCHOR3-(.LPIC248+8)
	.word	.LC70-(.LPIC247+8)
	.fnend
	.size	frmnet_notify_complete, .-frmnet_notify_complete
	.align	2
	.type	mbim_function_ctrlrequest, %function
mbim_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r1, #12]
	ldrh	ip, [r2, #4]	@ unaligned
	ldrh	lr, [r2, #2]	@ unaligned
	ldrh	r5, [r2, #6]	@ unaligned
	cmp	r0, #0
	bne	.L1274
	ldr	r3, .L1279
.LPIC249:
	add	r3, pc, r3
	ldrb	r3, [r3, #170]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L1274
	ldrb	r3, [r2]	@ zero_extendqisi2
	mov	r4, r1
	cmp	r3, #128
	beq	.L1277
	cmp	r3, #192
	beq	.L1278
.L1274:
	mvn	r5, #94
.L1275:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1278:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #165
	cmpeq	ip, #4
	bne	.L1274
	cmp	r5, #39
	movls	r7, r0
	movls	r6, r5
	bls	.L1266
	mov	r6, #40
	cmp	r5, r6
	mov	r5, r6
	movle	r7, #0
	movgt	r7, #1
.L1266:
	ldr	r1, .L1279+4
	mov	r2, r6
	ldr	r3, [r4, #4]
.LPIC251:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r1, r1, #144
	bl	memcpy(PLT)
.L1264:
	ldr	r3, [r4, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfi	r1, r7, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r4, #4]
	str	r6, [r3, #4]
	ldr	r3, [r4]
	ldr	r1, [r4, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bge	.L1275
	ldr	r1, .L1279+8
	mov	r2, r0
	ldr	r0, .L1279+12
.LPIC253:
	add	r1, pc, r1
	add	r1, r1, #512
.LPIC252:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1275
.L1277:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #6
	bne	.L1274
	mov	r3, lr, lsr #8
	cmp	r3, #3
	bne	.L1274
	uxtb	lr, lr
	cmp	lr, #238
	bne	.L1274
	cmp	r5, #17
	movls	r7, r0
	movls	r6, r5
	bls	.L1263
	mov	r6, #18
	cmp	r5, r6
	mov	r5, r6
	movle	r7, #0
	movgt	r7, #1
.L1263:
	ldr	r1, .L1279+16
	mov	r2, r6
	ldr	r3, [r4, #4]
.LPIC250:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r1, r1, #184
	bl	memcpy(PLT)
	b	.L1264
.L1280:
	.align	2
.L1279:
	.word	.LANCHOR2-(.LPIC249+8)
	.word	.LANCHOR2-(.LPIC251+8)
	.word	.LANCHOR3-(.LPIC253+8)
	.word	.LC71-(.LPIC252+8)
	.word	.LANCHOR2-(.LPIC250+8)
	.fnend
	.size	mbim_function_ctrlrequest, .-mbim_function_ctrlrequest
	.align	2
	.type	mbim_release, %function
mbim_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L1283
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L1283+4
	str	lr, [sp, #4]
.LPIC255:
	add	r1, pc, r1
	add	r1, r1, #532
.LPIC254:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, .L1283+8
.LPIC256:
	add	r3, pc, r3
	ldr	r3, [r3, #2580]
	add	r2, r3, #92
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L1284:
	.align	2
.L1283:
	.word	.LANCHOR3-(.LPIC255+8)
	.word	.LC72-(.LPIC254+8)
	.word	.LANCHOR1-(.LPIC256+8)
	.fnend
	.size	mbim_release, .-mbim_release
	.align	2
	.type	gsdio_open_work, %function
gsdio_open_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	ldr	ip, [r0, #-4]
	sub	r2, r0, #124
	ldr	r1, .L1287
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r0, #-124]
	ldr	r0, .L1287+4
	ldr	ip, [ip]
.LPIC258:
	add	r1, pc, r1
	add	r1, r1, #548
.LPIC257:
	add	r0, pc, r0
	str	ip, [sp]
	bl	printk(PLT)
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L1288:
	.align	2
.L1287:
	.word	.LANCHOR3-(.LPIC258+8)
	.word	.LC73-(.LPIC257+8)
	.fnend
	.size	gsdio_open_work, .-gsdio_open_work
	.align	2
	.type	rmnet_sdio_response_complete, %function
rmnet_sdio_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	ldr	r2, [r1, #32]
	cmn	r3, #104
	ldr	r2, [r2, #84]
	bxeq	lr
	cmp	r3, #0
	bxeq	lr
	cmn	r3, #108
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r2]
	.pad #8
	sub	sp, sp, #8
	ldr	lr, [r1, #48]
	ldr	ip, [r1, #4]
	ldr	r1, .L1303
	ldr	r2, [r0, #4]
	add	r0, r4, #32
	str	lr, [sp]
	str	ip, [sp, #4]
.LPIC259:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1304:
	.align	2
.L1303:
	.word	.LC74-(.LPIC259+8)
	.fnend
	.size	rmnet_sdio_response_complete, .-rmnet_sdio_response_complete
	.align	2
	.type	rmnet_mux_response_complete, %function
rmnet_mux_response_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	ldr	r2, [r1, #32]
	cmn	r3, #104
	ldr	r2, [r2, #84]
	bxeq	lr
	cmp	r3, #0
	bxeq	lr
	cmn	r3, #108
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r4, [r2]
	.pad #8
	sub	sp, sp, #8
	ldr	lr, [r1, #48]
	ldr	ip, [r1, #4]
	ldr	r1, .L1319
	ldr	r2, [r0, #4]
	add	r0, r4, #32
	str	lr, [sp]
	str	ip, [sp, #4]
.LPIC260:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1320:
	.align	2
.L1319:
	.word	.LC75-(.LPIC260+8)
	.fnend
	.size	rmnet_mux_response_complete, .-rmnet_mux_response_complete
	.align	2
	.type	composite_show_suspended, %function
composite_show_suspended:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldrb	r2, [r0, #16]	@ zero_extendqisi2
	mov	r0, r4
	ldr	r1, .L1323
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	and	r2, r2, #1
.LPIC261:
	add	r1, pc, r1
	b	sprintf(PLT)
.L1324:
	.align	2
.L1323:
	.word	.LC76-(.LPIC261+8)
	.fnend
	.size	composite_show_suspended, .-composite_show_suspended
	.align	2
	.type	usb30en_show, %function
usb30en_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1326
	mov	r0, r2
	ldr	r1, .L1326+4
.LPIC264:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
.LPIC262:
	add	r1, pc, r1
	ldrb	r2, [r3]	@ zero_extendqisi2
	b	sprintf(PLT)
.L1327:
	.align	2
.L1326:
	.word	usb30en(GOT_PREL)+(.-(.LPIC264+8))
	.word	.LC77-(.LPIC262+8)
	.fnend
	.size	usb30en_show, .-usb30en_show
	.align	2
	.type	fsg_show_ro, %function
fsg_show_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r1, [r0, #-48]
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	mov	r0, r2
	cmp	r1, #0
	ldr	r1, .L1331
	ubfxne	r3, r3, #1, #1
	andeq	r3, r3, #1
	mov	r2, r3
.LPIC265:
	add	r1, pc, r1
	b	sprintf(PLT)
.L1332:
	.align	2
.L1331:
	.word	.LC76-(.LPIC265+8)
	.fnend
	.size	fsg_show_ro, .-fsg_show_ro
	.align	2
	.type	fsg_show_nofua, %function
fsg_show_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	mov	r0, r2
	ldr	r1, .L1334
	mov	r2, r3, lsr #7
.LPIC266:
	add	r1, pc, r1
	b	sprintf(PLT)
.L1335:
	.align	2
.L1334:
	.word	.LC78-(.LPIC266+8)
	.fnend
	.size	fsg_show_nofua, .-fsg_show_nofua
	.align	2
	.type	fsg_show_cdrom, %function
fsg_show_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #-24]	@ zero_extendqisi2
	mov	r0, r2
	ldr	r1, .L1337
	ubfx	r2, r3, #3, #1
.LPIC267:
	add	r1, pc, r1
	b	sprintf(PLT)
.L1338:
	.align	2
.L1337:
	.word	.LC76-(.LPIC267+8)
	.fnend
	.size	fsg_show_cdrom, .-fsg_show_cdrom
	.align	2
	.type	check_command, %function
check_command:
	.fnstart
	@ args = 8, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r5, r3
	strd	r6, [sp, #8]
	ldr	r6, .L1390
	mov	r0, #0
	str	r8, [sp, #16]
	mov	r7, r1
	mov	r8, r2
	str	lr, [sp, #20]
	ldr	ip, [r4, #120]
	.pad #24
	sub	sp, sp, #24
.LPIC271:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	strb	r0, [sp]
	cmp	ip, r0
	ldr	r3, [r6]
	str	r3, [sp, #20]
	bne	.L1384
.L1340:
	ldr	r2, [r4, #128]
	ldr	r3, [r4, #124]
	cmp	r2, #0
	beq	.L1341
	cmp	r2, r3
	bls	.L1342
	ldrb	r2, [r4, #144]	@ zero_extendqisi2
	cmp	r8, ip
	str	r3, [r4, #128]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	orr	r2, r2, #4
	strb	r2, [r4, #144]
	beq	.L1343
	cmp	r3, #0
	bne	.L1346
.L1343:
	ldr	r0, [r4, #72]
	cmp	r0, r7
	beq	.L1358
.L1388:
	blt	.L1346
	ldr	ip, [r4, #104]
	cmp	ip, #0
	beq	.L1347
.L1389:
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	r3, #3
	beq	.L1348
	ldrb	r2, [ip, #24]	@ zero_extendqisi2
	mov	r3, #0
	ldr	r1, [ip, #36]
	str	r3, [ip, #28]
	str	r3, [ip, #32]
	bfi	r2, r3, #6, #1
	cmp	r1, r3
	strb	r2, [ip, #24]
	bne	.L1349
.L1348:
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	cmp	r0, #1
	and	r3, r3, #31
	strb	r3, [r4, #77]
	ble	.L1354
.L1356:
	mov	r3, #1
	add	r2, r4, #76
	mov	lr, r3
.L1353:
	ldrb	r1, [r2, #1]!	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L1351
	ands	r1, r5, lr, asl r3
	beq	.L1385
.L1351:
	add	r3, r3, #1
	cmp	r0, r3
	bgt	.L1353
	cmp	ip, #0
	beq	.L1355
.L1354:
	ldr	r3, [sp, #48]
	ldr	r2, [ip]
	adds	r3, r3, #0
	movne	r3, #1
	cmp	r2, #0
	movne	r3, #0
	cmp	r3, #0
	bne	.L1386
.L1355:
	mov	r0, #0
.L1344:
	ldr	r2, [sp, #20]
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L1387
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1341:
	ldr	r0, [r4, #72]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	cmp	r0, r7
	bne	.L1388
.L1358:
	ldr	ip, [r4, #104]
	mov	r0, r7
	cmp	ip, #0
	bne	.L1389
.L1347:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	ldrb	r2, [r4, #76]	@ zero_extendqisi2
	bfi	r3, ip, #4, #1
	cmp	r2, #3
	cmpne	r2, #18
	strb	r3, [r4, #144]
	bne	.L1352
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	cmp	r0, #1
	and	r3, r3, #31
	strb	r3, [r4, #77]
	bgt	.L1356
	b	.L1355
.L1349:
	ldrb	r2, [r4, #76]	@ zero_extendqisi2
	cmp	r2, #18
	cmpne	r2, #3
	mvnne	r0, #21
	strne	r1, [ip, #28]
	strne	r3, [ip, #36]
	beq	.L1348
	b	.L1344
.L1385:
	cmp	ip, #0
	beq	.L1352
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [ip, #28]
	b	.L1344
.L1384:
	ldr	r2, .L1390+4
	mov	r0, sp
	ldr	r1, .L1390+8
	ldr	r3, [r4, #124]
.LPIC270:
	add	r2, pc, r2
	add	ip, r2, ip
.LPIC269:
	add	r1, pc, r1
	ldrb	r2, [ip, #564]	@ zero_extendqisi2
	bl	sprintf(PLT)
	ldr	ip, [r4, #120]
	b	.L1340
.L1342:
	cmp	r8, ip
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	beq	.L1343
.L1346:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #21
	orr	r3, r3, #4
	strb	r3, [r4, #144]
	b	.L1344
.L1352:
	mvn	r0, #21
	b	.L1344
.L1386:
	mov	r3, #14848
	mvn	r0, #21
	movt	r3, 2
	str	r3, [ip, #28]
	b	.L1344
.L1387:
	bl	__stack_chk_fail(PLT)
.L1391:
	.align	2
.L1390:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC271+8))
	.word	.LANCHOR3-(.LPIC270+8)
	.word	.LC79-(.LPIC269+8)
	.fnend
	.size	check_command, .-check_command
	.align	2
	.type	sua_version_info_show, %function
sua_version_info_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r2
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r0, r4
	ldr	r1, .L1394
	ldr	r2, [r3, #96]
.LPIC272:
	add	r1, pc, r1
	add	r2, r2, #235
	bl	sprintf(PLT)
	ldr	r1, .L1394+4
	mov	r5, r0
	mov	r2, r4
	ldr	r0, .L1394+8
.LPIC274:
	add	r1, pc, r1
.LPIC273:
	add	r0, pc, r0
	add	r1, r1, #568
	bl	printk(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1395:
	.align	2
.L1394:
	.word	.LC80-(.LPIC272+8)
	.word	.LANCHOR3-(.LPIC274+8)
	.word	.LC81-(.LPIC273+8)
	.fnend
	.size	sua_version_info_show, .-sua_version_info_show
	.align	2
	.type	mass_storage_product_show, %function
mass_storage_product_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r0, r4
	ldr	r1, .L1398
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3, #96]
.LPIC275:
	add	r1, pc, r1
	add	r2, r2, #218
	b	sprintf(PLT)
.L1399:
	.align	2
.L1398:
	.word	.LC82-(.LPIC275+8)
	.fnend
	.size	mass_storage_product_show, .-mass_storage_product_show
	.align	2
	.type	mass_storage_vendor_show, %function
mass_storage_vendor_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r0, r4
	ldr	r1, .L1402
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3, #96]
.LPIC276:
	add	r1, pc, r1
	add	r2, r2, #209
	b	sprintf(PLT)
.L1403:
	.align	2
.L1402:
	.word	.LC82-(.LPIC276+8)
	.fnend
	.size	mass_storage_vendor_show, .-mass_storage_vendor_show
	.align	2
	.type	acm_instances_show, %function
acm_instances_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r0, r4
	ldr	r1, .L1406
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r2, [r3]
.LPIC277:
	add	r1, pc, r1
	b	sprintf(PLT)
.L1407:
	.align	2
.L1406:
	.word	.LC76-(.LPIC277+8)
	.fnend
	.size	acm_instances_show, .-acm_instances_show
	.align	2
	.type	midi_alsa_show, %function
midi_alsa_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r0, r4
	ldr	r1, .L1410
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrd	r2, [r3]
.LPIC278:
	add	r1, pc, r1
	b	sprintf(PLT)
.L1411:
	.align	2
.L1410:
	.word	.LC83-(.LPIC278+8)
	.fnend
	.size	midi_alsa_show, .-midi_alsa_show
	.align	2
	.type	composite_unbind, %function
composite_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	add	r10, r0, #32
	strd	r6, [sp, #8]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	str	r0, [sp, #4]
	mov	r0, r10
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #12]
	mov	r8, r0
	cmp	r3, #0
	bne	.L1436
.L1413:
	add	r9, r8, #36
.L1418:
	ldr	r4, [r8, #36]
	cmp	r4, r9
	beq	.L1437
.L1419:
	mov	r0, r4
	sub	r7, r4, #28
	bl	list_del(PLT)
	add	r5, r4, #8
	b	.L1416
.L1417:
	bl	list_del(PLT)
	ldr	r3, [fp, #-36]
	cmp	r3, #0
	bne	.L1438
.L1416:
	ldr	fp, [r4, #8]
	cmp	fp, r5
	mov	r0, fp
	sub	r6, fp, #72
	bne	.L1417
	ldr	r3, [r4, #-16]
	cmp	r3, #0
	beq	.L1418
	mov	r0, r7
	blx	r3
	ldr	r4, [r8, #36]
	cmp	r4, r9
	bne	.L1419
.L1437:
	ldr	r3, .L1439
.LPIC280:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L1420
	mov	r0, r8
	blx	r3
.L1420:
	ldr	r3, [r8, #4]
	cmp	r3, #0
	beq	.L1421
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldr	r3, [sp, #4]
	ldr	r1, [r8, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L1421:
	ldr	r1, .L1439+4
	mov	r0, r10
.LPIC281:
	add	r1, pc, r1
	add	r1, r1, #8
	bl	device_remove_file(PLT)
	mov	r0, r8
	bl	kfree(PLT)
	mov	r0, r10
	mov	r1, #0
	bl	dev_set_drvdata(PLT)
	ldr	r3, .L1439+8
	mov	r2, #0
.LPIC282:
	add	r3, pc, r3
	str	r2, [r3, #24]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1438:
	mov	r1, r6
	mov	r0, r7
	blx	r3
	b	.L1416
.L1436:
	ldr	r0, .L1439+12
	movw	r1, #1566
.LPIC279:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L1413
.L1440:
	.align	2
.L1439:
	.word	.LANCHOR1-(.LPIC280+8)
	.word	.LANCHOR0-(.LPIC281+8)
	.word	.LANCHOR1-(.LPIC282+8)
	.word	.LC84-(.LPIC279+8)
	.fnend
	.size	composite_unbind, .-composite_unbind
	.align	2
	.type	eth_qc_stop, %function
eth_qc_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r1, [r0, #576]
	ldr	r6, [r0, #1156]
	cmp	r1, #0
	beq	.L1452
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit(PLT)
.L1443:
	add	r5, r4, #1152
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1156]
	mov	r7, r0
	cmp	r3, #0
	beq	.L1444
	ldr	r3, [r6, #116]
	cmp	r3, #0
	beq	.L1444
	mov	r0, r6
	blx	r3
.L1444:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1452:
	ldr	r0, .L1453
	movw	r1, #1847
.LPIC283:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r0, .L1453+4
.LPIC284:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1443
.L1454:
	.align	2
.L1453:
	.word	.LC85-(.LPIC283+8)
	.word	.LC86-(.LPIC284+8)
	.fnend
	.size	eth_qc_stop, .-eth_qc_stop
	.align	2
	.type	ghsuart_send_cpkt_tomodem, %function
ghsuart_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L1470
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC285:
	add	r3, pc, r3
	ldr	r2, [r3, #2052]
	cmp	r0, r2
	bcs	.L1466
	mov	r2, #84
	mla	r0, r2, r0, r3
	ldr	r4, [r0, #2056]
	cmp	r4, #0
	beq	.L1467
	ldr	r0, [r4, #88]
	ubfx	r0, r0, #2, #1
	cmp	r0, #0
	beq	.L1468
	mov	r6, r1
	mov	r0, r5
	mov	r1, #32
	bl	__kmalloc(PLT)
	subs	r7, r0, #0
	mvneq	r0, #11
	beq	.L1457
	mov	r2, r5
	mov	r1, r6
	ldr	r5, .L1470+4
	bl	memcpy(PLT)
	ldr	r0, .L1470+8
.LPIC292:
	add	r5, pc, r5
	add	r5, r5, #592
.LPIC291:
	add	r0, pc, r0
	mov	r1, r5
	add	r0, r0, #204
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L1469
.L1460:
	ldr	r3, [r4, #104]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #104]
	bl	kfree(PLT)
	mvn	r0, #18
.L1457:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L1468:
	ldr	r3, [r4, #104]
	add	r3, r3, #1
	str	r3, [r4, #104]
	b	.L1457
.L1467:
	ldr	r1, .L1470+12
	ldr	r0, .L1470+16
.LPIC290:
	add	r1, pc, r1
.LPIC289:
	add	r0, pc, r0
	add	r1, r1, #592
	bl	printk(PLT)
	mvn	r0, #18
	b	.L1457
.L1466:
	ldr	r1, .L1470+20
	mov	r2, r0
	ldr	r0, .L1470+24
.LPIC287:
	add	r1, pc, r1
.LPIC286:
	add	r0, pc, r0
	add	r1, r1, #592
	bl	printk(PLT)
	mvn	r0, #18
	b	.L1457
.L1469:
	ldr	r0, .L1470+28
	mov	r1, r5
	mvn	r2, #18
.LPIC293:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1460
.L1471:
	.align	2
.L1470:
	.word	.LANCHOR1-(.LPIC285+8)
	.word	.LANCHOR3-(.LPIC292+8)
	.word	.LANCHOR2-(.LPIC291+8)
	.word	.LANCHOR3-(.LPIC290+8)
	.word	.LC21-(.LPIC289+8)
	.word	.LANCHOR3-(.LPIC287+8)
	.word	.LC25-(.LPIC286+8)
	.word	.LC87-(.LPIC293+8)
	.fnend
	.size	ghsuart_send_cpkt_tomodem, .-ghsuart_send_cpkt_tomodem
	.align	2
	.type	rmnet_smd_disable, %function
rmnet_smd_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	mov	r3, #0
	str	lr, [sp, #4]
	ldr	r0, [r0, #96]
	str	r3, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1473
	blx	r2
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
.L1473:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1474
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L1474:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L1475
	blx	r2
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
.L1475:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #4]
	add	r2, r4, #408
	mov	r0, #4
	ldr	r1, [r4, #388]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	queue_work_on(PLT)
	.fnend
	.size	rmnet_smd_disable, .-rmnet_smd_disable
	.align	2
	.type	rmnet_smd_ch_probe, %function
rmnet_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L1488
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, #4
	str	lr, [sp, #4]
.LPIC295:
	add	r3, pc, r3
	ldr	r2, [r3, #2584]
	ldr	r1, [r2, #388]
	add	r2, r2, #392
	bl	queue_work_on(PLT)
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
.L1489:
	.align	2
.L1488:
	.word	.LANCHOR1-(.LPIC295+8)
	.fnend
	.size	rmnet_smd_ch_probe, .-rmnet_smd_ch_probe
	.align	2
	.type	gs_unthrottle, %function
gs_unthrottle:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	cmp	r4, #0
	beq	.L1490
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L1492
	ldr	r3, .L1497
	mov	r0, #4
	add	r2, r4, #60
.LPIC296:
	add	r3, pc, r3
	ldr	r1, [r3, #2588]
	bl	queue_work_on(PLT)
.L1492:
	mov	r0, r4
	mov	r1, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L1490:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1498:
	.align	2
.L1497:
	.word	.LANCHOR1-(.LPIC296+8)
	.fnend
	.size	gs_unthrottle, .-gs_unthrottle
	.align	2
	.type	gs_read_complete, %function
gs_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r4, [r0]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r5, #48]
	mov	r6, r0
	add	r2, r4, #48
	ldr	r3, [r4, #128]
	add	r0, r5, #36
	ldr	r1, [r4, #52]
	add	r3, r3, ip
	str	r3, [r4, #128]
	bl	__list_add(PLT)
	ldr	r3, .L1501
	add	r2, r4, #60
	mov	r0, #4
.LPIC297:
	add	r3, pc, r3
	ldr	r1, [r3, #2588]
	bl	queue_work_on(PLT)
	ldr	lr, [sp, #12]
	mov	r0, r4
	mov	r1, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L1502:
	.align	2
.L1501:
	.word	.LANCHOR1-(.LPIC297+8)
	.fnend
	.size	gs_read_complete, .-gs_read_complete
	.align	2
	.type	android_resume, %function
android_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	add	r0, r0, #32
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata(PLT)
	ldr	r2, .L1515
.LPIC298:
	add	r2, pc, r2
	ldr	r3, [r2, #16]!
	cmp	r3, r2
	sub	r4, r3, #520
	bne	.L1507
	b	.L1504
.L1514:
	ldr	r3, [r4, #520]
	cmp	r3, r2
	sub	r4, r3, #520
	beq	.L1504
.L1507:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L1514
.L1504:
	add	r5, r0, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldrb	r3, [r4, #50]	@ zero_extendqisi2
	mov	r7, r0
	cmp	r3, #0
	beq	.L1508
	ldr	r3, .L1515+4
	mov	r1, #0
	add	r2, r4, #180
	mov	r0, #4
	strb	r1, [r4, #50]
.LPIC302:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
.L1508:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	ldr	r8, [sp, #16]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	composite_resume(PLT)
.L1516:
	.align	2
.L1515:
	.word	.LANCHOR1-(.LPIC298+8)
	.word	system_wq(GOT_PREL)+(.-(.LPIC302+8))
	.fnend
	.size	android_resume, .-android_resume
	.align	2
	.global	gsdio_write_complete
	.type	gsdio_write_complete, %function
gsdio_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	.pad #8
	sub	sp, sp, #8
	cmp	r4, #0
	beq	.L1529
	add	r7, r4, #4
	mov	r6, r0
	mov	r0, r7
	mov	r5, r1
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	add	r1, r4, #52
	ldr	r2, [r4, #52]
	add	r0, r5, #36
	bl	__list_add(PLT)
	ldr	r3, [r4, #76]
	add	r3, r3, #1
	str	r3, [r4, #76]
	ldr	r1, [r5, #44]
	cmn	r1, #108
	beq	.L1520
	cmp	r1, #0
	bne	.L1530
.L1521:
	ldr	r3, .L1531
	add	r2, r4, #60
	mov	r0, #4
.LPIC307:
	add	r3, pc, r3
	ldr	r1, [r3, #2592]
	bl	queue_work_on(PLT)
.L1520:
	mov	r0, r7
	mov	r1, r8
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L1530:
	ldr	ip, [r6, #4]
	mov	r2, r4
	ldr	r3, [r4]
	str	r1, [sp, #4]
	ldr	r1, .L1531+4
	ldr	r0, .L1531+8
	str	ip, [sp]
.LPIC306:
	add	r1, pc, r1
	add	r1, r1, #620
.LPIC305:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L1521
.L1529:
	ldr	r1, .L1531+12
	ldr	r0, .L1531+16
.LPIC304:
	add	r1, pc, r1
.LPIC303:
	add	r0, pc, r0
	add	r1, r1, #620
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk(PLT)
.L1532:
	.align	2
.L1531:
	.word	.LANCHOR1-(.LPIC307+8)
	.word	.LANCHOR3-(.LPIC306+8)
	.word	.LC88-(.LPIC305+8)
	.word	.LANCHOR3-(.LPIC304+8)
	.word	.LC21-(.LPIC303+8)
	.fnend
	.size	gsdio_write_complete, .-gsdio_write_complete
	.align	2
	.global	gsdio_ctrl_notify_modem
	.type	gsdio_ctrl_notify_modem, %function
gsdio_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L1551
.LPIC308:
	add	ip, pc, ip
	ldr	r3, [ip, #284]
	cmp	r1, r3
	bcs	.L1548
	cmp	r0, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	mov	lr, r0
	beq	.L1549
	mov	r4, #104
	tst	r2, #1
	movne	r3, #2
	moveq	r3, #0
	mla	r1, r4, r1, ip
	ldr	r4, [r1, #308]
	ldr	r2, [r4, #180]
	cmp	r3, r2
	beq	.L1533
	ldr	r2, [r4, #108]
	str	r3, [r4, #180]
	cmp	r2, #0
	beq	.L1550
	cmp	r3, #0
	beq	.L1539
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L1539
	ldr	r1, [r4, #176]
	blx	r3
.L1539:
	ldr	r3, .L1551+4
	add	r2, r4, #80
	mov	r0, #4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC316:
	add	r3, pc, r3
	ldr	r1, [r3, #2592]
	b	queue_work_on(PLT)
.L1533:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1548:
	ldr	r3, .L1551+8
	mov	r2, r1
	ldr	r0, .L1551+12
.LPIC310:
	add	r3, pc, r3
.LPIC309:
	add	r0, pc, r0
	add	r1, r3, #644
	b	printk(PLT)
.L1549:
	ldr	r1, .L1551+16
	ldr	r0, .L1551+20
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC312:
	add	r1, pc, r1
.LPIC311:
	add	r0, pc, r0
	add	r1, r1, #644
	b	printk(PLT)
.L1550:
	ldr	r1, .L1551+24
	mov	r2, r4
	ldr	r0, .L1551+28
	ldr	r3, [r4]
	ldr	lr, [sp, #4]
.LPIC315:
	add	r1, pc, r1
	ldr	r4, [sp]
	add	sp, sp, #8
.LPIC314:
	add	r0, pc, r0
	add	r1, r1, #644
	b	printk(PLT)
.L1552:
	.align	2
.L1551:
	.word	.LANCHOR1-(.LPIC308+8)
	.word	.LANCHOR1-(.LPIC316+8)
	.word	.LANCHOR3-(.LPIC310+8)
	.word	.LC89-(.LPIC309+8)
	.word	.LANCHOR3-(.LPIC312+8)
	.word	.LC90-(.LPIC311+8)
	.word	.LANCHOR3-(.LPIC315+8)
	.word	.LC91-(.LPIC314+8)
	.fnend
	.size	gsdio_ctrl_notify_modem, .-gsdio_ctrl_notify_modem
	.align	2
	.type	f_audio_complete, %function
f_audio_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, #0
	strd	r8, [sp, #16]
	ldr	r8, .L1587
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r7, [r1, #44]
	.pad #8
	sub	sp, sp, #8
.LPIC318:
	add	r8, pc, r8
	ldr	r5, [r1, #32]
	str	r3, [sp, #4]
	cmp	r7, r3
	bne	.L1579
	ldr	r6, [r5, #172]
	mov	r4, r1
	cmp	r6, r0
	beq	.L1582
	ldr	r6, [r5, #176]
	cmp	r6, r0
	beq	.L1583
	ldr	r6, [r5, #272]
	cmp	r6, #0
	beq	.L1553
	ldmia	r1, {r1, r2}
	add	r0, sp, #4
	bl	memcpy(PLT)
	ldrh	r2, [sp, #4]
	mov	r0, r6
	ldr	r3, [r6, #36]
	ldrb	r1, [r5, #268]	@ zero_extendqisi2
	blx	r3
	str	r7, [r5, #272]
.L1553:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1582:
	ldr	r7, [r5, #184]
	cmp	r7, r3
	beq	.L1553
	ldr	r9, .L1587+4
	ldr	r0, [r7, #4]
	ldr	r2, [r1, #48]
.LPIC317:
	add	r9, pc, r9
	ldr	r3, [r9, #228]
	rsb	r3, r0, r3
	cmp	r3, r2
	bcs	.L1559
	add	r0, r7, #8
	ldr	r1, [r5, #208]
	add	r2, r5, #204
	bl	__list_add(PLT)
	ldr	r3, .L1587+8
	add	r2, r5, #188
	mov	r0, #4
	ldr	r3, [r8, r3]
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	ldr	r0, [r9, #228]
	bl	f_audio_buffer_alloc(PLT)
	cmn	r0, #4096
	mov	r7, r0
	bhi	.L1560
	ldr	r0, [r0, #4]
	ldr	r2, [r4, #48]
.L1559:
	ldr	r3, [r7]
	ldr	r1, [r4]
	add	r0, r3, r0
	bl	memcpy(PLT)
	ldr	r3, [r7, #4]
	mov	r1, r4
	mov	r0, r6
	ldr	ip, [r4, #48]
	mov	r2, #32
	add	r3, r3, ip
	str	r3, [r7, #4]
	str	r7, [r5, #184]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L1553
	ldr	r1, .L1587+12
	mov	r3, r0
	ldr	r0, .L1587+16
	ldr	r2, [r6, #4]
.LPIC323:
	add	r1, pc, r1
.LPIC322:
	add	r0, pc, r0
	add	r1, r1, #668
.L1581:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L1583:
	ldr	r7, [r5, #216]
	cmp	r7, #0
	beq	.L1584
.L1563:
	ldmia	r7, {r1, r3}
	ldr	r2, [r4, #48]
	ldr	r0, [r4]
	add	r1, r1, r3
	bl	memcpy(PLT)
	ldr	r1, [r4, #48]
	ldr	r3, [r7, #4]
	ldr	r2, .L1587+20
	add	r3, r3, r1
.LPIC324:
	add	r2, pc, r2
	ldr	r2, [r2, #232]
	str	r3, [r7, #4]
	ldr	r1, [r4, #48]
	rsb	r3, r3, r2
	cmp	r3, r1
	bcc	.L1585
.L1565:
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	mov	r2, #32
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L1553
	ldr	r1, .L1587+24
	mov	r3, r0
	ldr	r0, .L1587+28
	ldr	r2, [r6, #4]
.LPIC326:
	add	r1, pc, r1
.LPIC325:
	add	r0, pc, r0
	add	r1, r1, #700
	b	.L1581
.L1585:
	cmp	r7, #0
	beq	.L1566
	ldr	r0, [r7]
	bl	kfree(PLT)
	mov	r3, #0
	mov	r0, r7
	str	r3, [r7]
	bl	kfree(PLT)
.L1566:
	ldr	r3, .L1587+8
	mov	r1, #0
	add	r2, r5, #220
	mov	r0, #4
	str	r1, [r5, #216]
	ldr	r3, [r8, r3]
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	b	.L1565
.L1584:
	add	r9, r5, #212
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, r5
	mov	r10, r0
	ldr	r0, [r3, #236]!
	cmp	r0, r3
	beq	.L1586
	sub	r7, r0, #8
	bl	list_del(PLT)
	str	r7, [r5, #216]
	mov	r0, r9
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L1563
.L1560:
	ldr	r1, .L1587+32
	ldr	r0, .L1587+36
.LPIC321:
	add	r1, pc, r1
.LPIC320:
	add	r0, pc, r0
	add	r1, r1, #668
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L1586:
	mov	r0, r9
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L1587+8
	add	r2, r5, #220
	mov	r0, #4
	ldr	r3, [r8, r3]
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	b	.L1565
.L1579:
	ldr	r1, .L1587+40
	mov	r2, r7
	ldr	r0, .L1587+44
.LPIC328:
	add	r1, pc, r1
.LPIC327:
	add	r0, pc, r0
	add	r1, r1, #728
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L1588:
	.align	2
.L1587:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC318+8)
	.word	.LANCHOR2-(.LPIC317+8)
	.word	system_wq(GOT)
	.word	.LANCHOR3-(.LPIC323+8)
	.word	.LC92-(.LPIC322+8)
	.word	.LANCHOR2-(.LPIC324+8)
	.word	.LANCHOR3-(.LPIC326+8)
	.word	.LC92-(.LPIC325+8)
	.word	.LANCHOR3-(.LPIC321+8)
	.word	.LC35-(.LPIC320+8)
	.word	.LANCHOR3-(.LPIC328+8)
	.word	.LC93-(.LPIC327+8)
	.fnend
	.size	f_audio_complete, .-f_audio_complete
	.align	2
	.type	acc_complete_set_hid_report_desc, %function
acc_complete_set_hid_report_desc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r1, #44]
	ldr	r4, [r1, #32]
	ldr	r5, [r1, #48]
	cmp	r3, #0
	ldr	r6, [r4, #12]
	bne	.L1593
	ldr	r3, [r4, #28]
	mov	r2, r5
	ldr	r0, [r4, #20]
	ldr	r1, [r1]
	add	r0, r0, r3
	bl	memcpy(PLT)
	ldr	r2, [r4, #28]
	ldr	r3, [r4, #24]
	add	r5, r5, r2
	cmp	r5, r3
	str	r5, [r4, #28]
	beq	.L1594
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1594:
	ldr	r3, .L1595
	add	r2, r6, #1744
	mov	r0, #4
	ldrd	r4, [sp]
	add	r2, r2, #8
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
.LPIC331:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r1, [r3]
	b	queue_work_on(PLT)
.L1593:
	ldr	r0, .L1595+4
	mov	r1, r3
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
.LPIC329:
	add	r0, pc, r0
	b	printk(PLT)
.L1596:
	.align	2
.L1595:
	.word	system_wq(GOT_PREL)+(.-(.LPIC331+8))
	.word	.LC94-(.LPIC329+8)
	.fnend
	.size	acc_complete_set_hid_report_desc, .-acc_complete_set_hid_report_desc
	.align	2
	.type	rmnet_sdio_setup, %function
rmnet_sdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #192]
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r8, [r1, #2]	@ unaligned
	ldr	r7, [r2, #24]
	cmp	r3, #0
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r5, [r7, #4]
	beq	.L1607
	mov	r4, r0
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	movw	r2, #8482
	ldrb	r0, [r1]	@ zero_extendqisi2
	orr	r3, r3, r0, asl #8
	cmp	r3, r2
	beq	.L1599
	movw	r2, #41217
	cmp	r3, r2
	beq	.L1600
	cmp	r3, #8448
	beq	.L1613
.L1609:
	mvn	r0, #94
.L1611:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1600:
	cmp	r8, #0
	bne	.L1609
	add	r10, r4, #188
	str	r1, [sp, #20]
	mov	r0, r10
	bl	_raw_spin_lock(PLT)
	mov	r3, r4
	ldr	r1, [sp, #20]
	ldr	fp, [r3, #120]!
	cmp	fp, r3
	beq	.L1614
	mov	r0, fp
	sub	r9, fp, #8
	bl	list_del(PLT)
	ldr	r3, [r4, #128]
	mov	r0, r10
	sub	r3, r3, #1
	str	r3, [r4, #128]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [fp, #-4]
	ldr	r1, [fp, #-8]
	ldr	r0, [r5]
	cmp	r6, r3
	movcs	r8, r3
	movcc	r8, r6
	mov	r2, r8
	bl	memcpy(PLT)
	ldr	r3, .L1615
	str	r4, [r5, #32]
.LPIC334:
	add	r3, pc, r3
	str	r3, [r5, #28]
	ldr	r0, [fp, #-8]
	bl	kfree(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	ldr	r3, [r4, #368]
	cmp	r8, r6
	mov	r6, r8
	movge	ip, #0
	movlt	ip, #1
	add	r3, r3, #1
	str	r3, [r4, #368]
	b	.L1602
.L1613:
	ldr	r3, .L1615+4
	mov	ip, #0
	str	r4, [r5, #32]
.LPIC332:
	add	r3, pc, r3
	str	r3, [r5, #28]
.L1602:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r6, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfi	r3, ip, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r7]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L1606
	mov	r0, r4
	b	.L1611
.L1599:
	ldr	r3, [r4, #332]
	tst	r8, #1
	mov	r0, #4
	ldr	r1, [r4, #200]
	add	r2, r4, #336
	orrne	r3, r3, #2
	biceq	r3, r3, #2
	str	r3, [r4, #332]
	bl	queue_work_on(PLT)
	adds	ip, r6, #0
	mov	r6, #0
	movne	ip, #1
	b	.L1602
.L1606:
	ldr	r0, [r7]
	mov	r2, r4
	ldr	r1, .L1615+8
	add	r0, r0, #32
.LPIC335:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r4
	b	.L1611
.L1607:
	mvn	r0, #106
	b	.L1611
.L1614:
	ldr	r0, [r7]
	str	r8, [sp]
	ldrb	r2, [r1]	@ zero_extendqisi2
	str	r9, [sp, #4]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	str	r6, [sp, #8]
	ldr	r1, .L1615+12
	add	r0, r0, #32
.LPIC333:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	mov	r0, r10
	bl	_raw_spin_unlock(PLT)
	mvn	r0, #94
	b	.L1611
.L1616:
	.align	2
.L1615:
	.word	rmnet_sdio_response_complete-(.LPIC334+8)
	.word	rmnet_sdio_command_complete-(.LPIC332+8)
	.word	.LC68-(.LPIC335+8)
	.word	.LC95-(.LPIC333+8)
	.fnend
	.size	rmnet_sdio_setup, .-rmnet_sdio_setup
	.align	2
	.type	ghsuart_ctrl_probe, %function
ghsuart_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L1623
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #84
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0, #4]
	mov	r0, #1
.LPIC336:
	add	r3, pc, r3
	mla	r3, r1, r2, r3
	ldr	r4, [r3, #2056]
	add	r1, r4, #88
	add	r5, r4, #8
	bl	_set_bit(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L1618
	mov	r0, #4
	ldr	r1, [r4, #32]
	add	r2, r4, #36
	bl	queue_work_on(PLT)
.L1618:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L1624:
	.align	2
.L1623:
	.word	.LANCHOR1-(.LPIC336+8)
	.fnend
	.size	ghsuart_ctrl_probe, .-ghsuart_ctrl_probe
	.align	2
	.type	ghsuart_data_probe, %function
ghsuart_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L1633
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #4]
.LPIC337:
	add	r3, pc, r3
	ldr	r1, [r3, #2224]
	cmp	r2, r1
	bcs	.L1632
	mov	r1, #84
	mov	r0, #1
	mla	r2, r1, r2, r3
	ldr	r4, [r2, #2228]
	add	r1, r4, #188
	bl	_set_bit(PLT)
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L1627
	mov	r0, #4
	ldr	r1, [r4, #108]
	add	r2, r4, #112
	bl	queue_work_on(PLT)
	mov	r0, #0
.L1627:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L1632:
	ldr	r1, .L1633+4
	ldr	r0, .L1633+8
.LPIC339:
	add	r1, pc, r1
.LPIC338:
	add	r0, pc, r0
	add	r1, r1, #748
	bl	printk(PLT)
	mvn	r0, #21
	b	.L1627
.L1634:
	.align	2
.L1633:
	.word	.LANCHOR1-(.LPIC337+8)
	.word	.LANCHOR3-(.LPIC339+8)
	.word	.LC96-(.LPIC338+8)
	.fnend
	.size	ghsuart_data_probe, .-ghsuart_data_probe
	.align	2
	.type	rmnet_smd_debug_read_stats, %function
rmnet_smd_debug_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L1643
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	fp, [r0, #124]
	.pad #132
	sub	sp, sp, #132
.LPIC343:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	str	r3, [sp, #92]
	str	r1, [sp, #84]
	ldr	r3, [fp, #304]
	str	r2, [sp, #88]
	ldr	r0, [ip, #36]
	str	r3, [sp, #80]
	ldr	r3, [fp, #368]
	cmp	r0, #0
	str	r3, [sp, #76]
	beq	.L1638
	movw	r1, #32976
	mov	r2, #512
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L1642
.L1636:
	add	r10, fp, #164
	mov	r0, r10
	bl	_raw_spin_lock_irqsave(PLT)
	add	r2, fp, #424
	ldr	ip, [fp, #440]
	str	r0, [sp, #96]
	ldmia	r2, {r2, r3, r9}
	ldr	r0, [fp, #260]
	ldr	r7, [fp, #444]
	str	ip, [sp, #72]
	ldr	r6, [fp, #448]
	rsb	lr, r2, r3
	str	r2, [sp, #124]
	ldr	r2, [fp, #168]
	str	r3, [sp, #104]
	ldr	r5, [fp, #452]
	str	lr, [sp, #108]
	ldr	r8, [fp, #436]
	str	r2, [sp, #100]
	bl	smd_read_avail(PLT)
	str	r0, [sp, #120]
	ldr	r0, [fp, #260]
	bl	smd_write_avail(PLT)
	str	r0, [sp, #112]
	ldr	r0, [fp, #324]
	bl	smd_read_avail(PLT)
	str	r0, [sp, #116]
	ldr	r0, [fp, #324]
	rsb	fp, r8, r9
	bl	smd_write_avail(PLT)
	ldr	r2, [sp, #72]
	rsb	ip, r5, r6
	str	r6, [sp, #44]
	ldr	r6, [sp, #112]
	str	r5, [sp, #48]
	mov	r1, #512
	ldr	r5, [sp, #108]
	str	r7, [sp, #32]
	ldr	r3, [sp, #120]
	str	ip, [sp, #52]
	rsb	lr, r2, r7
	ldr	r2, [sp, #124]
	str	r0, [sp, #68]
	str	r6, [sp, #60]
	ldr	r6, [sp, #116]
	mov	r0, r4
	ldr	ip, [sp, #104]
	str	r5, [sp, #16]
	ldr	r7, [sp, #72]
	str	lr, [sp, #40]
	str	r2, [sp, #12]
	ldr	r2, .L1643+4
	ldr	lr, [sp, #100]
	str	r3, [sp, #56]
	ldr	r5, [sp, #76]
	str	r6, [sp, #64]
	ldr	r3, [sp, #80]
	str	ip, [sp, #8]
.LPIC342:
	add	r2, pc, r2
	str	r9, [sp, #20]
	str	lr, [sp, #4]
	str	r5, [sp]
	str	r8, [sp, #24]
	str	r7, [sp, #36]
	str	fp, [sp, #28]
	bl	scnprintf(PLT)
	mov	r5, r0
	ldr	r1, [sp, #96]
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	str	r5, [sp]
	ldrd	r0, [sp, #84]
	mov	r3, r4
	ldr	r2, [sp, #92]
	bl	simple_read_from_buffer(PLT)
	mov	r5, r0
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
.L1637:
	add	sp, sp, #132
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1638:
	mov	r4, #16
	b	.L1636
.L1642:
	mvn	r0, #11
	b	.L1637
.L1644:
	.align	2
.L1643:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC343+8))
	.word	.LC97-(.LPIC342+8)
	.fnend
	.size	rmnet_smd_debug_read_stats, .-rmnet_smd_debug_read_stats
	.align	2
	.type	rmnet_sdio_read_stats, %function
rmnet_sdio_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L1653
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r8, [sp, #16]
	mov	r9, r1
	mov	r8, r2
	strd	r6, [sp, #8]
	mov	r7, r3
	str	r10, [sp, #24]
.LPIC346:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	str	lr, [sp, #28]
	.pad #64
	sub	sp, sp, #64
	ldr	r4, [r0, #124]
	ldr	r0, [ip, #40]
	cmp	r0, #0
	beq	.L1648
	movw	r1, #32976
	mov	r2, #1024
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L1652
.L1646:
	add	r6, r4, #188
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r4, #140]
	mov	r10, r0
	mov	r1, #4096
	ldr	lr, [r4, #196]
	mov	r0, r5
	ldr	r3, [r4, #356]
	ldr	r2, .L1653+4
	str	ip, [sp]
	ldr	ip, [r4, #152]
.LPIC345:
	add	r2, pc, r2
	str	ip, [sp, #4]
	ldr	ip, [r4, #364]
	str	ip, [sp, #8]
	ldr	ip, [r4, #360]
	str	ip, [sp, #12]
	ldr	ip, [r4, #168]
	str	ip, [sp, #16]
	ldr	ip, [r4, #180]
	str	ip, [sp, #20]
	ldr	ip, [r4, #328]
	str	ip, [sp, #24]
	ldr	ip, [r4, #372]
	str	ip, [sp, #28]
	ldr	ip, [r4, #116]
	str	ip, [sp, #32]
	ldr	ip, [r4, #332]
	str	ip, [sp, #36]
	ldr	ip, [r4, #368]
	str	ip, [sp, #40]
	ldr	ip, [r4, #128]
	str	lr, [sp, #48]
	str	ip, [sp, #44]
	ldr	ip, [r4, #320]
	str	ip, [sp, #52]
	ldr	ip, [r4, #324]
	str	ip, [sp, #56]
	bl	scnprintf(PLT)
	mov	r4, r0
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	str	r4, [sp]
	mov	r1, r8
	mov	r2, r7
	mov	r3, r5
	mov	r0, r9
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
.L1647:
	add	sp, sp, #64
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1648:
	mov	r5, #16
	b	.L1646
.L1652:
	mvn	r0, #11
	b	.L1647
.L1654:
	.align	2
.L1653:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC346+8))
	.word	.LC98-(.LPIC345+8)
	.fnend
	.size	rmnet_sdio_read_stats, .-rmnet_sdio_read_stats
	.align	2
	.type	debug_read_status, %function
debug_read_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #124]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r5, #8]
	ldr	fp, [r5, #4]
	cmp	r7, #0
	cmpne	fp, #0
	beq	.L1669
	mov	r8, r3
	ldr	r3, .L1671
	mov	r10, r1
	mov	r9, r2
.LPIC357:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L1661
	movw	r1, #32976
	mov	r2, #512
	bl	kmem_cache_alloc_trace(PLT)
	subs	r6, r0, #0
	beq	.L1670
.L1658:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, .L1671+4
	str	r0, [sp, #12]
	mov	r1, #512
	ldr	r3, [r5, #128]
	mov	r0, r6
.LPIC349:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	ldr	r2, .L1671+8
	mov	r4, r0
	add	r0, r6, r0
	rsb	r1, r4, #512
	ldr	r3, [r5, #132]
.LPIC350:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	ldr	lr, [r5, #128]
	add	r4, r4, r0
	ldr	r3, [r5, #132]
	rsb	r1, r4, #512
	add	r0, r6, r4
	ldr	r2, .L1671+12
	rsb	r3, r3, lr
.LPIC351:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	ldr	r2, .L1671+16
	add	r4, r0, r4
	rsb	r1, r4, #512
	add	r0, r6, r4
	ldr	r3, [r5, #136]
.LPIC352:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	ldr	r2, .L1671+20
	add	r4, r0, r4
	rsb	r1, r4, #512
	add	r0, r6, r4
	ldr	r3, [r5, #140]
.LPIC353:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	ldr	lr, [r5, #136]
	add	r4, r0, r4
	ldr	r3, [r5, #140]
	rsb	r1, r4, #512
	add	r0, r6, r4
	ldr	r2, .L1671+24
	rsb	r3, r3, lr
.LPIC354:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	ldr	r2, .L1671+28
	add	r4, r0, r4
	ldr	r3, [r7, #156]
	add	r0, r6, r4
	rsb	r1, r4, #512
.LPIC355:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	ldr	r3, [fp, #108]
	add	r4, r0, r4
	cmp	r3, #0
	beq	.L1659
	mov	r0, fp
	blx	r3
	ldr	r2, .L1671+32
	cmp	r0, #0
	rsb	r1, r4, #512
	add	r0, r6, r4
	movne	r3, #2
	moveq	r3, #0
.LPIC356:
	add	r2, pc, r2
	bl	scnprintf(PLT)
	add	r4, r4, r0
.L1659:
	mov	r0, r5
	ldr	r1, [sp, #12]
	bl	_raw_spin_unlock_irqrestore(PLT)
	str	r4, [sp]
	mov	r1, r9
	mov	r2, r8
	mov	r3, r6
	mov	r0, r10
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r6
	bl	kfree(PLT)
	mov	r0, r4
.L1657:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1661:
	mov	r6, #16
	b	.L1658
.L1670:
	mvn	r0, #11
	b	.L1657
.L1669:
	ldr	r0, .L1671+36
.LPIC347:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #21
	b	.L1657
.L1672:
	.align	2
.L1671:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC357+8))
	.word	.LC100-(.LPIC349+8)
	.word	.LC101-(.LPIC350+8)
	.word	.LC102-(.LPIC351+8)
	.word	.LC103-(.LPIC352+8)
	.word	.LC104-(.LPIC353+8)
	.word	.LC105-(.LPIC354+8)
	.word	.LC106-(.LPIC355+8)
	.word	.LC107-(.LPIC356+8)
	.word	.LC99-(.LPIC347+8)
	.fnend
	.size	debug_read_status, .-debug_read_status
	.align	2
	.type	debug_sdio_read_stats, %function
debug_sdio_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1687
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC363:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	ldr	r0, [r0, #40]
	cmp	r0, #0
	beq	.L1678
	movw	r1, #32976
	mov	r2, #1024
	bl	kmem_cache_alloc_trace(PLT)
	subs	r10, r0, #0
	beq	.L1686
.L1674:
	ldr	r9, .L1687+4
.LPIC359:
	add	r9, pc, r9
	ldr	r5, [r9, #284]
	cmp	r5, #0
	beq	.L1676
	ldr	r3, .L1687+8
	mov	r7, #0
	mov	r5, r7
	mov	r6, r7
.LPIC361:
	add	r3, pc, r3
	str	r3, [sp, #56]
	add	r3, r9, #288
	str	r3, [sp, #52]
.L1677:
	ldr	r3, [sp, #52]
	add	r3, r3, r7
	add	r7, r7, #104
	ldr	r4, [r3, #20]
	add	r8, r4, #4
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	str	r4, [sp]
	ldr	lr, [r4, #184]
	mov	r3, r6
	rsb	r1, r5, #4096
	mov	fp, r0
	ldr	r2, [sp, #56]
	add	r0, r10, r5
	add	r6, r6, #1
	str	lr, [sp, #4]
	ldr	lr, [r4, #188]
	str	lr, [sp, #8]
	ldr	lr, [r4, #180]
	str	lr, [sp, #12]
	ldr	lr, [r4, #176]
	str	lr, [sp, #16]
	ldr	lr, [r4, #44]
	str	lr, [sp, #20]
	ldr	lr, [r4, #48]
	str	lr, [sp, #24]
	ldr	lr, [r4, #76]
	str	lr, [sp, #28]
	ldr	lr, [r4, #8]
	str	lr, [sp, #32]
	ldr	lr, [r4, #108]
	str	lr, [sp, #36]
	ldr	lr, [r4, #112]
	str	lr, [sp, #40]
	bl	scnprintf(PLT)
	add	r5, r5, r0
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r9, #284]
	cmp	r6, r3
	bcc	.L1677
.L1676:
	ldrd	r0, [sp, #60]
	mov	r3, r10
	str	r5, [sp]
	ldr	r2, [sp, #68]
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r10
	bl	kfree(PLT)
	mov	r0, r4
.L1675:
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1678:
	mov	r10, #16
	b	.L1674
.L1686:
	mvn	r0, #11
	b	.L1675
.L1688:
	.align	2
.L1687:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC363+8))
	.word	.LANCHOR1-(.LPIC359+8)
	.word	.LC108-(.LPIC361+8)
	.fnend
	.size	debug_sdio_read_stats, .-debug_sdio_read_stats
	.align	2
	.type	debug_smd_read_stats, %function
debug_smd_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1706
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC369:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #100
	sub	sp, sp, #100
	str	r1, [sp, #84]
	strd	r2, [sp, #88]
	ldr	r0, [r0, #36]
	cmp	r0, #0
	beq	.L1695
	movw	r1, #32976
	mov	r2, #512
	bl	kmem_cache_alloc_trace(PLT)
	subs	r7, r0, #0
	beq	.L1705
.L1690:
	ldr	r3, .L1706+4
.LPIC365:
	add	r3, pc, r3
	ldr	lr, [r3, #496]
	cmp	lr, #0
	beq	.L1692
	ldr	r2, .L1706+8
	mov	r10, #0
	str	r7, [sp, #72]
	mov	fp, r10
	mov	r8, r10
	mov	r9, r3
	mov	r7, r10
.LPIC367:
	add	r2, pc, r2
	str	r2, [sp, #76]
	add	r2, r3, #500
	str	r2, [sp, #80]
.L1694:
	ldr	r3, [sp, #80]
	ldr	r2, [sp, #72]
	add	r3, r3, r7
	ldr	r4, [r3, #20]
	rsb	r3, r8, #512
	add	r10, r2, r8
	str	r3, [sp, #48]
	add	r6, r4, #4
	ldr	r5, [r4, #72]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #172]
	str	r0, [sp, #44]
	ldr	r3, [r5]
	str	r2, [sp, #52]
	ldr	r2, [r4, #168]
	subs	r0, r3, #0
	str	r2, [sp, #56]
	ldr	r2, [r4, #160]
	str	r2, [sp, #60]
	ldr	r2, [r4, #164]
	str	r2, [sp, #64]
	ldr	r2, [r4, #8]
	str	r2, [sp, #68]
	beq	.L1697
	bl	smd_read_avail(PLT)
	ldr	ip, [r5]
	mov	r4, r0
	cmp	ip, #0
	mov	r0, ip
	beq	.L1693
	bl	smd_write_avail(PLT)
	mov	ip, r0
.L1693:
	mov	r0, r10
	ldr	r10, [sp, #60]
	add	r7, r7, #104
	ldr	lr, [r5, #8]
	ldr	r3, [sp, #52]
	ldr	r5, [r5, #8]
	str	ip, [sp, #24]
	str	r10, [sp, #8]
	ldr	r10, [sp, #64]
	and	lr, lr, #1
	ldr	r1, [sp, #48]
	str	r4, [sp, #20]
	str	r3, [sp]
	ldr	r3, [sp, #56]
	ubfx	r5, r5, #1, #1
	ldr	r2, [sp, #76]
	str	lr, [sp, #28]
	str	r10, [sp, #12]
	ldr	r10, [sp, #68]
	str	r5, [sp, #32]
	str	r3, [sp, #4]
	mov	r3, fp
	add	fp, fp, #1
	str	r10, [sp, #16]
	bl	scnprintf(PLT)
	add	r8, r8, r0
	ldr	r1, [sp, #44]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r9, #496]
	cmp	fp, r3
	bcc	.L1694
	ldr	r7, [sp, #72]
	mov	lr, r8
.L1692:
	str	lr, [sp]
	ldrd	r0, [sp, #84]
	mov	r3, r7
	ldr	r2, [sp, #92]
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r7
	bl	kfree(PLT)
	mov	r0, r4
.L1691:
	add	sp, sp, #100
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1697:
	mov	r4, r3
	mov	ip, r3
	b	.L1693
.L1695:
	mov	r7, #16
	b	.L1690
.L1705:
	mvn	r0, #11
	b	.L1691
.L1707:
	.align	2
.L1706:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC369+8))
	.word	.LANCHOR1-(.LPIC365+8)
	.word	.LC109-(.LPIC367+8)
	.fnend
	.size	debug_smd_read_stats, .-debug_smd_read_stats
	.align	2
	.type	gbam_read_stats, %function
gbam_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1720
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	mov	r9, r2
	mov	r8, r3
	strd	r10, [sp, #24]
	mov	r10, r1
	strd	r6, [sp, #8]
.LPIC374:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #76
	sub	sp, sp, #76
	ldr	r0, [r0, #40]
	cmp	r0, #0
	beq	.L1713
	movw	r1, #32976
	mov	r2, #1024
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L1719
.L1709:
	ldr	r3, .L1720+4
.LPIC371:
	add	r3, pc, r3
	ldr	r2, [r3, #2400]
	cmp	r2, #0
	movle	r4, #0
	ble	.L1711
	ldr	r4, [r3, #2404]
	cmp	r4, #0
	beq	.L1711
	add	r6, r4, #4
	add	r7, r4, #8
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	fp, r0
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	ldr	lr, [r4, #20]
	add	r3, r4, #20
	mov	r1, #1024
	ldr	ip, [r4, #20]
	str	r4, [sp]
	mov	r0, r5
	str	r3, [sp, #4]
	ldr	r2, [r4, #264]
	mov	r3, #0
	ubfx	lr, lr, #1, #1
	ubfx	ip, ip, #2, #1
	str	r2, [sp, #8]
	ldr	r2, .L1720+8
	str	ip, [sp, #68]
	ldr	ip, [r4, #260]
.LPIC373:
	add	r2, pc, r2
	str	ip, [sp, #12]
	ldr	ip, [r4, #240]
	str	ip, [sp, #16]
	ldr	ip, [r4, #244]
	str	ip, [sp, #20]
	ldr	ip, [r4, #248]
	str	ip, [sp, #24]
	ldr	ip, [r4, #268]
	str	ip, [sp, #28]
	ldr	ip, [r4, #272]
	str	ip, [sp, #32]
	ldr	ip, [r4, #276]
	str	ip, [sp, #36]
	ldr	ip, [r4, #280]
	str	ip, [sp, #40]
	ldr	ip, [r4, #44]
	str	ip, [sp, #44]
	ldr	ip, [sp, #68]
	ldr	r4, [r4, #68]
	str	lr, [sp, #52]
	str	ip, [sp, #56]
	str	r4, [sp, #48]
	bl	scnprintf(PLT)
	mov	r4, r0
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	mov	r0, r6
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
.L1711:
	str	r4, [sp]
	mov	r1, r9
	mov	r2, r8
	mov	r3, r5
	mov	r0, r10
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
.L1710:
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1713:
	mov	r5, #16
	b	.L1709
.L1719:
	mvn	r0, #11
	b	.L1710
.L1721:
	.align	2
.L1720:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC374+8))
	.word	.LANCHOR1-(.LPIC371+8)
	.word	.LC110-(.LPIC373+8)
	.fnend
	.size	gbam_read_stats, .-gbam_read_stats
	.align	2
	.type	gsmd_ctrl_read_stats, %function
gsmd_ctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1741
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC380:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #100
	sub	sp, sp, #100
	str	r1, [sp, #84]
	strd	r2, [sp, #88]
	ldr	r0, [r0, #40]
	cmp	r0, #0
	beq	.L1729
	movw	r1, #32976
	mov	r2, #1024
	bl	kmem_cache_alloc_trace(PLT)
	subs	r3, r0, #0
	str	r3, [sp, #60]
	beq	.L1740
.L1723:
	ldr	r3, .L1741+4
	mov	fp, #0
	mov	r9, fp
	mov	r10, fp
.LPIC378:
	add	r3, pc, r3
	str	r3, [sp, #64]
	ldr	r3, .L1741+8
.LPIC379:
	add	r3, pc, r3
	str	r3, [sp, #72]
	ldr	r3, .L1741+12
.LPIC375:
	add	r3, pc, r3
	str	r3, [sp, #76]
	ldr	r3, .L1741+16
.LPIC376:
	add	r3, pc, r3
	str	r3, [sp, #80]
.L1728:
	ldr	r3, [sp, #64]
	ldr	r2, [sp, #60]
	add	r3, r3, #708
	ldr	r8, [fp, r3]
	rsb	r3, r9, #1024
	add	r7, r2, r9
	str	r3, [sp, #40]
	cmp	r8, #0
	add	r6, r8, #108
	mov	r0, r6
	beq	.L1725
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r8, #88]
	str	r0, [sp, #48]
	ldr	r3, [r8, #96]
	ldr	ip, [r8]
	ldr	r5, [r8, #8]
	cmp	r2, #0
	ldr	r2, [sp, #80]
	str	r3, [sp, #52]
	ldr	r3, [sp, #76]
	ldr	r4, [r8, #8]
	mov	r0, ip
	and	r5, r5, #1
	moveq	r3, r2
	cmp	ip, #0
	moveq	lr, ip
	str	r3, [sp, #44]
	ldr	r3, [r8, #92]
	ubfx	r4, r4, #1, #1
	str	r3, [sp, #56]
	beq	.L1727
	bl	smd_read_avail(PLT)
	ldr	r2, [r8]
	mov	ip, r0
	cmp	r2, #0
	mov	r0, r2
	moveq	lr, r2
	beq	.L1727
	str	ip, [sp, #68]
	bl	smd_write_avail(PLT)
	ldr	ip, [sp, #68]
	mov	lr, r0
.L1727:
	mov	r0, r7
	ldr	r7, [sp, #52]
	str	r8, [sp]
	ldr	r1, [sp, #40]
	str	r8, [sp, #4]
	mov	r3, r10
	ldr	r2, [sp, #72]
	str	r5, [sp, #20]
	str	r4, [sp, #24]
	str	r7, [sp, #8]
	ldr	r7, [sp, #56]
	str	ip, [sp, #28]
	str	lr, [sp, #32]
	str	r7, [sp, #12]
	ldr	r7, [sp, #44]
	str	r7, [sp, #16]
	bl	scnprintf(PLT)
	add	r9, r9, r0
	ldr	r1, [sp, #48]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
.L1725:
	add	fp, fp, #84
	add	r10, r10, #1
	cmp	fp, #504
	bne	.L1728
	ldr	r5, [sp, #60]
	str	r9, [sp]
	ldrd	r0, [sp, #84]
	ldr	r2, [sp, #92]
	mov	r3, r5
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
.L1724:
	add	sp, sp, #100
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1729:
	mov	r3, #16
	str	r3, [sp, #60]
	b	.L1723
.L1740:
	mvn	r0, #11
	b	.L1724
.L1742:
	.align	2
.L1741:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC380+8))
	.word	.LANCHOR1-(.LPIC378+8)
	.word	.LC113-(.LPIC379+8)
	.word	.LC111-(.LPIC375+8)
	.word	.LC112-(.LPIC376+8)
	.fnend
	.size	gsmd_ctrl_read_stats, .-gsmd_ctrl_read_stats
	.align	2
	.type	gctrl_read_stats, %function
gctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1763
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC388:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #68
	sub	sp, sp, #68
	str	r1, [sp, #52]
	strd	r2, [sp, #56]
	ldr	r0, [r0, #40]
	cmp	r0, #0
	beq	.L1750
	movw	r1, #32976
	mov	r2, #1024
	bl	kmem_cache_alloc_trace(PLT)
	subs	r9, r0, #0
	beq	.L1762
.L1744:
	ldr	r5, .L1763+4
.LPIC384:
	add	r5, pc, r5
	ldr	r3, [r5, #1212]
	cmp	r3, #0
	beq	.L1746
	ldr	r2, .L1763+8
	mov	r7, #0
	add	r5, r5, #1216
	ldr	fp, .L1763+12
	mov	r6, r7
.LPIC387:
	add	r2, pc, r2
.LPIC386:
	add	fp, pc, fp
	str	r2, [sp, #36]
	ldr	r2, .L1763+16
	str	fp, [sp, #48]
.LPIC381:
	add	r2, pc, r2
	str	r2, [sp, #40]
	ldr	r2, .L1763+20
.LPIC382:
	add	r2, pc, r2
	str	r2, [sp, #44]
.L1749:
	ldr	r4, [r5]
	cmp	r4, #0
	add	r8, r4, #4
	mov	r0, r8
	beq	.L1747
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	lr, [r4, #88]
	mov	r10, r0
	add	r0, r9, r7
	ldr	ip, [r4, #84]
	ldr	fp, [r4, #104]
	ldr	r3, [r5, #24]
	ldr	r2, [r4, #84]
	cmp	lr, #0
	ldr	r1, [r4, #100]
	and	ip, ip, #1
	ldr	lr, [r4, #96]
	str	fp, [sp, #16]
	ldr	fp, [sp, #44]
	str	ip, [sp, #24]
	ldr	ip, [sp, #40]
	ubfx	r2, r2, #1, #1
	str	r6, [sp]
	str	r1, [sp, #8]
	rsb	r1, r7, #1024
	str	r2, [sp, #28]
	ldr	r2, [sp, #48]
	moveq	ip, fp
	str	lr, [sp, #12]
	str	r4, [sp, #4]
	str	ip, [sp, #20]
	bl	scnprintf(PLT)
	add	r7, r7, r0
	mov	r1, r10
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [sp, #36]
	ldr	r3, [r3, #1212]
.L1747:
	add	r6, r6, #1
	add	r5, r5, #104
	cmp	r6, r3
	bcc	.L1749
	mov	r3, r7
.L1746:
	str	r3, [sp]
	ldrd	r0, [sp, #52]
	mov	r3, r9
	ldr	r2, [sp, #60]
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r9
	bl	kfree(PLT)
	mov	r0, r4
.L1745:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1750:
	mov	r9, #16
	b	.L1744
.L1762:
	mvn	r0, #11
	b	.L1745
.L1764:
	.align	2
.L1763:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC388+8))
	.word	.LANCHOR1-(.LPIC384+8)
	.word	.LANCHOR1-(.LPIC387+8)
	.word	.LC114-(.LPIC386+8)
	.word	.LC111-(.LPIC381+8)
	.word	.LC112-(.LPIC382+8)
	.fnend
	.size	gctrl_read_stats, .-gctrl_read_stats
	.align	2
	.type	ghsic_data_read_stats, %function
ghsic_data_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1783
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC395:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #68
	sub	sp, sp, #68
	str	r1, [sp, #52]
	strd	r2, [sp, #56]
	ldr	r0, [r0, #48]
	cmp	r0, #0
	beq	.L1771
	movw	r1, #32976
	mov	r2, #4096
	bl	kmem_cache_alloc_trace(PLT)
	subs	r10, r0, #0
	beq	.L1782
.L1766:
	ldr	r6, .L1783+4
.LPIC390:
	add	r6, pc, r6
	ldr	r3, [r6, #1632]
	cmp	r3, #0
	beq	.L1768
	ldr	r2, .L1783+8
	add	r6, r6, #1632
	mov	r5, #0
	add	r6, r6, #4
	mov	r7, r5
.LPIC392:
	add	r2, pc, r2
	str	r2, [sp, #40]
	ldr	r2, .L1783+12
.LPIC393:
	add	r2, pc, r2
	str	r2, [sp, #44]
	ldr	r2, .L1783+16
.LPIC394:
	add	r2, pc, r2
	str	r2, [sp, #48]
.L1770:
	ldr	r4, [r6]
	cmp	r4, #0
	add	r8, r4, #80
	add	r9, r4, #48
	mov	r0, r8
	beq	.L1769
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r1, [r4, #180]
	mov	fp, r0
	add	r0, r10, r5
	ldr	r2, [r4, #180]
	ldr	r3, [r6, #24]
	ldr	lr, [r4, #164]
	str	r7, [sp]
	and	r1, r1, #1
	str	r4, [sp, #4]
	ubfx	r2, r2, #1, #1
	str	r1, [sp, #8]
	rsb	r1, r5, #4096
	str	r2, [sp, #12]
	ldr	ip, [r4, #188]
	ubfx	lr, lr, #1, #1
	ldr	r2, [sp, #40]
	str	ip, [sp, #16]
	ldr	ip, [r4, #212]
	str	ip, [sp, #20]
	ldr	ip, [r4, #72]
	str	ip, [sp, #24]
	ldr	ip, [r4, #204]
	str	ip, [sp, #28]
	ldr	ip, [r4, #208]
	str	lr, [sp, #36]
	str	ip, [sp, #32]
	bl	scnprintf(PLT)
	add	r5, r0, r5
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	lr, [r4, #40]
	rsb	r1, r5, #4096
	mov	r8, r0
	ldr	r3, [r4, #192]
	add	r0, r10, r5
	ldr	ip, [r4, #164]
	ldr	r2, [sp, #44]
	str	lr, [sp]
	ldr	lr, [r4, #196]
	ubfx	ip, ip, #2, #1
	str	lr, [sp, #4]
	ldr	lr, [r4, #200]
	str	lr, [sp, #8]
	ldr	lr, [r4, #216]
	str	ip, [sp, #16]
	str	lr, [sp, #12]
	bl	scnprintf(PLT)
	add	r5, r0, r5
	mov	r1, r8
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [sp, #48]
	ldr	r3, [r3, #1632]
.L1769:
	add	r7, r7, #1
	add	r6, r6, #104
	cmp	r7, r3
	bcc	.L1770
	mov	r3, r5
.L1768:
	str	r3, [sp]
	ldrd	r0, [sp, #52]
	mov	r3, r10
	ldr	r2, [sp, #60]
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r10
	bl	kfree(PLT)
	mov	r0, r4
.L1767:
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1771:
	mov	r10, #16
	b	.L1766
.L1782:
	mvn	r0, #11
	b	.L1767
.L1784:
	.align	2
.L1783:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC395+8))
	.word	.LANCHOR1-(.LPIC390+8)
	.word	.LC115-(.LPIC392+8)
	.word	.LC116-(.LPIC393+8)
	.word	.LANCHOR1-(.LPIC394+8)
	.fnend
	.size	ghsic_data_read_stats, .-ghsic_data_read_stats
	.align	2
	.type	ghsuart_ctrl_read_stats, %function
ghsuart_ctrl_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1805
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC403:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #60
	sub	sp, sp, #60
	str	r1, [sp, #44]
	strd	r2, [sp, #48]
	ldr	r0, [r0, #40]
	cmp	r0, #0
	beq	.L1792
	movw	r1, #32976
	mov	r2, #1024
	bl	kmem_cache_alloc_trace(PLT)
	subs	r9, r0, #0
	beq	.L1804
.L1786:
	ldr	r8, .L1805+4
.LPIC399:
	add	r8, pc, r8
	ldr	r2, [r8, #2052]
	cmp	r2, #0
	beq	.L1788
	ldr	r3, .L1805+8
	mov	r5, #0
	mov	r6, r5
	mov	r4, r5
.LPIC401:
	add	r3, pc, r3
	str	r3, [sp, #28]
	ldr	r3, .L1805+12
.LPIC402:
	add	r3, pc, r3
	str	r3, [sp, #32]
	ldr	r3, .L1805+16
.LPIC396:
	add	r3, pc, r3
	str	r3, [sp, #36]
	ldr	r3, .L1805+20
.LPIC397:
	add	r3, pc, r3
	str	r3, [sp, #40]
.L1791:
	add	r3, r8, #2048
	add	r3, r3, #8
	ldr	fp, [r5, r3]
	add	r5, r5, #84
	cmp	fp, #0
	add	r7, fp, #8
	mov	r0, r7
	beq	.L1789
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [fp, #92]
	rsb	r1, r6, #1024
	mov	r10, r0
	ldr	ip, [sp, #40]
	add	r0, r9, r6
	ldr	lr, [fp, #100]
	ldr	r2, [fp, #96]
	cmp	r3, #0
	ldr	r3, [fp, #104]
	stmia	sp, {fp, lr}
	str	r2, [sp, #8]
	ldr	r2, [sp, #28]
	str	r3, [sp, #12]
	ldr	r3, [sp, #36]
	moveq	r3, ip
	str	r3, [sp, #16]
	mov	r3, r4
	bl	scnprintf(PLT)
	add	r6, r6, r0
	mov	r1, r10
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [sp, #32]
	ldr	r2, [r3, #2052]
.L1789:
	add	r4, r4, #1
	cmp	r4, r2
	bcc	.L1791
	mov	r2, r6
.L1788:
	str	r2, [sp]
	ldrd	r0, [sp, #44]
	mov	r3, r9
	ldr	r2, [sp, #52]
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r9
	bl	kfree(PLT)
	mov	r0, r4
.L1787:
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1792:
	mov	r9, #16
	b	.L1786
.L1804:
	mvn	r0, #11
	b	.L1787
.L1806:
	.align	2
.L1805:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC403+8))
	.word	.LANCHOR1-(.LPIC399+8)
	.word	.LC117-(.LPIC401+8)
	.word	.LANCHOR1-(.LPIC402+8)
	.word	.LC111-(.LPIC396+8)
	.word	.LC112-(.LPIC397+8)
	.fnend
	.size	ghsuart_ctrl_read_stats, .-ghsuart_ctrl_read_stats
	.align	2
	.type	ghsuart_data_read_stats, %function
ghsuart_data_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L1825
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC411:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #76
	sub	sp, sp, #76
	str	r1, [sp, #60]
	strd	r2, [sp, #64]
	ldr	r0, [r0, #40]
	cmp	r0, #0
	beq	.L1813
	movw	r1, #32976
	mov	r2, #1024
	bl	kmem_cache_alloc_trace(PLT)
	subs	r8, r0, #0
	beq	.L1824
.L1808:
	ldr	r0, .L1825+4
.LPIC405:
	add	r0, pc, r0
	ldr	r2, [r0, #2224]
	cmp	r2, #0
	beq	.L1810
	ldr	r1, .L1825+8
	mov	r6, #0
	add	fp, r0, #2224
	mov	r5, r6
	add	fp, fp, #4
	str	r0, [sp, #48]
	mov	r7, r6
.LPIC407:
	add	r1, pc, r1
	str	r1, [sp, #52]
	ldr	r1, .L1825+12
.LPIC409:
	add	r1, pc, r1
	str	r1, [sp, #56]
.L1812:
	ldr	r4, [r6, fp]
	cmp	r4, #0
	add	r9, r4, #104
	add	r10, r4, #72
	mov	r0, r9
	beq	.L1811
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r1, [r4, #188]
	add	r3, fp, r6
	str	r0, [sp, #44]
	ldr	r2, [r4, #188]
	add	r0, r8, r5
	ldr	lr, [r4, #188]
	ldr	r3, [r3, #24]
	and	r1, r1, #1
	ldr	ip, [r4, #184]
	str	r7, [sp]
	ubfx	r2, r2, #1, #1
	str	r4, [sp, #4]
	ubfx	lr, lr, #2, #1
	str	r1, [sp, #8]
	rsb	r1, r5, #1024
	str	r2, [sp, #12]
	ldr	r2, [sp, #52]
	str	lr, [sp, #16]
	ldr	lr, [r4, #204]
	ubfx	ip, ip, #1, #1
	str	lr, [sp, #20]
	ldr	lr, [r4, #212]
	str	lr, [sp, #24]
	ldr	lr, [r4, #96]
	str	ip, [sp, #32]
	str	lr, [sp, #28]
	bl	scnprintf(PLT)
	add	r5, r0, r5
	ldr	r1, [sp, #44]
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r10
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r4, #184]
	rsb	r1, r5, #1024
	mov	r9, r0
	ldr	lr, [r4, #64]
	add	r0, r8, r5
	ldr	r3, [r4, #208]
	ldr	r2, [sp, #56]
	ubfx	ip, ip, #2, #1
	str	lr, [sp]
	str	ip, [sp, #4]
	bl	scnprintf(PLT)
	add	r5, r0, r5
	mov	r1, r9
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [sp, #48]
	ldr	r2, [r3, #2224]
.L1811:
	add	r7, r7, #1
	add	r6, r6, #84
	cmp	r7, r2
	bcc	.L1812
	mov	r2, r5
.L1810:
	str	r2, [sp]
	ldrd	r0, [sp, #60]
	mov	r3, r8
	ldr	r2, [sp, #68]
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r8
	bl	kfree(PLT)
	mov	r0, r4
.L1809:
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1813:
	mov	r8, #16
	b	.L1808
.L1824:
	mvn	r0, #11
	b	.L1809
.L1826:
	.align	2
.L1825:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC411+8))
	.word	.LANCHOR1-(.LPIC405+8)
	.word	.LC118-(.LPIC407+8)
	.word	.LC119-(.LPIC409+8)
	.fnend
	.size	ghsuart_data_read_stats, .-ghsuart_data_read_stats
	.align	2
	.type	debug_read_stats, %function
debug_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L1837
	strd	r8, [sp, #16]
	mov	r9, r2
	mov	r8, r3
	strd	r10, [sp, #24]
	mov	r10, r1
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
.LPIC412:
	add	r6, pc, r6
	ldr	r4, [r6]
	cmp	r6, r4
	sub	r4, r4, #4
	beq	.L1831
	ldr	r5, .L1837+4
	mov	fp, #0
	ldr	r7, .L1837+8
.LPIC414:
	add	r5, pc, r5
	add	r5, r5, #2592
.LPIC415:
	add	r7, pc, r7
	add	r5, r5, #4
.L1830:
	ldr	ip, [r4, #20]
	add	r0, r5, fp
	rsb	r1, fp, #4096
	mov	r2, r7
	cmp	ip, #0
	beq	.L1829
	ldr	lr, [ip, #88]
	ldr	r3, [r4]
	ldr	lr, [lr, #4]
	str	lr, [sp]
	ldr	lr, [ip, #84]
	ldr	lr, [lr, #4]
	str	lr, [sp, #4]
	ldr	lr, [ip, #128]
	str	lr, [sp, #8]
	ldr	lr, [ip, #132]
	str	lr, [sp, #12]
	ldr	ip, [ip, #136]
	str	ip, [sp, #16]
	bl	scnprintf(PLT)
	add	fp, fp, r0
.L1829:
	ldr	r4, [r4, #4]
	cmp	r6, r4
	sub	r4, r4, #4
	bne	.L1830
.L1828:
	ldr	r3, .L1837+12
	str	fp, [sp]
	mov	r0, r10
	mov	r1, r9
	mov	r2, r8
.LPIC417:
	add	r3, pc, r3
	add	r3, r3, #2592
	add	r3, r3, #4
	bl	simple_read_from_buffer(PLT)
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1831:
	mov	fp, #0
	b	.L1828
.L1838:
	.align	2
.L1837:
	.word	.LANCHOR0-(.LPIC412+8)
	.word	.LANCHOR1-(.LPIC414+8)
	.word	.LC120-(.LPIC415+8)
	.word	.LANCHOR1-(.LPIC417+8)
	.fnend
	.size	debug_read_stats, .-debug_read_stats
	.section	.exit.text,"ax",%progbits
	.align	2
	.type	gether_exit, %function
gether_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1840
.LPIC418:
	add	r3, pc, r3
	ldr	r0, [r3, #-1492]
	b	destroy_workqueue(PLT)
.L1841:
	.align	2
.L1840:
	.word	.LANCHOR4-(.LPIC418+8)
	.fnend
	.size	gether_exit, .-gether_exit
	.text
	.align	2
	.type	qdss_function_cleanup, %function
qdss_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	ldr	r7, .L1850
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
.LPIC419:
	add	r7, pc, r7
	ldr	r5, [r7, #24]!
	cmp	r5, r7
	ldr	r4, [r5]
	beq	.L1842
	ldr	r3, .L1850+4
.LPIC421:
	add	r3, pc, r3
	sub	r8, r3, #1488
	mov	r9, r8
	b	.L1845
.L1847:
	mov	r4, r3
.L1845:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	ldr	r0, [r5, #80]
	bl	destroy_workqueue(PLT)
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L1849
.L1844:
	mov	r1, r6
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r4, r7
	ldr	r3, [r4]
	mov	r5, r4
	bne	.L1847
.L1842:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L1849:
	mov	r0, r5
	bl	list_del(PLT)
	sub	r0, r5, #116
	bl	kfree(PLT)
	b	.L1844
.L1851:
	.align	2
.L1850:
	.word	.LANCHOR0-(.LPIC419+8)
	.word	.LANCHOR4-(.LPIC421+8)
	.fnend
	.size	qdss_function_cleanup, .-qdss_function_cleanup
	.align	2
	.type	rmnet_smd_command_complete, %function
rmnet_smd_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r1, #32]
	cmp	r2, #0
	ldr	r8, [r4, #84]
	blt	.L1860
	add	r6, r4, #164
	mov	r7, r1
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #448]
	ldr	r2, [r4, #308]
	add	r3, r3, #1
	cmp	r2, #0
	str	r3, [r4, #448]
	beq	.L1861
.L1854:
	mov	r3, r4
	ldr	r5, [r3, #108]!
	cmp	r5, r3
	beq	.L1862
	mov	r0, r5
	bl	list_del(PLT)
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r1, [r7]
	ldr	r2, [r7, #48]
	ldr	r0, [r5, #-8]
	bl	memcpy(PLT)
	ldr	r3, [r7, #48]
	mov	r0, r6
	str	r3, [r5, #-4]
	bl	_raw_spin_lock(PLT)
	mov	r0, r5
	ldr	r1, [r4, #128]
	add	r2, r4, #124
	bl	__list_add(PLT)
	mov	r0, r6
.L1859:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L1861:
	ldr	r0, [r4, #260]
	bl	smd_write_avail(PLT)
	ldr	r3, [r7, #48]
	cmp	r0, r3
	strcc	r3, [r4, #308]
	bcc	.L1854
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #260]
	ldr	r1, [r7]
	ldr	r2, [r7, #48]
	bl	smd_write(PLT)
	ldr	r3, [r7, #48]
	cmp	r0, r3
	beq	.L1856
	ldr	r0, [r8]
	ldr	r1, .L1863
	add	r0, r0, #32
.LPIC425:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L1856:
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #452]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #452]
	b	.L1859
.L1860:
	ldr	r0, [r8]
	ldr	r1, .L1863+4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
.LPIC424:
	add	r1, pc, r1
	add	sp, sp, #24
	b	dev_err(PLT)
.L1862:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r8]
	ldr	r1, .L1863+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
.LPIC426:
	add	r1, pc, r1
	add	sp, sp, #24
	b	dev_err(PLT)
.L1864:
	.align	2
.L1863:
	.word	.LC122-(.LPIC425+8)
	.word	.LC121-(.LPIC424+8)
	.word	.LC123-(.LPIC426+8)
	.fnend
	.size	rmnet_smd_command_complete, .-rmnet_smd_command_complete
	.align	2
	.type	rmnet_smd_complete_epout, %function
rmnet_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r1, #44]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [r1, #32]
	cmn	r3, #104
	ldr	r7, [r4, #84]
	beq	.L1867
	cmp	r3, #0
	beq	.L1868
	cmn	r3, #108
	beq	.L1867
	ldr	r1, [r7]
	add	r6, r4, #164
	ldr	r2, [r0, #4]
	ldr	lr, [r5, #48]
	ldr	ip, [r5, #4]
	add	r0, r1, #32
	ldr	r1, .L1889
	str	lr, [sp]
	str	ip, [sp, #4]
.LPIC427:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L1886:
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r1, [r4, #152]
	add	r0, r5, #36
	add	r2, r4, #148
.L1885:
	bl	__list_add(PLT)
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock(PLT)
.L1867:
	add	r6, r4, #164
	b	.L1886
.L1868:
	add	r6, r4, #164
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #432]
	ldr	r2, [r4, #372]
	add	r3, r3, #1
	cmp	r2, #0
	str	r3, [r4, #432]
	bne	.L1869
	ldr	r0, [r4, #324]
	bl	smd_write_avail(PLT)
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #372]
	bcs	.L1887
.L1869:
	add	r0, r5, #36
	ldr	r1, [r4, #160]
	add	r2, r4, #156
	b	.L1885
.L1887:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #324]
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	smd_write(PLT)
	ldr	r3, [r5, #48]
	cmp	r0, r3
	beq	.L1871
	ldr	r0, [r7]
	ldr	r1, .L1889+4
	add	r0, r0, #32
.LPIC428:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L1871:
	mov	r0, r6
	add	r9, r4, #148
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #436]
	mov	r2, r9
	add	r0, r5, #36
	ldr	r1, [r4, #152]
	add	r3, r3, #1
	str	r3, [r4, #436]
	bl	__list_add(PLT)
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	mov	r0, r6
	ldr	r10, [r4, #84]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	b	.L1872
.L1874:
	bl	list_del(PLT)
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #88]
	mov	r1, r8
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r8, #0
	mov	r7, r0
	bne	.L1888
.L1872:
	ldr	r5, [r4, #148]
	cmp	r9, r5
	mov	r0, r5
	sub	r8, r5, #36
	bne	.L1874
.L1873:
	mov	r0, r6
	mov	r1, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L1888:
	ldr	r0, [r10]
	mov	r2, r8
	ldr	r1, .L1889+8
	add	r0, r0, #32
.LPIC429:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r5
	ldr	r1, [r4, #152]
	mov	r2, r9
	bl	__list_add(PLT)
	b	.L1873
.L1890:
	.align	2
.L1889:
	.word	.LC124-(.LPIC427+8)
	.word	.LC125-(.LPIC428+8)
	.word	.LC126-(.LPIC429+8)
	.fnend
	.size	rmnet_smd_complete_epout, .-rmnet_smd_complete_epout
	.align	2
	.type	rmnet_control_rx_tlet, %function
rmnet_control_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	add	r7, r0, #124
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #124]
	mov	r10, r0
	cmp	r7, r5
	addne	r8, r4, #108
	bne	.L1897
	b	.L1896
.L1894:
	bl	list_del(PLT)
	ldr	r3, [r4, #448]
	mov	r1, r10
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #448]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldmdb	r5, {r1, r2}
	ldr	r0, [r4, #260]
	bl	smd_write(PLT)
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #-4]
	mov	r10, r0
	mov	r2, r8
	mov	r0, r5
	cmp	r3, fp
	bne	.L1899
	ldr	r3, [r4, #452]
	ldr	r1, [r4, #112]
	add	r3, r3, #1
	str	r3, [r4, #452]
	bl	__list_add(PLT)
	ldr	r5, [r4, #124]
	cmp	r5, r7
	beq	.L1896
.L1897:
	ldr	r0, [r4, #260]
	bl	smd_write_avail(PLT)
	ldr	r3, [r5, #-4]
	cmp	r0, r3
	mov	r0, r5
	bge	.L1894
	str	r3, [r4, #308]
.L1893:
	mov	r0, r6
	mov	r1, r10
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L1896:
	mov	r3, #0
	str	r3, [r4, #308]
	b	.L1893
.L1899:
	ldr	r0, [r9]
	ldr	r1, .L1900
	add	r0, r0, #32
.LPIC430:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L1893
.L1901:
	.align	2
.L1900:
	.word	.LC122-(.LPIC430+8)
	.fnend
	.size	rmnet_control_rx_tlet, .-rmnet_control_rx_tlet
	.align	2
	.type	grmnet_ctrl_smd_write_w, %function
grmnet_ctrl_smd_write_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r6, [r0, #16]
	add	r6, r6, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	ldr	r0, [r5, #-68]
	cmp	r0, #0
	beq	.L1903
	ldr	r4, [r5, #-28]
	sub	r8, r5, #28
	cmp	r8, r4
	bne	.L1905
	b	.L1903
.L1913:
	bl	list_del(PLT)
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldmdb	r4, {r1, r2}
	ldr	r0, [r5, #-68]
	bl	smd_write(PLT)
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #-4]
	mov	r7, r0
	cmp	r3, r10
	bne	.L1912
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	ldr	r3, [r5, #24]
	ldr	r0, [r5, #-68]
	add	r3, r3, #1
	cmp	r0, #0
	str	r3, [r5, #24]
	beq	.L1903
	ldr	r4, [r5, #-28]
	cmp	r4, r8
	beq	.L1903
.L1905:
	bl	smd_write_avail(PLT)
	ldr	r3, [r4, #-4]
	sub	r9, r4, #8
	cmp	r0, r3
	mov	r0, r4
	bge	.L1913
.L1903:
	mov	r0, r6
	mov	r1, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L1912:
	ldr	r1, .L1914
	mov	r2, r10
	ldr	r0, .L1914+4
.LPIC432:
	add	r1, pc, r1
	add	r1, r1, #768
.LPIC431:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	b	.L1903
.L1915:
	.align	2
.L1914:
	.word	.LANCHOR3-(.LPIC432+8)
	.word	.LC127-(.LPIC431+8)
	.fnend
	.size	grmnet_ctrl_smd_write_w, .-grmnet_ctrl_smd_write_w
	.align	2
	.type	rmnet_smd_complete_epin, %function
rmnet_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
	ldr	r4, [r1, #32]
	cmn	r2, #104
	ldr	r3, [r4, #84]
	beq	.L1918
	cmp	r2, #0
	beq	.L1919
	cmn	r2, #108
	beq	.L1918
	ldr	r0, [r3]
	ldr	r1, .L1939
	add	r0, r0, #32
.LPIC433:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L1919:
	add	r6, r4, #164
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #140]
	add	r2, r4, #140
	cmp	r3, r2
	beq	.L1938
	add	r0, r5, #36
	ldr	r1, [r4, #144]
	bl	__list_add(PLT)
	ldr	r3, [r4, #424]
	add	r3, r3, #1
	str	r3, [r4, #424]
.L1923:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
.L1918:
	add	r6, r4, #164
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	add	r0, r5, #36
	ldr	r1, [r4, #144]
	add	r2, r4, #140
	bl	__list_add(PLT)
	b	.L1923
.L1938:
	add	r0, r5, #36
	mov	r2, r3
	ldr	r1, [r4, #144]
	bl	__list_add(PLT)
	ldr	r3, [r4, #424]
	mov	r0, #0
	add	r1, r4, #332
	add	r5, r4, #328
	add	r3, r3, #1
	str	r3, [r4, #424]
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	bne	.L1923
	mov	r0, r5
	bl	__tasklet_schedule(PLT)
	b	.L1923
.L1940:
	.align	2
.L1939:
	.word	.LC128-(.LPIC433+8)
	.fnend
	.size	rmnet_smd_complete_epin, .-rmnet_smd_complete_epin
	.align	2
	.type	rmnet_smd_setup, %function
rmnet_smd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #20]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r0, #168]
	ldrh	r10, [r1, #4]	@ unaligned
	ldrh	r7, [r1, #2]	@ unaligned
	ldr	r6, [r2, #24]
	cmp	r3, #0
	ldrh	r4, [r1, #6]	@ unaligned
	ldr	r5, [r6, #4]
	beq	.L1954
	mov	r8, r0
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	movw	r2, #8482
	ldrb	r0, [r1]	@ zero_extendqisi2
	orr	r3, r3, r0, asl #8
	cmp	r3, r2
	beq	.L1943
	movw	r2, #41217
	cmp	r3, r2
	beq	.L1944
	cmp	r3, #8448
	beq	.L1965
.L1956:
	mvn	r0, #94
.L1960:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1944:
	cmp	r7, #0
	bne	.L1956
	add	r9, r8, #164
	str	r1, [sp, #20]
	mov	r0, r9
	bl	_raw_spin_lock(PLT)
	mov	r3, r8
	ldr	r1, [sp, #20]
	ldr	fp, [r3, #132]!
	cmp	fp, r3
	beq	.L1966
	mov	r0, fp
	bl	list_del(PLT)
	mov	r0, r9
	bl	_raw_spin_unlock(PLT)
	ldmdb	fp, {r1, r2}
	ldr	r0, [r5]
	bl	memcpy(PLT)
	mov	r0, r9
	ldr	r4, [fp, #-4]
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r8, #116]
	add	r2, r8, #116
	cmp	r3, r2
	beq	.L1967
	mov	r0, fp
	ldr	r1, [r8, #120]
	bl	__list_add(PLT)
.L1953:
	mov	r0, r9
	bl	_raw_spin_unlock(PLT)
	ldr	r3, .L1969
	str	r8, [r5, #32]
.LPIC436:
	add	r3, pc, r3
	str	r3, [r5, #28]
	b	.L1950
.L1965:
	ldr	r3, .L1969+4
	str	r8, [r5, #32]
.LPIC434:
	add	r3, pc, r3
	str	r3, [r5, #28]
.L1946:
	ldrb	r3, [r5, #26]	@ zero_extendqisi2
	str	r4, [r5, #4]
	mov	r1, r5
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r5, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L1968
.L1958:
	mov	r0, r4
	b	.L1960
.L1943:
	ands	r1, r7, #1
	ldr	r0, [r8, #260]
	movne	r1, #2
	movne	r2, #0
	moveq	r2, #2
	bl	smd_tiocmset(PLT)
	mov	r4, r0
.L1950:
	cmp	r4, #0
	bge	.L1946
	b	.L1958
.L1968:
	ldr	r0, [r6]
	mov	r2, r4
	ldr	r1, .L1969+8
	add	r0, r0, #32
.LPIC437:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r4
	b	.L1960
.L1954:
	mvn	r0, #106
	b	.L1960
.L1967:
	mov	r0, fp
	mov	r2, r3
	ldr	r1, [r8, #120]
	bl	__list_add(PLT)
	mov	r0, r7
	add	r1, r8, #268
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	add	r0, r8, #264
	bne	.L1953
	bl	__tasklet_schedule(PLT)
	b	.L1953
.L1966:
	ldr	r0, [r6]
	str	r7, [sp]
	ldrb	r2, [r1]	@ zero_extendqisi2
	str	r10, [sp, #4]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	str	r4, [sp, #8]
	ldr	r1, .L1969+12
	add	r0, r0, #32
.LPIC435:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	mov	r0, r9
	bl	_raw_spin_unlock(PLT)
	mvn	r0, #94
	b	.L1960
.L1970:
	.align	2
.L1969:
	.word	rmnet_txcommand_complete-(.LPIC436+8)
	.word	rmnet_smd_command_complete-(.LPIC434+8)
	.word	.LC68-(.LPIC437+8)
	.word	.LC95-(.LPIC435+8)
	.fnend
	.size	rmnet_smd_setup, .-rmnet_smd_setup
	.section	.exit.text
	.align	2
	.type	ghsuart_ctrl_exit, %function
ghsuart_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1972
.LPIC438:
	add	r3, pc, r3
	ldr	r0, [r3, #-1484]
	b	debugfs_remove_recursive(PLT)
.L1973:
	.align	2
.L1972:
	.word	.LANCHOR4-(.LPIC438+8)
	.fnend
	.size	ghsuart_ctrl_exit, .-ghsuart_ctrl_exit
	.align	2
	.type	ghsuart_data_exit, %function
ghsuart_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L1975
.LPIC439:
	add	r3, pc, r3
	ldr	r0, [r3, #-1480]
	b	debugfs_remove_recursive(PLT)
.L1976:
	.align	2
.L1975:
	.word	.LANCHOR4-(.LPIC439+8)
	.fnend
	.size	ghsuart_data_exit, .-ghsuart_data_exit
	.text
	.align	2
	.type	diag_function_cleanup, %function
diag_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L1985
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	ldr	r7, .L1985+4
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
.LPIC446:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
.LPIC441:
	add	r7, pc, r7
	ldr	r0, [r3]
	bl	debugfs_remove_recursive(PLT)
	ldr	r5, [r7]
	cmp	r5, r7
	ldr	r4, [r5]
	beq	.L1977
	ldr	r6, .L1985+8
.LPIC443:
	add	r6, pc, r6
	sub	r6, r6, #1472
	sub	r6, r6, #4
	mov	r8, r6
	b	.L1980
.L1982:
	mov	r4, r3
.L1980:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #12]
	mov	r1, r0
	cmp	r3, #0
	beq	.L1984
.L1979:
	mov	r0, r8
	mov	r5, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r4, r7
	ldr	r3, [r4]
	bne	.L1982
.L1977:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L1984:
	str	r0, [sp, #4]
	sub	r9, r5, #4
	mov	r0, r5
	bl	list_del(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	ldr	r1, [sp, #4]
	b	.L1979
.L1986:
	.align	2
.L1985:
	.word	dent_diag(GOT_PREL)+(.-(.LPIC446+8))
	.word	.LANCHOR0-(.LPIC441+8)
	.word	.LANCHOR4-(.LPIC443+8)
	.fnend
	.size	diag_function_cleanup, .-diag_function_cleanup
	.align	2
	.type	rmnet_data_tx_tlet, %function
rmnet_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	strd	r8, [sp, #16]
	add	r8, r0, #140
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #84]
	b	.L1991
.L1999:
	ldr	r0, [r4, #324]
	bl	smd_read_avail(PLT)
	cmp	r7, r0
	mov	r0, r6
	bgt	.L1987
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #140]
	mov	r10, r0
	cmp	r8, r5
	mov	r0, r5
	sub	fp, r5, #36
	beq	.L1997
	bl	list_del(PLT)
	mov	r0, r6
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r2, r7
	ldr	r1, [r5, #-36]
	ldr	r0, [r4, #324]
	bl	smd_read(PLT)
	str	r0, [r5, #-32]
	ldr	r0, [r4, #92]
	mov	r2, #32
	mov	r1, fp
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	mov	r0, r6
	bne	.L1998
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #428]
	mov	r1, r0
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #428]
	bl	_raw_spin_unlock_irqrestore(PLT)
.L1991:
	ldr	r0, [r4, #324]
	bl	smd_cur_packet_size(PLT)
	subs	r7, r0, #0
	bne	.L1999
.L1987:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L1997:
	mov	r0, r6
	mov	r1, r10
.L1996:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L1998:
	ldr	r0, [r9]
	ldr	r1, .L2000
	add	r0, r0, #32
.LPIC447:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	ldr	r1, [r4, #144]
	mov	r0, r5
	mov	r2, r8
	bl	__list_add(PLT)
	mov	r0, r6
	mov	r1, r7
	b	.L1996
.L2001:
	.align	2
.L2000:
	.word	.LC129-(.LPIC447+8)
	.fnend
	.size	rmnet_data_tx_tlet, .-rmnet_data_tx_tlet
	.align	2
	.type	rmnet_control_tx_tlet, %function
rmnet_control_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L2015
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
.LPIC449:
	add	r3, pc, r3
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	ldr	r3, [r0, #84]
	str	r3, [sp, #4]
.L2007:
	add	r9, r4, #116
.L2006:
	add	r8, r4, #132
.L2005:
	ldr	r0, [r4, #260]
	add	r5, r4, #172
	bl	smd_cur_packet_size(PLT)
	subs	r7, r0, #0
	beq	.L2002
	ldr	r0, [r4, #260]
	bl	smd_read_avail(PLT)
	cmp	r7, r0
	mov	r0, r6
	bgt	.L2002
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r10, [r4, #116]
	mov	fp, r0
	cmp	r10, r9
	mov	r0, r10
	beq	.L2014
	bl	list_del(PLT)
	mov	r0, r6
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r2, r7
	ldr	r1, [r10, #-8]
	ldr	r0, [r4, #260]
	bl	smd_read(PLT)
	str	r0, [r10, #-4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #444]
	mov	r7, r0
	mov	r2, r8
	mov	r0, r10
	ldr	r1, [r4, #136]
	add	r3, r3, #1
	str	r3, [r4, #444]
	bl	__list_add(PLT)
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #100]
	ldr	r7, [r4, #84]
	ldr	r3, [r3]
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r5]
	add	r2, r2, #1
	strex	r1, r2, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #1
	bne	.L2005
	mov	r1, #0
	mvn	r0, #94
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r0, [r3]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrb	r0, [r4, #104]	@ zero_extendqisi2
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	strh	r0, [r3, #4]	@ unaligned
	ldrd	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L2006
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r1, r3, [r5]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r0, [r7]
	ldr	r1, [sp]
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L2007
.L2002:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2014:
	ldr	r3, [sp, #4]
	ldr	r1, .L2015+4
	ldr	r0, [r3]
.LPIC448:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r0, r6
	mov	r1, fp
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L2016:
	.align	2
.L2015:
	.word	.LC12-(.LPIC449+8)
	.word	.LC130-(.LPIC448+8)
	.fnend
	.size	rmnet_control_tx_tlet, .-rmnet_control_tx_tlet
	.align	2
	.type	rmnet_mux_smd_data_tx_tlet, %function
rmnet_mux_smd_data_tx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #372]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r0, #84]
	cmp	r3, #0
	beq	.L2017
	mov	r4, r0
	add	r7, r0, #368
	add	r8, r0, #104
	b	.L2029
.L2034:
	ldr	r0, [r4, #128]
	bl	smd_read_avail(PLT)
	cmp	r6, r0
	mov	r0, r7
	bgt	.L2017
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #104]
	mov	r10, r0
	cmp	r8, r5
	mov	r0, r5
	sub	fp, r5, #36
	beq	.L2032
	bl	list_del(PLT)
	mov	r0, r7
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r2, r6
	ldr	r1, [r5, #-36]
	ldr	r0, [r4, #128]
	bl	smd_read(PLT)
	str	r0, [r5, #-32]
	ldr	r0, [r4, #92]
	mov	r1, fp
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L2033
	ldr	r3, [r4, #408]
	ldr	r2, [r4, #372]
	add	r3, r3, #1
	cmp	r2, #0
	str	r3, [r4, #408]
	beq	.L2017
.L2029:
	ldr	r0, [r4, #128]
	bl	smd_cur_packet_size(PLT)
	subs	r6, r0, #0
	bne	.L2034
.L2017:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2032:
	mov	r0, r7
	mov	r1, r10
.L2031:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L2033:
	ldr	r3, [r9]
	mov	r2, r0
	ldr	r1, .L2035
	add	r0, r3, #32
.LPIC450:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	ldr	r1, [r4, #108]
	mov	r0, r5
	mov	r2, r8
	bl	__list_add(PLT)
	mov	r0, r7
	mov	r1, r6
	b	.L2031
.L2036:
	.align	2
.L2035:
	.word	.LC129-(.LPIC450+8)
	.fnend
	.size	rmnet_mux_smd_data_tx_tlet, .-rmnet_mux_smd_data_tx_tlet
	.align	2
	.type	gsmd_disconnect_work, %function
gsmd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #-56]
	ldr	r0, [r3]
	bl	smd_close(PLT)
	ldr	r3, [r4, #-56]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	gsmd_disconnect_work, .-gsmd_disconnect_work
	.align	2
	.type	rmnet_smd_disconnect_work, %function
rmnet_smd_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	sub	r0, r0, #124
	str	lr, [sp, #20]
	mov	r4, #0
	strd	r6, [sp, #8]
	mov	r7, r5
	str	r8, [sp, #16]
	bl	tasklet_kill(PLT)
	sub	r0, r5, #144
	bl	tasklet_kill(PLT)
	sub	r0, r5, #60
	bl	tasklet_kill(PLT)
	sub	r0, r5, #80
	bl	tasklet_kill(PLT)
	ldr	r0, [r5, #-148]
	bl	smd_close(PLT)
	str	r4, [r5, #-104]
	ldr	r0, [r5, #-84]
	bl	smd_close(PLT)
	str	r4, [r5, #-40]
	str	r4, [r5, #-236]
	ldr	r6, [r7, #-252]!
	cmp	r6, r7
	ldr	r4, [r6]
	subne	r8, r5, #260
	beq	.L2044
.L2043:
	mov	r0, r6
	bl	list_del(PLT)
	mov	r0, r6
	ldr	r1, [r5, #-256]
	mov	r2, r8
	bl	__list_add(PLT)
	cmp	r7, r4
	mov	r6, r4
	ldr	r4, [r4]
	bne	.L2043
.L2044:
	mov	r7, r5
	ldr	r6, [r7, #-284]!
	cmp	r6, r7
	ldr	r4, [r6]
	subne	r8, r5, #300
	beq	.L2042
.L2047:
	mov	r0, r6
	bl	list_del(PLT)
	mov	r0, r6
	ldr	r1, [r5, #-296]
	mov	r2, r8
	bl	__list_add(PLT)
	cmp	r7, r4
	mov	r6, r4
	ldr	r4, [r4]
	bne	.L2047
.L2042:
	mov	r7, r5
	ldr	r6, [r7, #-276]!
	cmp	r6, r7
	ldr	r4, [r6]
	subne	r8, r5, #292
	beq	.L2046
.L2050:
	mov	r0, r6
	bl	list_del(PLT)
	mov	r0, r6
	ldr	r1, [r5, #-288]
	mov	r2, r8
	bl	__list_add(PLT)
	cmp	r7, r4
	mov	r6, r4
	ldr	r4, [r4]
	bne	.L2050
.L2046:
	ldrb	r3, [r5, #-152]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L2039
	sub	r0, r5, #232
	bl	platform_driver_unregister(PLT)
	mov	r3, #0
	strb	r3, [r5, #-152]
.L2039:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	rmnet_smd_disconnect_work, .-rmnet_smd_disconnect_work
	.section	.exit.text
	.align	2
	.type	cleanup, %function
cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, .L2057
.LPIC451:
	add	r0, pc, r0
	add	r0, r0, #32
	b	platform_driver_unregister(PLT)
.L2058:
	.align	2
.L2057:
	.word	.LANCHOR0-(.LPIC451+8)
	.fnend
	.size	cleanup, .-cleanup
	.text
	.align	2
	.type	grmnet_ctrl_smd_read_w, %function
grmnet_ctrl_smd_read_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #32]
	.pad #36
	sub	sp, sp, #36
	str	r3, [sp, #4]
	add	r3, r3, #108
	mov	r0, r3
	str	r3, [sp]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r5, r0
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	beq	.L2060
	mov	r3, sp
	bic	r10, r3, #8128
	bic	r10, r10, #63
.L2072:
	bl	smd_cur_packet_size(PLT)
	subs	r8, r0, #0
	ble	.L2060
	mov	r1, r5
	ldr	r0, [sp]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r8
	mov	r1, #208
	bl	__kmalloc(PLT)
	subs	r9, r0, #0
	beq	.L2059
	mov	r7, #0
.L2070:
	ldr	r0, [r4, #-52]
	bl	smd_read_avail(PLT)
	subs	fp, r0, #0
	bne	.L2062
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	beq	.L2063
	ldr	r1, .L2097
	add	r3, sp, #24
	add	r5, sp, #12
	ldr	r0, [r10, #12]
	sub	r6, r4, #28
	str	fp, [sp, #12]
	str	r3, [sp, #24]
	str	r3, [sp, #28]
.LPIC459:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	strd	r0, [sp, #16]
	b	.L2065
.L2094:
	ldr	r3, [r4, #-52]
	cmp	r3, #0
	beq	.L2064
	bl	schedule(PLT)
.L2065:
	mov	r0, r6
	mov	r1, r5
	mov	r2, #2
	bl	prepare_to_wait(PLT)
	ldr	r0, [r4, #-52]
	bl	smd_read_avail(PLT)
	subs	fp, r0, #0
	beq	.L2094
.L2064:
	mov	r0, r6
	mov	r1, r5
	bl	finish_wait(PLT)
.L2062:
	cmp	fp, #0
	ldr	r0, [r4, #-52]
	blt	.L2063
	cmp	r0, #0
	beq	.L2063
	add	r3, fp, r7
	cmp	r8, r3
	blt	.L2095
	mov	r2, fp
	add	r1, r9, r7
	bl	smd_read(PLT)
	cmp	r0, #0
	ble	.L2096
	add	r7, r7, r0
	cmp	r8, r7
	bgt	.L2070
	ldr	r0, [sp]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp, #4]
	mov	r5, r0
	ldr	r0, [r3, #104]
	cmp	r0, #0
	beq	.L2071
	ldr	r3, [r0, #92]
	cmp	r3, #0
	beq	.L2071
	mov	r2, r8
	mov	r1, r9
	blx	r3
	ldr	r3, [r4, #44]
	add	r3, r3, #1
	str	r3, [r4, #44]
.L2071:
	mov	r0, r9
	bl	kfree(PLT)
	ldr	r0, [r4, #-52]
	cmp	r0, #0
	bne	.L2072
.L2060:
	ldr	r0, [sp]
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
.L2059:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2063:
	ldr	r1, .L2097+4
	mov	r3, r0
	mov	r2, fp
	ldr	r0, .L2097+8
.LPIC454:
	add	r1, pc, r1
	add	r1, r1, #792
.LPIC453:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	b	.L2059
.L2096:
	ldr	r1, .L2097+12
	mov	r2, r0
	ldr	r0, .L2097+16
.LPIC458:
	add	r1, pc, r1
	add	r1, r1, #792
.LPIC457:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	b	.L2059
.L2095:
	ldr	r1, .L2097+20
	ldr	r0, .L2097+24
.LPIC456:
	add	r1, pc, r1
	add	r1, r1, #792
.LPIC455:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	b	.L2059
.L2098:
	.align	2
.L2097:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC459+8))
	.word	.LANCHOR3-(.LPIC454+8)
	.word	.LC131-(.LPIC453+8)
	.word	.LANCHOR3-(.LPIC458+8)
	.word	.LC133-(.LPIC457+8)
	.word	.LANCHOR3-(.LPIC456+8)
	.word	.LC132-(.LPIC455+8)
	.fnend
	.size	grmnet_ctrl_smd_read_w, .-grmnet_ctrl_smd_read_w
	.align	2
	.type	conn_gadget_function_disable, %function
conn_gadget_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	ldr	r0, .L2101
	str	lr, [sp, #12]
	mov	r5, #0
	str	r6, [sp, #8]
	ldr	r1, [r4, #84]
	mov	r6, #1
.LPIC460:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [r4, #100]
	str	r6, [r4, #104]
	ldr	r0, [r4, #92]
	str	r5, [r4, #100]
	str	r3, [r4, #212]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	add	r0, r4, #200
	mov	r2, r6
	mov	r3, r5
	mov	r1, #3
	bl	__wake_up(PLT)
	ldr	lr, [sp, #12]
	add	r0, r4, #144
	mov	r2, r6
	mov	r3, r5
	ldr	r6, [sp, #8]
	mov	r1, #3
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	__wake_up(PLT)
.L2102:
	.align	2
.L2101:
	.word	.LC134-(.LPIC460+8)
	.fnend
	.size	conn_gadget_function_disable, .-conn_gadget_function_disable
	.align	2
	.type	acc_function_disable, %function
acc_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldrb	r3, [r0, #100]	@ zero_extendqisi2
	ldr	r2, [r0, #92]
	and	r3, r3, #254
	orr	r3, r3, #2
	mov	r0, r2
	strb	r3, [r4, #100]
	ldr	r3, [r2, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #4]
	add	r0, r4, #1664
	mov	r1, #3
	ldr	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	add	sp, sp, #8
	b	__wake_up(PLT)
	.fnend
	.size	acc_function_disable, .-acc_function_disable
	.align	2
	.type	acc_complete_out, %function
acc_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L2107
	mov	r2, #1
.LPIC461:
	add	r3, pc, r3
	ldr	r0, [r3, #2496]
	str	r2, [r0, #1696]
	ldr	r3, [r1, #44]
	cmn	r3, #108
	bne	.L2106
	ldrb	r3, [r0, #100]	@ zero_extendqisi2
	and	r3, r3, #254
	orr	r3, r3, #2
	strb	r3, [r0, #100]
.L2106:
	add	r0, r0, #1664
	mov	r1, #3
	mov	r2, #1
	mov	r3, #0
	b	__wake_up(PLT)
.L2108:
	.align	2
.L2107:
	.word	.LANCHOR1-(.LPIC461+8)
	.fnend
	.size	acc_complete_out, .-acc_complete_out
	.align	2
	.type	mtp_function_ctrlrequest, %function
mtp_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	ldr	r3, .L2141
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r1, [r2]	@ zero_extendqisi2
.LPIC462:
	add	r3, pc, r3
	ldrh	r0, [r2, #4]	@ unaligned
	ldrh	r6, [r2, #2]	@ unaligned
	ldrh	r5, [r2, #6]	@ unaligned
	cmp	r1, #128
	ldr	r7, [r3, #2504]
	beq	.L2135
	and	r3, r1, #96
	cmp	r3, #64
	beq	.L2136
	cmp	r3, #32
	bne	.L2131
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #100
	beq	.L2137
	cmp	r3, #103
	bne	.L2131
	orrs	r3, r6, r0
	bne	.L2131
	ldr	r2, [r4, #4]
	mov	r3, #4
	add	r10, r7, #88
	cmp	r5, r3
	mov	r0, r10
	mov	r6, r3
	movle	r8, #0
	movgt	r8, #1
	mov	r5, r3
	ldr	r9, [r2]
	strh	r3, [r9]	@ movhi
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r7, #104]
	movw	r2, #8217
	movw	r3, #8193
	mov	r1, r0
	mov	r0, r10
	cmp	ip, #3
	moveq	r3, r2
	strh	r3, [r9, #2]	@ movhi
	bl	_raw_spin_unlock_irqrestore(PLT)
.L2114:
	ldr	r3, [r4, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfi	r1, r8, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r4, #4]
	str	r6, [r3, #4]
	ldr	r3, [r4]
	ldr	r1, [r4, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bge	.L2133
	ldr	r2, .L2141+4
	ldr	r0, [r4]
	ldr	r1, .L2141+8
.LPIC466:
	add	r2, pc, r2
	add	r2, r2, #816
	add	r0, r0, #32
.LPIC465:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L2133
.L2135:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #6
	beq	.L2138
.L2131:
	mvn	r5, #94
.L2133:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2136:
	ldrb	r3, [r2, #1]	@ zero_extendqisi2
	cmp	r3, #1
	bne	.L2131
	tst	r1, #128
	beq	.L2131
	sub	r0, r0, #4
	cmp	r0, #1
	bhi	.L2131
	cmp	r5, #39
	movls	r8, #0
	movls	r6, r5
	bhi	.L2139
.L2117:
	ldr	r3, [r4, #4]
	mov	r2, r6
	ldr	r1, .L2141+12
	ldr	r0, [r3]
.LPIC467:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	bl	memcpy(PLT)
	b	.L2114
.L2137:
	orrs	r6, r6, r0
	bne	.L2131
	add	r8, r7, #88
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r7, #104]
	mov	r9, r0
	cmp	r3, #2
	beq	.L2140
.L2119:
	mov	r0, r8
	mov	r1, r9
	mov	r8, #0
	mov	r6, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L2114
.L2139:
	mov	r6, #40
	cmp	r5, r6
	mov	r5, r6
	movle	r8, #0
	movgt	r8, #1
	b	.L2117
.L2138:
	mov	r3, r6, lsr #8
	cmp	r3, #3
	bne	.L2131
	uxtb	r6, r6
	cmp	r6, #238
	bne	.L2131
	cmp	r5, #17
	movls	r8, #0
	movls	r6, r5
	bls	.L2113
	mov	r6, #18
	cmp	r5, r6
	mov	r5, r6
	movle	r8, #0
	movgt	r8, #1
.L2113:
	ldr	r1, .L2141+16
	mov	r2, r6
	ldr	r3, [r4, #4]
.LPIC463:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r1, r1, #236
	bl	memcpy(PLT)
	b	.L2114
.L2140:
	mov	r10, #3
	add	r0, r7, #132
	mov	r1, r10
	mov	r3, r6
	mov	r2, #1
	str	r10, [r7, #104]
	bl	__wake_up(PLT)
	mov	r1, r10
	add	r0, r7, #144
	mov	r3, r6
	mov	r2, #1
	bl	__wake_up(PLT)
	b	.L2119
.L2142:
	.align	2
.L2141:
	.word	.LANCHOR1-(.LPIC462+8)
	.word	.LANCHOR3-(.LPIC466+8)
	.word	.LC135-(.LPIC465+8)
	.word	mtp_ext_config_desc(GOT_PREL)+(.-(.LPIC467+8))
	.word	.LANCHOR2-(.LPIC463+8)
	.fnend
	.size	mtp_function_ctrlrequest, .-mtp_function_ctrlrequest
	.align	2
	.type	mtp_function_disable, %function
mtp_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r0, [r0, #92]
	str	r5, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r6, [sp, #8]
	add	r0, r4, #132
	mov	r3, r5
	ldr	lr, [sp, #12]
	mov	r1, #3
	mov	r2, #1
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	__wake_up(PLT)
	.fnend
	.size	mtp_function_disable, .-mtp_function_disable
	.align	2
	.type	mtp_complete_out, %function
mtp_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L2150
	mov	r2, #1
.LPIC468:
	add	r3, pc, r3
	ldr	r0, [r3, #2504]
	str	r2, [r0, #176]
	ldr	r3, [r1, #44]
	add	r0, r0, #132
	mov	r1, #3
	mov	r2, #1
	cmp	r3, #0
	movne	r3, #4
	strne	r3, [r0, #-28]
	mov	r3, #0
	b	__wake_up(PLT)
.L2151:
	.align	2
.L2150:
	.word	.LANCHOR1-(.LPIC468+8)
	.fnend
	.size	mtp_complete_out, .-mtp_complete_out
	.align	2
	.type	ccid_function_setup, %function
ccid_function_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0, #20]
	ldr	r3, [r0, #96]
	ldrh	r6, [r1, #2]	@ unaligned
	ldrh	r4, [r1, #6]	@ unaligned
	ldr	lr, [r2, #24]
	cmp	r3, #0
	ldr	r2, [lr, #4]
	beq	.L2159
	ldrb	r5, [r1]	@ zero_extendqisi2
	mov	ip, r0
	movw	r0, #41218
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	orr	r3, r3, r5, asl #8
	cmp	r3, r0
	beq	.L2154
	movw	r1, #41219
	cmp	r3, r1
	beq	.L2155
	movw	r2, #8449
	cmp	r3, r2
	beq	.L2167
.L2163:
	mvn	r0, #94
.L2165:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2155:
	ldr	r3, [r2, #4]
	cmp	r4, r3
	bhi	.L2163
	ldr	r3, .L2168
	cmp	r4, #4
	ldr	r1, [r2]
	movcs	r4, #4
.LPIC470:
	add	r3, pc, r3
	ldr	r3, [r3, #275]	@ unaligned
	str	r3, [r1]
	b	.L2157
.L2167:
	cmp	r4, #0
	bne	.L2163
	mov	r3, r6, lsr #8
	mov	lr, #1
	strb	r6, [ip, #141]
	add	r0, ip, #128
	strb	r4, [ip, #143]
	mov	r2, lr
	strb	lr, [ip, #140]
	mov	r1, #3
	strb	r3, [ip, #142]
	mov	r3, r4
	str	lr, [ip, #144]
	bl	__wake_up(PLT)
	mov	r0, r4
	b	.L2165
.L2154:
	ldr	r3, [r2, #4]
	cmp	r4, r3
	bhi	.L2163
	ldr	r3, .L2168+4
	cmp	r4, #4
	ldr	r1, [r2]
	movcs	r4, #4
.LPIC469:
	add	r3, pc, r3
	ldr	r3, [r3, #266]	@ unaligned
	str	r3, [r1]
.L2157:
	str	r4, [r2, #4]
	ldr	r3, [lr]
	mov	r1, r2
	mov	r2, #32
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	blt	.L2158
	mov	r0, r4
	b	.L2165
.L2159:
	mvn	r0, #106
	b	.L2165
.L2158:
	ldr	r0, .L2168+8
	mov	r1, r4
.LPIC471:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	b	.L2165
.L2169:
	.align	2
.L2168:
	.word	.LANCHOR2-(.LPIC470+8)
	.word	.LANCHOR2-(.LPIC469+8)
	.word	.LC136-(.LPIC471+8)
	.fnend
	.size	ccid_function_setup, .-ccid_function_setup
	.align	2
	.type	ccid_bulk_complete_out, %function
ccid_bulk_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L2175
	mov	ip, #1
	ldr	r2, [r1, #44]
	mov	r1, #3
.LPIC472:
	add	r3, pc, r3
	ldr	r3, [r3, #2396]
	cmp	r2, #0
	movne	r2, #1
	add	r0, r3, #160
	strne	r2, [r3, #148]
	mov	r2, ip
	str	ip, [r3, #188]
	mov	r3, #0
	b	__wake_up(PLT)
.L2176:
	.align	2
.L2175:
	.word	.LANCHOR1-(.LPIC472+8)
	.fnend
	.size	ccid_bulk_complete_out, .-ccid_bulk_complete_out
	.align	2
	.type	adb_function_disable, %function
adb_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r0, [r0, #92]
	mov	r6, #1
	strb	r5, [r4, #160]
	str	r6, [r4, #104]
	str	r5, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	lr, [sp, #12]
	add	r0, r4, #128
	mov	r2, r6
	mov	r3, r5
	ldr	r6, [sp, #8]
	mov	r1, #3
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	__wake_up(PLT)
	.fnend
	.size	adb_function_disable, .-adb_function_disable
	.align	2
	.type	adb_complete_out, %function
adb_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L2184
	mov	r2, #1
.LPIC473:
	add	r3, pc, r3
	ldr	r0, [r3, #-1472]
	str	r2, [r0, #156]
	ldr	r3, [r1, #44]
	add	r0, r0, #128
	mov	r1, #3
	cmp	r3, #0
	cmnne	r3, #104
	mov	r3, #0
	strne	r2, [r0, #-24]
	mov	r2, #1
	b	__wake_up(PLT)
.L2185:
	.align	2
.L2184:
	.word	.LANCHOR4-(.LPIC473+8)
	.fnend
	.size	adb_complete_out, .-adb_complete_out
	.align	2
	.type	rmnet_smd_event_notify, %function
rmnet_smd_event_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #48]
	ldr	r3, [r0, #20]
	beq	.L2188
	cmp	r1, #3
	beq	.L2189
	cmp	r1, #1
	beq	.L2200
.L2186:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2200:
	ldr	r3, [r3, #168]
	cmp	r3, #0
	beq	.L2186
	cmp	r5, #0
	bne	.L2201
.L2193:
	ldr	r0, [r4]
	bl	smd_read_avail(PLT)
	cmp	r0, #0
	beq	.L2186
	add	r4, r4, #4
	mov	r0, #0
	add	r1, r4, #4
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	bne	.L2186
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule(PLT)
.L2189:
	add	r1, r0, #44
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit(PLT)
.L2188:
	add	r1, r4, #44
	mov	r0, #0
	bl	_set_bit(PLT)
	ldr	r6, [sp, #8]
	add	r0, r4, #52
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up(PLT)
.L2201:
	ldr	r0, [r0]
	bl	smd_write_avail(PLT)
	cmp	r5, r0
	bgt	.L2193
	mov	r0, #0
	add	r1, r4, #28
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	add	r0, r4, #24
	bne	.L2193
	bl	__tasklet_schedule(PLT)
	b	.L2193
	.fnend
	.size	rmnet_smd_event_notify, .-rmnet_smd_event_notify
	.align	2
	.type	grmnet_ctrl_smd_disconnect_w, %function
grmnet_ctrl_smd_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-164]
	cmp	r0, #0
	beq	.L2203
	bl	smd_close(PLT)
	mov	r3, #0
	str	r3, [r4, #-164]
.L2203:
	ldr	r3, [r4, #-156]
	tst	r3, #2
	bne	.L2204
	ldr	r3, [r4, #-156]
	tst	r3, #4
	beq	.L2202
.L2204:
	mov	r0, #2
	sub	r1, r4, #156
	bl	_clear_bit(PLT)
	ldr	r2, .L2210
	mov	r0, #84
	ldr	r3, [r4, #-64]
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
.LPIC474:
	add	r2, pc, r2
	mla	r0, r0, r3, r2
	add	r0, r0, #712
	b	platform_driver_unregister(PLT)
.L2202:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2211:
	.align	2
.L2210:
	.word	.LANCHOR1-(.LPIC474+8)
	.fnend
	.size	grmnet_ctrl_smd_disconnect_w, .-grmnet_ctrl_smd_disconnect_w
	.align	2
	.type	grmnet_ctrl_smd_notify, %function
grmnet_ctrl_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L2214
	cmp	r1, #3
	beq	.L2215
	cmp	r1, #1
	beq	.L2247
.L2213:
	add	r0, r5, #24
	ldrd	r6, [sp, #8]
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up(PLT)
.L2247:
	ldr	r0, [r0]
	bl	smd_read_avail(PLT)
	cmp	r0, #0
	beq	.L2217
	ldr	r2, [r5, #28]
	add	r3, r5, #28
	cmp	r2, r3
	beq	.L2248
.L2217:
	ldr	r0, [r5]
	bl	smd_write_avail(PLT)
	cmp	r0, #0
	beq	.L2213
	ldr	r3, .L2249
	add	r2, r5, #68
	mov	r0, #4
.LPIC476:
	add	r3, pc, r3
	ldr	r1, [r3, #-1468]
	bl	queue_work_on(PLT)
	b	.L2213
.L2215:
	mov	r0, #0
	add	r1, r5, #8
	bl	_clear_bit(PLT)
	cmp	r5, #0
	beq	.L2220
	ldr	r0, [r5, #104]
	cmp	r0, #0
	beq	.L2220
	ldr	r3, [r0, #104]
	cmp	r3, #0
	beq	.L2220
	blx	r3
.L2220:
	add	r8, r5, #108
	add	r7, r5, #40
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #40]
	mov	r9, r0
	cmp	r7, r4
	beq	.L2223
.L2222:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del(PLT)
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r6
	bl	kfree(PLT)
	ldr	r4, [r5, #40]
	cmp	r4, r7
	bne	.L2222
.L2223:
	mov	r0, r8
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L2213
.L2214:
	mov	r0, #0
	add	r1, r5, #8
	bl	_set_bit(PLT)
	cmp	r5, #0
	beq	.L2213
	ldr	r0, [r5, #104]
	cmp	r0, #0
	beq	.L2213
	ldr	r3, [r0, #108]
	cmp	r3, #0
	beq	.L2213
	blx	r3
	b	.L2213
.L2248:
	ldr	r3, .L2249+4
	add	r2, r5, #52
	mov	r0, #4
.LPIC475:
	add	r3, pc, r3
	ldr	r1, [r3, #-1468]
	bl	queue_work_on(PLT)
	b	.L2217
.L2250:
	.align	2
.L2249:
	.word	.LANCHOR4-(.LPIC476+8)
	.word	.LANCHOR4-(.LPIC475+8)
	.fnend
	.size	grmnet_ctrl_smd_notify, .-grmnet_ctrl_smd_notify
	.align	2
	.type	gctrl_disconnect_w, %function
gctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #52]
	tst	r3, #1
	bne	.L2253
	bx	lr
.L2253:
	add	r1, r0, #52
	mov	r0, #0
	b	_clear_bit(PLT)
	.fnend
	.size	gctrl_disconnect_w, .-gctrl_disconnect_w
	.align	2
	.type	ghsic_data_disconnect_w, %function
ghsic_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #76]
	tst	r3, #1
	bne	.L2256
	bx	lr
.L2256:
	add	r1, r0, #76
	mov	r0, #0
	b	_clear_bit(PLT)
	.fnend
	.size	ghsic_data_disconnect_w, .-ghsic_data_disconnect_w
	.align	2
	.type	ghsuart_ctrl_remove, %function
ghsuart_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L2266
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #84
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0, #4]
.LPIC477:
	add	r3, pc, r3
	mla	r3, r1, r2, r3
	ldr	r4, [r3, #2056]
	add	r6, r4, #8
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #12]
	mov	r1, r0
	mov	r0, r6
	cmp	r5, #0
	beq	.L2265
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5, #104]
	cmp	r3, #0
	beq	.L2260
	mov	r0, r5
	blx	r3
.L2260:
	add	r4, r4, #88
	mov	r0, #0
	mov	r1, r4
	bl	_clear_bit(PLT)
	mov	r1, r4
	mov	r0, #2
	bl	_clear_bit(PLT)
.L2259:
	mov	r1, r4
	mov	r0, #1
	bl	_clear_bit(PLT)
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2265:
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r4, r4, #88
	b	.L2259
.L2267:
	.align	2
.L2266:
	.word	.LANCHOR1-(.LPIC477+8)
	.fnend
	.size	ghsuart_ctrl_remove, .-ghsuart_ctrl_remove
	.align	2
	.type	f_midi_out_trigger, %function
f_midi_out_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #28]
	cmp	r1, #0
	ldr	r0, [r0, #12]
	ldr	r1, [r3, #200]
	add	r1, r1, #296
	bne	.L2270
	b	_clear_bit(PLT)
.L2270:
	b	_set_bit(PLT)
	.fnend
	.size	f_midi_out_trigger, .-f_midi_out_trigger
	.align	2
	.type	rmnet_mux_smd_notify, %function
rmnet_mux_smd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #2
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #176]
	beq	.L2273
	cmp	r1, #3
	beq	.L2274
	cmp	r1, #1
	beq	.L2285
.L2271:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2285:
	ldr	r3, [r0, #372]
	cmp	r3, #0
	beq	.L2271
	cmp	r5, #0
	bne	.L2286
.L2278:
	ldr	r0, [r4, #128]
	bl	smd_read_avail(PLT)
	cmp	r0, #0
	beq	.L2271
	mov	r0, #0
	add	r1, r4, #136
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	add	r0, r4, #132
	bne	.L2271
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__tasklet_schedule(PLT)
.L2274:
	add	r1, r0, #172
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_clear_bit(PLT)
.L2273:
	add	r1, r4, #172
	mov	r0, #0
	bl	_set_bit(PLT)
	ldr	r6, [sp, #8]
	add	r0, r4, #180
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up(PLT)
.L2286:
	ldr	r0, [r0, #128]
	bl	smd_write_avail(PLT)
	cmp	r5, r0
	bgt	.L2278
	mov	r0, #0
	add	r1, r4, #156
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	add	r0, r4, #152
	bne	.L2278
	bl	__tasklet_schedule(PLT)
	b	.L2278
	.fnend
	.size	rmnet_mux_smd_notify, .-rmnet_mux_smd_notify
	.section	.init.text,"ax",%progbits
	.align	2
	.type	gsmd_ctrl_init, %function
gsmd_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L2296
	mov	r1, #0
	stmfd	sp!, {r4, r5, lr}
	.save {r4, r5, lr}
	.pad #12
	sub	sp, sp, #12
	ldr	r4, .L2296+4
.LPIC478:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	ldr	r3, .L2296+8
.LPIC479:
	add	r4, pc, r4
	cmn	r0, #4096
	ldr	r2, [r4, r3]
	str	r0, [r2]
	bhi	.L2289
	ldr	ip, .L2296+12
	mov	r5, r2
	mov	r2, r0
	ldr	r0, .L2296+16
	mov	r3, #0
	mov	r1, #292
	ldr	ip, [r4, ip]
.LPIC480:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	ldr	r3, .L2296+20
	cmp	r0, #0
	ldr	r3, [r4, r3]
	str	r0, [r3]
	beq	.L2290
	cmn	r0, #4096
	bls	.L2289
.L2290:
	ldr	r0, [r5]
	bl	debugfs_remove(PLT)
.L2289:
	ldr	r3, .L2296+24
	mov	r2, #0
	mov	r0, r2
	ldr	r3, [r4, r3]
	strb	r2, [r3]
	add	sp, sp, #12
	@ sp needed
	ldmfd	sp!, {r4, r5, pc}
.L2297:
	.align	2
.L2296:
	.word	.LC137-(.LPIC478+8)
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC479+8)
	.word	smd_ctrl_dent(GOT)
	.word	gsmd_ctrl_stats_ops(GOT)
	.word	.LC138-(.LPIC480+8)
	.word	smd_ctrl_dfile(GOT)
	.word	online_clients(GOT)
	.fnend
	.size	gsmd_ctrl_init, .-gsmd_ctrl_init
	.section	.exit.text
	.align	2
	.type	gsmd_ctrl_exit, %function
gsmd_ctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L2300
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
.LPIC483:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3]
	bl	debugfs_remove(PLT)
	ldr	r3, .L2300+4
	ldmfd	sp!, {r4, lr}
.LPIC482:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3]
	b	debugfs_remove(PLT)
.L2301:
	.align	2
.L2300:
	.word	smd_ctrl_dfile(GOT_PREL)+(.-(.LPIC483+8))
	.word	smd_ctrl_dent(GOT_PREL)+(.-(.LPIC482+8))
	.fnend
	.size	gsmd_ctrl_exit, .-gsmd_ctrl_exit
	.section	.init.text
	.align	2
	.type	gctrl_init, %function
gctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L2311
	mov	r1, #0
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
	.pad #8
	sub	sp, sp, #8
.LPIC484:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	ldr	r3, .L2311+4
	cmn	r0, #4096
	mov	r2, r0
.LPIC489:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r0, [r3]
	bhi	.L2304
	ldr	ip, .L2311+8
	mov	r4, r3
	mov	r1, #292
	ldr	r0, .L2311+12
	mov	r3, #0
.LPIC488:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
.LPIC486:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	ldr	r3, .L2311+16
	cmp	r0, #0
.LPIC487:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r0, [r3]
	beq	.L2305
	cmn	r0, #4096
	bls	.L2304
.L2305:
	ldr	r0, [r4]
	bl	debugfs_remove(PLT)
.L2304:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	ldmfd	sp!, {r4, pc}
.L2312:
	.align	2
.L2311:
	.word	.LC139-(.LPIC484+8)
	.word	gctrl_dent(GOT_PREL)+(.-(.LPIC489+8))
	.word	gctrl_stats_ops(GOT_PREL)+(.-(.LPIC488+8))
	.word	.LC138-(.LPIC486+8)
	.word	gctrl_dfile(GOT_PREL)+(.-(.LPIC487+8))
	.fnend
	.size	gctrl_init, .-gctrl_init
	.section	.exit.text
	.align	2
	.type	gctrl_exit, %function
gctrl_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L2315
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
.LPIC492:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3]
	bl	debugfs_remove(PLT)
	ldr	r3, .L2315+4
	ldmfd	sp!, {r4, lr}
.LPIC491:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3]
	b	debugfs_remove(PLT)
.L2316:
	.align	2
.L2315:
	.word	gctrl_dfile(GOT_PREL)+(.-(.LPIC492+8))
	.word	gctrl_dent(GOT_PREL)+(.-(.LPIC491+8))
	.fnend
	.size	gctrl_exit, .-gctrl_exit
	.section	.init.text
	.align	2
	.type	ghsic_data_init, %function
ghsic_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L2331
	mov	r1, #0
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
	.pad #8
	sub	sp, sp, #8
	ldr	r4, .L2331+4
.LPIC493:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
.LPIC494:
	add	r4, pc, r4
	cmn	r0, #4096
	mov	r2, r0
	str	r0, [r4, #-1464]
	bhi	.L2319
	ldr	ip, .L2331+8
	mov	r1, #292
	mov	r3, #0
	ldr	r0, .L2331+12
.LPIC504:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
.LPIC495:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	cmp	r0, #0
	str	r0, [r4, #-1460]
	beq	.L2320
	cmn	r0, #4096
	bls	.L2321
.L2320:
	ldr	r3, .L2331+16
.LPIC498:
	add	r3, pc, r3
	ldr	r0, [r3, #-1464]
	bl	debugfs_remove(PLT)
	b	.L2319
.L2321:
	ldr	ip, .L2331+20
	mov	r1, #420
	mov	r3, #0
	ldr	r0, .L2331+24
	ldr	r2, [r4, #-1464]
.LPIC503:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
.LPIC499:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	cmp	r0, #0
	str	r0, [r4, #-1456]
	beq	.L2322
	cmn	r0, #4096
	bls	.L2319
.L2322:
	ldr	r3, .L2331+28
.LPIC502:
	add	r3, pc, r3
	ldr	r0, [r3, #-1464]
	bl	debugfs_remove(PLT)
.L2319:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	ldmfd	sp!, {r4, pc}
.L2332:
	.align	2
.L2331:
	.word	.LC140-(.LPIC493+8)
	.word	.LANCHOR4-(.LPIC494+8)
	.word	ghsic_stats_ops(GOT_PREL)+(.-(.LPIC504+8))
	.word	.LC138-(.LPIC495+8)
	.word	.LANCHOR4-(.LPIC498+8)
	.word	gdata_timestamp_ops(GOT_PREL)+(.-(.LPIC503+8))
	.word	.LC141-(.LPIC499+8)
	.word	.LANCHOR4-(.LPIC502+8)
	.fnend
	.size	ghsic_data_init, .-ghsic_data_init
	.section	.exit.text
	.align	2
	.type	ghsic_data_exit, %function
ghsic_data_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
	ldr	r4, .L2335
.LPIC505:
	add	r4, pc, r4
	ldr	r0, [r4, #-1460]
	bl	debugfs_remove(PLT)
	ldr	r0, [r4, #-1456]
	bl	debugfs_remove(PLT)
	ldr	r0, [r4, #-1464]
	ldmfd	sp!, {r4, lr}
	b	debugfs_remove(PLT)
.L2336:
	.align	2
.L2335:
	.word	.LANCHOR4-(.LPIC505+8)
	.fnend
	.size	ghsic_data_exit, .-ghsic_data_exit
	.section	.init.text
	.align	2
	.type	ghsuart_ctrl_init, %function
ghsuart_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L2350
	mov	r1, #0
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
	.pad #8
	sub	sp, sp, #8
.LPIC508:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	ldr	r3, .L2350+4
	cmp	r0, #0
	mov	r2, r0
.LPIC509:
	add	r3, pc, r3
	str	r0, [r3, #-1484]
	beq	.L2338
	cmn	r0, #4096
	bhi	.L2338
	ldr	ip, .L2350+8
	mov	r1, #420
	mov	r3, #0
	ldr	r0, .L2350+12
.LPIC511:
	add	ip, pc, ip
.LPIC510:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	cmp	r0, #0
	beq	.L2339
	cmn	r0, #4096
	movls	r0, #0
	bls	.L2348
.L2339:
	ldr	r4, .L2350+16
.LPIC512:
	add	r4, pc, r4
	ldr	r0, [r4, #-1484]
	bl	debugfs_remove(PLT)
	mov	r3, #0
	str	r3, [r4, #-1484]
.L2338:
	mvn	r0, #18
.L2348:
	add	sp, sp, #8
	@ sp needed
	ldmfd	sp!, {r4, pc}
.L2351:
	.align	2
.L2350:
	.word	.LC142-(.LPIC508+8)
	.word	.LANCHOR4-(.LPIC509+8)
	.word	.LANCHOR5-(.LPIC511+8)
	.word	.LC138-(.LPIC510+8)
	.word	.LANCHOR4-(.LPIC512+8)
	.fnend
	.size	ghsuart_ctrl_init, .-ghsuart_ctrl_init
	.align	2
	.type	ghsuart_data_init, %function
ghsuart_data_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L2365
	mov	r1, #0
	str	lr, [sp, #-4]!
	.save {lr}
	.pad #12
	sub	sp, sp, #12
.LPIC514:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	ldr	r3, .L2365+4
	cmp	r0, #0
	mov	r2, r0
.LPIC515:
	add	r3, pc, r3
	str	r0, [r3, #-1480]
	beq	.L2353
	cmn	r0, #4096
	bhi	.L2353
	ldr	ip, .L2365+8
	mov	r1, #420
	mov	r3, #0
	ldr	r0, .L2365+12
.LPIC519:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
.LPIC516:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	cmp	r0, #0
	beq	.L2354
	cmn	r0, #4096
	movls	r0, #0
	bls	.L2363
.L2354:
	ldr	r3, .L2365+16
.LPIC518:
	add	r3, pc, r3
	ldr	r0, [r3, #-1480]
	bl	debugfs_remove(PLT)
.L2353:
	mvn	r0, #18
.L2363:
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L2366:
	.align	2
.L2365:
	.word	.LC143-(.LPIC514+8)
	.word	.LANCHOR4-(.LPIC515+8)
	.word	ghsuart_data_stats_ops(GOT_PREL)+(.-(.LPIC519+8))
	.word	.LC138-(.LPIC516+8)
	.word	.LANCHOR4-(.LPIC518+8)
	.fnend
	.size	ghsuart_data_init, .-ghsuart_data_init
	.text
	.align	2
	.type	diag_function_init, %function
diag_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L2376
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, #0
	ldr	r0, .L2376+4
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, .L2376+8
.LPIC520:
	add	r3, pc, r3
	sub	r2, r3, #1440
.LPIC524:
	add	r0, pc, r0
	sub	r2, r2, #12
	str	r2, [r3, #-1452]
	str	r2, [r3, #-1448]
	bl	debugfs_create_dir(PLT)
.LPIC528:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
	cmp	r0, #0
	str	r0, [r4]
	beq	.L2369
	cmn	r0, #4096
	bhi	.L2369
	ldr	ip, .L2376+12
	mov	r2, r0
	mov	r1, #292
	ldr	r0, .L2376+16
	mov	r3, #0
.LPIC527:
	add	ip, pc, ip
	add	ip, ip, #108
.LPIC526:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	cmp	r0, #0
	beq	.L2371
	cmn	r0, #4096
	bhi	.L2371
.L2369:
	mov	r0, #0
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L2371:
	ldr	r0, [r4]
	bl	debugfs_remove(PLT)
	mov	r3, #0
	str	r3, [r4]
	b	.L2369
.L2377:
	.align	2
.L2376:
	.word	.LANCHOR4-(.LPIC520+8)
	.word	.LC144-(.LPIC524+8)
	.word	dent_diag(GOT_PREL)+(.-(.LPIC528+8))
	.word	.LANCHOR5-(.LPIC527+8)
	.word	.LC138-(.LPIC526+8)
	.fnend
	.size	diag_function_init, .-diag_function_init
	.align	2
	.type	rmnet_sdio_data_rx_work, %function
rmnet_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #84]
	ldr	r8, [r0, #-152]
	tst	r3, #2
	beq	.L2385
	sub	r6, r0, #48
	mov	r4, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, r4
	mov	r7, r0
	ldr	r5, [r3, #-64]!
	cmp	r5, r3
	cmpne	r5, #0
	beq	.L2380
	ldr	r3, [r4, #-56]
	mov	ip, #0
	mov	r1, r0
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r4, #-56]
	ldrd	r2, [r5]
	str	ip, [r5]
	str	ip, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	ldr	r1, .L2386
	ldr	r0, [r8]
.LPIC531:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r0, r5
	bl	dev_kfree_skb_any(PLT)
.L2380:
	mov	r0, r6
	mov	r1, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L2385:
	ldr	r1, .L2386+4
	ldr	r0, .L2386+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC530:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC529:
	add	r0, pc, r0
	add	r1, r1, #832
	add	sp, sp, #24
	b	printk(PLT)
.L2387:
	.align	2
.L2386:
	.word	.LC146-(.LPIC531+8)
	.word	.LANCHOR3-(.LPIC530+8)
	.word	.LC145-(.LPIC529+8)
	.fnend
	.size	rmnet_sdio_data_rx_work, .-rmnet_sdio_data_rx_work
	.align	2
	.type	gbam_write_data_tohost, %function
gbam_write_data_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	add	r7, r0, #8
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #12]
	str	r0, [sp, #12]
	cmp	r3, #0
	moveq	r1, r0
	moveq	r0, r7
	beq	.L2402
	ldr	r2, [r6, #28]
	add	r1, r6, #28
	ldr	r10, [r3, #84]
	str	r1, [sp, #4]
	cmp	r1, r2
	beq	.L2393
	ldr	r4, [r6, #36]
	add	r3, r6, #36
	str	r3, [sp, #8]
	cmp	r4, r3
	cmpne	r4, #0
	beq	.L2393
	ldr	ip, .L2404
	mov	r8, #0
	ldr	r9, .L2404+4
.LPIC534:
	add	ip, pc, ip
.LPIC532:
	add	r9, pc, r9
	mov	fp, ip
.L2394:
	ldr	r1, [r6, #44]
	mov	r2, #1
	ldr	r3, [r9, #-1444]
	sub	r1, r1, #1
	add	r3, r3, r2
	str	r1, [r6, #44]
	ldrd	r0, [r4]
	str	r8, [r4]
	str	r8, [r4, #4]
	str	r3, [r9, #-1444]
	str	r1, [r0, #4]
	str	r0, [r1]
	ldr	r5, [r6, #28]
	str	r4, [r5, #-4]
	ldr	r0, [r4, #172]
	sub	r1, r5, #36
	str	r1, [sp]
	str	r0, [r5, #-36]
	ldr	r0, [r4, #80]
	str	r0, [r5, #-32]
	ldr	r0, [fp, #312]
	cmp	r3, r0
	mov	r0, r5
	moveq	r2, #0
	streq	r8, [r9, #-1444]
	ldrb	r3, [r5, #-10]	@ zero_extendqisi2
	bfi	r3, r2, #0, #1
	uxtb	r3, r3
	orr	r3, r3, #2
	strb	r3, [r5, #-10]
	bl	list_del(PLT)
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r10, #8]
	mov	r2, #32
	mov	r0, r10
	ldr	r1, [sp]
	ldr	r3, [r3, #16]
	blx	r3
	str	r0, [sp]
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	ldr	r3, [sp]
	cmp	r3, #0
	bne	.L2403
	ldr	r3, [r6, #264]
	ldr	r2, [r6, #28]
	ldr	r1, [sp, #4]
	add	r3, r3, #1
	cmp	r1, r2
	str	r3, [r6, #264]
	beq	.L2393
	ldr	r4, [r6, #36]
	ldr	r3, [sp, #8]
	cmp	r4, r3
	cmpne	r4, #0
	bne	.L2394
.L2393:
	ldr	r1, [sp, #12]
	mov	r0, r7
.L2402:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L2403:
	ldr	r1, .L2404+8
	mov	r2, r3
	ldr	r0, .L2404+12
.LPIC537:
	add	r1, pc, r1
	add	r1, r1, #856
.LPIC536:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r1, [sp, #4]
	mov	r0, r5
	ldr	r2, [r6, #28]
	bl	__list_add(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	b	.L2393
.L2405:
	.align	2
.L2404:
	.word	.LANCHOR2-(.LPIC534+8)
	.word	.LANCHOR4-(.LPIC532+8)
	.word	.LANCHOR3-(.LPIC537+8)
	.word	.LC147-(.LPIC536+8)
	.fnend
	.size	gbam_write_data_tohost, .-gbam_write_data_tohost
	.align	2
	.type	gbam_write_data_tohost_w, %function
gbam_write_data_tohost_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #-20]
	b	gbam_write_data_tohost(PLT)
	.fnend
	.size	gbam_write_data_tohost_w, .-gbam_write_data_tohost_w
	.align	2
	.type	gbam_epin_complete, %function
gbam_epin_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r5, [r0]
	ldr	r7, [r1, #32]
	cmn	r2, #104
	beq	.L2409
	cmp	r2, #0
	beq	.L2410
	cmn	r2, #108
	beq	.L2409
	ldr	r1, .L2423
	ldr	r0, .L2423+4
.LPIC539:
	add	r1, pc, r1
.LPIC538:
	add	r0, pc, r0
	add	r1, r1, #880
	bl	printk(PLT)
.L2410:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	cmp	r5, #0
	beq	.L2407
	add	r6, r5, #8
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r1, [r5, #32]
	add	r2, r5, #28
	add	r0, r4, #36
	bl	__list_add(PLT)
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r3, .L2423+8
	add	r2, r5, #96
	mov	r0, #4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
.LPIC540:
	add	r3, pc, r3
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, [r3, #-1440]
	b	queue_work_on(PLT)
.L2409:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L2407:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2424:
	.align	2
.L2423:
	.word	.LANCHOR3-(.LPIC539+8)
	.word	.LC148-(.LPIC538+8)
	.word	.LANCHOR4-(.LPIC540+8)
	.fnend
	.size	gbam_epin_complete, .-gbam_epin_complete
	.align	2
	.type	ghsic_data_receive, %function
ghsic_data_receive:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L2426
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L2426
	add	r6, r4, #48
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, .L2438
	add	r1, r4, #32
	mov	r7, r0
	ldr	r3, [r4, #36]
.LPIC541:
	add	r2, pc, r2
	stmia	r5, {r1, r3}
	str	r5, [r3]
	ldr	r3, [r4, #40]
	ldr	r1, [r2, #316]
	str	r5, [r4, #36]
	add	r3, r3, #1
	cmp	r1, #0
	str	r3, [r4, #40]
	beq	.L2429
	ldr	r2, [r2, #320]
	cmp	r2, r3
	bls	.L2437
.L2429:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #4
	ldr	r1, [r4, #84]
	add	r2, r4, #136
	bl	queue_work_on(PLT)
	mov	r0, #0
.L2428:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2426:
	mov	r0, r5
	bl	dev_kfree_skb_any(PLT)
	mvn	r0, #106
	b	.L2428
.L2437:
	mov	r0, #2
	add	r1, r4, #164
	bl	_set_bit(PLT)
	ldr	r3, [r4, #196]
	mov	r0, r6
	mov	r1, r7
	add	r3, r3, #1
	str	r3, [r4, #196]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #4
	ldr	r1, [r4, #84]
	add	r2, r4, #136
	bl	queue_work_on(PLT)
	mvn	r0, #15
	b	.L2428
.L2439:
	.align	2
.L2438:
	.word	.LANCHOR2-(.LPIC541+8)
	.fnend
	.size	ghsic_data_receive, .-ghsic_data_receive
	.align	2
	.type	eth_start_xmit, %function
eth_start_xmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	add	r6, r1, #1152
	mov	r7, r0
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1156]
	mov	r1, r0
	cmp	r3, #0
	beq	.L2441
	ldr	r8, [r3, #88]
	mov	r0, r6
	ldrh	r9, [r3, #98]
	ldrb	r3, [r3, #124]	@ zero_extendqisi2
	str	r3, [sp, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r8, #0
	beq	.L2453
	add	r5, r4, #1168
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp, #4]
	mov	fp, r0
	cmp	r3, #0
	beq	.L2444
	ldr	r2, [r4, #1200]
	cmp	r2, #0
	beq	.L2500
.L2444:
	mov	r1, fp
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	tst	r9, #1
	bne	.L2451
	ldr	r3, [r7, #172]
	ldrb	r2, [r3]	@ zero_extendqisi2
	tst	r2, #1
	bne	.L2501
.L2451:
	mov	r0, r5
	add	r9, r6, #20
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r10, [r4, #1172]
	mov	fp, r0
	cmp	r9, r10
	beq	.L2502
	sub	r3, r10, #36
	mov	r0, r10
	str	r3, [sp, #8]
	bl	list_del(PLT)
	ldr	r2, [r4, #1172]
	cmp	r9, r2
	beq	.L2503
.L2455:
	mov	r1, fp
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #1232]
	mov	fp, r0
	cmp	r2, #0
	beq	.L2457
	ldr	r0, [r4, #1156]
	cmp	r0, #0
	beq	.L2458
	mov	r1, r7
	blx	r2
	mov	r7, r0
.L2458:
	cmp	r7, #0
	beq	.L2504
.L2457:
	ldr	r3, [sp, #4]
	cmp	r3, #0
	bne	.L2505
	mov	r0, r6
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r2, [r7, #172]
	ldr	r6, [r7, #80]
	str	r7, [r10, #-4]
	str	r2, [r10, #-36]
.L2463:
	ldr	r2, [r4, #1156]
	ldrb	r1, [r2, #104]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L2475
	ldr	r2, [r2, #112]
	cmp	r6, r2
	beq	.L2506
.L2475:
	mov	r1, #1
.L2464:
	ldrb	r2, [r10, #-10]	@ zero_extendqisi2
	bfi	r2, r1, #1, #1
	uxtb	r1, r2
	strb	r2, [r10, #-10]
	tst	r1, #2
	beq	.L2465
	ldrb	r2, [r4, #1276]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L2465
	ldrh	r0, [r8, #20]
	sdiv	r2, r6, r0
	mls	r2, r0, r2, r6
	cmp	r2, #0
	bne	.L2465
	bfi	r1, r2, #1, #1
	add	r6, r6, #1
	strb	r1, [r10, #-10]
.L2465:
	str	r6, [r10, #-32]
	ldr	r2, [r4, #1164]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	bls	.L2466
	ldr	r2, [r2, #16]
	sub	r2, r2, #3
	bics	r2, r2, #2
	beq	.L2507
.L2466:
	ldrb	r2, [r10, #-10]	@ zero_extendqisi2
	bfc	r2, #0, #1
	strb	r2, [r10, #-10]
.L2468:
	ldr	ip, [r8, #8]
	mov	r0, r8
	mov	r2, #32
	ldr	r1, [sp, #8]
	ldr	ip, [ip, #16]
	blx	ip
	cmp	r0, #0
	bne	.L2498
	ldr	r3, .L2513
.LPIC547:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3]
	str	r3, [r4, #604]
.L2497:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2501:
	ldrb	fp, [r3, #1]	@ zero_extendqisi2
	ldrb	lr, [r3, #2]	@ zero_extendqisi2
	ldrb	ip, [r3, #3]	@ zero_extendqisi2
	ldrb	r0, [r3, #4]	@ zero_extendqisi2
	ldrb	r1, [r3, #5]	@ zero_extendqisi2
	and	r2, r2, fp
	and	r3, r2, lr
	and	r3, r3, ip
	and	r3, r3, r0
	and	r3, r3, r1
	cmp	r3, #255
	moveq	r3, #8
	movne	r3, #2
	tst	r3, r9
	bne	.L2451
.L2453:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	mov	r0, #0
	b	.L2497
.L2505:
	ldr	ip, [r10, #-36]
	ldr	r0, [r10, #-32]
	ldr	r1, [r4, #1156]
	ldr	r2, [r4, #1220]
	add	r0, ip, r0
	ldr	r1, [r1, #144]
	bl	memcpy(PLT)
	ldr	ip, [r4, #1220]
	mov	r0, r6
	mov	r1, fp
	ldr	r2, [r10, #-32]
	add	r2, r2, ip
	str	r2, [r10, #-32]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	ip, [r10, #-36]
	ldr	r0, [r10, #-32]
	ldr	r1, [r7, #172]
	ldr	r2, [r7, #80]
	add	r0, ip, r0
	bl	memcpy(PLT)
	ldr	r1, [r10, #-32]
	mov	r0, r7
	ldr	r2, [r7, #80]
	add	r2, r2, r1
	mov	r6, r2
	str	r2, [r10, #-32]
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #1196]
	mov	fp, r0
	ldr	r1, [r4, #1228]
	add	r2, r2, #1
	cmp	r2, r1
	str	r2, [r4, #1196]
	ldr	r2, [r4, #1192]
	bcs	.L2462
	cmp	r2, #5
	bgt	.L2508
.L2462:
	add	r2, r2, #1
	mov	ip, #0
	mov	r1, fp
	mov	r0, r5
	str	r2, [r4, #1192]
	str	ip, [r4, #1196]
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L2463
.L2498:
	ldr	r3, [sp, #4]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r10, #-32]
	beq	.L2509
.L2459:
	ldr	r1, [r4, #1160]
	mov	r0, r5
	ldr	r2, [r1, #260]
	add	r2, r2, #1
	str	r2, [r1, #260]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #1172]
	mov	r6, r0
	cmp	r9, r2
	beq	.L2510
.L2472:
	mov	r0, r10
	ldr	r1, [r4, #1176]
	mov	r2, r9
	bl	__list_add(PLT)
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L2497
.L2502:
	mov	r0, r5
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #16
	b	.L2497
.L2500:
	ldr	r1, [r4, #1160]
	add	r10, r6, #20
	ldr	r0, [r4, #1228]
	ldr	r3, [r4, #1172]
	ldr	r1, [r1, #356]
	cmp	r3, r10
	add	r1, r1, #80
	mul	r1, r0, r1
	str	r1, [r4, #1200]
	bne	.L2446
	b	.L2444
.L2447:
	str	r2, [r3, #-4]
	ldr	r3, [r3]
	cmp	r3, r10
	beq	.L2444
.L2446:
	ldr	r1, [r3, #-36]
	cmp	r1, #0
	bne	.L2447
	ldr	r0, [r4, #1200]
	movw	r1, #32800
	str	r2, [sp, #12]
	str	r3, [sp, #8]
	bl	__kmalloc(PLT)
	ldr	r3, [sp, #8]
	cmp	r0, #0
	ldr	r2, [sp, #12]
	str	r0, [r3, #-36]
	bne	.L2447
.L2448:
	ldr	r6, [r4, #1172]
	str	r0, [r4, #1200]
	cmp	r6, r10
	beq	.L2449
	mov	r4, r0
.L2450:
	ldr	r0, [r6, #-36]
	bl	kfree(PLT)
	str	r4, [r6, #-36]
	ldr	r6, [r6]
	cmp	r6, r10
	bne	.L2450
.L2449:
	mov	r0, r5
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #11
	b	.L2497
.L2507:
	ldr	r0, .L2513+4
	ldr	r1, [r4, #1188]
.LPIC545:
	add	r0, pc, r0
	ldr	r0, [r0, #324]
	add	r1, r1, #1
	str	r1, [r4, #1188]
	cmp	r1, r0, lsr #1
	beq	.L2511
	ldrb	r2, [r10, #-10]	@ zero_extendqisi2
	orr	r2, r2, #1
	strb	r2, [r10, #-10]
	b	.L2468
.L2503:
	ldr	r1, [r4, #576]
	cmp	r1, #0
	beq	.L2512
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit(PLT)
	b	.L2455
.L2509:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	b	.L2459
.L2506:
	ldrh	r1, [r8, #20]
	sdiv	r2, r6, r1
	mls	r1, r1, r2, r6
	adds	r1, r1, #0
	movne	r1, #1
	b	.L2464
.L2441:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	mov	r0, #0
	b	.L2497
.L2508:
	mov	r0, r10
	mov	r1, r9
	ldr	r2, [r4, #1172]
	bl	__list_add(PLT)
	mov	r0, r5
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L2497
.L2504:
	mov	r0, r6
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L2459
.L2511:
	ldrb	r1, [r10, #-10]	@ zero_extendqisi2
	bfi	r1, r2, #0, #1
	strb	r1, [r10, #-10]
	str	r2, [r4, #1188]
	b	.L2468
.L2510:
	ldr	r1, [r4, #576]
	mov	r0, #0
	add	r1, r1, #80
	bl	_clear_bit(PLT)
	b	.L2472
.L2512:
	ldr	r0, .L2513+8
	movw	r1, #1847
.LPIC543:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r0, .L2513+12
.LPIC544:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2455
.L2514:
	.align	2
.L2513:
	.word	jiffies(GOT_PREL)+(.-(.LPIC547+8))
	.word	.LANCHOR2-(.LPIC545+8)
	.word	.LC85-(.LPIC543+8)
	.word	.LC86-(.LPIC544+8)
	.fnend
	.size	eth_start_xmit, .-eth_start_xmit
	.align	2
	.type	rmnet_mux_sdio_data_rx_work, %function
rmnet_mux_sdio_data_rx_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #128
	sub	r7, r0, #16
	strd	r10, [sp, #24]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r8, [r0, #-156]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #-16]
	mov	fp, r0
	cmp	r4, r7
	cmpne	r4, #0
	beq	.L2516
	ldr	r9, .L2523
	mov	r10, #0
.LPIC548:
	add	r9, pc, r9
.L2517:
	ldr	r3, [r5, #-8]
	mov	r1, fp
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r5, #-8]
	ldrd	r2, [r4]
	str	r10, [r4]
	str	r10, [r4, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	fp, r0
	ldr	r0, [r8]
	mov	r1, r9
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	ldr	r4, [r5, #-16]
	cmp	r4, r7
	cmpne	r4, #0
	bne	.L2517
.L2516:
	mov	r0, r6
	mov	r1, fp
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L2524:
	.align	2
.L2523:
	.word	.LC149-(.LPIC548+8)
	.fnend
	.size	rmnet_mux_sdio_data_rx_work, .-rmnet_mux_sdio_data_rx_work
	.align	2
	.type	ghsuart_data_write_tomdm, %function
ghsuart_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #144
	bxeq	lr
	ldr	r3, [r0, #-140]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #40
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #40]
	mov	r8, r0
	ubfx	r3, r3, #1, #1
	cmp	r3, #0
	bne	.L2533
	mov	r2, r5
	ldr	r4, [r2, #-56]!
	cmp	r4, r2
	cmpne	r4, #0
	beq	.L2528
	ldr	r2, [r5, #-48]
	ldr	r7, .L2564
	ldr	r0, .L2564+4
	sub	r2, r2, #1
.LPIC552:
	add	r7, pc, r7
	str	r2, [r5, #-48]
	ldr	ip, [r4]
.LPIC551:
	add	r0, pc, r0
	ldr	r2, [r4, #4]
	add	r7, r7, #900
	str	r3, [r4]
	str	r3, [r4, #4]
	mov	r1, r7
	add	r0, r0, #328
	str	r2, [ip, #4]
	str	ip, [r2]
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L2560
.L2530:
	ldr	r3, [r5, #68]
	mov	r0, r4
	add	r3, r3, #1
	str	r3, [r5, #68]
	bl	dev_kfree_skb_any(PLT)
.L2528:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r7, [r5, #-132]
	mov	r8, r0
	cmp	r7, #0
	beq	.L2533
	ldr	r3, [r5, #40]
	tst	r3, #2
	bne	.L2533
	ldr	r9, .L2564+8
	sub	r3, r5, #64
	str	r3, [sp, #4]
.LPIC553:
	add	r9, pc, r9
	b	.L2534
.L2562:
	ldr	r4, [r5, #-64]
	ldr	r0, [sp, #4]
	sub	r10, r4, #36
	cmp	r4, r0
	beq	.L2533
	ldr	r0, [r9, #352]
	bl	__alloc_skb(PLT)
	subs	fp, r0, #0
	mov	r0, r4
	beq	.L2533
	bl	list_del(PLT)
	ldr	r2, [fp, #172]
	mov	r1, r8
	mov	r0, r6
	str	r2, [r4, #-36]
	ldr	r2, [r9, #352]
	str	fp, [r4, #-4]
	str	r2, [r4, #-32]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	ip, [r7, #8]
	mov	r2, #208
	mov	r1, r10
	mov	r0, r7
	ldr	ip, [ip, #16]
	blx	ip
	str	r0, [sp]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [sp]
	mov	r8, r0
	cmp	r2, #0
	bne	.L2561
.L2534:
	ldr	r0, [r5, #-140]
	mov	r2, #0
	mvn	r3, #0
	mov	r1, #32
	cmp	r0, r2
	bne	.L2562
.L2533:
	mov	r0, r6
	mov	r1, r8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L2561:
	mov	r0, fp
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, .L2564+12
	add	r0, r9, #356
.LPIC556:
	add	r3, pc, r3
	add	r9, r3, #928
	mov	r1, r9
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L2563
.L2535:
	ldr	r3, [r5, #-140]
	cmp	r3, #0
	beq	.L2536
	mov	r0, r4
	ldr	r1, [sp, #4]
	ldr	r2, [r5, #-64]
	bl	__list_add(PLT)
	b	.L2533
.L2536:
	ldr	r3, [r7, #8]
	mov	r1, r10
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L2533
.L2563:
	ldr	r0, .L2564+16
	mov	r1, r9
.LPIC557:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2535
.L2560:
	ldr	r0, .L2564+20
	mov	r1, r7
	mvn	r2, #18
.LPIC549:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2530
.L2565:
	.align	2
.L2564:
	.word	.LANCHOR3-(.LPIC552+8)
	.word	.LANCHOR2-(.LPIC551+8)
	.word	.LANCHOR2-(.LPIC553+8)
	.word	.LANCHOR3-(.LPIC556+8)
	.word	.LC150-(.LPIC557+8)
	.word	.LC87-(.LPIC549+8)
	.fnend
	.size	ghsuart_data_write_tomdm, .-ghsuart_data_write_tomdm
	.align	2
	.type	rmnet_sdio_unbind, %function
rmnet_sdio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	add	r0, r1, #252
	mov	r4, r1
	str	lr, [sp, #4]
	bl	cancel_delayed_work_sync(PLT)
	ldr	r0, [r4, #200]
	bl	destroy_workqueue(PLT)
	ldr	r2, [r4, #320]
	mov	r3, #0
	str	r3, [r4, #96]
	str	r3, [r4, #92]
	tst	r2, #2
	str	r3, [r4, #88]
	bne	.L2576
.L2567:
	ldr	r3, [r4, #324]
	tst	r3, #2
	beq	.L2568
	mov	r0, #1
	add	r1, r4, #324
	bl	_clear_bit(PLT)
.L2568:
	ldr	r0, [r4, #352]
	bl	debugfs_remove_recursive(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
.L2576:
	mov	r0, #1
	add	r1, r4, #320
	bl	_clear_bit(PLT)
	b	.L2567
	.fnend
	.size	rmnet_sdio_unbind, .-rmnet_sdio_unbind
	.align	2
	.type	grmnet_ctrl_smd_connect_w, %function
grmnet_ctrl_smd_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #-104]
	ldr	r5, [r0, #-12]
	tst	r3, #2
	bne	.L2578
	ldr	r3, [r0, #-104]
	tst	r3, #4
	beq	.L2587
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L2578:
	ldr	r3, .L2588
	sub	r1, r0, #112
	mov	r2, r1
	ldr	r0, [r0, #-108]
.LPIC560:
	add	r3, pc, r3
	bl	smd_open(PLT)
	cmp	r0, #0
	beq	.L2580
	cmn	r0, #11
	bne	.L2581
	ldr	r3, .L2588+4
	mov	r0, #250
.LPIC561:
	add	r3, pc, r3
	ldr	r5, [r3, #-1468]
	bl	msecs_to_jiffies(PLT)
	mov	r3, r0
	mov	r2, r4
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	mov	r0, #4
	mov	r1, r5
	ldr	lr, [sp, #20]
	ldrd	r4, [sp]
	add	sp, sp, #24
	b	queue_delayed_work_on(PLT)
.L2587:
	sub	r1, r0, #104
	mov	r0, #2
	bl	_set_bit(PLT)
	ldr	r0, .L2588+8
	mov	r3, #84
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC559:
	add	r0, pc, r0
	mla	r0, r3, r5, r0
	ldrd	r4, [sp]
	add	sp, sp, #24
	add	r0, r0, #712
	b	platform_driver_register(PLT)
.L2580:
	sub	r5, r4, #4
	ldr	r6, [r4, #-24]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #-8]
	mov	r7, r0
	cmp	r3, #0
	beq	.L2582
	orr	r2, r6, #4
	ldr	r0, [r4, #-112]
	mov	r1, r6
	mvn	r2, r2
	bl	smd_tiocmset(PLT)
.L2582:
	mov	r0, r5
	mov	r1, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L2581:
	ldr	r1, .L2588+12
	mov	r3, r0
	ldr	r0, .L2588+16
	ldr	r2, [r4, #-108]
	ldrd	r6, [sp, #8]
.LPIC563:
	add	r1, pc, r1
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
.LPIC562:
	add	r0, pc, r0
	add	r1, r1, #952
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk(PLT)
.L2589:
	.align	2
.L2588:
	.word	grmnet_ctrl_smd_notify-(.LPIC560+8)
	.word	.LANCHOR4-(.LPIC561+8)
	.word	.LANCHOR1-(.LPIC559+8)
	.word	.LANCHOR3-(.LPIC563+8)
	.word	.LC151-(.LPIC562+8)
	.fnend
	.size	grmnet_ctrl_smd_connect_w, .-grmnet_ctrl_smd_connect_w
	.align	2
	.type	rmnet_mux_open_sdio_work, %function
rmnet_mux_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L2594
	ldr	r1, [r0, #-172]
.LPIC564:
	add	r2, pc, r2
	ldr	r3, [r2, #-1436]
	cmp	r3, #90
	bgt	.L2593
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r3, r3, #1
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #124]
	mov	r0, #2000
	str	r3, [r2, #-1436]
	bl	msecs_to_jiffies(PLT)
	mov	r3, r0
	mov	r2, r4
	ldr	r6, [sp, #8]
	mov	r1, r5
	ldr	lr, [sp, #12]
	mov	r0, #4
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_delayed_work_on(PLT)
.L2593:
	ldr	r0, [r1]
	ldr	r1, .L2594+4
	add	r0, r0, #32
.LPIC565:
	add	r1, pc, r1
	b	dev_err(PLT)
.L2595:
	.align	2
.L2594:
	.word	.LANCHOR4-(.LPIC564+8)
	.word	.LC152-(.LPIC565+8)
	.fnend
	.size	rmnet_mux_open_sdio_work, .-rmnet_mux_open_sdio_work
	.align	2
	.type	gbam_start_rx, %function
gbam_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r5, r0, #4
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	mov	r10, r0
	mov	r0, r5
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r10, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L2600
	ldr	fp, .L2620
	ldr	r7, .L2620+4
	ldr	r8, [r3, #88]
	add	r3, r10, #52
.LPIC567:
	add	fp, pc, fp
	str	r3, [sp, #12]
.LPIC569:
	add	r7, pc, r7
.L2598:
	ldr	r4, [r10, #52]
	mvn	r3, #0
	mov	r2, #0
	ldr	r0, [sp, #12]
	mov	r1, #32
	cmp	r0, r4
	sub	r0, r4, #36
	str	r0, [sp, #4]
	beq	.L2600
	ldr	r0, [fp, #380]
	cmp	r0, #0
	beq	.L2599
	ldr	lr, [r10, #68]
	ldr	r0, [fp, #384]
	cmp	lr, r0
	bcs	.L2600
.L2599:
	ldr	r0, [r7, #388]
	add	r0, r0, #8
	bl	__alloc_skb(PLT)
	subs	r9, r0, #0
	mov	r0, r4
	beq	.L2600
	ldr	r1, [r9, #172]
	ldr	r2, [r9, #160]
	add	r1, r1, #8
	add	r2, r2, #8
	str	r1, [r9, #172]
	str	r2, [r9, #160]
	bl	list_del(PLT)
	ldr	r2, [r9, #172]
	mov	r1, r6
	mov	r0, r5
	str	r2, [r4, #-36]
	ldr	r2, [r7, #388]
	str	r9, [r4, #-4]
	str	r2, [r4, #-32]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	lr, [r8, #8]
	mov	r2, #32
	mov	r0, r8
	ldr	r1, [sp, #4]
	ldr	r6, [lr, #16]
	blx	r6
	str	r0, [sp, #8]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp, #8]
	mov	r6, r0
	cmp	r3, #0
	bne	.L2618
	ldr	r3, [r10, #12]
	cmp	r3, #0
	bne	.L2598
.L2600:
	mov	r0, r5
	mov	r1, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L2618:
	ldr	r7, .L2620+8
	mov	r0, r9
	bl	dev_kfree_skb_any(PLT)
.LPIC571:
	add	r7, pc, r7
	add	r7, r7, #980
	mov	r0, r7
	bl	__printk_ratelimit(PLT)
	cmp	r0, #0
	bne	.L2619
.L2602:
	ldr	r3, [r10, #12]
	cmp	r3, #0
	beq	.L2603
	mov	r0, r4
	ldr	r1, [sp, #12]
	ldr	r2, [r10, #52]
	bl	__list_add(PLT)
	b	.L2600
.L2603:
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r1, [sp, #4]
	ldr	r3, [r3, #12]
	blx	r3
	b	.L2600
.L2619:
	ldr	r0, .L2620+12
	mov	r1, r7
	ldr	r2, [sp, #8]
.LPIC572:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2602
.L2621:
	.align	2
.L2620:
	.word	.LANCHOR2-(.LPIC567+8)
	.word	.LANCHOR2-(.LPIC569+8)
	.word	.LANCHOR3-(.LPIC571+8)
	.word	.LC153-(.LPIC572+8)
	.fnend
	.size	gbam_start_rx, .-gbam_start_rx
	.align	2
	.type	gbam_epout_complete, %function
gbam_epout_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r7, [r1, #44]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0]
	ldr	r8, [r1, #32]
	cmn	r7, #104
	beq	.L2624
	cmp	r7, #0
	beq	.L2625
	cmn	r7, #108
	beq	.L2624
	ldr	r9, .L2653
.LPIC575:
	add	r9, pc, r9
	add	r9, r9, #996
	mov	r0, r9
	bl	__printk_ratelimit(PLT)
	cmp	r0, #0
	bne	.L2651
.L2627:
	mov	r0, r8
	add	r9, r5, #4
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r9
	bl	_raw_spin_lock(PLT)
.L2626:
	ldr	r3, .L2653+4
.LPIC578:
	add	r3, pc, r3
	ldr	r2, [r3, #380]
	cmp	r2, #0
	beq	.L2628
	ldr	r3, [r3, #384]
	ldr	r2, [r5, #68]
	cmp	r2, r3
	bcc	.L2628
	ldr	r3, [r5, #276]
	cmp	r3, #0
	bne	.L2650
	ldr	r3, [r5, #272]
	mov	r2, #1
	str	r2, [r5, #276]
	add	r3, r3, r2
	str	r3, [r5, #272]
.L2650:
	ldr	r1, [r5, #56]
	add	r0, r4, #36
	add	r2, r5, #52
	bl	__list_add(PLT)
	mov	r0, r9
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock(PLT)
.L2624:
	mov	r0, r8
	bl	dev_kfree_skb_any(PLT)
	mov	r3, #0
	mov	r1, r4
	mov	r0, r6
	str	r3, [r4]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L2628:
	ldr	r8, .L2653+8
	mov	r0, r9
	bl	_raw_spin_unlock(PLT)
	mov	r1, #32
	mov	r2, #0
	mvn	r3, #0
.LPIC580:
	add	r8, pc, r8
	ldr	r0, [r8, #388]
	add	r0, r0, #8
	bl	__alloc_skb(PLT)
	subs	r7, r0, #0
	beq	.L2632
	ldr	r3, [r7, #172]
	mov	r0, r6
	mov	r1, r4
	ldr	ip, [r7, #160]
	mov	r2, #32
	add	r3, r3, #8
	add	ip, ip, #8
	str	r3, [r7, #172]
	str	ip, [r7, #160]
	str	r3, [r4]
	ldr	r3, [r8, #388]
	str	r7, [r4, #32]
	str	r3, [r4, #4]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r8, r0, #0
	bne	.L2652
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L2625:
	ldr	r1, [r1, #48]
	mov	r0, r8
	add	r9, r5, #4
	bl	skb_put(PLT)
	mov	r0, r9
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r5, #64]
	add	ip, r5, #60
	add	r2, r5, #80
	ldr	r1, .L2653+12
	mov	r0, #4
	str	ip, [r8]
	str	r3, [r8, #4]
	str	r8, [r3]
	ldr	r3, [r5, #68]
.LPIC574:
	add	r1, pc, r1
	str	r8, [r5, #64]
	ldr	r1, [r1, #-1440]
	add	r3, r3, #1
	str	r3, [r5, #68]
	bl	queue_work_on(PLT)
	b	.L2626
.L2652:
	ldr	r6, .L2653+16
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
.LPIC582:
	add	r6, pc, r6
	add	r6, r6, #996
	mov	r0, r6
	bl	__printk_ratelimit(PLT)
	cmp	r0, #0
	beq	.L2632
	ldr	r0, .L2653+20
	mov	r1, r6
	mov	r2, r8
.LPIC583:
	add	r0, pc, r0
	bl	printk(PLT)
.L2632:
	mov	r0, r9
	bl	_raw_spin_lock(PLT)
	b	.L2650
.L2651:
	ldr	lr, [r4, #48]
	mov	r1, r9
	mov	r3, r7
	ldr	ip, [r4, #4]
	ldr	r0, .L2653+24
	ldr	r2, [r6, #4]
	str	lr, [sp]
	str	ip, [sp, #4]
.LPIC576:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2627
.L2654:
	.align	2
.L2653:
	.word	.LANCHOR3-(.LPIC575+8)
	.word	.LANCHOR2-(.LPIC578+8)
	.word	.LANCHOR2-(.LPIC580+8)
	.word	.LANCHOR4-(.LPIC574+8)
	.word	.LANCHOR3-(.LPIC582+8)
	.word	.LC155-(.LPIC583+8)
	.word	.LC154-(.LPIC576+8)
	.fnend
	.size	gbam_epout_complete, .-gbam_epout_complete
	.align	2
	.type	usb_rmnet_mux_ctrl_ioctl, %function
usb_rmnet_mux_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r3, #65024
	ldr	ip, [r0, #124]
	movt	r3, 32772
	cmp	r1, r3
	bne	.L2657
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	movne	r0, #4
	beq	.L2659
.L2656:
	bx	lr
.L2659:
	mov	r0, r2
	add	r1, ip, #352
	mov	r2, #4
	b	__copy_to_user(PLT)
.L2657:
	mvn	r0, #18
	b	.L2656
	.fnend
	.size	usb_rmnet_mux_ctrl_ioctl, .-usb_rmnet_mux_ctrl_ioctl
	.align	2
	.type	acc_ioctl, %function
acc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #19714
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movt	ip, 16640
	str	r6, [sp, #8]
	cmp	r1, ip
	str	lr, [sp, #12]
	ldr	r3, [r0, #124]
	beq	.L2662
	bls	.L2679
	movw	r0, #19716
	movt	r0, 16640
	cmp	r1, r0
	beq	.L2667
	bcc	.L2668
	movw	r0, #19717
	movt	r0, 16640
	cmp	r1, r0
	beq	.L2669
	movw	r0, #19718
	movt	r0, 16640
	cmp	r1, r0
	addeq	r5, r3, #1376
	addeq	r5, r5, #5
	bne	.L2674
.L2671:
	cmp	r5, #0
	beq	.L2674
	mov	r0, r5
	mov	r6, r2
	bl	strlen(PLT)
	mov	r3, sp
	add	r4, r0, #1
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	movne	r0, r4
	beq	.L2680
.L2672:
	cmp	r0, #0
	moveq	r0, r4
	mvnne	r0, #13
	b	.L2661
.L2679:
	movw	r0, #19720
	cmp	r1, r0
	beq	.L2664
	movw	r0, #19713
	movt	r0, 16640
	cmp	r1, r0
	beq	.L2665
	movw	r2, #19719
	cmp	r1, r2
	beq	.L2681
.L2674:
	mvn	r0, #21
.L2661:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2665:
	add	r5, r3, #101
	b	.L2671
.L2669:
	add	r5, r3, #1120
	add	r5, r5, #5
	b	.L2671
.L2680:
	mov	r0, r6
	mov	r1, r5
	mov	r2, r4
	bl	__copy_to_user(PLT)
	b	.L2672
.L2668:
	add	r5, r3, #612
	add	r5, r5, #1
	b	.L2671
.L2664:
	ldr	r0, [r3, #1648]
	b	.L2661
.L2681:
	ldr	r0, [r3, #1644]
	b	.L2661
.L2667:
	add	r5, r3, #868
	add	r5, r5, #1
	b	.L2671
.L2662:
	add	r5, r3, #356
	add	r5, r5, #1
	b	.L2671
	.fnend
	.size	acc_ioctl, .-acc_ioctl
	.align	2
	.type	rmnet_ctrl_ioctl, %function
rmnet_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r4, [r0, #124]
	.pad #12
	sub	sp, sp, #12
	add	r5, r4, #28
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r0, r3, [r5]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L2683
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L2691:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L2683:
	movw	r3, #29186
	mov	r0, r2
	movt	r3, 32772
	cmp	r1, r3
	bne	.L2695
	ldr	r2, [r4, #12]
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	str	r2, [sp, #4]
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r2, r0, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2686
.L2688:
	ldr	r0, .L2696
.LPIC585:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #13
.L2687:
	ldr	r3, [r4, #12]
.L2689:
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	b	.L2691
.L2686:
	add	r1, sp, #4
	mov	r2, #4
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	beq	.L2687
	b	.L2688
.L2695:
	ldr	r0, .L2696+4
.LPIC586:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #21
	b	.L2689
.L2697:
	.align	2
.L2696:
	.word	.LC156-(.LPIC585+8)
	.word	.LC157-(.LPIC586+8)
	.fnend
	.size	rmnet_ctrl_ioctl, .-rmnet_ctrl_ioctl
	.align	2
	.type	rndis_qc_ioctl, %function
rndis_qc_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	ldr	r4, .L2719
	mov	r3, #0
	ldr	r5, .L2719+4
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r7, r2
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
.LPIC587:
	add	r4, pc, r4
	add	r4, r4, #2496
	strb	r3, [sp, #3]
	add	r4, r4, #4
	str	r3, [sp, #4]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
.LPIC606:
	ldr	r5, [pc, r5]		@ tls_load_dot_plus_eight
	mov	r8, r0
	ldr	r3, [r5]
	cmp	r3, #0
	beq	.L2716
	ldrb	r0, [r3, #132]	@ zero_extendqisi2
	add	r2, r3, #148
	ldr	r1, [r3, #136]
	strb	r0, [sp, #3]
	str	r1, [sp, #4]
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r9, [r2]
	add	r9, r9, #1
	strex	r1, r9, [r2]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r9, #1
	beq	.L2701
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	mvn	r4, #15
.L2700:
	ldr	r0, .L2719+8
	mov	r1, r8
.LPIC602:
	add	r0, pc, r0
	add	r0, r0, #2496
	add	r0, r0, #4
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L2701:
	mov	r0, r4
	ldr	r4, .L2719+12
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L2719+16
	mov	r2, r6
.LPIC605:
	add	r4, pc, r4
	add	r4, r4, #1016
.LPIC604:
	add	r0, pc, r0
	mov	r1, r4
	bl	printk(PLT)
	movw	r3, #26881
	movt	r3, 32769
	cmp	r6, r3
	beq	.L2702
	movw	r3, #26882
	movt	r3, 32772
	cmp	r6, r3
	bne	.L2717
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2708
.L2709:
	ldr	r1, .L2719+20
	mvn	r4, #13
	ldr	r0, .L2719+24
.LPIC596:
	add	r1, pc, r1
	add	r1, r1, #1016
.LPIC595:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2706
.L2702:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #1; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2703
.L2705:
	ldr	r1, .L2719+28
	mvn	r4, #13
	ldr	r0, .L2719+32
.LPIC592:
	add	r1, pc, r1
.LPIC591:
	add	r0, pc, r0
	add	r1, r1, #1016
	bl	printk(PLT)
.L2704:
	ldr	r1, .L2719+36
	ldr	r0, .L2719+40
	ldrb	r2, [sp, #3]	@ zero_extendqisi2
.LPIC594:
	add	r1, pc, r1
.LPIC593:
	add	r0, pc, r0
	add	r1, r1, #1016
	bl	printk(PLT)
.L2706:
	ldr	r0, .L2719+44
.LPIC599:
	add	r0, pc, r0
	add	r0, r0, #2496
	add	r0, r0, #4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5]
	mov	r8, r0
	cmp	r3, #0
	beq	.L2718
	add	r2, r3, #148
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	b	.L2700
.L2716:
	ldr	r1, .L2719+48
	mvn	r4, #18
	ldr	r0, .L2719+52
.LPIC590:
	add	r1, pc, r1
	add	r1, r1, #1016
.LPIC589:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2700
.L2717:
	ldr	r0, .L2719+56
	mov	r1, r4
	mvn	r4, #21
.LPIC597:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2706
.L2708:
	mov	r0, r7
	add	r1, sp, #4
	mov	r2, #4
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	bne	.L2709
	mov	r4, r0
	b	.L2706
.L2718:
	ldr	r1, .L2719+60
	mvn	r4, #18
	ldr	r0, .L2719+64
.LPIC601:
	add	r1, pc, r1
	add	r1, r1, #1016
.LPIC600:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2700
.L2703:
	mov	r0, r7
	mov	r2, r9
	add	r1, sp, #3
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	bne	.L2705
	mov	r4, r0
	b	.L2704
.L2720:
	.align	2
.L2719:
	.word	.LANCHOR1-(.LPIC587+8)
	.word	_rndis_qc(GOT_PREL)+(.-(.LPIC606+8))
	.word	.LANCHOR1-(.LPIC602+8)
	.word	.LANCHOR3-(.LPIC605+8)
	.word	.LC161-(.LPIC604+8)
	.word	.LANCHOR3-(.LPIC596+8)
	.word	.LC158-(.LPIC595+8)
	.word	.LANCHOR3-(.LPIC592+8)
	.word	.LC158-(.LPIC591+8)
	.word	.LANCHOR3-(.LPIC594+8)
	.word	.LC159-(.LPIC593+8)
	.word	.LANCHOR1-(.LPIC599+8)
	.word	.LANCHOR3-(.LPIC590+8)
	.word	.LC60-(.LPIC589+8)
	.word	.LC160-(.LPIC597+8)
	.word	.LANCHOR3-(.LPIC601+8)
	.word	.LC60-(.LPIC600+8)
	.fnend
	.size	rndis_qc_ioctl, .-rndis_qc_ioctl
	.align	2
	.type	mbim_ioctl, %function
mbim_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	add	r5, r4, #96
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r0, r3, [r5]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L2722
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L2734:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2722:
	movw	r3, #28419
	mov	r0, r2
	movt	r3, 32770
	cmp	r1, r3
	beq	.L2729
	movw	r3, #28418
	movt	r3, 32772
	cmp	r1, r3
	bne	.L2738
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2725
.L2727:
	ldr	r1, .L2739
	mvn	r6, #13
	ldr	r0, .L2739+4
.LPIC608:
	add	r1, pc, r1
	add	r1, r1, #1024
.LPIC607:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
.L2726:
	ldr	r1, .L2739+8
	ldr	r0, .L2739+12
	ldr	r2, [r4, #224]
.LPIC610:
	add	r1, pc, r1
	add	r1, r1, #1024
.LPIC609:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L2728
.L2738:
	ldr	r1, .L2739+16
	mvn	r6, #21
	ldr	r0, .L2739+20
.LPIC616:
	add	r1, pc, r1
	add	r1, r1, #1024
.LPIC615:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
.L2728:
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, r6
	b	.L2734
.L2729:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r1, r0, #2; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2730
.L2732:
	ldr	r1, .L2739+24
	mvn	r6, #13
	ldr	r0, .L2739+28
.LPIC612:
	add	r1, pc, r1
	add	r1, r1, #1024
.LPIC611:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
.L2731:
	ldr	r1, .L2739+32
	ldr	r0, .L2739+36
	ldrh	r2, [r4, #228]
.LPIC614:
	add	r1, pc, r1
	add	r1, r1, #1024
.LPIC613:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L2728
.L2725:
	add	r1, r4, #224
	mov	r2, #4
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	bne	.L2727
	mov	r6, r0
	b	.L2726
.L2730:
	add	r1, r4, #228
	mov	r2, #2
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	bne	.L2732
	mov	r6, r0
	b	.L2731
.L2740:
	.align	2
.L2739:
	.word	.LANCHOR3-(.LPIC608+8)
	.word	.LC158-(.LPIC607+8)
	.word	.LANCHOR3-(.LPIC610+8)
	.word	.LC162-(.LPIC609+8)
	.word	.LANCHOR3-(.LPIC616+8)
	.word	.LC164-(.LPIC615+8)
	.word	.LANCHOR3-(.LPIC612+8)
	.word	.LC158-(.LPIC611+8)
	.word	.LANCHOR3-(.LPIC614+8)
	.word	.LC163-(.LPIC613+8)
	.fnend
	.size	mbim_ioctl, .-mbim_ioctl
	.align	2
	.global	usb_rmnet_mux_ctrl_read
	.type	usb_rmnet_mux_ctrl_read, %function
usb_rmnet_mux_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r8, [sp, #16]
	mov	r8, r1
	mov	r9, r2
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #32
	sub	sp, sp, #32
	ldr	r4, [r0, #124]
	mov	r3, sp
	bic	r7, r3, #8128
	bic	r7, r7, #63
.L2742:
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L2751
	add	r6, r4, #368
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, r4
	mov	r1, r0
	ldr	r5, [r3, #316]!
	cmp	r5, r3
	bne	.L2744
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #316]
	cmp	r5, r3
	bne	.L2742
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L2742
	ldr	r2, .L2764
	mov	r3, #0
	add	r6, sp, #12
	ldr	r1, [r7, #12]
	add	r10, r4, #324
	str	r3, [sp, #12]
	add	r3, sp, #24
.LPIC620:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #24]
	str	r3, [sp, #28]
	str	r1, [sp, #16]
	str	r2, [sp, #20]
	b	.L2748
.L2761:
	bl	schedule(PLT)
.L2748:
	mov	r0, r10
	mov	r1, r6
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #316]
	cmp	r5, r3
	bne	.L2746
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L2746
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2761
	mov	r9, #65024
	mov	r0, r10
	mov	r1, r6
	movt	r9, 65535
	bl	finish_wait(PLT)
.L2759:
	mov	r0, r9
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2751:
	mvn	r9, #18
	b	.L2759
.L2744:
	ldr	r3, [r5, #-4]
	sub	r7, r5, #8
	cmp	r3, r9
	bhi	.L2762
	str	r0, [sp, #4]
	mov	r0, r5
	bl	list_del(PLT)
	ldr	r3, [r4, #336]
	mov	r0, r6
	ldr	r1, [sp, #4]
	sub	r3, r3, #1
	str	r3, [r4, #336]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r3, sp
	ldr	r9, [r5, #-4]
	bic	r3, r3, #8128
	ldr	r1, [r5, #-8]
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r2, r8, r9; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	mov	r0, r9
	beq	.L2763
.L2750:
	ldr	r3, [r4, #420]
	cmp	r0, #0
	movne	r9, r0
	add	r3, r3, #1
	str	r3, [r4, #420]
	ldr	r0, [r5, #-8]
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
	b	.L2759
.L2746:
	mov	r0, r10
	mov	r1, r6
	bl	finish_wait(PLT)
	b	.L2742
.L2763:
	mov	r0, r8
	mov	r2, r9
	bl	__copy_to_user(PLT)
	b	.L2750
.L2762:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, .L2764+4
	mov	r3, r9
	mvn	r9, #11
	ldr	r0, .L2764+8
	ldr	r2, [r5, #-4]
.LPIC619:
	add	r1, pc, r1
	add	r1, r1, #1040
.LPIC618:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L2759
.L2765:
	.align	2
.L2764:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC620+8))
	.word	.LANCHOR3-(.LPIC619+8)
	.word	.LC165-(.LPIC618+8)
	.fnend
	.size	usb_rmnet_mux_ctrl_read, .-usb_rmnet_mux_ctrl_read
	.align	2
	.type	rmnet_ctrl_read, %function
rmnet_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r2, #2048
	strd	r10, [sp, #24]
	mov	fp, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r4, [r0, #124]
	str	r1, [sp]
	bhi	.L2783
	add	r10, r4, #20
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r10]
	add	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L2769
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r0, .L2788
.LPIC622:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #15
.L2781:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2769:
	mov	r3, sp
	add	r6, r4, #52
	bic	r9, r3, #8128
	add	r5, r4, #44
	bic	r9, r9, #63
.L2771:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r7, [r4, #44]
	mov	r1, r0
	cmp	r5, r7
	bne	.L2770
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #44]
	cmp	r3, r5
	bne	.L2771
	ldr	r2, .L2788+4
	mov	r3, #0
	add	r7, sp, #12
	ldr	r1, [r9, #12]
	add	r8, r4, #32
	str	r3, [sp, #12]
	add	r3, sp, #24
.LPIC626:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #24]
	str	r3, [sp, #28]
	str	r1, [sp, #16]
	str	r2, [sp, #20]
	b	.L2774
.L2784:
	bl	schedule(PLT)
.L2774:
	mov	r0, r8
	mov	r1, r7
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #44]
	cmp	r5, r3
	bne	.L2772
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2784
	mov	r0, r8
	mov	r1, r7
	bl	finish_wait(PLT)
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, #65024
	movt	r0, 65535
	b	.L2781
.L2772:
	mov	r0, r8
	mov	r1, r7
	bl	finish_wait(PLT)
	b	.L2771
.L2770:
	str	r0, [sp, #4]
	mov	r0, r7
	sub	r5, r7, #8
	bl	list_del(PLT)
	ldr	r1, [sp, #4]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, [r7, #-4]
	cmp	fp, r1
	bcc	.L2785
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r3, sp
	ldr	r2, [r7, #-4]
	bic	r3, r3, #8128
	ldr	ip, [sp]
	bic	r3, r3, #63
	ldr	r1, [r7, #-8]
	ldr	r3, [r3, #8]
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r0, ip, r2; sbcccs r0, r0, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2786
.L2776:
	cmp	r2, #0
	ldreq	r4, [r7, #-4]
	bne	.L2787
.L2778:
	ldr	r0, [r7, #-8]
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
	b	.L2781
.L2786:
	mov	r0, ip
	bl	__copy_to_user(PLT)
	mov	r2, r0
	b	.L2776
.L2785:
	ldr	r0, .L2788+8
	mov	r2, fp
.LPIC624:
	add	r0, pc, r0
	bl	printk(PLT)
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r10]
	sub	r3, r3, #1
	strex	r2, r3, [r10]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r0, [r7, #-8]
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	mvn	r0, #11
	b	.L2781
.L2787:
	ldr	r0, .L2788+12
	mov	r1, r2
	mvn	r4, #13
.LPIC625:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L2778
.L2783:
	ldr	r0, .L2788+16
	mov	r1, r2
	mov	r2, #2048
.LPIC621:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #21
	b	.L2781
.L2789:
	.align	2
.L2788:
	.word	.LC167-(.LPIC622+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC626+8))
	.word	.LC168-(.LPIC624+8)
	.word	.LC169-(.LPIC625+8)
	.word	.LC166-(.LPIC621+8)
	.fnend
	.size	rmnet_ctrl_read, .-rmnet_ctrl_read
	.align	2
	.type	acc_read, %function
acc_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	.pad #24
	sub	sp, sp, #24
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L2804
	ands	r3, r3, #1
	mov	r5, r2
	mov	r9, r1
	bne	.L2792
	ldr	r2, .L2822
	mov	r1, sp
	str	r3, [sp, #4]
	bic	r6, r1, #8128
	add	r3, sp, #16
	bic	r6, r6, #63
	add	r8, r4, #1664
	ldr	r1, [r6, #12]
	add	r7, sp, #4
	str	r3, [sp, #16]
.LPIC629:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L2795
.L2818:
	bl	schedule(PLT)
.L2795:
	mov	r0, r8
	mov	r1, r7
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L2793
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2818
	mov	r0, r8
	mov	r1, r7
	bl	finish_wait(PLT)
	mov	r0, #65024
	movt	r0, 65535
.L2816:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2793:
	mov	r0, r8
	mov	r1, r7
	bl	finish_wait(PLT)
.L2792:
	ldr	r3, [r4, #1696]
	cmp	r5, #16384
	movcs	r5, #16384
	cmp	r3, #0
	beq	.L2796
	ldr	r6, [r4, #1688]
.L2797:
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	mov	r2, #0
	str	r2, [r4, #1696]
	tst	r3, #1
	beq	.L2802
	ldr	r3, [r6, #48]
	cmp	r3, r2
	bne	.L2819
.L2796:
	ldr	r6, [r4, #1688]
	mov	r3, #0
	mov	r2, #208
	str	r5, [r6, #4]
	ldr	r0, [r4, #96]
	mov	r1, r6
	str	r3, [r4, #1696]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L2802
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L2797
	ldr	r2, .L2822+4
	mov	r1, sp
	str	r3, [sp, #4]
	bic	r8, r1, #8128
	add	r3, sp, #16
	bic	r8, r8, #63
	add	r10, r4, #1664
	ldr	r1, [r8, #12]
	add	r7, sp, #4
	str	r3, [sp, #16]
.LPIC628:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L2801
.L2820:
	bl	schedule(PLT)
.L2801:
	mov	r0, r10
	mov	r1, r7
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #1696]
	cmp	r3, #0
	bne	.L2799
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2820
	mov	r0, r10
	mov	r1, r7
	bl	finish_wait(PLT)
	ldr	r0, [r4, #96]
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	mov	r0, #65024
	movt	r0, 65535
	b	.L2816
.L2802:
	mvn	r0, #4
	b	.L2816
.L2819:
	mov	r2, sp
	cmp	r5, r3
	ldr	r1, [r6]
	bic	r2, r2, #8128
	movcs	r5, r3
	bic	r2, r2, #63
	ldr	r3, [r2, #8]
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	movne	r0, r5
	beq	.L2821
.L2803:
	cmp	r0, #0
	moveq	r0, r5
	mvnne	r0, #13
	b	.L2816
.L2804:
	mvn	r0, #18
	b	.L2816
.L2799:
	mov	r0, r10
	mov	r1, r7
	bl	finish_wait(PLT)
	b	.L2797
.L2821:
	mov	r0, r9
	mov	r2, r5
	bl	__copy_to_user(PLT)
	b	.L2803
.L2823:
	.align	2
.L2822:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC629+8))
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC628+8))
	.fnend
	.size	acc_read, .-acc_read
	.align	2
	.type	ccid_ctrl_read, %function
ccid_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r5, [r0, #124]
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L2831
	ldr	r3, [r5, #144]
	cmp	r2, #4
	mov	r4, r2
	movcc	r4, r2
	movcs	r4, #4
	mov	r7, r1
	cmp	r3, #0
	bne	.L2827
	ldr	r2, .L2842
	mov	r1, sp
	str	r3, [sp, #4]
	bic	r6, r1, #8128
	add	r3, sp, #16
	bic	r6, r6, #63
	add	r9, r5, #128
	ldr	r1, [r6, #12]
	add	r8, sp, #4
	str	r3, [sp, #16]
.LPIC631:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L2830
.L2840:
	bl	schedule(PLT)
.L2830:
	mov	r0, r9
	mov	r1, r8
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r3, [r5, #144]
	cmp	r3, #0
	bne	.L2828
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2840
	mov	r0, r9
	mov	r1, r8
	bl	finish_wait(PLT)
	mov	r0, #65024
	movt	r0, 65535
	b	.L2838
.L2828:
	mov	r0, r9
	mov	r1, r8
	bl	finish_wait(PLT)
.L2827:
	ldr	r3, [r5, #96]
	mov	r2, #0
	str	r2, [r5, #144]
	cmp	r3, r2
	beq	.L2831
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	movne	r0, r4
	beq	.L2841
.L2832:
	cmp	r0, #0
	moveq	r0, r4
	mvnne	r0, #13
.L2838:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L2841:
	mov	r0, r7
	add	r1, r5, #140
	mov	r2, r4
	bl	__copy_to_user(PLT)
	b	.L2832
.L2831:
	mvn	r0, #18
	b	.L2838
.L2843:
	.align	2
.L2842:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC631+8))
	.fnend
	.size	ccid_ctrl_read, .-ccid_ctrl_read
	.align	2
	.type	modem_read, %function
modem_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #32]
	tst	r3, #2048
	bne	.L2852
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	ldr	r4, .L2856
	strd	r6, [sp, #8]
	mov	r7, r1
	str	lr, [sp, #16]
	.pad #28
	sub	sp, sp, #28
.LPIC632:
	add	r4, pc, r4
	ldr	r3, [r4]
	cmp	r3, #0
	bne	.L2846
	ldr	r2, .L2856+4
	mov	r1, sp
	str	r3, [sp, #4]
	bic	r1, r1, #8128
	add	r3, sp, #16
	bic	r1, r1, #63
	add	r6, r4, #4
	ldr	r1, [r1, #12]
	add	r5, sp, #4
	str	r3, [sp, #16]
.LPIC640:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L2849
.L2855:
	bl	schedule(PLT)
.L2849:
	mov	r2, #1
	mov	r0, r6
	mov	r1, r5
	bl	prepare_to_wait(PLT)
	ldr	r2, [r4]
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	cmp	r2, #0
	bne	.L2847
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2855
	mov	r0, r6
	mov	r1, r5
	bl	finish_wait(PLT)
	mov	r0, #65024
	movt	r0, 65535
	b	.L2853
.L2847:
	mov	r0, r6
	mov	r1, r5
	bl	finish_wait(PLT)
.L2846:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2850
.L2851:
	mvn	r0, #13
.L2853:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L2850:
	ldr	r1, .L2856+8
	mov	r2, #4
	mov	r0, r7
.LPIC636:
	add	r1, pc, r1
	sub	r1, r1, #1424
	sub	r1, r1, #8
	bl	__copy_to_user(PLT)
	subs	r2, r0, #0
	bne	.L2851
	ldr	r3, .L2856+12
	mov	r0, #4
.LPIC637:
	add	r3, pc, r3
	str	r2, [r3]
	b	.L2853
.L2852:
	mvn	r0, #10
	bx	lr
.L2857:
	.align	2
.L2856:
	.word	.LANCHOR1-(.LPIC632+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC640+8))
	.word	.LANCHOR4-(.LPIC636+8)
	.word	.LANCHOR1-(.LPIC637+8)
	.fnend
	.size	modem_read, .-modem_read
	.align	2
	.type	adb_read, %function
adb_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L2900
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC641:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r5, [r3, #-1472]
	ldr	r4, [r0, #124]
	cmp	r5, #0
	beq	.L2878
	cmp	r2, #4096
	bhi	.L2879
	add	r8, r4, #108
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r6, [r8]
	add	r6, r6, #1
	strex	r3, r6, [r8]
	teq	r3, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r6, #1
	beq	.L2893
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L2891:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L2893:
	mov	r3, sp
	mov	r9, r2
	bic	r7, r3, #8128
	mov	r10, r1
	bic	r7, r7, #63
.L2861:
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L2866
.L2895:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L2866
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L2861
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L2861
	ldr	r2, .L2900+4
	add	r5, sp, #4
	add	r6, r4, #128
	ldr	r1, [r7, #12]
	str	r3, [sp, #4]
	add	r3, sp, #16
	str	r3, [sp, #16]
.LPIC644:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L2865
.L2894:
	bl	schedule(PLT)
.L2865:
	mov	r0, r6
	mov	r1, r5
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #100]
	cmp	r3, #0
	bne	.L2863
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L2863
	ldr	r3, [r7, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2894
	mov	r0, r6
	mov	r1, r5
	bl	finish_wait(PLT)
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, #65024
	movt	r0, 65535
	b	.L2891
.L2863:
	mov	r0, r6
	mov	r1, r5
	bl	finish_wait(PLT)
	ldr	r3, [r4, #100]
	cmp	r3, #0
	beq	.L2895
.L2866:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L2875
	mov	r3, sp
	bic	fp, r3, #8128
	bic	fp, fp, #63
.L2868:
	ldr	r6, [r4, #152]
	mov	r1, #4096
	mov	r3, #0
	mov	r2, #32
	str	r1, [r6, #4]
	ldr	r0, [r4, #96]
	mov	r1, r6
	str	r3, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L2896
	ldr	r3, [r4, #156]
	cmp	r3, #0
	bne	.L2871
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L2871
	ldr	r2, .L2900+8
	add	r5, sp, #4
	add	r7, r4, #128
	ldr	r1, [fp, #12]
	str	r3, [sp, #4]
	add	r3, sp, #16
	str	r3, [sp, #16]
.LPIC643:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L2874
.L2897:
	bl	schedule(PLT)
.L2874:
	mov	r0, r7
	mov	r1, r5
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #156]
	cmp	r3, #0
	bne	.L2872
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L2872
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L2897
	mov	r0, r7
	mov	r1, r5
	bl	finish_wait(PLT)
	ldr	r0, [r4, #96]
	mov	r10, #65024
	mov	r1, r6
	movt	r10, 65535
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
.L2869:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L2898
.L2877:
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r2, r3, [r8]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, r10
	b	.L2891
.L2872:
	mov	r0, r7
	mov	r1, r5
	bl	finish_wait(PLT)
.L2871:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L2875
	ldr	r2, [r6, #48]
	cmp	r2, #0
	beq	.L2868
	mov	r3, sp
	cmp	r2, r9
	ldr	r1, [r6]
	bic	r3, r3, #8128
	movcs	r2, r9
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r0, r10, r2; sbcccs r0, r0, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2899
.L2876:
	cmp	r2, #0
	moveq	r10, r9
	mvnne	r10, #13
	b	.L2869
.L2875:
	ldr	r3, [r4, #104]
	mvn	r10, #4
	cmp	r3, #0
	beq	.L2877
.L2898:
	add	r0, r4, #140
	mov	r1, #3
	mov	r2, #1
	mov	r3, #0
	bl	__wake_up(PLT)
	b	.L2877
.L2896:
	mov	r3, #1
	mvn	r10, #4
	str	r3, [r4, #104]
	b	.L2869
.L2879:
	mvn	r0, #21
	b	.L2891
.L2899:
	mov	r0, r10
	bl	__copy_to_user(PLT)
	mov	r2, r0
	b	.L2876
.L2878:
	mvn	r0, #18
	b	.L2891
.L2901:
	.align	2
.L2900:
	.word	.LANCHOR4-(.LPIC641+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC644+8))
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC643+8))
	.fnend
	.size	adb_read, .-adb_read
	.align	2
	.global	usb_rmnet_mux_ctrl_write
	.type	usb_rmnet_mux_ctrl_write, %function
usb_rmnet_mux_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	ldr	r2, [r4, #372]
	cmp	r2, #0
	beq	.L2915
	cmp	r3, #0
	mov	r5, r3
	mov	r6, r1
	beq	.L2925
	cmp	r3, #4096
	bhi	.L2926
	ldr	r3, .L2930
.LPIC655:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L2916
	movw	r1, #32976
	mov	r2, #16
	bl	kmem_cache_alloc_trace(PLT)
	subs	r7, r0, #0
	beq	.L2907
.L2906:
	mov	r0, r5
	movw	r1, #32976
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r7]
	beq	.L2927
	mov	r3, sp
	str	r5, [r7, #4]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 439 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2928
	mov	r1, r5
	bl	__memzero(PLT)
.L2910:
	ldr	r1, .L2930+4
	mov	r2, r5
	ldr	r0, .L2930+8
.LPIC651:
	add	r1, pc, r1
	add	r1, r1, #1056
.LPIC650:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r0, [r7]
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
.L2919:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2916:
	mov	r7, #16
	b	.L2906
.L2928:
	mov	r1, r6
	mov	r2, r5
	bl	__copy_from_user(PLT)
	subs	r9, r0, #0
	bne	.L2929
	add	r6, r4, #368
	add	r8, r4, #376
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #348]
	mov	r10, r0
	add	r1, r4, #340
	add	r0, r7, #8
	ldr	r2, [r4, #340]
	add	r3, r3, #1
	str	r3, [r4, #348]
	bl	__list_add(PLT)
	mov	r0, r6
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #100]
	ldr	r6, [r4, #84]
	ldr	r3, [r3]
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r8]
	add	r2, r2, #1
	strex	r1, r2, [r8]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #1
	bne	.L2919
	mvn	r1, #94
	strb	r2, [r3, #1]
	mov	r2, #32
	strb	r9, [r3, #2]
	strb	r9, [r3, #3]
	strb	r1, [r3]
	ldrb	r1, [r4, #360]	@ zero_extendqisi2
	strb	r9, [r3, #6]
	strb	r9, [r3, #7]
	strh	r1, [r3, #4]	@ unaligned
	ldrd	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r2, r0, #0
	bge	.L2919
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r8]
	sub	r3, r3, #1
	strex	r1, r3, [r8]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L2930+12
	ldr	r0, [r6]
.LPIC652:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L2919
.L2915:
	mvn	r5, #18
	b	.L2919
.L2927:
	mov	r0, r7
	bl	kfree(PLT)
.L2907:
	ldr	r1, .L2930+16
	mvn	r5, #11
	ldr	r0, .L2930+20
.LPIC654:
	add	r1, pc, r1
	add	r1, r1, #1056
.LPIC653:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L2919
.L2926:
	ldr	r1, .L2930+24
	mov	r2, #4096
	mvn	r5, #11
	ldr	r0, .L2930+28
.LPIC648:
	add	r1, pc, r1
	add	r1, r1, #1056
.LPIC647:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L2919
.L2925:
	ldr	r1, .L2930+32
	mvn	r5, #18
	ldr	r0, .L2930+36
.LPIC646:
	add	r1, pc, r1
	add	r1, r1, #1056
.LPIC645:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L2919
.L2929:
	mov	r5, r9
	b	.L2910
.L2931:
	.align	2
.L2930:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC655+8))
	.word	.LANCHOR3-(.LPIC651+8)
	.word	.LC172-(.LPIC650+8)
	.word	.LC173-(.LPIC652+8)
	.word	.LANCHOR3-(.LPIC654+8)
	.word	.LC174-(.LPIC653+8)
	.word	.LANCHOR3-(.LPIC648+8)
	.word	.LC171-(.LPIC647+8)
	.word	.LANCHOR3-(.LPIC646+8)
	.word	.LC170-(.LPIC645+8)
	.fnend
	.size	usb_rmnet_mux_ctrl_write, .-usb_rmnet_mux_ctrl_write
	.align	2
	.type	rmnet_ctrl_write, %function
rmnet_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r3, r2, #1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	cmp	r3, #2048
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #124]
	bcs	.L2943
	mov	r7, r1
	mov	r5, r2
	add	r6, r4, #24
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r6]
	add	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L2934
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r0, .L2959
.LPIC656:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #15
.L2950:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L2934:
	ldr	r3, [r4, #8]
	cmp	r3, #0
	beq	.L2954
	mov	r0, r5
	mov	r1, #208
	bl	__kmalloc(PLT)
	subs	r8, r0, #0
	beq	.L2955
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 439 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r5; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2956
	mov	r1, r5
	bl	__memzero(PLT)
	mov	r0, r5
.L2937:
	cmp	r0, #0
	bne	.L2957
	add	r7, r4, #52
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r9, r0
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L2939
	ldr	r3, [r0, #92]
	cmp	r3, #0
	beq	.L2939
	mov	r1, r8
	mov	r2, r5
	blx	r3
	subs	r10, r0, #0
	bne	.L2958
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r8
	bl	kfree(PLT)
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, r5
	b	.L2950
.L2956:
	mov	r1, r7
	mov	r2, r5
	bl	__copy_from_user(PLT)
	b	.L2937
.L2943:
	mvn	r0, #21
	b	.L2950
.L2954:
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #31
	b	.L2950
.L2939:
	ldr	r0, .L2959+4
.LPIC660:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r8
	bl	kfree(PLT)
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #21
	b	.L2950
.L2955:
	ldr	r0, .L2959+8
.LPIC657:
	add	r0, pc, r0
	bl	printk(PLT)
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #11
	b	.L2950
.L2958:
	ldr	r0, .L2959+12
	mov	r1, r10
.LPIC659:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r8
	bl	kfree(PLT)
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, r10
	b	.L2950
.L2957:
	mov	r1, r0
	ldr	r0, .L2959+16
.LPIC658:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r8
	bl	kfree(PLT)
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #13
	b	.L2950
.L2960:
	.align	2
.L2959:
	.word	.LC175-(.LPIC656+8)
	.word	.LC179-(.LPIC660+8)
	.word	.LC176-(.LPIC657+8)
	.word	.LC178-(.LPIC659+8)
	.word	.LC177-(.LPIC658+8)
	.fnend
	.size	rmnet_ctrl_write, .-rmnet_ctrl_write
	.align	2
	.type	ccid_ctrl_ioctl, %function
ccid_ctrl_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	movw	r3, #17154
	str	r6, [sp, #8]
	movt	r3, 16388
	str	lr, [sp, #12]
	ldr	r5, [r0, #124]
	cmp	r1, r3
	ldr	r4, [r5, #112]
	ldr	r0, [r4]
	beq	.L2963
	movw	r3, #17155
	movt	r3, 32772
	cmp	r1, r3
	beq	.L2964
	movw	r3, #17153
	movt	r3, 16388
	cmp	r1, r3
	movne	r1, r4
	beq	.L2978
.L2962:
	ldr	r0, [r5, #100]
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	movge	r0, #0
	blt	.L2979
.L2968:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2978:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 439 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	bne	.L2969
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	bne	.L2977
	mov	r3, #2
	str	r3, [r4, #4]
	ldr	r1, [r5, #112]
	b	.L2962
.L2963:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 439 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L2980
.L2969:
	mov	r1, #4
	bl	__memzero(PLT)
.L2977:
	mvn	r0, #13
	b	.L2968
.L2964:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r1, r2, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	bne	.L2977
	mov	r0, r2
	add	r1, r5, #200
	mov	r2, #4
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	beq	.L2968
	b	.L2977
.L2980:
	mov	r1, r2
	mov	r2, #4
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	bne	.L2977
	mov	r3, #4
	str	r3, [r4, #4]
	ldr	r1, [r5, #112]
	b	.L2962
.L2979:
	ldr	r0, .L2981
	mov	r1, r4
.LPIC661:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	b	.L2968
.L2982:
	.align	2
.L2981:
	.word	.LC180-(.LPIC661+8)
	.fnend
	.size	ccid_ctrl_ioctl, .-ccid_ctrl_ioctl
	.align	2
	.type	ffs_prepare_buffer, %function
ffs_prepare_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L2985
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	mov	r6, r0
	mov	r0, r1
	mov	r1, #208
	str	lr, [sp, #12]
	bl	__kmalloc(PLT)
	subs	r5, r0, #0
	mvneq	r0, #11
	beq	.L2984
	mov	r1, r6
	mov	r2, r4
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	mov	r0, r5
	bne	.L2989
.L2984:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L2985:
	mov	r0, r1
	bx	lr
.L2989:
	bl	kfree(PLT)
	mvn	r0, #13
	b	.L2984
	.fnend
	.size	ffs_prepare_buffer, .-ffs_prepare_buffer
	.align	2
	.type	eth_get_drvinfo, %function
eth_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	ldr	r1, .L2993
	mov	r5, r0
	mov	r2, #32
	str	lr, [sp, #12]
	add	r0, r4, #4
	str	r6, [sp, #8]
.LPIC662:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	ldr	r1, .L2993+4
	add	r0, r4, #36
	mov	r2, #32
.LPIC663:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	ldr	r3, [r5, #1164]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy(PLT)
	ldr	r3, [r5, #1164]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy(PLT)
.L2994:
	.align	2
.L2993:
	.word	.LC181-(.LPIC662+8)
	.word	.LC182-(.LPIC663+8)
	.fnend
	.size	eth_get_drvinfo, .-eth_get_drvinfo
	.align	2
	.type	eth_qc_get_drvinfo, %function
eth_qc_get_drvinfo:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	ldr	r1, .L2998
	mov	r5, r0
	mov	r2, #32
	str	lr, [sp, #12]
	add	r0, r4, #4
	str	r6, [sp, #8]
.LPIC664:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	ldr	r1, .L2998+4
	add	r0, r4, #36
	mov	r2, #32
.LPIC665:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	ldr	r3, [r5, #1164]
	add	r0, r4, #68
	mov	r2, #32
	ldr	r1, [r3, #28]
	bl	strlcpy(PLT)
	ldr	r3, [r5, #1164]
	add	r0, r4, #100
	mov	r2, #32
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r1, [r3, #76]
	cmp	r1, #0
	ldreq	r1, [r3, #40]
	b	strlcpy(PLT)
.L2999:
	.align	2
.L2998:
	.word	.LC183-(.LPIC664+8)
	.word	.LC182-(.LPIC665+8)
	.fnend
	.size	eth_qc_get_drvinfo, .-eth_qc_get_drvinfo
	.align	2
	.type	pm_qos_store, %function
pm_qos_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	add	r0, r0, #52
	mov	r1, r5
	mov	r2, #5
	bl	strlcpy(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	pm_qos_store, .-pm_qos_store
	.align	2
	.type	ecm_transports_store, %function
ecm_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L3004
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
.LPIC666:
	add	r0, pc, r0
	sub	r0, r0, #1424
	sub	r0, r0, #4
	bl	strlcpy(PLT)
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3005:
	.align	2
.L3004:
	.word	.LANCHOR4-(.LPIC666+8)
	.fnend
	.size	ecm_transports_store, .-ecm_transports_store
	.align	2
	.type	usb_diag_update_pid_and_serial_num, %function
usb_diag_update_pid_and_serial_num:
	.fnstart
	@ args = 0, pretend = 0, frame = 144
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L3017
	mov	r2, #140
	strd	r6, [sp, #8]
	ldr	r6, .L3017+4
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r1, #0
	mov	r8, r0
	str	lr, [sp, #20]
	.pad #144
	sub	sp, sp, #144
.LPIC668:
	ldr	r5, [pc, r5]		@ tls_load_dot_plus_eight
	mov	r0, sp
	mov	r4, sp
	ldr	r3, [r5]
	str	r3, [sp, #140]
	bl	memset(PLT)
.LPIC669:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	ldr	r3, [r6]
	cmp	r3, #0
	beq	.L3012
	movw	r3, #10505
	cmp	r7, #0
	str	r8, [sp]
	movt	r3, 28995
	str	r3, [sp, #132]
	beq	.L3015
	movw	r3, #21364
	mov	r1, r7
	movt	r3, 24980
	add	r0, sp, #4
	mov	r2, #128
	str	r3, [sp, #136]
	bl	strlcpy(PLT)
.L3009:
	ldr	r2, [r6]
	mov	r3, r4
	add	r0, sp, #140
	sub	r2, r2, #4
.L3010:
	ldr	r1, [r3], #4
	cmp	r3, r0
	str	r1, [r2, #4]!
	bne	.L3010
	mov	r0, #0
.L3007:
	ldr	r2, [sp, #140]
	ldr	r3, [r5]
	cmp	r2, r3
	bne	.L3016
	add	sp, sp, #144
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3015:
	add	r0, sp, #4
	mov	r1, #128
	bl	__memzero(PLT)
	b	.L3009
.L3012:
	mvn	r0, #18
	b	.L3007
.L3016:
	bl	__stack_chk_fail(PLT)
.L3018:
	.align	2
.L3017:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC668+8))
	.word	diag_dload(GOT_PREL)+(.-(.LPIC669+8))
	.fnend
	.size	usb_diag_update_pid_and_serial_num, .-usb_diag_update_pid_and_serial_num
	.align	2
	.type	clients_store, %function
clients_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L3021
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	mov	r2, #32
	mov	r4, r3
	str	lr, [sp, #4]
.LPIC670:
	add	r0, pc, r0
	sub	r0, r0, #1376
	bl	strlcpy(PLT)
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3022:
	.align	2
.L3021:
	.word	.LANCHOR4-(.LPIC670+8)
	.fnend
	.size	clients_store, .-clients_store
	.align	2
	.type	rmnet_xport_names_store, %function
rmnet_xport_names_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L3025
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
.LPIC671:
	add	r0, pc, r0
	sub	r0, r0, #1344
	bl	strlcpy(PLT)
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3026:
	.align	2
.L3025:
	.word	.LANCHOR4-(.LPIC671+8)
	.fnend
	.size	rmnet_xport_names_store, .-rmnet_xport_names_store
	.align	2
	.type	rmnet_transports_store, %function
rmnet_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L3029
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
.LPIC672:
	add	r0, pc, r0
	sub	r0, r0, #1280
	sub	r0, r0, #12
	bl	strlcpy(PLT)
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3030:
	.align	2
.L3029:
	.word	.LANCHOR4-(.LPIC672+8)
	.fnend
	.size	rmnet_transports_store, .-rmnet_transports_store
	.align	2
	.type	mbim_transports_store, %function
mbim_transports_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L3033
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r2
	mov	r2, #50
	mov	r4, r3
	str	lr, [sp, #4]
.LPIC673:
	add	r0, pc, r0
	sub	r0, r0, #1232
	sub	r0, r0, #8
	bl	strlcpy(PLT)
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3034:
	.align	2
.L3033:
	.word	.LANCHOR4-(.LPIC673+8)
	.fnend
	.size	mbim_transports_store, .-mbim_transports_store
	.align	2
	.type	audio_send, %function
audio_send:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r10, [sp, #24]
	add	fp, r0, #108
	strd	r6, [sp, #8]
	mov	r0, fp
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #92]
	mov	r1, r0
	cmp	r3, #0
	beq	.L3059
	ldr	r2, [r5, #120]
	mov	r0, fp
	cmp	r2, #0
	beq	.L3058
	ldr	r10, [r3, #212]
	movw	r8, #13531
	movw	r9, #56962
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r0, sp, #16
	movt	r8, 55222
	bl	ktime_get(PLT)
	ldrd	r0, [sp, #16]
	mov	ip, #0
	movt	r9, 17179
	ldrd	r2, [r5, #136]
	mov	r4, ip
	movw	lr, #44100
	str	ip, [sp]
	subs	r0, r0, r2
	sbc	r1, r1, r3
	mov	r2, r0
	mov	r3, r1
#APP
@ 350 "/root/lol//drivers/usb/gadget/f_audio_source.c" 1
	umull	r0, r1, r8, r2
	mov	r0, #0
@ 0 "" 2
@ 350 "/root/lol//drivers/usb/gadget/f_audio_source.c" 1
	umlal	r1, r0, r9, r2
	umlal	r1, r4, r8, r3
	mov	r1, #0
	adds	r0, r4, r0
	adc	r1, r1, #0
	umlal	r0, r1, r9, r3
@ 0 "" 2
	mov	r2, r0, lsr #18
	movw	r8, #57147
	movw	r9, #28311
	orr	r2, r2, r1, asl #14
	mov	r1, r1, lsr #18
	movt	r8, 36175
	movt	r9, 33554
	umull	r2, r3, r2, lr
	mla	r3, lr, r1, r3
#APP
@ 352 "/root/lol//drivers/usb/gadget/f_audio_source.c" 1
	umull	r0, r1, r8, r2
	cmn	r0, r8
	adcs	r1, r1, r9
	adc	r0, ip, #0
@ 0 "" 2
@ 352 "/root/lol//drivers/usb/gadget/f_audio_source.c" 1
	umlal	r1, r0, r9, r2
	umlal	r1, ip, r8, r3
	mov	r1, #0
	adds	r0, ip, r0
	adc	r1, r1, #0
	umlal	r0, r1, r9, r3
@ 0 "" 2
	ldrd	r8, [r5, #144]
	mov	r6, r0, lsr #9
	mov	r7, r1, lsr #9
	orr	r6, r6, r1, asl #23
	mov	r2, #440
	mov	r3, #0
	subs	r8, r6, r8
	sbc	r9, r7, r9
	cmp	r2, r8
	sbcs	r3, r3, r9
	blt	.L3062
.L3038:
	cmp	r8, #1
	sbcs	r3, r9, #0
	add	r3, r5, #96
	movlt	r8, #44
	movlt	r9, #0
	str	r3, [sp, #8]
	strd	r8, [sp]
	b	.L3049
.L3065:
	rsb	r7, r1, r7
	ldr	r0, [r6]
	mov	r2, r7
	str	r7, [sp, #12]
	bl	memcpy(PLT)
	cmp	r4, r7
	ldr	r3, [sp, #12]
	ble	.L3046
	ldr	r0, [r6]
	rsb	r3, r7, r4
	mov	r2, r3
	ldr	r1, [r5, #112]
	str	r3, [sp, #12]
	add	r0, r0, r7
	bl	memcpy(PLT)
	ldr	r3, [sp, #12]
	ldr	r2, [r5, #112]
	add	r3, r2, r3
	str	r3, [r5, #120]
.L3047:
	mov	r1, r9
	mov	r0, fp
	str	r8, [r6, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r5, #104]
	mov	r1, r6
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L3063
	ldr	r2, [r10, #80]
	mov	r4, r4, asl #3
	mov	r9, #0
	ldrd	r0, [r5, #144]
	udiv	r2, r4, r2
	mov	r8, r2
	ldrd	r2, [sp]
	subs	r2, r2, r8
	sbc	r3, r3, r9
	mov	r6, r2
	mov	r7, r3
	adds	r2, r8, r0
	adc	r3, r9, r1
	mov	r1, r7
	cmp	r6, #1
	strd	r6, [sp]
	sbcs	r1, r1, #0
	strd	r2, [r5, #144]
	blt	.L3064
.L3049:
	mov	r0, fp
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp, #8]
	mov	r4, r0
	ldr	r6, [r5, #96]
	cmp	r6, r3
	beq	.L3053
	mov	r0, r6
	sub	r6, r6, #36
	bl	list_del(PLT)
.L3040:
	mov	r1, r4
	mov	r0, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, fp
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #92]
	mov	r9, r0
	cmp	r3, #0
	beq	.L3060
	ldr	r1, [r5, #120]
	cmp	r1, #0
	beq	.L3060
	cmp	r6, #0
	beq	.L3060
	ldr	r3, [sp]
	ldr	r4, [r10, #80]
	ldr	r7, [r5, #116]
	mul	r4, r3, r4
	mov	r4, r4, lsr #3
	cmp	r4, #256
	movhi	r8, #256
	movls	r8, r4
	add	r3, r1, r8
	movhi	r4, r8
	cmp	r7, r3
	bcc	.L3065
	ldr	r0, [r6]
	mov	r2, r8
	bl	memcpy(PLT)
	mov	r3, r8
.L3046:
	ldr	r2, [r5, #120]
	ldr	r1, [r5, #116]
	add	r3, r2, r3
	cmp	r3, r1
	str	r3, [r5, #120]
	ldrcs	r3, [r5, #112]
	strcs	r3, [r5, #120]
	b	.L3047
.L3063:
	mov	r1, r0
	ldr	r0, .L3066
.LPIC674:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, fp
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r4, r0
	ldr	r1, [r5, #100]
	add	r0, r6, #36
	ldr	r2, [sp, #8]
	bl	__list_add(PLT)
	mov	r0, fp
	mov	r1, r4
.L3058:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L3060:
	mov	r1, r9
.L3059:
	mov	r0, fp
	b	.L3058
.L3062:
	subs	r2, r6, #44
	mov	r8, #44
	sbc	r3, r7, #0
	mov	r9, #0
	strd	r2, [r5, #144]
	b	.L3038
.L3053:
	mov	r6, #0
	b	.L3040
.L3064:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3067:
	.align	2
.L3066:
	.word	.LC184-(.LPIC674+8)
	.fnend
	.size	audio_send, .-audio_send
	.align	2
	.type	audio_pcm_playback_trigger, %function
audio_pcm_playback_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r3, [r0, #212]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r3, #200]
	cmp	r1, #6
	addls	pc, pc, r1, asl #2
	b	.L3073
.L3071:
	b	.L3070
	b	.L3072
	b	.L3073
	b	.L3073
	b	.L3073
	b	.L3070
	b	.L3072
	.p2align 1
.L3072:
	mov	r0, sp
	mov	r6, #0
	bl	ktime_get(PLT)
	ldrd	r2, [sp]
	mov	r7, #0
	mov	r0, r5
	strd	r6, [r5, #144]
	strd	r2, [r5, #136]
	bl	audio_send(PLT)
	mov	r0, #0
.L3069:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L3070:
	add	r6, r5, #108
	mov	r4, #0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r4, [r5, #112]
	mov	r0, r6
	str	r4, [r5, #116]
	str	r4, [r5, #120]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
	b	.L3069
.L3073:
	mvn	r0, #21
	b	.L3069
	.fnend
	.size	audio_pcm_playback_trigger, .-audio_pcm_playback_trigger
	.align	2
	.type	audio_pcm_open, %function
audio_pcm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3077
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r8, r9, r10, fp, lr}
	mov	r5, r0
	movw	r0, #1096
	str	lr, [sp, #28]
	strd	r8, [sp, #12]
	strd	r10, [sp, #20]
.LPIC675:
	add	r3, pc, r3
	str	r6, [sp, #8]
	.pad #8
	sub	sp, sp, #8
	add	lr, r3, r0
	ldr	r6, [r5, #212]
	ldrd	r8, [lr, #32]
	ldr	r4, [r5, #8]
	ldrd	r2, [r3, r0]
	ldrd	r10, [lr, #24]
	mov	r0, r6
	strd	r8, [sp]
	ldrd	r8, [lr, #40]
	str	r4, [r6, #200]
	strd	r2, [r6, #208]
	add	r3, r6, #208
	strd	r8, [r6, #248]
	ldrd	r8, [lr, #8]
	strd	r8, [r6, #216]
	ldrd	r8, [lr, #48]
	strd	r8, [r3, #48]
	ldrd	r8, [lr, #16]
	strd	r8, [r6, #224]
	ldrd	r8, [lr, #56]
	strd	r8, [r3, #56]
	ldrd	r8, [sp]
	strd	r10, [r6, #232]
	strd	r8, [r6, #240]
	bl	snd_pcm_limit_hw_rates(PLT)
	mov	r3, #2
	mov	r0, #0
	str	r3, [r6, #240]
	str	r5, [r4, #92]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldrd	r8, [sp, #12]
	ldrd	r10, [sp, #20]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3078:
	.align	2
.L3077:
	.word	.LANCHOR3-(.LPIC675+8)
	.fnend
	.size	audio_pcm_open, .-audio_pcm_open
	.align	2
	.type	gs_break_ctl, %function
gs_break_ctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #272]
	mov	r0, r5
	bl	_raw_spin_lock_irq(PLT)
	ldr	r0, [r5, #4]
	cmp	r0, #0
	beq	.L3081
	ldr	r3, [r0, #124]
	cmp	r3, #0
	moveq	r4, r3
	beq	.L3080
	mov	r1, r4
	blx	r3
	mov	r4, r0
.L3080:
	mov	r0, r5
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3081:
	mov	r4, r0
	b	.L3080
	.fnend
	.size	gs_break_ctl, .-gs_break_ctl
	.align	2
	.type	gs_tiocmget, %function
gs_tiocmget:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #272]
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
	ldr	r5, [r6, #4]
	cmp	r5, #0
	beq	.L3092
	ldr	r4, [r5, #108]
	cmp	r4, #0
	beq	.L3086
	mov	r0, r5
	blx	r4
	cmp	r0, #0
	movne	r4, #2
	moveq	r4, #0
.L3086:
	ldr	r3, [r5, #112]
	cmp	r3, #0
	beq	.L3088
	mov	r0, r5
	blx	r3
	cmp	r0, #0
	movne	r0, #4
	moveq	r0, #0
	orr	r4, r4, r0
.L3088:
	ldrh	r3, [r5, #104]
	tst	r3, #64
	orrne	r4, r4, #64
	tst	r3, #128
	orrne	r4, r4, #128
.L3085:
	mov	r0, r6
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3092:
	mvn	r4, #18
	b	.L3085
	.fnend
	.size	gs_tiocmget, .-gs_tiocmget
	.align	2
	.type	gs_tiocmset, %function
gs_tiocmset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r8, r2
	str	lr, [sp, #20]
	ldr	r6, [r0, #272]
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
	ldr	r4, [r6, #4]
	cmp	r4, #0
	beq	.L3108
	ands	r5, r7, #128
	beq	.L3105
	ldr	r5, [r4, #132]
	cmp	r5, #0
	beq	.L3106
	ldrh	r3, [r4, #104]
	mov	r0, r4
	mov	r1, #1
	orr	r3, r3, #128
	strh	r3, [r4, #104]	@ movhi
	blx	r5
	mov	r5, r0
.L3105:
	tst	r8, #128
	beq	.L3106
	ldr	r2, [r4, #132]
	cmp	r2, #0
	beq	.L3106
	ldrh	r3, [r4, #104]
	mov	r0, r4
	mov	r1, #0
	bic	r3, r3, #128
	strh	r3, [r4, #104]	@ movhi
	blx	r2
	mov	r5, r0
.L3106:
	tst	r7, #64
	beq	.L3107
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L3104
	ldrh	r3, [r4, #104]
	mov	r0, r4
	mov	r1, #1
	orr	r3, r3, #64
	strh	r3, [r4, #104]	@ movhi
	blx	r2
	mov	r5, r0
.L3107:
	tst	r8, #64
	beq	.L3104
	ldr	r2, [r4, #128]
	cmp	r2, #0
	beq	.L3104
	ldrh	r3, [r4, #104]
	mov	r0, r4
	mov	r1, #0
	bic	r3, r3, #64
	strh	r3, [r4, #104]	@ movhi
	blx	r2
	mov	r5, r0
.L3104:
	mov	r0, r6
	bl	_raw_spin_unlock_irq(PLT)
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3108:
	mvn	r5, #18
	b	.L3104
	.fnend
	.size	gs_tiocmset, .-gs_tiocmset
	.align	2
	.type	ffs_epfile_ioctl, %function
ffs_epfile_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	ldr	r0, [r4, #36]
	ldr	r3, [r0, #92]
	cmp	r3, #2
	bne	.L3153
	add	r0, r0, #24
	mov	r5, r1
	mov	r6, r2
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #40]
	cmp	r3, #0
	mvneq	r5, #18
	beq	.L3133
	movw	r2, #26371
	cmp	r5, r2
	beq	.L3134
	bhi	.L3135
	movw	r2, #26369
	cmp	r5, r2
	beq	.L3136
	movw	r2, #26370
	cmp	r5, r2
	bne	.L3146
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	moveq	r5, r3
	beq	.L3133
	mov	r5, #0
	blx	r3
.L3133:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
.L3150:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3135:
	movw	r2, #26497
	cmp	r5, r2
	beq	.L3138
	movw	r2, #26498
	movt	r2, 32777
	cmp	r5, r2
	bne	.L3146
	ldr	r0, [r4, #36]
	ldr	r2, [r0]
	ldr	r2, [r2, #16]
	cmp	r2, #3
	moveq	r2, #1
	beq	.L3142
	cmp	r2, #5
	moveq	r2, #2
	movne	r2, #0
.L3142:
	add	r2, r2, #2
	add	r0, r0, #24
	ldr	r5, [r3, r2, asl #2]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r2, r6, #9; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L3143
.L3144:
	mvn	r0, #13
	b	.L3150
.L3143:
	mov	r0, r6
	mov	r1, r5
	mov	r2, #9
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	bne	.L3144
.L3146:
	mvn	r5, #24
	b	.L3133
.L3136:
	ldr	r0, [r3]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	mvneq	r5, #94
	beq	.L3133
	blx	r3
	mov	r5, r0
	b	.L3133
.L3138:
	ldrb	r5, [r3, #20]	@ zero_extendqisi2
	b	.L3133
.L3134:
	ldr	r0, [r3]
	mov	r1, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	mov	r5, r0
	b	.L3133
.L3153:
	ldr	r0, .L3154
	movw	r1, #979
.LPIC676:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	mvn	r0, #18
	b	.L3150
.L3155:
	.align	2
.L3154:
	.word	.LC185-(.LPIC676+8)
	.fnend
	.size	ffs_epfile_ioctl, .-ffs_epfile_ioctl
	.align	2
	.type	gsmd_tx_pull, %function
gsmd_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r3, r0, #52
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #48
	strd	r8, [sp, #16]
	sub	r9, r5, #8
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r0, #20]
	mov	r0, r6
	str	r3, [sp, #12]
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L3182
	ldr	r0, [r7]
	ldr	r8, [r3, #88]
	cmp	r0, #0
	beq	.L3166
	ldr	r3, [r5, #-8]
	cmp	r9, r3
	bne	.L3172
	b	.L3166
.L3184:
	ldr	r4, [r5, #-8]
	mov	r0, r4
	sub	fp, r4, #36
	bl	list_del(PLT)
	cmp	r10, #2048
	ldr	r1, [r4, #-36]
	movlt	r2, r10
	movge	r2, #2048
	ldr	r0, [r7]
	bl	smd_read(PLT)
	str	r0, [r4, #-32]
	mov	r0, r6
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r2, #208
	mov	r0, r8
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
	cmp	r10, #0
	bne	.L3183
	ldr	r2, [r4, #-32]
	ldr	r3, [r5, #120]
	add	r3, r3, r2
	str	r3, [r5, #120]
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L3168
	ldr	r3, [r5, #-8]
	cmp	r9, r3
	beq	.L3168
.L3172:
	bl	smd_read_avail(PLT)
	subs	r10, r0, #0
	bne	.L3184
.L3168:
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L3173
.L3166:
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	bl	smd_read_avail(PLT)
	cmp	r0, #0
	beq	.L3173
	ldr	r3, [r5, #-8]
	cmp	r9, r3
	beq	.L3173
	ldr	r3, .L3186
	mov	r2, r5
	mov	r0, #4
.LPIC679:
	add	r3, pc, r3
	ldr	r1, [r3, #-1188]
	bl	queue_work_on(PLT)
.L3173:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq(PLT)
.L3182:
	mov	r0, r6
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [sp, #12]
	cmp	r3, #0
	beq	.L3156
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	cmp	r0, #0
	bne	.L3161
	b	.L3156
.L3162:
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
	bl	smd_read(PLT)
	ldr	r3, [r5, #20]
	ldr	r0, [r3]
.L3161:
	bl	smd_read_avail(PLT)
	subs	r2, r0, #0
	mov	r1, #0
	bne	.L3162
.L3156:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3183:
	ldr	r1, .L3186+4
	str	r10, [sp]
	ldr	r0, .L3186+8
	ldr	r3, [r5, #-52]
	ldr	r2, [sp, #12]
.LPIC678:
	add	r1, pc, r1
	add	r1, r1, #1152
.LPIC677:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldr	r3, [r5, #16]
	cmp	r3, #0
	beq	.L3185
	mov	r0, r4
	mov	r1, r9
	ldr	r2, [r5, #-8]
	bl	__list_add(PLT)
	b	.L3168
.L3185:
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	ldr	r3, [r8, #8]
	mov	r1, fp
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L3168
.L3187:
	.align	2
.L3186:
	.word	.LANCHOR4-(.LPIC679+8)
	.word	.LANCHOR3-(.LPIC678+8)
	.word	.LC186-(.LPIC677+8)
	.fnend
	.size	gsmd_tx_pull, .-gsmd_tx_pull
	.align	2
	.type	mtp_read, %function
mtp_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r10, [sp, #24]
	ldr	r10, .L3232
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	fp, [r0, #124]
	.pad #36
	sub	sp, sp, #36
.LPIC680:
	add	r10, pc, r10
	str	r2, [sp]
	str	r1, [sp, #4]
	ldr	r2, [fp, #104]
	cmp	r2, #0
	bne	.L3189
	mov	r3, sp
	str	r2, [sp, #12]
	ldr	r1, .L3232+4
	bic	r4, r3, #8128
	add	r6, fp, #132
	bic	r4, r4, #63
	add	r5, sp, #12
	ldr	r2, [r4, #12]
	str	r2, [sp, #16]
	ldr	r1, [r10, r1]
	add	r2, sp, #24
	str	r2, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #20]
	b	.L3192
.L3227:
	bl	schedule(PLT)
.L3192:
	mov	r2, #1
	mov	r0, r6
	mov	r1, r5
	bl	prepare_to_wait(PLT)
	ldr	r2, [fp, #104]
	cmp	r2, #0
	bne	.L3190
	ldr	r2, [r4, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L3227
	mov	r1, r5
	mov	r0, r6
	mov	r5, #65024
	add	r9, fp, #88
	bl	finish_wait(PLT)
	movt	r5, 65535
	b	.L3196
.L3190:
	mov	r0, r6
	mov	r1, r5
	bl	finish_wait(PLT)
.L3189:
	ldr	r2, .L3232+8
	ldr	r0, [fp, #96]
	ldr	r3, [sp]
	ldr	r1, [r10, r2]
	ldrh	r2, [r0, #20]
	ldr	r1, [r1]
	sub	r6, r2, #1
	rsb	r2, r2, #0
	add	r6, r6, r3
	and	r6, r6, r2
	cmp	r6, r1
	bhi	.L3209
	add	r9, fp, #88
	mov	r0, r9
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [fp, #104]
	cmp	r2, #3
	beq	.L3228
	mov	r2, #2
	mov	r0, r9
	str	r2, [fp, #104]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r3, sp
	bic	r7, r3, #8128
	bic	r7, r7, #63
.L3195:
	ldr	r4, [fp, #168]
	mov	ip, #0
	mov	r2, #208
	str	r6, [r4, #4]
	mov	r1, r4
	ldr	r0, [fp, #96]
	str	ip, [fp, #176]
	ldr	ip, [r0, #8]
	ldr	ip, [ip, #16]
	blx	ip
	cmp	r0, #0
	blt	.L3215
	ldr	r2, [fp, #176]
	cmp	r2, #0
	bne	.L3197
	ldr	r1, [fp, #104]
	cmp	r1, #2
	beq	.L3229
	cmp	r1, #3
	beq	.L3208
.L3215:
	mvn	r5, #4
.L3196:
	mov	r0, r9
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [fp, #104]
	cmp	r2, #3
	mvneq	r5, #124
	beq	.L3204
	cmp	r2, #0
	movne	r2, #1
	strne	r2, [fp, #104]
.L3204:
	mov	r0, r9
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
.L3224:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3197:
	ldr	r2, [fp, #104]
	cmp	r2, #3
	beq	.L3202
.L3205:
	cmp	r2, #2
	bne	.L3215
	ldr	r2, [r4, #48]
	cmp	r2, #0
	beq	.L3195
	mov	r3, sp
	ldr	r1, [r4]
	bic	r0, r3, #8128
	ldr	r3, [sp]
	bic	r0, r0, #63
	cmp	r2, r3
	movcc	r5, r2
	movcs	r5, r3
	ldr	r2, [r0, #8]
	ldr	r3, [sp, #4]
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r0, r3, r5; sbcccs r0, r0, r2; movcc r2, #0
@ 0 "" 2
	cmp	r2, #0
	movne	r0, r5
	beq	.L3230
.L3203:
	cmp	r0, #0
	mvnne	r5, #13
	b	.L3196
.L3229:
	ldr	r1, [r7, #12]
	str	r2, [sp, #12]
	add	r5, sp, #12
	ldr	r2, .L3232+4
	add	r8, fp, #132
	str	r1, [sp, #16]
	ldr	r1, [r10, r2]
	add	r2, sp, #24
	str	r2, [sp, #24]
	str	r2, [sp, #28]
	str	r1, [sp, #20]
	b	.L3201
.L3231:
	bl	schedule(PLT)
.L3201:
	mov	r2, #1
	mov	r0, r8
	mov	r1, r5
	bl	prepare_to_wait(PLT)
	ldr	r2, [fp, #176]
	cmp	r2, #0
	bne	.L3199
	ldr	r2, [fp, #104]
	cmp	r2, #2
	bne	.L3199
	ldr	r2, [r7, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L3231
	mov	r0, r8
	mov	r1, r5
	bl	finish_wait(PLT)
	ldr	r2, [fp, #104]
	cmp	r2, #3
	beq	.L3226
	ldr	r0, [fp, #96]
	mov	r1, r4
	mov	r5, #65024
	movt	r5, 65535
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
	b	.L3196
.L3199:
	mov	r0, r8
	mov	r1, r5
	bl	finish_wait(PLT)
	ldr	r2, [fp, #104]
	cmp	r2, #3
	bne	.L3205
.L3226:
	ldr	r2, [fp, #176]
	cmp	r2, #0
	bne	.L3202
.L3208:
	ldr	r0, [fp, #96]
	mov	r1, r4
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
.L3202:
	mov	r0, r9
	mvn	r5, #124
	bl	_raw_spin_lock_irq(PLT)
	mov	r2, #3
	mov	r0, r9
	str	r2, [fp, #104]
	bl	_raw_spin_unlock_irq(PLT)
	b	.L3196
.L3209:
	mvn	r0, #21
	b	.L3224
.L3230:
	mov	r0, r3
	mov	r2, r5
	bl	__copy_to_user(PLT)
	b	.L3203
.L3228:
	mov	r2, #1
	mov	r0, r9
	str	r2, [fp, #104]
	bl	_raw_spin_unlock_irq(PLT)
	mvn	r0, #124
	b	.L3224
.L3233:
	.align	2
.L3232:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC680+8)
	.word	autoremove_wake_function(GOT)
	.word	mtp_rx_req_len(GOT)
	.fnend
	.size	mtp_read, .-mtp_read
	.align	2
	.type	ffs_aliases_show, %function
ffs_aliases_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3236
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	mov	r6, r2
.LPIC681:
	add	r3, pc, r3
	ldr	r5, [r3, #16]
	sub	r4, r5, #496
	mov	r0, r4
	bl	mutex_lock(PLT)
	ldr	r1, .L3236+4
	sub	r2, r5, #324
	mov	r0, r6
.LPIC682:
	add	r1, pc, r1
	bl	sprintf(PLT)
	mov	r5, r0
	mov	r0, r4
	bl	mutex_unlock(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3237:
	.align	2
.L3236:
	.word	.LANCHOR1-(.LPIC681+8)
	.word	.LC82-(.LPIC682+8)
	.fnend
	.size	ffs_aliases_show, .-ffs_aliases_show
	.align	2
	.type	gsmd_rx_push, %function
gsmd_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r8, [sp, #16]
	sub	r9, r0, #24
	sub	r8, r4, #8
	strd	r10, [sp, #24]
	sub	r10, r0, #28
	strd	r6, [sp, #8]
	str	lr, [sp, #32]
	ldr	r7, [r0, #44]
	.pad #20
	sub	sp, sp, #20
	mov	r0, r9
	bl	_raw_spin_lock_irq(PLT)
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L3240
	ldr	r5, [r4, #-8]
	cmp	r8, r5
	beq	.L3240
	ldr	r6, .L3271
	ldr	r3, .L3271+4
.LPIC684:
	add	r6, pc, r6
	add	r6, r6, #1168
.LPIC683:
	add	r3, pc, r3
	add	r6, r6, #8
	str	r3, [sp, #12]
.L3248:
	ldr	r2, [r5, #8]
	cmn	r2, #108
	beq	.L3240
	cmp	r2, #0
	beq	.L3243
	ldr	r3, [r4, #-28]
	mov	r1, r6
	str	r2, [sp]
	ldr	r0, [sp, #12]
	mov	r2, r10
	bl	printk(PLT)
	ldr	r0, [r7]
.L3243:
	bl	smd_write_avail(PLT)
	cmp	r0, #0
	beq	.L3240
	ldr	fp, [r5, #12]
	cmp	fp, #0
	beq	.L3244
	ldr	r2, [r4, #-20]
	ldr	r1, [r5, #-36]
	ldr	r0, [r7]
	cmp	r2, #0
	rsbne	fp, r2, fp
	addne	r1, r1, r2
	mov	r2, fp
	bl	smd_write(PLT)
	cmp	r0, #0
	blt	.L3269
	cmp	r0, fp
	bne	.L3270
	ldr	r2, [r4, #140]
	add	r3, r2, fp
	str	r3, [r4, #140]
.L3244:
	mov	r3, #0
	mov	r0, r5
	str	r3, [r4, #-20]
	bl	__list_del_entry(PLT)
	mov	r0, r5
	sub	r1, r4, #16
	ldr	r2, [r4, #-16]
	bl	__list_add(PLT)
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L3240
	ldr	r5, [r4, #-8]
	cmp	r8, r5
	bne	.L3248
.L3240:
	mov	r0, r9
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r10
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsmd_start_rx(PLT)
.L3270:
	ldr	r3, [r4, #-20]
	add	r0, r3, r0
	str	r0, [r4, #-20]
	b	.L3240
.L3269:
	ldr	r1, .L3271+8
	mov	r2, r0
	ldr	r0, .L3271+12
.LPIC686:
	add	r1, pc, r1
	add	r1, r1, #1168
.LPIC685:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L3240
.L3272:
	.align	2
.L3271:
	.word	.LANCHOR3-(.LPIC684+8)
	.word	.LC187-(.LPIC683+8)
	.word	.LANCHOR3-(.LPIC686+8)
	.word	.LC188-(.LPIC685+8)
	.fnend
	.size	gsmd_rx_push, .-gsmd_rx_push
	.align	2
	.type	remote_wakeup_show, %function
remote_wakeup_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #516]
	cmp	r3, #0
	bne	.L3276
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, r3
	ldr	pc, [sp], #4
.L3276:
	ldr	r3, [r0, #508]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L3277
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrb	r3, [r3, #-98]	@ zero_extendqisi2
.LPIC687:
	add	r2, pc, r2
	ubfx	r3, r3, #5, #1
	b	snprintf(PLT)
.L3278:
	.align	2
.L3277:
	.word	.LC76-(.LPIC687+8)
	.fnend
	.size	remote_wakeup_show, .-remote_wakeup_show
	.align	2
	.type	state_show, %function
state_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata(PLT)
	ldr	r4, [r0, #8]
	mov	r6, r0
	cmp	r4, #0
	beq	.L3282
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #12]
	mov	r1, r0
	cmp	r3, #0
	beq	.L3286
	ldr	r4, .L3287
.LPIC688:
	add	r4, pc, r4
.L3281:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
.L3280:
	ldr	r1, .L3287+4
	mov	r2, r4
	ldr	r0, .L3287+8
.LPIC693:
	add	r1, pc, r1
	add	r1, r1, #1184
.LPIC692:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldr	r2, .L3287+12
	mov	r0, r7
	mov	r3, r4
	ldrd	r6, [sp, #8]
	mov	r1, #4096
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC694:
	add	r2, pc, r2
	add	sp, sp, #24
	b	snprintf(PLT)
.L3282:
	ldr	r4, .L3287+16
.LPIC691:
	add	r4, pc, r4
	b	.L3280
.L3286:
	ldrb	r3, [r6, #48]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L3284
	ldr	r4, .L3287+20
.LPIC690:
	add	r4, pc, r4
	b	.L3281
.L3284:
	ldr	r4, .L3287+24
.LPIC689:
	add	r4, pc, r4
	b	.L3281
.L3288:
	.align	2
.L3287:
	.word	.LC189-(.LPIC688+8)
	.word	.LANCHOR3-(.LPIC693+8)
	.word	.LC192-(.LPIC692+8)
	.word	.LC82-(.LPIC694+8)
	.word	.LC190-(.LPIC691+8)
	.word	.LC191-(.LPIC690+8)
	.word	.LC190-(.LPIC689+8)
	.fnend
	.size	state_show, .-state_show
	.align	2
	.type	pm_qos_show, %function
pm_qos_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r2, .L3291
	add	r3, r0, #52
	mov	r1, #4096
	mov	r0, r4
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
.LPIC695:
	add	r2, pc, r2
	b	snprintf(PLT)
.L3292:
	.align	2
.L3291:
	.word	.LC82-(.LPIC695+8)
	.fnend
	.size	pm_qos_show, .-pm_qos_show
	.align	2
	.type	enable_show, %function
enable_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	bl	dev_get_drvdata(PLT)
	ldr	r1, .L3295
	mov	r4, r0
	ldr	r0, .L3295+4
	ldrb	r2, [r4, #16]	@ zero_extendqisi2
.LPIC697:
	add	r1, pc, r1
	add	r1, r1, #1200
.LPIC696:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r2, .L3295+8
	mov	r0, r5
	mov	r1, #4096
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
.LPIC698:
	add	r2, pc, r2
	add	sp, sp, #16
	b	snprintf(PLT)
.L3296:
	.align	2
.L3295:
	.word	.LANCHOR3-(.LPIC697+8)
	.word	.LC193-(.LPIC696+8)
	.word	.LC76-(.LPIC698+8)
	.fnend
	.size	enable_show, .-enable_show
	.align	2
	.type	functions_show, %function
functions_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	mov	r9, r2
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bl	dev_get_drvdata(PLT)
	add	r10, r0, #24
	mov	r8, r0
	mov	r0, r10
	bl	mutex_lock(PLT)
	ldr	r7, [r8, #508]!
	cmp	r8, r7
	sub	r7, r7, #120
	beq	.L3298
	ldr	r6, .L3311
	mov	fp, r9
.LPIC699:
	add	r6, pc, r6
.L3299:
	mov	r5, r7
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L3301
.L3302:
	ldr	r3, [r4]
	mov	r0, fp
	mov	r1, #4096
	mov	r2, r6
	ldr	r3, [r3]
	bl	snprintf(PLT)
	ldr	r4, [r4, #4]
	add	fp, fp, r0
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L3302
.L3301:
	ldr	r7, [r7, #120]
	cmp	r8, r7
	sub	r7, r7, #120
	beq	.L3310
	cmp	r9, fp
	movne	r3, #58
	strneb	r3, [fp, #-1]
	b	.L3299
.L3310:
	mov	r0, r10
	bl	mutex_unlock(PLT)
	cmp	r9, fp
	beq	.L3309
	mov	r3, #10
	rsb	r0, r9, fp
	strb	r3, [fp, #-1]
.L3307:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3298:
	mov	r0, r10
	bl	mutex_unlock(PLT)
.L3309:
	mov	r0, #0
	b	.L3307
.L3312:
	.align	2
.L3311:
	.word	.LC194-(.LPIC699+8)
	.fnend
	.size	functions_show, .-functions_show
	.align	2
	.type	iSerial_show, %function
iSerial_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3314
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3314+4
.LPIC701:
	add	r3, pc, r3
.LPIC700:
	add	r2, pc, r2
	add	r3, r3, #28
	b	snprintf(PLT)
.L3315:
	.align	2
.L3314:
	.word	.LANCHOR1-(.LPIC701+8)
	.word	.LC195-(.LPIC700+8)
	.fnend
	.size	iSerial_show, .-iSerial_show
	.align	2
	.type	iProduct_show, %function
iProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3317
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3317+4
.LPIC703:
	add	r3, pc, r3
.LPIC702:
	add	r2, pc, r2
	sub	r3, r3, #1184
	b	snprintf(PLT)
.L3318:
	.align	2
.L3317:
	.word	.LANCHOR4-(.LPIC703+8)
	.word	.LC195-(.LPIC702+8)
	.fnend
	.size	iProduct_show, .-iProduct_show
	.align	2
	.type	iManufacturer_show, %function
iManufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3320
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3320+4
.LPIC705:
	add	r3, pc, r3
.LPIC704:
	add	r2, pc, r2
	sub	r3, r3, #928
	b	snprintf(PLT)
.L3321:
	.align	2
.L3320:
	.word	.LANCHOR4-(.LPIC705+8)
	.word	.LC195-(.LPIC704+8)
	.fnend
	.size	iManufacturer_show, .-iManufacturer_show
	.align	2
	.type	bDeviceProtocol_show, %function
bDeviceProtocol_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3323
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3323+4
.LPIC707:
	add	r3, pc, r3
.LPIC706:
	add	r2, pc, r2
	ldrb	r3, [r3, #398]	@ zero_extendqisi2
	b	snprintf(PLT)
.L3324:
	.align	2
.L3323:
	.word	.LANCHOR2-(.LPIC707+8)
	.word	.LC76-(.LPIC706+8)
	.fnend
	.size	bDeviceProtocol_show, .-bDeviceProtocol_show
	.align	2
	.type	bDeviceSubClass_show, %function
bDeviceSubClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3326
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3326+4
.LPIC709:
	add	r3, pc, r3
.LPIC708:
	add	r2, pc, r2
	ldrb	r3, [r3, #397]	@ zero_extendqisi2
	b	snprintf(PLT)
.L3327:
	.align	2
.L3326:
	.word	.LANCHOR2-(.LPIC709+8)
	.word	.LC76-(.LPIC708+8)
	.fnend
	.size	bDeviceSubClass_show, .-bDeviceSubClass_show
	.align	2
	.type	bDeviceClass_show, %function
bDeviceClass_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3329
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3329+4
.LPIC711:
	add	r3, pc, r3
.LPIC710:
	add	r2, pc, r2
	ldrb	r3, [r3, #396]	@ zero_extendqisi2
	b	snprintf(PLT)
.L3330:
	.align	2
.L3329:
	.word	.LANCHOR2-(.LPIC711+8)
	.word	.LC76-(.LPIC710+8)
	.fnend
	.size	bDeviceClass_show, .-bDeviceClass_show
	.align	2
	.type	bcdDevice_show, %function
bcdDevice_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3332
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3332+4
.LPIC713:
	add	r3, pc, r3
	add	r3, r3, #392
.LPIC712:
	add	r2, pc, r2
	ldrh	r3, [r3, #12]
	b	snprintf(PLT)
.L3333:
	.align	2
.L3332:
	.word	.LANCHOR2-(.LPIC713+8)
	.word	.LC196-(.LPIC712+8)
	.fnend
	.size	bcdDevice_show, .-bcdDevice_show
	.align	2
	.type	idProduct_show, %function
idProduct_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3335
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3335+4
.LPIC715:
	add	r3, pc, r3
	add	r3, r3, #392
.LPIC714:
	add	r2, pc, r2
	ldrh	r3, [r3, #10]
	b	snprintf(PLT)
.L3336:
	.align	2
.L3335:
	.word	.LANCHOR2-(.LPIC715+8)
	.word	.LC196-(.LPIC714+8)
	.fnend
	.size	idProduct_show, .-idProduct_show
	.align	2
	.type	idVendor_show, %function
idVendor_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3338
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3338+4
.LPIC717:
	add	r3, pc, r3
	add	r3, r3, #392
.LPIC716:
	add	r2, pc, r2
	ldrh	r3, [r3, #8]
	b	snprintf(PLT)
.L3339:
	.align	2
.L3338:
	.word	.LANCHOR2-(.LPIC717+8)
	.word	.LC196-(.LPIC716+8)
	.fnend
	.size	idVendor_show, .-idVendor_show
	.align	2
	.type	audio_source_pcm_show, %function
audio_source_pcm_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	ldr	ip, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L3342
	ldmia	ip, {r3, ip}
.LPIC718:
	add	r2, pc, r2
	str	ip, [sp]
	bl	snprintf(PLT)
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3343:
	.align	2
.L3342:
	.word	.LC83-(.LPIC718+8)
	.fnend
	.size	audio_source_pcm_show, .-audio_source_pcm_show
	.align	2
	.type	mass_storage_inquiry_show, %function
mass_storage_inquiry_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L3346
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #96]
.LPIC719:
	add	r2, pc, r2
	add	r3, r3, #180
	b	snprintf(PLT)
.L3347:
	.align	2
.L3346:
	.word	.LC82-(.LPIC719+8)
	.fnend
	.size	mass_storage_inquiry_show, .-mass_storage_inquiry_show
	.align	2
	.type	ecm_ethaddr_show, %function
ecm_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata(PLT)
	ldr	ip, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L3350
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
.LPIC720:
	add	r2, pc, r2
	str	lr, [sp]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	ip, [ip, #5]	@ zero_extendqisi2
	str	ip, [sp, #16]
	bl	snprintf(PLT)
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3351:
	.align	2
.L3350:
	.word	.LC197-(.LPIC720+8)
	.fnend
	.size	ecm_ethaddr_show, .-ecm_ethaddr_show
	.align	2
	.type	ecm_transports_show, %function
ecm_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3353
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3353+4
.LPIC722:
	add	r3, pc, r3
	sub	r3, r3, #1424
.LPIC721:
	add	r2, pc, r2
	sub	r3, r3, #4
	b	snprintf(PLT)
.L3354:
	.align	2
.L3353:
	.word	.LANCHOR4-(.LPIC722+8)
	.word	.LC82-(.LPIC721+8)
	.fnend
	.size	ecm_transports_show, .-ecm_transports_show
	.align	2
	.type	rndis_max_pkt_per_xfer_show, %function
rndis_max_pkt_per_xfer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L3357
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrb	r3, [r3, #12]	@ zero_extendqisi2
.LPIC723:
	add	r2, pc, r2
	b	snprintf(PLT)
.L3358:
	.align	2
.L3357:
	.word	.LC76-(.LPIC723+8)
	.fnend
	.size	rndis_max_pkt_per_xfer_show, .-rndis_max_pkt_per_xfer_show
	.align	2
	.type	rndis_vendorID_show, %function
rndis_vendorID_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L3361
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldr	r3, [r3, #8]
.LPIC724:
	add	r2, pc, r2
	b	snprintf(PLT)
.L3362:
	.align	2
.L3361:
	.word	.LC196-(.LPIC724+8)
	.fnend
	.size	rndis_vendorID_show, .-rndis_vendorID_show
	.align	2
	.type	rndis_ethaddr_show, %function
rndis_ethaddr_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	.pad #24
	sub	sp, sp, #24
	bl	dev_get_drvdata(PLT)
	ldr	ip, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L3365
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	ldrb	r3, [ip]	@ zero_extendqisi2
.LPIC725:
	add	r2, pc, r2
	str	lr, [sp]
	ldrb	lr, [ip, #2]	@ zero_extendqisi2
	str	lr, [sp, #4]
	ldrb	lr, [ip, #3]	@ zero_extendqisi2
	str	lr, [sp, #8]
	ldrb	lr, [ip, #4]	@ zero_extendqisi2
	str	lr, [sp, #12]
	ldrb	ip, [ip, #5]	@ zero_extendqisi2
	str	ip, [sp, #16]
	bl	snprintf(PLT)
	add	sp, sp, #24
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3366:
	.align	2
.L3365:
	.word	.LC197-(.LPIC725+8)
	.fnend
	.size	rndis_ethaddr_show, .-rndis_ethaddr_show
	.align	2
	.type	rndis_wceis_show, %function
rndis_wceis_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L3369
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrb	r3, [r3, #269]	@ zero_extendqisi2
.LPIC726:
	add	r2, pc, r2
	b	snprintf(PLT)
.L3370:
	.align	2
.L3369:
	.word	.LC76-(.LPIC726+8)
	.fnend
	.size	rndis_wceis_show, .-rndis_wceis_show
	.align	2
	.type	rndis_manufacturer_show, %function
rndis_manufacturer_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r1, #4096
	mov	r0, r4
	ldr	r2, .L3373
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	add	r3, r3, #13
.LPIC727:
	add	r2, pc, r2
	b	snprintf(PLT)
.L3374:
	.align	2
.L3373:
	.word	.LC82-(.LPIC727+8)
	.fnend
	.size	rndis_manufacturer_show, .-rndis_manufacturer_show
	.align	2
	.type	rmnet_xport_names_show, %function
rmnet_xport_names_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3376
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3376+4
.LPIC729:
	add	r3, pc, r3
.LPIC728:
	add	r2, pc, r2
	sub	r3, r3, #1344
	b	snprintf(PLT)
.L3377:
	.align	2
.L3376:
	.word	.LANCHOR4-(.LPIC729+8)
	.word	.LC82-(.LPIC728+8)
	.fnend
	.size	rmnet_xport_names_show, .-rmnet_xport_names_show
	.align	2
	.type	rmnet_transports_show, %function
rmnet_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3379
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3379+4
.LPIC731:
	add	r3, pc, r3
	sub	r3, r3, #1280
.LPIC730:
	add	r2, pc, r2
	sub	r3, r3, #12
	b	snprintf(PLT)
.L3380:
	.align	2
.L3379:
	.word	.LANCHOR4-(.LPIC731+8)
	.word	.LC82-(.LPIC730+8)
	.fnend
	.size	rmnet_transports_show, .-rmnet_transports_show
	.align	2
	.type	mbim_transports_show, %function
mbim_transports_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L3382
	mov	r0, r2
	mov	r1, #4096
	ldr	r2, .L3382+4
.LPIC733:
	add	r3, pc, r3
	sub	r3, r3, #1232
.LPIC732:
	add	r2, pc, r2
	sub	r3, r3, #8
	b	snprintf(PLT)
.L3383:
	.align	2
.L3382:
	.word	.LANCHOR4-(.LPIC733+8)
	.word	.LC82-(.LPIC732+8)
	.fnend
	.size	mbim_transports_show, .-mbim_transports_show
	.align	2
	.type	gsmd_ch_remove, %function
gsmd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L3396
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC734:
	add	r5, pc, r5
	ldr	r6, [r5, #496]
	cmp	r6, #0
	beq	.L3386
	ldr	r3, [r5, #520]
	mov	r2, #20
	ldr	r7, [r0]
	ldr	r4, [r3, #72]
	mov	r1, r7
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3387
	cmp	r6, #1
	bls	.L3386
	ldr	r3, [r5, #624]
	mov	r1, r7
	mov	r2, #20
	ldr	r4, [r3, #72]
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3387
.L3386:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3387:
	add	r5, r4, #8
	mov	r0, #1
	mov	r1, r5
	bl	_clear_bit(PLT)
	mov	r0, #0
	mov	r1, r5
	bl	_clear_bit(PLT)
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L3386
	bl	smd_close(PLT)
	mov	r3, #0
	str	r3, [r4]
	b	.L3386
.L3397:
	.align	2
.L3396:
	.word	.LANCHOR1-(.LPIC734+8)
	.fnend
	.size	gsmd_ch_remove, .-gsmd_ch_remove
	.align	2
	.type	gsmd_ch_probe, %function
gsmd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L3412
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC737:
	add	r6, pc, r6
	ldr	r7, [r6, #496]
	cmp	r7, #0
	beq	.L3399
	ldr	r4, [r6, #520]
	mov	r2, #20
	ldr	r8, [r0]
	ldr	r5, [r4, #72]
	mov	r1, r8
	ldr	r0, [r5, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3400
	cmp	r7, #1
	bls	.L3399
	ldr	r4, [r6, #624]
	mov	r1, r8
	mov	r2, #20
	ldr	r5, [r4, #72]
	ldr	r0, [r5, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3400
.L3399:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3400:
	add	r1, r5, #8
	mov	r0, #1
	add	r5, r4, #4
	bl	_set_bit(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #68]
	mov	r6, r0
	cmp	r3, #0
	beq	.L3401
	ldr	r3, .L3412+4
	mov	r0, #0
.LPIC740:
	add	r3, pc, r3
	ldr	r7, [r3, #-1188]
	bl	msecs_to_jiffies(PLT)
	mov	r3, r0
	add	r2, r4, #76
	mov	r0, #4
	mov	r1, r7
	bl	queue_delayed_work_on(PLT)
.L3401:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L3399
.L3413:
	.align	2
.L3412:
	.word	.LANCHOR1-(.LPIC737+8)
	.word	.LANCHOR4-(.LPIC740+8)
	.fnend
	.size	gsmd_ch_probe, .-gsmd_ch_probe
	.align	2
	.type	gbam_data_ch_probe, %function
gbam_data_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L3422
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC741:
	add	r4, pc, r4
	ldr	r3, [r4, #2400]
	cmp	r3, #0
	ble	.L3415
	ldr	r1, [r0]
	mov	r2, #20
	ldr	r0, .L3422+4
.LPIC742:
	add	r0, pc, r0
	bl	strncmp(PLT)
	cmp	r0, #0
	ldr	r4, [r4, #2404]
	beq	.L3421
.L3415:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3421:
	add	r1, r4, #20
	mov	r0, #2
	add	r5, r4, #4
	add	r6, r4, #8
	bl	_set_bit(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L3416
	ldr	r3, .L3422+8
	add	r2, r4, #284
	mov	r0, #4
.LPIC744:
	add	r3, pc, r3
	ldr	r1, [r3, #-1440]
	bl	queue_work_on(PLT)
.L3416:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L3415
.L3423:
	.align	2
.L3422:
	.word	.LANCHOR1-(.LPIC741+8)
	.word	.LC198-(.LPIC742+8)
	.word	.LANCHOR4-(.LPIC744+8)
	.fnend
	.size	gbam_data_ch_probe, .-gbam_data_ch_probe
	.align	2
	.type	grmnet_ctrl_smd_ch_remove, %function
grmnet_ctrl_smd_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3468
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC745:
	add	r3, pc, r3
	ldr	r4, [r3, #708]
	cmp	r4, #0
	beq	.L3425
	ldr	r0, [r4, #4]
	mov	r2, #20
	ldr	r1, [r5]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3426
.L3425:
	ldr	r3, .L3468+4
.LPIC746:
	add	r3, pc, r3
	ldr	r4, [r3, #792]
	cmp	r4, #0
	beq	.L3427
	ldr	r0, [r4, #4]
	mov	r2, #20
	ldr	r1, [r5]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3426
.L3427:
	ldr	r3, .L3468+8
.LPIC747:
	add	r3, pc, r3
	ldr	r4, [r3, #876]
	cmp	r4, #0
	beq	.L3428
	ldr	r0, [r4, #4]
	mov	r2, #20
	ldr	r1, [r5]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3426
.L3428:
	ldr	r3, .L3468+12
.LPIC748:
	add	r3, pc, r3
	ldr	r4, [r3, #960]
	cmp	r4, #0
	beq	.L3429
	ldr	r0, [r4, #4]
	mov	r2, #20
	ldr	r1, [r5]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3426
.L3429:
	ldr	r3, .L3468+16
.LPIC749:
	add	r3, pc, r3
	ldr	r4, [r3, #1044]
	cmp	r4, #0
	beq	.L3430
	ldr	r0, [r4, #4]
	mov	r2, #20
	ldr	r1, [r5]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3426
.L3430:
	ldr	r3, .L3468+20
.LPIC750:
	add	r3, pc, r3
	ldr	r4, [r3, #1128]
	cmp	r4, #0
	beq	.L3433
	ldr	r1, [r5]
	mov	r2, #20
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3426
.L3433:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3426:
	add	r5, r4, #8
	mov	r0, #1
	mov	r1, r5
	bl	_clear_bit(PLT)
	mov	r0, #0
	mov	r1, r5
	bl	_clear_bit(PLT)
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L3433
	bl	smd_close(PLT)
	mov	r3, #0
	str	r3, [r4]
	b	.L3433
.L3469:
	.align	2
.L3468:
	.word	.LANCHOR1-(.LPIC745+8)
	.word	.LANCHOR1-(.LPIC746+8)
	.word	.LANCHOR1-(.LPIC747+8)
	.word	.LANCHOR1-(.LPIC748+8)
	.word	.LANCHOR1-(.LPIC749+8)
	.word	.LANCHOR1-(.LPIC750+8)
	.fnend
	.size	grmnet_ctrl_smd_ch_remove, .-grmnet_ctrl_smd_ch_remove
	.align	2
	.type	grmnet_ctrl_smd_ch_probe, %function
grmnet_ctrl_smd_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3516
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC751:
	add	r3, pc, r3
	ldr	r4, [r3, #708]
	cmp	r4, #0
	beq	.L3471
	ldr	r0, [r4, #4]
	mov	r2, #20
	ldr	r1, [r5]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3472
.L3471:
	ldr	r3, .L3516+4
.LPIC752:
	add	r3, pc, r3
	ldr	r4, [r3, #792]
	cmp	r4, #0
	beq	.L3473
	ldr	r0, [r4, #4]
	mov	r2, #20
	ldr	r1, [r5]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3472
.L3473:
	ldr	r3, .L3516+8
.LPIC753:
	add	r3, pc, r3
	ldr	r4, [r3, #876]
	cmp	r4, #0
	beq	.L3474
	ldr	r0, [r4, #4]
	mov	r2, #20
	ldr	r1, [r5]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3472
.L3474:
	ldr	r3, .L3516+12
.LPIC754:
	add	r3, pc, r3
	ldr	r4, [r3, #960]
	cmp	r4, #0
	beq	.L3475
	ldr	r0, [r4, #4]
	mov	r2, #20
	ldr	r1, [r5]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3472
.L3475:
	ldr	r3, .L3516+16
.LPIC755:
	add	r3, pc, r3
	ldr	r4, [r3, #1044]
	cmp	r4, #0
	beq	.L3476
	ldr	r0, [r4, #4]
	mov	r2, #20
	ldr	r1, [r5]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3472
.L3476:
	ldr	r3, .L3516+20
.LPIC756:
	add	r3, pc, r3
	ldr	r4, [r3, #1128]
	cmp	r4, #0
	beq	.L3477
	ldr	r1, [r5]
	mov	r2, #20
	ldr	r0, [r4, #4]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3472
.L3477:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3472:
	add	r5, r4, #8
	mov	r0, #2
	mov	r1, r5
	add	r6, r4, #108
	bl	_clear_bit(PLT)
	mov	r1, r5
	mov	r0, #1
	bl	_set_bit(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #104]
	mov	r5, r0
	cmp	r3, #0
	beq	.L3478
	ldr	r1, .L3516+24
	add	r2, r4, #112
	mov	r0, #4
	mov	r3, #0
.LPIC757:
	add	r1, pc, r1
	ldr	r1, [r1, #-1468]
	bl	queue_delayed_work_on(PLT)
.L3478:
	mov	r0, r6
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L3477
.L3517:
	.align	2
.L3516:
	.word	.LANCHOR1-(.LPIC751+8)
	.word	.LANCHOR1-(.LPIC752+8)
	.word	.LANCHOR1-(.LPIC753+8)
	.word	.LANCHOR1-(.LPIC754+8)
	.word	.LANCHOR1-(.LPIC755+8)
	.word	.LANCHOR1-(.LPIC756+8)
	.word	.LANCHOR4-(.LPIC757+8)
	.fnend
	.size	grmnet_ctrl_smd_ch_probe, .-grmnet_ctrl_smd_ch_probe
	.align	2
	.type	ghsic_ctrl_remove, %function
ghsic_ctrl_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L3558
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
.LPIC758:
	add	r5, pc, r5
	ldr	r7, [r5, #1212]
	cmp	r7, #0
	beq	.L3519
	ldr	r4, [r5, #1216]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3520
	cmp	r7, #1
	bls	.L3519
	ldr	r4, [r5, #1320]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3520
	cmp	r7, #2
	beq	.L3519
	ldr	r4, [r5, #1424]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3520
	cmp	r7, #3
	beq	.L3519
	ldr	r4, [r5, #1528]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L3520
.L3519:
	ldr	r1, .L3558+4
	mvn	r2, #21
	ldr	r0, .L3558+8
.LPIC764:
	add	r1, pc, r1
.LPIC763:
	add	r0, pc, r0
	add	r1, r1, #1216
	bl	printk(PLT)
	mvn	r0, #21
.L3552:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3520:
	add	r6, r4, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #8]
	mov	r1, r0
	cmp	r5, #0
	beq	.L3556
	ldr	r3, [r4, #48]
	cmp	r3, #0
	bne	.L3557
	str	r3, [r4, #92]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5, #120]
	cmp	r3, #0
	beq	.L3530
.L3529:
	mov	r0, r5
	blx	r3
.L3530:
	add	r4, r4, #84
	mov	r0, #0
	mov	r1, r4
	bl	_clear_bit(PLT)
.L3524:
	mov	r0, #1
	mov	r1, r4
	bl	_clear_bit(PLT)
	mov	r0, #0
	b	.L3552
.L3557:
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #92]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5, #104]
	cmp	r3, #0
	bne	.L3529
	b	.L3530
.L3556:
	mov	r0, r6
	add	r4, r4, #84
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L3524
.L3559:
	.align	2
.L3558:
	.word	.LANCHOR1-(.LPIC758+8)
	.word	.LANCHOR3-(.LPIC764+8)
	.word	.LC96-(.LPIC763+8)
	.fnend
	.size	ghsic_ctrl_remove, .-ghsic_ctrl_remove
	.align	2
	.type	gsmd_notify_modem, %function
gsmd_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3589
.LPIC765:
	add	r3, pc, r3
	ldr	ip, [r3, #496]
	cmp	r1, ip
	bcs	.L3586
	cmp	r0, #0
	beq	.L3587
	mov	ip, #104
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	lr, [sp, #12]
	and	lr, r2, #1
	mla	r3, ip, r1, r3
	str	r6, [sp, #8]
	cmp	lr, #0
	moveq	r1, #4
	movne	r1, #6
	moveq	ip, #0
	movne	ip, #2
	ldr	r4, [r3, #520]
	tst	r2, #2
	moveq	r1, ip
	ldr	r3, [r4, #160]
	cmp	r3, r1
	beq	.L3560
	ldr	r3, [r4, #72]
	str	r1, [r4, #160]
	ldr	r2, [r3, #8]
	tst	r2, #1
	beq	.L3560
	tst	r1, #2
	bne	.L3588
.L3568:
	ldrd	r4, [sp]
	mvn	r2, r1
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r0, [r3]
	b	smd_tiocmset(PLT)
.L3560:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3588:
	mov	r5, r0
	ldr	r0, [r3]
	bl	smd_tiocmget(PLT)
	and	r3, r0, #128
	cmp	r3, #0
	moveq	r1, #0
	movne	r1, #8
	moveq	r3, #1
	movne	r3, #9
	tst	r0, #64
	movne	r1, r3
	tst	r0, #256
	orrne	r1, r1, #2
	str	r1, [r4, #164]
	ldr	r3, [r5, #136]
	cmp	r3, #0
	beq	.L3585
	ldr	r0, [r4, #68]
	blx	r3
.L3585:
	ldr	r3, [r4, #72]
	ldr	r1, [r4, #160]
	b	.L3568
.L3586:
	ldr	r3, .L3589+4
	mov	r2, r1
	ldr	r0, .L3589+8
.LPIC767:
	add	r3, pc, r3
	add	r1, r3, #1232
.LPIC766:
	add	r0, pc, r0
	add	r1, r1, #4
	b	printk(PLT)
.L3587:
	ldr	r1, .L3589+12
	ldr	r0, .L3589+16
.LPIC769:
	add	r1, pc, r1
	add	r1, r1, #1232
.LPIC768:
	add	r0, pc, r0
	add	r1, r1, #4
	b	printk(PLT)
.L3590:
	.align	2
.L3589:
	.word	.LANCHOR1-(.LPIC765+8)
	.word	.LANCHOR3-(.LPIC767+8)
	.word	.LC89-(.LPIC766+8)
	.word	.LANCHOR3-(.LPIC769+8)
	.word	.LC90-(.LPIC768+8)
	.fnend
	.size	gsmd_notify_modem, .-gsmd_notify_modem
	.align	2
	.type	gbam_data_write_tobam, %function
gbam_data_write_tobam:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	r3, [r0, #-4]
	.pad #12
	sub	sp, sp, #12
	add	r6, r3, #4
	mov	r5, r3
	str	r3, [sp, #4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #12]
	mov	fp, r0
	cmp	r3, #0
	beq	.L3592
	ldr	r10, .L3609
	sub	r7, r4, #20
	mov	r9, #0
	ldr	r3, [r4, #160]
.LPIC771:
	add	r10, pc, r10
	b	.L3593
.L3608:
	ldr	r3, [r4, #-12]
	sub	r3, r3, #1
	str	r3, [r4, #-12]
	ldrd	r2, [r5]
	str	r9, [r5]
	str	r9, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r2, [r4, #160]
	ldr	r3, [r4, #180]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r4, #160]
	str	r3, [r4, #180]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r1, r5
	ldr	r0, [r4, #-56]
	bl	msm_bam_dmux_write(PLT)
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r8, #0
	mov	fp, r0
	bne	.L3607
	ldr	r3, [r4, #160]
	ldr	r2, [r4, #200]
	cmp	r3, r2
	strhi	r3, [r4, #200]
.L3593:
	ldr	r2, [r10, #412]
	mov	r1, fp
	mov	r0, r6
	cmp	r2, r3
	bls	.L3594
	ldr	r5, [r4, #-20]
	cmp	r5, r7
	cmpne	r5, #0
	bne	.L3608
.L3594:
	mov	r0, r6
	mov	r1, fp
	ldr	r5, [r4, #-12]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L3609+4
.LPIC772:
	add	r3, pc, r3
	ldr	r3, [r3, #416]
	cmp	r5, r3
	bcs	.L3591
	ldr	r3, [r4, #196]
	cmp	r3, #0
	beq	.L3599
	ldr	r3, [r4, #188]
	mov	r2, #0
	str	r2, [r4, #196]
	add	r3, r3, #1
	str	r3, [r4, #188]
.L3599:
	ldr	r0, [sp, #4]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gbam_start_rx(PLT)
.L3591:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3607:
	ldr	r2, [r4, #160]
	mov	r0, r5
	ldr	r3, [r4, #180]
	ldr	r5, [r4, #168]
	sub	r2, r2, #1
	sub	r3, r3, #1
	add	r5, r5, #1
	str	r2, [r4, #160]
	str	r3, [r4, #180]
	str	r5, [r4, #168]
	bl	dev_kfree_skb_any(PLT)
	b	.L3594
.L3592:
	mov	r0, r6
	mov	r1, fp
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L3610:
	.align	2
.L3609:
	.word	.LANCHOR2-(.LPIC771+8)
	.word	.LANCHOR2-(.LPIC772+8)
	.fnend
	.size	gbam_data_write_tobam, .-gbam_data_write_tobam
	.align	2
	.type	gbam2bam_resume_work, %function
gbam2bam_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	mov	r2, r1
	ldrb	r0, [r0, #-203]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb(PLT)
	ldr	r3, [r4, #-200]
	cmp	r3, #7
	beq	.L3614
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3614:
	sub	r0, r4, #196
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	usb_bam_resume(PLT)
	.fnend
	.size	gbam2bam_resume_work, .-gbam2bam_resume_work
	.align	2
	.type	bam2bam_data_resume_work, %function
bam2bam_data_resume_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	mov	r2, r1
	ldrb	r0, [r0, #-163]	@ zero_extendqisi2
	bl	usb_bam_register_wake_cb(PLT)
	ldr	r3, [r4, #-156]
	cmp	r3, #7
	beq	.L3618
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3618:
	sub	r0, r4, #152
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	usb_bam_resume(PLT)
	.fnend
	.size	bam2bam_data_resume_work, .-bam2bam_data_resume_work
	.align	2
	.type	gbam2bam_suspend_work, %function
gbam2bam_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L3623
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	sub	r5, r0, #316
	str	r6, [sp, #8]
	mov	r4, r0
	mov	r2, r5
	str	lr, [sp, #12]
	ldrb	r0, [r0, #-187]	@ zero_extendqisi2
.LPIC773:
	add	r1, pc, r1
	bl	usb_bam_register_wake_cb(PLT)
	ldr	r3, [r4, #-184]
	cmp	r3, #7
	beq	.L3622
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3622:
	ldr	r0, .L3623+4
	mov	r2, r5
	ldr	r1, .L3623+8
.LPIC774:
	add	r0, pc, r0
.LPIC775:
	add	r1, pc, r1
	bl	usb_bam_register_start_stop_cbs(PLT)
	ldr	r6, [sp, #8]
	sub	r0, r4, #180
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	usb_bam_suspend(PLT)
.L3624:
	.align	2
.L3623:
	.word	gbam_wake_cb-(.LPIC773+8)
	.word	gbam_start-(.LPIC774+8)
	.word	gbam_stop-(.LPIC775+8)
	.fnend
	.size	gbam2bam_suspend_work, .-gbam2bam_suspend_work
	.align	2
	.type	bam2bam_data_suspend_work, %function
bam2bam_data_suspend_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L3629
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	sub	r5, r0, #200
	str	r6, [sp, #8]
	mov	r4, r0
	mov	r2, r5
	str	lr, [sp, #12]
	ldrb	r0, [r0, #-147]	@ zero_extendqisi2
.LPIC776:
	add	r1, pc, r1
	bl	usb_bam_register_wake_cb(PLT)
	ldr	r3, [r4, #-140]
	cmp	r3, #7
	beq	.L3628
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3628:
	ldr	r0, .L3629+4
	mov	r2, r5
	ldr	r1, .L3629+8
.LPIC777:
	add	r0, pc, r0
.LPIC778:
	add	r1, pc, r1
	bl	usb_bam_register_start_stop_cbs(PLT)
	ldr	r6, [sp, #8]
	sub	r0, r4, #136
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	usb_bam_suspend(PLT)
.L3630:
	.align	2
.L3629:
	.word	bam_data_wake_cb-(.LPIC776+8)
	.word	bam_data_start-(.LPIC777+8)
	.word	bam_data_stop-(.LPIC778+8)
	.fnend
	.size	bam2bam_data_suspend_work, .-bam2bam_data_suspend_work
	.align	2
	.type	gbam_peer_reset_cb, %function
gbam_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #12]
	cmp	r3, #0
	beq	.L3632
	ldr	r2, [r3, #84]
	cmp	r2, #0
	beq	.L3632
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L3632
	ldr	r0, [r3, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	ldr	r0, [r3, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #12]
	mov	r3, #0
	mov	r0, r3
	ldr	r2, [r2, #84]
	str	r3, [r2]
	ldr	r2, [r4, #12]
	ldr	r2, [r2, #88]
	str	r3, [r2]
	bl	usb_bam_a2_reset(PLT)
	cmp	r0, #0
	bne	.L3633
.L3644:
	ldr	r3, [r4, #12]
	ldr	r0, [r3, #84]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L3665
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #84]
	str	r4, [r3]
	ldr	r3, [r4, #12]
	ldr	r0, [r3, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L3666
	ldr	r3, [r4, #12]
	add	r5, r4, #4
	mov	r0, r5
	ldr	r3, [r3, #88]
	str	r4, [r3]
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L3667
	ldr	r0, [r3, #88]
	mov	r2, #32
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L3668
.L3639:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
.L3638:
	add	r5, r4, #8
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L3669
	ldr	r0, [r3, #84]
	mov	r2, #32
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L3670
.L3642:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
.L3641:
	ldr	r3, [r4, #132]
	cmp	r3, #6
	beq	.L3671
.L3646:
	mov	r5, #0
.L3662:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3632:
	mov	r0, #0
	bl	usb_bam_a2_reset(PLT)
	cmp	r0, #0
	beq	.L3641
	ldr	r1, .L3672
	mov	r2, r0
	ldr	r0, .L3672+4
.LPIC794:
	add	r1, pc, r1
	add	r1, r1, #1248
.LPIC793:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L3641
.L3671:
	ldr	r5, [r4]
	cmp	r5, #0
	bne	.L3646
	mov	r0, r5
	mov	r1, r5
	bl	usb_bam_register_peer_reset_cb(PLT)
	b	.L3662
.L3670:
	ldr	r1, .L3672+8
	mov	r2, r0
	ldr	r0, .L3672+12
.LPIC790:
	add	r1, pc, r1
	add	r1, r1, #1296
.LPIC789:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L3642
.L3669:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L3672+16
	ldr	r0, .L3672+20
.LPIC788:
	add	r1, pc, r1
	add	r1, r1, #1296
.LPIC787:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L3641
.L3668:
	ldr	r1, .L3672+24
	mov	r2, r0
	ldr	r0, .L3672+28
.LPIC786:
	add	r1, pc, r1
	add	r1, r1, #1264
.LPIC785:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L3639
.L3667:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L3672+32
	ldr	r0, .L3672+36
.LPIC784:
	add	r1, pc, r1
	add	r1, r1, #1264
.LPIC783:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L3638
.L3666:
	ldr	r1, .L3672+40
	ldr	r3, [r4, #12]
	ldr	r0, .L3672+44
.LPIC782:
	add	r1, pc, r1
	add	r1, r1, #1248
	ldr	r2, [r3, #88]
.LPIC781:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldr	r3, [r4, #12]
	mov	r2, #0
	ldr	r3, [r3, #84]
	str	r2, [r3]
	b	.L3662
.L3665:
	ldr	r1, .L3672+48
	ldr	r3, [r4, #12]
	ldr	r0, .L3672+52
.LPIC780:
	add	r1, pc, r1
	add	r1, r1, #1248
	ldr	r2, [r3, #84]
	add	r1, r1, #8
.LPIC779:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L3662
.L3633:
	ldr	r1, .L3672+56
	mov	r2, r0
	ldr	r0, .L3672+60
.LPIC792:
	add	r1, pc, r1
	add	r1, r1, #1248
.LPIC791:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L3644
.L3673:
	.align	2
.L3672:
	.word	.LANCHOR3-(.LPIC794+8)
	.word	.LC202-(.LPIC793+8)
	.word	.LANCHOR3-(.LPIC790+8)
	.word	.LC201-(.LPIC789+8)
	.word	.LANCHOR3-(.LPIC788+8)
	.word	.LC23-(.LPIC787+8)
	.word	.LANCHOR3-(.LPIC786+8)
	.word	.LC201-(.LPIC785+8)
	.word	.LANCHOR3-(.LPIC784+8)
	.word	.LC23-(.LPIC783+8)
	.word	.LANCHOR3-(.LPIC782+8)
	.word	.LC200-(.LPIC781+8)
	.word	.LANCHOR3-(.LPIC780+8)
	.word	.LC199-(.LPIC779+8)
	.word	.LANCHOR3-(.LPIC792+8)
	.word	.LC202-(.LPIC791+8)
	.fnend
	.size	gbam_peer_reset_cb, .-gbam_peer_reset_cb
	.align	2
	.type	bam_data_peer_reset_cb, %function
bam_data_peer_reset_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, #0
	str	lr, [sp, #4]
	bl	usb_bam_a2_reset(PLT)
	subs	r4, r0, #0
	bne	.L3678
	mov	r1, r4
	bl	usb_bam_register_peer_reset_cb(PLT)
.L3676:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3678:
	ldr	r1, .L3679
	mov	r3, r4
	ldr	r0, .L3679+4
.LPIC796:
	add	r1, pc, r1
	add	r1, r1, #1312
.LPIC795:
	add	r0, pc, r0
	add	r1, r1, #12
	mov	r2, r1
	bl	printk(PLT)
	b	.L3676
.L3680:
	.align	2
.L3679:
	.word	.LANCHOR3-(.LPIC796+8)
	.word	.LC203-(.LPIC795+8)
	.fnend
	.size	bam_data_peer_reset_cb, .-bam_data_peer_reset_cb
	.section	.init.text
	.align	2
	.type	gqti_ctrl_init, %function
gqti_ctrl_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3687
	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
.LPIC806:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L3684
	movw	r1, #32976
	mov	r2, #56
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	bne	.L3682
	ldr	r0, .L3687+4
.LPIC799:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #11
	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
.L3684:
	mov	r4, #16
.L3682:
	ldr	r7, .L3687+8
	mov	r5, #0
	add	r3, r4, #44
	ldr	r1, .L3687+12
	add	r0, r4, #32
	str	r3, [r4, #44]
	str	r3, [r4, #48]
.LPIC801:
	add	r7, pc, r7
	str	r5, [r4, #52]
.LPIC800:
	add	r1, pc, r1
	sub	r2, r7, #672
	str	r5, [r4, #16]
	str	r5, [r4, #20]
	str	r5, [r4, #24]
	str	r5, [r4, #28]
	str	r5, [r4, #8]
	str	r5, [r4, #12]
	bl	__init_waitqueue_head(PLT)
	ldr	r0, .L3687+16
	str	r4, [r7, #-672]
.LPIC803:
	add	r0, pc, r0
	add	r0, r0, #112
	bl	misc_register(PLT)
	subs	r6, r0, #0
	beq	.L3685
	ldr	r0, .L3687+20
.LPIC804:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	str	r5, [r7, #-672]
	mov	r0, r6
	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
.L3685:
	mov	r0, r6
	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
.L3688:
	.align	2
.L3687:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC806+8))
	.word	.LC204-(.LPIC799+8)
	.word	.LANCHOR4-(.LPIC801+8)
	.word	.LC205-(.LPIC800+8)
	.word	.LANCHOR0-(.LPIC803+8)
	.word	.LC206-(.LPIC804+8)
	.fnend
	.size	gqti_ctrl_init, .-gqti_ctrl_init
	.text
	.align	2
	.type	accessory_function_init, %function
accessory_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3700
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
.LPIC818:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	lr, [sp, #28]
	ldr	r0, [r3, #44]
	cmp	r0, #0
	beq	.L3693
	movw	r1, #32976
	mov	r2, #1792
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L3698
.L3690:
	ldr	r5, .L3700+4
	mov	r8, #0
	add	r0, r4, #1664
	ldr	r1, .L3700+8
	mov	r6, #65024
	add	r9, r4, #1776
	str	r8, [r4, #88]
	ldr	r7, .L3700+12
	movt	r6, 65535
.LPIC809:
	add	r5, pc, r5
	sub	r5, r5, #668
.LPIC808:
	add	r1, pc, r1
	mov	r2, r5
.LPIC812:
	add	r7, pc, r7
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L3700+16
	add	r0, r4, #1664
	mov	r2, r5
	add	r0, r0, #12
	add	r5, r4, #1760
	add	r5, r5, #8
.LPIC810:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	add	r3, r4, #1648
	add	lr, r4, #1776
	str	r6, [r4, #1700]
	add	ip, r4, #1696
	add	lr, lr, #8
	str	r5, [r4, #1768]
	add	ip, ip, #8
	add	r3, r3, #8
	str	r5, [r4, #1772]
	add	r0, r4, #1712
	mov	r1, r8
	str	lr, [r4, #1784]
	str	r3, [r4, #1656]
	mov	r2, r8
	add	r0, r0, #4
	str	r3, [r4, #1660]
	mov	r3, r8
	str	lr, [r4, #1788]
	str	ip, [r4, #1704]
	str	ip, [r4, #1708]
	str	r8, [r4, #1652]
	str	r7, [r4, #1712]
	str	r9, [r4, #1776]
	str	r9, [r4, #1780]
	bl	init_timer_key(PLT)
	ldr	r2, .L3700+20
	str	r6, [r4, #1752]
	add	ip, r4, #1696
	ldr	r1, .L3700+24
	add	r3, r4, #1744
	add	ip, ip, #4
	ldr	r0, .L3700+28
	add	r3, r3, #12
	ldr	r6, .L3700+32
	str	ip, [r4, #1736]
.LPIC817:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [r4, #1756]
.LPIC813:
	add	r1, pc, r1
	str	r3, [r4, #1760]
.LPIC815:
	add	r0, pc, r0
.LPIC814:
	add	r6, pc, r6
	str	r1, [r4, #1764]
	add	r0, r0, #148
	str	r2, [r4, #1732]
	str	r4, [r6, #2496]
	bl	misc_register(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L3699
.L3691:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3693:
	mov	r4, #16
	b	.L3690
.L3698:
	mvn	r0, #11
	b	.L3691
.L3699:
.L3692:
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r0, .L3700+36
.LPIC816:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r5
	b	.L3691
.L3701:
	.align	2
.L3700:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC818+8))
	.word	.LANCHOR4-(.LPIC809+8)
	.word	.LC207-(.LPIC808+8)
	.word	acc_start_work-(.LPIC812+8)
	.word	.LC208-(.LPIC810+8)
	.word	delayed_work_timer_fn(GOT_PREL)+(.-(.LPIC817+8))
	.word	acc_hid_work-(.LPIC813+8)
	.word	.LANCHOR0-(.LPIC815+8)
	.word	.LANCHOR1-(.LPIC814+8)
	.word	.LC209-(.LPIC816+8)
	.fnend
	.size	accessory_function_init, .-accessory_function_init
	.align	2
	.type	rndis_qc_function_init, %function
rndis_qc_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3711
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC826:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L3703
	movw	r1, #32976
	mov	r2, #272
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r4, #4]
	beq	.L3706
.L3705:
	ldr	r4, .L3711+4
	ldr	r0, .L3711+8
.LPIC821:
	add	r4, pc, r4
	add	r4, r4, #1344
.LPIC820:
	add	r0, pc, r0
	add	r4, r4, #4
	mov	r1, r4
	bl	printk(PLT)
	ldr	r0, .L3711+12
	mov	r2, #0
	ldr	r3, .L3711+16
.LPIC823:
	add	r0, pc, r0
.LPIC822:
	add	r3, pc, r3
	add	r0, r0, #184
	str	r2, [r3, #2500]
	bl	misc_register(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L3710
.L3708:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3703:
	mov	r3, #16
	str	r3, [r4, #4]
	b	.L3705
.L3706:
	mvn	r0, #11
	b	.L3708
.L3710:
	ldr	r0, .L3711+20
	mov	r1, r4
.LPIC824:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r5
	b	.L3708
.L3712:
	.align	2
.L3711:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC826+8))
	.word	.LANCHOR3-(.LPIC821+8)
	.word	.LC210-(.LPIC820+8)
	.word	.LANCHOR0-(.LPIC823+8)
	.word	.LANCHOR1-(.LPIC822+8)
	.word	.LC211-(.LPIC824+8)
	.fnend
	.size	rndis_qc_function_init, .-rndis_qc_function_init
	.align	2
	.type	mtp_function_init, %function
mtp_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3726
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
.LPIC842:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L3718
	movw	r1, #32976
	mov	r2, #256
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L3724
.L3714:
	ldr	r5, .L3726+4
	mov	r6, #0
	add	r0, r4, #132
	ldr	r1, .L3726+8
	str	r6, [r4, #88]
.LPIC829:
	add	r5, pc, r5
	sub	r5, r5, #668
.LPIC828:
	add	r1, pc, r1
	mov	r2, r5
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L3726+12
	mov	r2, r5
	add	r0, r4, #144
.LPIC830:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L3726+16
	mov	r2, r5
	add	r0, r4, #156
	add	r5, r4, #116
.LPIC832:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	ip, .L3726+20
	add	lr, r4, #124
	mov	r1, #10
	ldr	r0, .L3726+24
	str	r6, [r4, #108]
	mov	r3, r6
	str	r6, [r4, #112]
	movt	r1, 2
	mov	r2, #1
	str	r5, [r4, #116]
.LPIC835:
	add	ip, pc, ip
	str	r5, [r4, #120]
	str	lr, [r4, #124]
.LPIC834:
	add	r0, pc, r0
	str	lr, [r4, #128]
	stmia	sp, {r6, ip}
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, r6
	str	r0, [r4, #180]
	beq	.L3720
	ldr	r1, .L3726+28
	mov	ip, #65024
	add	r5, r4, #188
	ldr	r2, .L3726+32
	movt	ip, 65535
	add	lr, r4, #204
	ldr	r0, .L3726+36
	str	r5, [r4, #188]
	ldr	r3, .L3726+40
	str	r5, [r4, #192]
.LPIC836:
	add	r1, pc, r1
	str	ip, [r4, #184]
.LPIC837:
	add	r2, pc, r2
	str	ip, [r4, #200]
.LPIC839:
	add	r0, pc, r0
	str	r1, [r4, #196]
.LPIC838:
	add	r3, pc, r3
	str	r2, [r4, #212]
	add	r0, r0, #220
	str	lr, [r4, #204]
	str	lr, [r4, #208]
	str	r4, [r3, #2504]
	bl	misc_register(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L3725
.L3715:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3718:
	mov	r4, #16
	b	.L3714
.L3724:
	mvn	r0, #11
	b	.L3715
.L3725:
.L3717:
	ldr	r0, [r4, #180]
	bl	destroy_workqueue(PLT)
.L3716:
	ldr	r3, .L3726+44
	mov	r2, #0
	mov	r0, r4
.LPIC840:
	add	r3, pc, r3
	str	r2, [r3, #2504]
	bl	kfree(PLT)
	ldr	r0, .L3726+48
.LPIC841:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r5
	b	.L3715
.L3720:
	mvn	r5, #11
	b	.L3716
.L3727:
	.align	2
.L3726:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC842+8))
	.word	.LANCHOR4-(.LPIC829+8)
	.word	.LC207-(.LPIC828+8)
	.word	.LC208-(.LPIC830+8)
	.word	.LC212-(.LPIC832+8)
	.word	.LC213-(.LPIC835+8)
	.word	.LC195-(.LPIC834+8)
	.word	send_file_work-(.LPIC836+8)
	.word	receive_file_work-(.LPIC837+8)
	.word	.LANCHOR0-(.LPIC839+8)
	.word	.LANCHOR1-(.LPIC838+8)
	.word	.LANCHOR1-(.LPIC840+8)
	.word	.LC214-(.LPIC841+8)
	.fnend
	.size	mtp_function_init, .-mtp_function_init
	.align	2
	.type	adb_function_init, %function
adb_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L3744
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC851:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
	ldr	r0, [r4, #24]
	cmp	r0, #0
	beq	.L3729
	movw	r1, #32976
	mov	r2, #8
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r5, #4]
	beq	.L3733
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L3735
.L3743:
	movw	r1, #32976
	mov	r2, #164
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L3733
.L3732:
	ldr	r5, .L3744+4
	mov	r6, #0
	add	r0, r4, #128
	ldr	r1, .L3744+8
	str	r6, [r4, #88]
.LPIC845:
	add	r5, pc, r5
	sub	r7, r5, #668
.LPIC844:
	add	r1, pc, r1
	mov	r2, r7
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L3744+12
	mov	r2, r7
	add	r0, r4, #140
.LPIC846:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r0, .L3744+16
	add	r3, r4, #120
	mov	r2, #1
	str	r6, [r4, #116]
	str	r6, [r4, #108]
	str	r6, [r4, #112]
.LPIC849:
	add	r0, pc, r0
	strb	r2, [r4, #161]
	add	r0, r0, #256
	str	r3, [r4, #120]
	str	r3, [r4, #124]
	str	r4, [r5, #-1472]
	bl	misc_register(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L3742
.L3740:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3729:
	mov	r3, #16
	str	r3, [r5, #4]
	ldr	r0, [r4, #8]
	cmp	r0, #0
	bne	.L3743
.L3735:
	mov	r4, #16
	b	.L3732
.L3733:
	mvn	r0, #11
	b	.L3740
.L3742:
.L3734:
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r0, .L3744+20
.LPIC850:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r5
	b	.L3740
.L3745:
	.align	2
.L3744:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC851+8))
	.word	.LANCHOR4-(.LPIC845+8)
	.word	.LC207-(.LPIC844+8)
	.word	.LC208-(.LPIC846+8)
	.word	.LANCHOR0-(.LPIC849+8)
	.word	.LC215-(.LPIC850+8)
	.fnend
	.size	adb_function_init, .-adb_function_init
	.align	2
	.type	rmnet_smd_sdio_function_init, %function
rmnet_smd_sdio_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r3, .L3767
	strd	r6, [sp, #8]
	ldr	r7, .L3767+4
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
.LPIC852:
	add	r7, pc, r7
	ldr	r3, [r7, r3]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L3754
	movw	r1, #32976
	mov	r2, #428
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L3764
.L3747:
	ldr	lr, .L3767+8
	mov	r5, #0
	mov	r1, #10
	ldr	ip, .L3767+12
	mov	r3, r5
	movt	r1, 2
	ldr	r0, .L3767+16
	str	r5, [sp]
	mov	r2, #1
.LPIC855:
	add	lr, pc, lr
.LPIC853:
	add	ip, pc, ip
	str	lr, [sp, #4]
.LPIC854:
	add	r0, pc, r0
	str	r4, [ip, #2488]
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, r5
	str	r0, [r4, #380]
	beq	.L3756
	ldr	r3, .L3767+20
	mov	r9, #65024
	add	ip, r4, #388
	ldr	r1, .L3767+24
	movt	r9, 65535
	str	r5, [r4, #368]
	str	ip, [r4, #388]
	add	r0, r4, #152
	mov	r2, r4
	str	ip, [r4, #392]
	ldr	r6, .L3767+28
	add	r10, r4, #120
.LPIC856:
	add	r3, pc, r3
	str	r5, [r4, #376]
	add	r8, r4, #104
.LPIC857:
	add	r1, pc, r1
	str	r5, [r4, #372]
	add	fp, r4, #112
	str	r3, [r4, #396]
	str	r5, [r4, #176]
.LPIC860:
	add	r6, pc, r6
	str	r9, [r4, #384]
	sub	r6, r6, #668
	bl	tasklet_init(PLT)
	ldr	r1, .L3767+32
	add	r0, r4, #132
	mov	r2, r4
.LPIC858:
	add	r1, pc, r1
	bl	tasklet_init(PLT)
	ldr	r1, .L3767+36
	mov	r2, r6
	add	r0, r4, #180
.LPIC859:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r2, .L3767+40
	str	r10, [r4, #120]
	add	lr, r4, #244
	ldr	r3, .L3767+44
	str	r10, [r4, #124]
	add	ip, r4, #260
	ldr	r10, .L3767+48
	mov	r1, r5
	str	r9, [r4, #240]
	add	r0, r4, #272
	str	r9, [r4, #256]
	add	r9, r4, #256
.LPIC861:
	add	r2, pc, r2
	str	r8, [r4, #104]
.LPIC862:
	add	r3, pc, r3
	str	r8, [r4, #108]
	add	r8, r4, #216
	str	r2, [r4, #252]
	mov	r2, r5
	str	r3, [r4, #268]
	mov	r3, r5
	str	fp, [r4, #112]
	str	fp, [r4, #116]
	add	fp, r4, #340
	str	lr, [r4, #244]
	str	lr, [r4, #248]
	str	ip, [r4, #260]
	str	ip, [r4, #264]
	bl	init_timer_key(PLT)
	mov	r2, r6
	ldr	r1, .L3767+52
	add	lr, r4, #200
	ldr	r6, [r7, r10]
	add	ip, r4, #224
	add	r3, r4, #316
	str	r5, [r4, #212]
	add	r0, r4, #324
	str	r5, [r4, #208]
	str	r5, [r4, #236]
.LPIC863:
	add	r1, pc, r1
	str	r5, [r4, #232]
	add	r5, r4, #192
	str	lr, [r4, #200]
	str	r5, [r4, #192]
	str	r5, [r4, #196]
	str	lr, [r4, #204]
	str	ip, [r4, #224]
	str	ip, [r4, #228]
	str	r3, [r4, #316]
	str	r3, [r4, #320]
	str	r6, [r4, #288]
	str	r9, [r4, #292]
	str	r8, [r4, #216]
	str	r8, [r4, #220]
	str	fp, [r4, #340]
	str	fp, [r4, #344]
	bl	__init_waitqueue_head(PLT)
	ldr	r0, .L3767+56
.LPIC865:
	add	r0, pc, r0
	add	r0, r0, #292
	bl	misc_register(PLT)
	subs	r5, r0, #0
	bne	.L3765
	ldr	r0, .L3767+60
	mov	r1, r5
.LPIC869:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	ldr	r3, .L3767+64
	cmp	r0, #0
	ldr	r6, [r7, r3]
	str	r0, [r6]
	beq	.L3752
	cmn	r0, #4096
	bhi	.L3752
	ldr	ip, .L3767+68
	mov	r2, r0
	mov	r3, r4
	ldr	r0, .L3767+72
	mov	r1, #292
	ldr	ip, [r7, ip]
.LPIC868:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	subs	r5, r0, #0
	beq	.L3766
.L3752:
	mov	r0, #0
	b	.L3760
.L3765:
	ldr	r1, .L3767+76
	ldr	r0, .L3767+80
.LPIC867:
	add	r1, pc, r1
	add	r1, r1, #1360
.LPIC866:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, [r4, #380]
	bl	destroy_workqueue(PLT)
.L3749:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
.L3760:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3754:
	mov	r4, #16
	b	.L3747
.L3756:
	mvn	r5, #11
	b	.L3749
.L3766:
	ldr	r0, [r6]
	bl	debugfs_remove(PLT)
	str	r5, [r6]
	mov	r0, r5
	b	.L3760
.L3764:
	mvn	r0, #11
	b	.L3760
.L3768:
	.align	2
.L3767:
	.word	kmalloc_caches(GOT)
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC852+8)
	.word	.LC216-(.LPIC855+8)
	.word	.LANCHOR1-(.LPIC853+8)
	.word	.LC195-(.LPIC854+8)
	.word	rmnet_mux_disconnect_work-(.LPIC856+8)
	.word	rmnet_mux_smd_data_rx_tlet-(.LPIC857+8)
	.word	.LANCHOR4-(.LPIC860+8)
	.word	rmnet_mux_smd_data_tx_tlet-(.LPIC858+8)
	.word	.LC217-(.LPIC859+8)
	.word	rmnet_mux_sdio_data_rx_work-(.LPIC861+8)
	.word	rmnet_mux_open_sdio_work-(.LPIC862+8)
	.word	delayed_work_timer_fn(GOT)
	.word	.LC218-(.LPIC863+8)
	.word	.LANCHOR0-(.LPIC865+8)
	.word	.LC220-(.LPIC869+8)
	.word	dent_rmnet_mux(GOT)
	.word	rmnet_mux_svlte_debug_stats_ops(GOT)
	.word	.LC138-(.LPIC868+8)
	.word	.LANCHOR3-(.LPIC867+8)
	.word	.LC219-(.LPIC866+8)
	.fnend
	.size	rmnet_smd_sdio_function_init, .-rmnet_smd_sdio_function_init
	.section	.exit.text
	.align	2
	.type	gqti_ctrl_cleanup, %function
gqti_ctrl_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L3771
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
	ldr	r4, .L3771+4
.LPIC870:
	add	r0, pc, r0
	add	r0, r0, #112
.LPIC871:
	add	r4, pc, r4
	bl	misc_deregister(PLT)
	ldr	r0, [r4, #-672]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #-672]
	ldmfd	sp!, {r4, pc}
.L3772:
	.align	2
.L3771:
	.word	.LANCHOR0-(.LPIC870+8)
	.word	.LANCHOR4-(.LPIC871+8)
	.fnend
	.size	gqti_ctrl_cleanup, .-gqti_ctrl_cleanup
	.text
	.align	2
	.type	accessory_function_cleanup, %function
accessory_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L3775
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r4, .L3775+4
	str	lr, [sp, #4]
.LPIC873:
	add	r0, pc, r0
.LPIC874:
	add	r4, pc, r4
	add	r0, r0, #148
	bl	misc_deregister(PLT)
	ldr	r0, [r4, #2496]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #2496]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3776:
	.align	2
.L3775:
	.word	.LANCHOR0-(.LPIC873+8)
	.word	.LANCHOR1-(.LPIC874+8)
	.fnend
	.size	accessory_function_cleanup, .-accessory_function_cleanup
	.align	2
	.type	ncm_function_cleanup, %function
ncm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3779
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	ldr	r4, .L3779+4
	str	lr, [sp, #12]
	str	r6, [sp, #8]
.LPIC876:
	add	r3, pc, r3
	add	r0, r3, #328
.LPIC877:
	add	r4, pc, r4
	bl	misc_deregister(PLT)
	ldr	r0, [r4, #-668]
	bl	kfree(PLT)
	ldr	r0, [r5, #4]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r5, #4]
	str	r3, [r4, #-668]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3780:
	.align	2
.L3779:
	.word	.LANCHOR0-(.LPIC876+8)
	.word	.LANCHOR4-(.LPIC877+8)
	.fnend
	.size	ncm_function_cleanup, .-ncm_function_cleanup
	.align	2
	.type	rndis_qc_function_cleanup, %function
rndis_qc_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L3783
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	ldr	r0, .L3783+4
	str	lr, [sp, #4]
.LPIC880:
	add	r1, pc, r1
	add	r1, r1, #1392
.LPIC879:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L3783+8
.LPIC881:
	add	r0, pc, r0
	add	r0, r0, #184
	bl	misc_deregister(PLT)
	ldr	r3, .L3783+12
	mov	r2, #0
	ldr	r0, [r4, #4]
.LPIC883:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r2, [r3]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree(PLT)
.L3784:
	.align	2
.L3783:
	.word	.LANCHOR3-(.LPIC880+8)
	.word	.LC221-(.LPIC879+8)
	.word	.LANCHOR0-(.LPIC881+8)
	.word	_rndis_qc(GOT_PREL)+(.-(.LPIC883+8))
	.fnend
	.size	rndis_qc_function_cleanup, .-rndis_qc_function_cleanup
	.align	2
	.type	mtp_function_cleanup, %function
mtp_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L3788
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC884:
	add	r5, pc, r5
	ldr	r4, [r5, #2504]
	cmp	r4, #0
	beq	.L3785
	ldr	r0, .L3788+4
.LPIC885:
	add	r0, pc, r0
	add	r0, r0, #220
	bl	misc_deregister(PLT)
	ldr	r0, [r4, #180]
	bl	destroy_workqueue(PLT)
	mov	r3, #0
	mov	r0, r4
	str	r3, [r5, #2504]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree(PLT)
.L3785:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3789:
	.align	2
.L3788:
	.word	.LANCHOR1-(.LPIC884+8)
	.word	.LANCHOR0-(.LPIC885+8)
	.fnend
	.size	mtp_function_cleanup, .-mtp_function_cleanup
	.align	2
	.type	ccid_function_cleanup, %function
ccid_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r4, .L3792
	str	lr, [sp, #4]
.LPIC887:
	add	r4, pc, r4
	add	r0, r4, #364
	bl	misc_deregister(PLT)
	add	r0, r4, #400
	bl	misc_deregister(PLT)
	ldr	r3, .L3792+4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC889:
	add	r3, pc, r3
	ldr	r0, [r3, #2396]
	b	kfree(PLT)
.L3793:
	.align	2
.L3792:
	.word	.LANCHOR0-(.LPIC887+8)
	.word	.LANCHOR1-(.LPIC889+8)
	.fnend
	.size	ccid_function_cleanup, .-ccid_function_cleanup
	.align	2
	.type	adb_function_cleanup, %function
adb_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3796
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	ldr	r4, .L3796+4
	str	lr, [sp, #12]
	str	r6, [sp, #8]
.LPIC890:
	add	r3, pc, r3
.LPIC891:
	add	r4, pc, r4
	add	r0, r3, #256
	bl	misc_deregister(PLT)
	ldr	r0, [r4, #-1472]
	bl	kfree(PLT)
	mov	r3, #0
	ldr	r0, [r5, #4]
	str	r3, [r4, #-1472]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree(PLT)
.L3797:
	.align	2
.L3796:
	.word	.LANCHOR0-(.LPIC890+8)
	.word	.LANCHOR4-(.LPIC891+8)
	.fnend
	.size	adb_function_cleanup, .-adb_function_cleanup
	.align	2
	.type	rmnet_smd_sdio_function_cleanup, %function
rmnet_smd_sdio_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3800
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r2, .L3800+4
	str	lr, [sp, #4]
.LPIC896:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
.LPIC893:
	add	r2, pc, r2
	ldr	r4, [r2, #2488]
	ldr	r0, [r3]
	bl	debugfs_remove_recursive(PLT)
	ldr	r0, .L3800+8
.LPIC895:
	add	r0, pc, r0
	add	r0, r0, #292
	bl	misc_deregister(PLT)
	ldr	r0, [r4, #128]
	bl	smd_close(PLT)
	ldr	r0, [r4, #380]
	bl	destroy_workqueue(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
.L3801:
	.align	2
.L3800:
	.word	dent_rmnet_mux(GOT_PREL)+(.-(.LPIC896+8))
	.word	.LANCHOR1-(.LPIC893+8)
	.word	.LANCHOR0-(.LPIC895+8)
	.fnend
	.size	rmnet_smd_sdio_function_cleanup, .-rmnet_smd_sdio_function_cleanup
	.align	2
	.type	mbim_function_cleanup, %function
mbim_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L3807
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L3807+4
	str	lr, [sp, #4]
	ldr	r4, .L3807+8
.LPIC898:
	add	r1, pc, r1
	add	r1, r1, #1408
.LPIC897:
	add	r0, pc, r0
.LPIC899:
	add	r4, pc, r4
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r3, [r4, #-664]
	cmp	r3, #0
	beq	.L3804
	ldr	r0, [r4, #-660]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #-660]
.L3804:
	ldr	r0, .L3807+12
	mov	r4, #0
	ldr	r3, .L3807+16
.LPIC901:
	add	r0, pc, r0
.LPIC900:
	add	r3, pc, r3
	add	r0, r0, #436
	str	r4, [r3, #-664]
	bl	misc_deregister(PLT)
	ldr	r3, .L3807+20
.LPIC902:
	add	r3, pc, r3
	str	r4, [r3, #2580]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3808:
	.align	2
.L3807:
	.word	.LANCHOR3-(.LPIC898+8)
	.word	.LC222-(.LPIC897+8)
	.word	.LANCHOR4-(.LPIC899+8)
	.word	.LANCHOR0-(.LPIC901+8)
	.word	.LANCHOR4-(.LPIC900+8)
	.word	.LANCHOR1-(.LPIC902+8)
	.fnend
	.size	mbim_function_cleanup, .-mbim_function_cleanup
	.align	2
	.type	ffs_epfile_io_complete, %function
ffs_epfile_io_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L3809
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L3809
	ldr	r2, [r1, #32]
	cmp	r2, #0
	beq	.L3809
	ldr	r2, [r1, #44]
	cmp	r2, #0
	ldreq	r2, [r1, #48]
	str	r2, [r3, #24]
	ldr	r0, [r1, #32]
	b	complete(PLT)
.L3809:
	bx	lr
	.fnend
	.size	ffs_epfile_io_complete, .-ffs_epfile_io_complete
	.align	2
	.type	f_midi_transmit, %function
f_midi_transmit:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r10, [sp, #24]
	mov	r10, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	r3, [r0, #88]
	.pad #20
	sub	sp, sp, #20
	cmp	r3, #0
	str	r3, [sp, #4]
	beq	.L3821
	cmp	r1, #0
	mov	r9, r1
	beq	.L3867
.L3823:
	ldr	r3, .L3872
	mov	r2, #0
	add	r6, r10, #100
	mov	r1, r2
	add	fp, r10, #228
	add	r8, r10, #164
	add	r7, sp, #15
	str	r2, [r9, #4]
.LPIC906:
	add	r3, pc, r3
	str	r3, [r9, #28]
.L3855:
	ldr	r4, [fp, #4]!
	ldr	r5, [r6, #4]!
	cmp	r4, #0
	beq	.L3824
	ldr	r3, [r4, #4]
	cmp	r3, #0
	cmpne	r5, #0
	beq	.L3824
	ldr	r2, [r10, #336]
	add	r3, r1, #3
	cmp	r2, r3
	bls	.L3824
	str	r6, [sp]
.L3854:
	mov	r0, r5
	mov	r1, r7
	mov	r2, #1
	bl	snd_rawmidi_transmit(PLT)
	cmp	r0, #1
	bne	.L3868
	ldrb	r3, [r4, #8]	@ zero_extendqisi2
	ldrb	r2, [sp, #15]	@ zero_extendqisi2
	mov	r3, r3, asl #4
	cmp	r2, #247
	uxtb	r3, r3
	bhi	.L3869
	cmp	r2, #239
	bls	.L3828
	sub	r1, r2, #241
	cmp	r1, #6
	addls	pc, pc, r1, asl #2
	b	.L3829
.L3831:
	b	.L3830
	b	.L3832
	b	.L3830
	b	.L3836
	b	.L3836
	b	.L3834
	b	.L3835
	.p2align 1
.L3838:
	ldr	r2, [r9, #4]
	orr	r3, r3, #7
	mvn	r6, #8
	ldr	lr, [r9]
	ldrb	ip, [r4, #10]	@ zero_extendqisi2
	ldrb	r0, [r4, #11]	@ zero_extendqisi2
	add	r1, r2, #4
	strb	r3, [lr, r2]
	add	r2, lr, r2
	strb	ip, [r2, #1]
	strb	r0, [r2, #2]
	strb	r6, [r2, #3]
	str	r1, [r9, #4]
.L3836:
	mov	r3, #0
	strb	r3, [r4, #9]
	ldr	r1, [r9, #4]
.L3827:
	ldr	r3, [r10, #336]
	add	r2, r1, #3
	cmp	r2, r3
	bcc	.L3854
	ldr	r6, [sp]
.L3824:
	cmp	r6, r8
	bne	.L3855
	cmp	r1, #0
	bne	.L3870
	ldr	r0, [r9]
	bl	kfree(PLT)
	ldr	r0, [sp, #4]
	mov	r1, r9
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L3821:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L3832:
	mvn	r2, #13
	mov	r3, #2
	strb	r2, [r4, #10]
	strb	r3, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L3827
.L3830:
	mov	r3, #1
	strb	r2, [r4, #10]
	strb	r3, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L3827
.L3829:
	mvn	r2, #15
	mov	r3, #5
	strb	r2, [r4, #10]
	strb	r3, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L3827
.L3834:
	ldr	r1, [r9, #4]
	orr	r3, r3, #5
	mov	r2, #0
	ldr	lr, [r9]
	mvn	ip, #9
	add	r0, r1, #4
	strb	r3, [lr, r1]
	add	r3, lr, r1
	strb	ip, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	str	r0, [r9, #4]
	strb	r2, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L3827
.L3869:
	ldr	r0, [r9, #4]
	orr	r3, r3, #15
	mov	ip, #0
	ldr	lr, [r9]
	add	r1, r0, #4
	strb	r3, [lr, r0]
	add	r3, lr, r0
	strb	r2, [r3, #1]
	strb	ip, [r3, #2]
	strb	ip, [r3, #3]
	str	r1, [r9, #4]
	b	.L3827
.L3828:
	tst	r2, #128
	bne	.L3871
	ldrb	r1, [r4, #9]	@ zero_extendqisi2
	sub	r1, r1, #1
	cmp	r1, #5
	addls	pc, pc, r1, asl #2
	b	.L3866
.L3844:
	b	.L3843
	b	.L3845
	b	.L3846
	b	.L3847
	b	.L3848
	b	.L3849
	.p2align 1
.L3871:
	add	r3, r2, #64
	strb	r2, [r4, #10]
	uxtb	r3, r3
	cmp	r3, #31
	movhi	r3, #2
	strlsb	r0, [r4, #9]
	strhib	r3, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L3827
.L3849:
	ldr	r0, [r9, #4]
	orr	r3, r3, #4
	ldr	r1, [r9]
	ldrb	r6, [r4, #10]	@ zero_extendqisi2
	ldrb	lr, [r4, #11]	@ zero_extendqisi2
	add	ip, r0, #4
	strb	r3, [r1, r0]
	add	r1, r1, r0
	mov	r3, #4
	strb	r6, [r1, #1]
	strb	lr, [r1, #2]
	strb	r2, [r1, #3]
	str	ip, [r9, #4]
	strb	r3, [r4, #9]
.L3866:
	ldr	r1, [r9, #4]
	b	.L3827
.L3868:
	mov	r3, #0
	ldr	r6, [sp]
	str	r3, [r4, #4]
	ldr	r1, [r9, #4]
	b	.L3824
.L3835:
	ldrb	r2, [r4, #9]	@ zero_extendqisi2
	cmp	r2, #5
	beq	.L3837
	cmp	r2, #6
	beq	.L3838
	cmp	r2, #4
	bne	.L3836
	ldr	r2, [r9, #4]
	orr	r3, r3, #5
	mov	r1, #0
	ldr	lr, [r9]
	mvn	ip, #8
	add	r0, r2, #4
	strb	r3, [lr, r2]
	add	r3, lr, r2
	strb	ip, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	str	r0, [r9, #4]
	b	.L3836
.L3848:
	mov	r3, #6
	strb	r2, [r4, #11]
	strb	r3, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L3827
.L3847:
	mov	r3, #5
	strb	r2, [r4, #10]
	strb	r3, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L3827
.L3846:
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	ldrb	r6, [r4, #11]	@ zero_extendqisi2
	cmp	lr, #239
	movls	r1, #2
	movhi	r1, #0
	orrls	r3, r3, lr, lsr #4
	orrhi	r3, r3, #3
	strb	r1, [r4, #9]
	ldmia	r9, {r0, ip}
	strb	r3, [r0, ip]
	add	r1, ip, #4
	add	r0, r0, ip
	strb	lr, [r0, #1]
	strb	r6, [r0, #2]
	strb	r2, [r0, #3]
	str	r1, [r9, #4]
	b	.L3827
.L3845:
	mov	r3, #3
	strb	r2, [r4, #11]
	strb	r3, [r4, #9]
	ldr	r1, [r9, #4]
	b	.L3827
.L3843:
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	mov	r6, #0
	cmp	lr, #239
	movhi	r1, #0
	orrls	r3, r3, lr, lsr #4
	orrhi	r3, r3, #2
	strhib	r1, [r4, #9]
	ldr	ip, [r9, #4]
	ldr	r0, [r9]
	add	r1, ip, #4
	strb	r3, [r0, ip]
	add	r0, r0, ip
	strb	lr, [r0, #1]
	strb	r2, [r0, #2]
	strb	r6, [r0, #3]
	str	r1, [r9, #4]
	b	.L3827
.L3837:
	ldr	r1, [r9, #4]
	orr	r3, r3, #6
	mvn	r6, #8
	ldr	r2, [r9]
	mov	ip, #0
	ldrb	lr, [r4, #10]	@ zero_extendqisi2
	add	r0, r1, #4
	strb	r3, [r2, r1]
	add	r2, r2, r1
	strb	lr, [r2, #1]
	strb	r6, [r2, #2]
	strb	ip, [r2, #3]
	str	r0, [r9, #4]
	b	.L3836
.L3870:
	ldr	r0, [sp, #4]
	mov	r1, r9
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	b	.L3821
.L3867:
	mov	r0, r3
	ldr	r1, [r10, #336]
	bl	midi_alloc_ep_req(PLT)
	subs	r9, r0, #0
	bne	.L3823
	ldr	r0, [r10, #84]
	ldr	r1, .L3872+4
	add	r0, r0, #32
.LPIC905:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L3821
.L3873:
	.align	2
.L3872:
	.word	f_midi_complete-(.LPIC906+8)
	.word	.LC223-(.LPIC905+8)
	.fnend
	.size	f_midi_transmit, .-f_midi_transmit
	.align	2
	.type	f_midi_in_tasklet, %function
f_midi_in_tasklet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r1, #0
	b	f_midi_transmit(PLT)
	.fnend
	.size	f_midi_in_tasklet, .-f_midi_in_tasklet
	.align	2
	.type	f_midi_in_trigger, %function
f_midi_in_trigger:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r0, #28]
	ldr	r3, [r0, #12]
	ldr	r2, [r2, #200]
	add	r3, r3, #58
	ldr	r3, [r2, r3, asl #2]
	cmp	r3, #0
	bxeq	lr
	cmp	r1, #0
	str	r1, [r3, #4]
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, #0
	add	r1, r2, #304
	str	lr, [sp, #4]
	add	r4, r2, #300
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	beq	.L3884
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L3884:
	mov	r0, r4
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	__tasklet_hi_schedule(PLT)
	.fnend
	.size	f_midi_in_trigger, .-f_midi_in_trigger
	.align	2
	.type	tx_complete, %function
tx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L3925
	ldmib	r4, {r2, r7}
	cmp	r2, #0
	beq	.L3925
	ldr	r3, [r1, #44]
	mov	r5, r1
	cmn	r3, #104
	beq	.L3907
	cmp	r3, #0
	beq	.L3890
	cmn	r3, #108
	beq	.L3907
	ldr	r3, [r7, #252]
	add	r3, r3, #1
	str	r3, [r7, #252]
	ldr	r2, [r4, #8]
.L3889:
	ldr	r3, [r2, #236]
	add	r6, r4, #16
	add	r8, r4, #20
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r2, #236]
	bl	_raw_spin_lock(PLT)
	mov	r2, r8
	add	r0, r5, #36
	ldr	r1, [r4, #24]
	bl	__list_add(PLT)
	ldr	r3, [r4, #4]
	ldr	r9, [r5, #32]
	ldrb	r3, [r3, #124]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L3906
	cmp	r9, #0
	beq	.L3926
	ldr	r0, [r4, #48]
	cmp	r0, #0
	beq	.L3906
	movw	r1, #32800
	bl	__kmalloc(PLT)
	mov	r3, #0
	str	r0, [r5]
	str	r3, [r5, #32]
.L3901:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	mov	r0, r9
	bl	dev_kfree_skb_any(PLT)
.L3900:
	ldr	r3, [r4, #8]
	ldr	r2, [r3, #164]
	tst	r2, #4
	beq	.L3927
.L3885:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L3890:
	ldrb	r3, [r1, #26]	@ zero_extendqisi2
	ldr	r2, [r1, #4]
	tst	r3, #2
	ldr	r3, [r7, #244]
	add	r3, r3, r2
	subeq	r3, r3, #1
	str	r3, [r7, #244]
	ldr	r2, [r4, #8]
	b	.L3889
.L3906:
	mov	r3, #0
	str	r3, [r5]
	b	.L3901
.L3927:
	ldr	r4, [r3, #576]
	mov	r0, #0
	add	r1, r4, #80
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	beq	.L3885
	ldr	r0, [r4, #4]
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__netif_schedule(PLT)
.L3907:
	mov	r2, r7
	b	.L3889
.L3925:
	ldr	r3, [r3, #8]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L3926:
	ldr	r3, [r4, #40]
	sub	r3, r3, #1
	str	r3, [r4, #40]
	str	r9, [r5, #4]
	ldr	r5, [r4, #20]
	ldr	r3, [r4, #4]
	cmp	r8, r5
	ldr	r9, [r3, #88]
	beq	.L3924
	mov	r0, r5
	bl	list_del(PLT)
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r5, #-32]
	cmp	r3, #0
	beq	.L3895
	ldr	r2, [r4, #4]
	mov	r0, r3
	ldrb	r1, [r2, #104]	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L3909
	ldr	r2, [r2, #112]
	cmp	r3, r2
	beq	.L3928
.L3909:
	mov	r1, #1
.L3896:
	ldrb	r2, [r5, #-10]	@ zero_extendqisi2
	bfi	r2, r1, #1, #1
	uxtb	r1, r2
	strb	r2, [r5, #-10]
	tst	r1, #2
	beq	.L3897
	ldrb	r2, [r4, #124]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L3897
	ldrh	ip, [r9, #20]
	sdiv	r2, r3, ip
	mls	r2, ip, r2, r3
	cmp	r2, #0
	bne	.L3897
	bfi	r1, r2, #1, #1
	add	r0, r3, #1
	strb	r1, [r5, #-10]
.L3897:
	str	r0, [r5, #-32]
	ldr	r3, [r9, #8]
	mov	r0, r9
	sub	r1, r5, #36
	mov	r2, #32
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L3929
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #40]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #40]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, .L3930
.LPIC910:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3]
	str	r3, [r7, #604]
	b	.L3900
.L3895:
	mov	r0, r6
.L3923:
	bl	_raw_spin_lock(PLT)
	mov	r0, r5
	mov	r2, r8
	ldr	r1, [r4, #24]
	bl	__list_add(PLT)
.L3924:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	b	.L3900
.L3928:
	ldrh	r1, [r9, #20]
	sdiv	r2, r3, r1
	mls	r1, r1, r2, r3
	adds	r1, r1, #0
	movne	r1, #1
	b	.L3896
.L3929:
	ldr	r1, .L3930+4
	mov	r2, r0
	ldr	r0, .L3930+8
.LPIC908:
	add	r1, pc, r1
	add	r1, r1, #1424
.LPIC907:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mov	r3, #0
	mov	r0, r6
	str	r3, [r5, #-32]
	b	.L3923
.L3931:
	.align	2
.L3930:
	.word	jiffies(GOT_PREL)+(.-(.LPIC910+8))
	.word	.LANCHOR3-(.LPIC908+8)
	.word	.LC224-(.LPIC907+8)
	.fnend
	.size	tx_complete, .-tx_complete
	.align	2
	.type	eth_qc_open, %function
eth_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #1160]
	ldr	r3, [r0, #164]
	tst	r3, #4
	beq	.L3947
.L3934:
	add	r5, r4, #1152
	mov	r0, r5
	bl	_raw_spin_lock_irq(PLT)
	ldr	r0, [r4, #1156]
	cmp	r0, #0
	beq	.L3936
	ldr	r3, [r0, #112]
	cmp	r3, #0
	beq	.L3936
	blx	r3
.L3936:
	mov	r0, r5
	bl	_raw_spin_unlock_irq(PLT)
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3947:
	bl	netif_carrier_off(PLT)
	ldr	r0, [r4, #1160]
	bl	netif_carrier_on(PLT)
	ldr	r3, [r4, #1160]
	mov	r0, #0
	ldr	r5, [r3, #576]
	add	r1, r5, #80
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	beq	.L3934
	ldr	r0, [r5, #4]
	bl	__netif_schedule(PLT)
	b	.L3934
	.fnend
	.size	eth_qc_open, .-eth_qc_open
	.align	2
	.global	rndis_rm_hdr
	.type	rndis_rm_hdr, %function
rndis_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L3971
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	str	r8, [sp, #16]
	mov	r8, r2
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	ldr	r0, [r1, #80]
	.pad #8
	sub	sp, sp, #8
.LPIC918:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r2, [r3]
	cmp	r0, r2
	strhi	r0, [r3]
	bhi	.L3950
	cmp	r0, #0
	beq	.L3965
.L3950:
	cmp	r0, #43
	bls	.L3952
	ldr	r1, [r4, #172]
	ldr	r6, [r1, #4]	@ unaligned
	ldr	r3, [r1, #8]	@ unaligned
	ldr	r5, [r1, #12]	@ unaligned
	cmp	r0, r6
	bcc	.L3953
	add	r2, r3, r5
	add	r2, r2, #8
	cmp	r6, r2
	bcc	.L3953
	ldr	r1, [r1]	@ unaligned
	cmp	r1, #1
	moveq	r7, #0
	beq	.L3959
	b	.L3954
.L3960:
	cmp	r2, r5
	beq	.L3961
	bl	skb_clone(PLT)
	sub	r1, r6, #44
	subs	r6, r0, #0
	mov	r0, r4
	beq	.L3970
	bl	skb_pull(PLT)
	mov	r0, r6
	mov	r1, r5
	bl	skb_trim(PLT)
	mov	r0, r8
	mov	r1, r6
	bl	skb_queue_tail(PLT)
	ldr	r0, [r4, #80]
	cmp	r0, #0
	beq	.L3951
	cmp	r0, #43
	bls	.L3952
	ldr	r1, [r4, #172]
	ldr	r6, [r1, #4]	@ unaligned
	ldr	r3, [r1, #8]	@ unaligned
	ldr	r5, [r1, #12]	@ unaligned
	cmp	r0, r6
	add	r2, r3, r5
	bcc	.L3953
	add	r2, r2, #8
	cmp	r6, r2
	bcc	.L3953
	ldr	r1, [r1]	@ unaligned
	cmp	r1, #1
	bne	.L3954
.L3959:
	add	r1, r3, #8
	mov	r0, r4
	bl	skb_pull(PLT)
	ldr	r3, [r4, #80]
	mov	r1, #32
	mov	r0, r4
	add	r7, r7, #1
	cmp	r3, r5
	sub	r2, r3, #1
	bne	.L3960
.L3961:
	mov	r1, r5
	mov	r0, r4
	bl	skb_trim(PLT)
.L3951:
	ldr	r3, .L3971+4
	mov	r0, r8
	mov	r1, r4
.LPIC917:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r2, [r3]
	cmp	r7, r2
	strgt	r7, [r3]
	bl	skb_queue_tail(PLT)
	mov	r0, #0
.L3957:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L3965:
	mov	r7, r0
	b	.L3951
.L3953:
	ldr	r1, [r1]	@ unaligned
	str	r0, [sp, #4]
	mov	r2, r6
	ldr	r0, .L3971+8
	str	r5, [sp]
.LPIC913:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	mvn	r0, #74
	b	.L3957
.L3952:
	mov	r1, r0
	ldr	r0, .L3971+12
	mov	r2, #44
.LPIC912:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	mvn	r0, #21
	b	.L3957
.L3970:
	ldr	r1, .L3971+16
	ldr	r0, .L3971+20
.LPIC916:
	add	r1, pc, r1
	add	r1, r1, #1440
.LPIC915:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	mvn	r0, #11
	b	.L3957
.L3954:
	str	r0, [sp, #4]
	ldr	r0, .L3971+24
	mov	r2, r6
	str	r5, [sp]
.LPIC914:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	mvn	r0, #21
	b	.L3957
.L3972:
	.align	2
.L3971:
	.word	rndis_ul_max_xfer_size_rcvd(GOT_PREL)+(.-(.LPIC918+8))
	.word	rndis_ul_max_pkt_per_xfer_rcvd(GOT_PREL)+(.-(.LPIC917+8))
	.word	.LC226-(.LPIC913+8)
	.word	.LC225-(.LPIC912+8)
	.word	.LANCHOR3-(.LPIC916+8)
	.word	.LC227-(.LPIC915+8)
	.word	.LC226-(.LPIC914+8)
	.fnend
	.size	rndis_rm_hdr, .-rndis_rm_hdr
	.align	2
	.global	rndis_qc_rm_hdr
	.type	rndis_qc_rm_hdr, %function
rndis_qc_rm_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r4, [r1, #172]
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldrb	r1, [r4, #3]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	orr	r3, r3, r0, asl #8
	orr	r3, r3, r2
	orr	r3, r3, r1, asl #24
	cmp	r3, #1
	bne	.L3978
	ldrb	r2, [r4, #10]	@ zero_extendqisi2
	mov	r0, r6
	ldrb	r1, [r4, #9]	@ zero_extendqisi2
	ldrb	r3, [r4, #8]	@ zero_extendqisi2
	ldrb	ip, [r4, #11]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	orr	r1, r2, r1, asl #8
	orr	r1, r1, r3
	orr	r1, r1, ip, asl #24
	add	r1, r1, #8
	bl	skb_pull(PLT)
	cmp	r0, #0
	beq	.L3979
	ldrb	r2, [r4, #14]	@ zero_extendqisi2
	mov	r0, r6
	ldrb	r3, [r4, #13]	@ zero_extendqisi2
	ldrb	ip, [r4, #12]	@ zero_extendqisi2
	ldrb	r1, [r4, #15]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	orr	r3, r2, r3, asl #8
	orr	r3, r3, ip
	orr	r1, r3, r1, asl #24
	bl	skb_trim(PLT)
	mov	r0, r5
	mov	r1, r6
	bl	skb_queue_tail(PLT)
	mov	r0, #0
.L3975:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L3978:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
	mvn	r0, #21
	b	.L3975
.L3979:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
	mvn	r0, #74
	b	.L3975
	.fnend
	.size	rndis_qc_rm_hdr, .-rndis_qc_rm_hdr
	.align	2
	.type	rndis_proc_open, %function
rndis_proc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #-20]
	mov	r0, r1
	ldr	r1, .L3981
	ldr	r2, [r3, #44]
.LPIC919:
	add	r1, pc, r1
	b	single_open(PLT)
.L3982:
	.align	2
.L3981:
	.word	rndis_proc_show-(.LPIC919+8)
	.fnend
	.size	rndis_proc_open, .-rndis_proc_open
	.align	2
	.type	rndis_proc_show, %function
rndis_proc_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	ip, [r0, #76]
	.pad #44
	sub	sp, sp, #44
	ldrb	r3, [ip, #1]	@ zero_extendqisi2
	ldrb	r2, [ip]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L3990
	ldr	r1, [ip, #4]
	ldr	r3, .L3998
	cmp	r1, #1
.LPIC921:
	add	r3, pc, r3
	beq	.L3986
.L3996:
	bcc	.L3987
	cmp	r1, #2
	beq	.L3988
	ldr	lr, .L3998+4
.LPIC922:
	add	lr, pc, lr
.L3985:
	ldr	r1, [ip, #16]
	ldr	r4, [ip, #8]
	cmp	r1, #0
	bne	.L3992
.L3997:
	ldr	r7, [ip, #12]
	mov	r1, #100
	ldr	r6, .L3998+8
	mul	r1, r1, r7
.LPIC926:
	add	r6, pc, r6
.L3989:
	ldrb	r5, [ip, #36]	@ zero_extendqisi2
	str	lr, [sp]
	str	r4, [sp, #4]
	ldr	r4, .L3998+12
	str	r1, [sp, #8]
	ldr	lr, .L3998+16
	str	r6, [sp, #12]
	ldr	r6, [ip, #32]
	ldr	r1, .L3998+20
.LPIC931:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
.LPIC930:
	ldr	lr, [pc, lr]		@ tls_load_dot_plus_eight
	str	r6, [sp, #16]
	ldr	r6, [ip, #40]
.LPIC928:
	add	r1, pc, r1
	str	r6, [sp, #20]
	ldr	ip, [ip, #28]
	ldr	ip, [ip, #356]
	add	ip, ip, #80
	mul	ip, r5, ip
	str	ip, [sp, #24]
	ldr	ip, [r4]
	str	r5, [sp, #32]
	str	ip, [sp, #28]
	ldr	ip, [lr]
	str	ip, [sp, #36]
	bl	seq_printf(PLT)
	mov	r0, #0
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L3990:
	ldr	r1, [ip, #4]
	ldr	r3, .L3998+24
	cmp	r1, #1
.LPIC920:
	add	r3, pc, r3
	bne	.L3996
.L3986:
	ldr	r1, [ip, #16]
	ldr	lr, .L3998+28
	ldr	r4, [ip, #8]
	cmp	r1, #0
.LPIC924:
	add	lr, pc, lr
	beq	.L3997
.L3992:
	ldr	r6, .L3998+32
	mov	r1, #0
.LPIC927:
	add	r6, pc, r6
	b	.L3989
.L3988:
	ldr	lr, .L3998+36
.LPIC925:
	add	lr, pc, lr
	b	.L3985
.L3987:
	ldr	lr, .L3998+40
.LPIC923:
	add	lr, pc, lr
	b	.L3985
.L3999:
	.align	2
.L3998:
	.word	.LC229-(.LPIC921+8)
	.word	.LC230-(.LPIC922+8)
	.word	.LC234-(.LPIC926+8)
	.word	rndis_ul_max_xfer_size_rcvd(GOT_PREL)+(.-(.LPIC931+8))
	.word	rndis_ul_max_pkt_per_xfer_rcvd(GOT_PREL)+(.-(.LPIC930+8))
	.word	.LC236-(.LPIC928+8)
	.word	.LC228-(.LPIC920+8)
	.word	.LC232-(.LPIC924+8)
	.word	.LC235-(.LPIC927+8)
	.word	.LC233-(.LPIC925+8)
	.word	.LC231-(.LPIC923+8)
	.fnend
	.size	rndis_proc_show, .-rndis_proc_show
	.align	2
	.type	get_qc_ether_addr, %function
get_qc_ether_addr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	subs	r4, r0, #0
	strd	r8, [sp, #16]
	subne	r9, r1, #1
	addne	r8, r1, #5
	strd	r6, [sp, #8]
	mov	r7, r1
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L4005
.L4004:
	ldrb	r0, [r4]	@ zero_extendqisi2
	mov	r6, r4
	cmp	r0, #46
	cmpne	r0, #58
	ldreqb	r0, [r4, #1]	@ zero_extendqisi2
	addeq	r6, r4, #1
	bl	hex_to_bin(PLT)
	mov	r5, r0
	ldrb	r0, [r6, #1]	@ zero_extendqisi2
	add	r4, r6, #2
	bl	hex_to_bin(PLT)
	orr	r0, r0, r5, asl #4
	strb	r0, [r9, #1]!
	cmp	r9, r8
	bne	.L4004
	ldrb	r3, [r7]	@ zero_extendqisi2
	ands	r0, r3, #1
	beq	.L4012
.L4005:
	mov	r0, r7
	mov	r1, #6
	bl	get_random_bytes(PLT)
	ldrb	r3, [r7]	@ zero_extendqisi2
	mov	r0, #1
	bic	r3, r3, #1
	orr	r3, r3, #2
	strb	r3, [r7]
.L4002:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4012:
	ldrb	lr, [r7, #1]	@ zero_extendqisi2
	ldrb	ip, [r7, #2]	@ zero_extendqisi2
	ldrb	r1, [r7, #3]	@ zero_extendqisi2
	ldrb	r2, [r7, #4]	@ zero_extendqisi2
	orr	r3, r3, lr
	ldrb	lr, [r7, #5]	@ zero_extendqisi2
	orr	r3, r3, ip
	orr	r3, r3, r1
	orr	r3, r3, r2
	orrs	r3, r3, lr
	beq	.L4005
	b	.L4002
	.fnend
	.size	get_qc_ether_addr, .-get_qc_ether_addr
	.align	2
	.type	fsg_lun_open, %function
fsg_lun_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r5, [r0, #24]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
	ands	r5, r5, #1
	beq	.L4059
.L4014:
	mov	r0, r7
	mov	r1, #131072
	mov	r2, #0
	mov	r5, #1
	bl	filp_open(PLT)
	mov	r4, r0
	cmn	r4, #4096
	bhi	.L4060
.L4015:
	ldr	r2, [r4, #36]
	ldr	r3, [r4, #12]
	tst	r2, #2
	moveq	r5, #1
	cmp	r3, #0
	beq	.L4018
	ldr	r2, [r3, #32]
	cmp	r2, #0
	beq	.L4018
	ldrh	r3, [r2]
	and	r3, r3, #61440
	sub	r3, r3, #24576
	tst	r3, #53248
	bne	.L4018
	ldr	r3, [r4, #16]
	cmp	r3, #0
	beq	.L4021
	ldr	r1, [r3, #8]
	cmp	r1, #0
	beq	.L4061
.L4022:
	ldr	r1, [r3, #12]
	cmp	r1, #0
	beq	.L4062
.L4023:
	ldr	r3, [r2, #32]
	ldr	r3, [r3]
.L4058:
	ldr	r1, [r3, #104]
	tst	r1, #1
	bne	.L4048
#APP
@ 165 "/root/lol//include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	ldrd	r8, [r3, #96]
#APP
@ 221 "/root/lol//include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	ldr	r0, [r3, #104]
	cmp	r0, r1
	bne	.L4058
	cmp	r8, #0
	sbcs	r3, r9, #0
	blt	.L4063
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	tst	r3, #8
	bne	.L4064
	ldr	r3, [r2, #312]
	cmp	r3, #0
	beq	.L4031
	ldr	r3, [r3, #88]
	ldr	r3, [r3, #492]
	cmp	r3, #0
	moveq	r2, #512
	beq	.L4032
	add	r3, r3, #776
	ldrh	r2, [r3]
	cmp	r2, #0
	moveq	r2, #512
.L4032:
	mov	r3, #8
	str	r2, [r6, #44]
.L4033:
	mov	r2, r2, lsr #1
	add	r3, r3, #1
	cmp	r2, #256
	bhi	.L4033
	mov	r1, r3
	str	r3, [r6, #40]
.L4034:
	mov	r2, r8, lsr r1
	rsb	r0, r1, #32
	mov	r3, r9, asr r1
	orr	r2, r2, r9, asl r0
	subs	ip, r1, #32
	orrpl	r2, r2, r9, asr ip
	mov	r0, #1
	mov	r1, #0
	b	.L4030
.L4018:
	ldr	r1, .L4066
	mov	r2, r7
	add	r0, r6, #48
	mvn	r7, #21
.LPIC933:
	add	r1, pc, r1
	bl	_dev_info(PLT)
.L4020:
	mov	r3, sp
	mov	r0, r4
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1008]
	bl	filp_close(PLT)
	mov	r0, r7
.L4056:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4059:
	mov	r1, #2
	mov	r0, r7
	movt	r1, 2
	mov	r2, r5
	bl	filp_open(PLT)
	cmn	r0, #30
	cmnne	r0, #13
	mov	r4, r0
	beq	.L4014
	cmn	r4, #4096
	bls	.L4015
.L4060:
	ldr	r1, .L4066+4
	add	r0, r6, #48
	mov	r2, r7
.LPIC932:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	mov	r0, r4
	b	.L4056
.L4064:
	mov	r2, r8, lsr #11
	mov	r1, #11
	movw	r10, #65502
	orr	r2, r2, r9, asl #21
	movt	r10, 255
	str	r1, [r6, #40]
	mov	r3, r9, asr r1
	mov	fp, #0
	cmp	r10, r2
	mov	r0, #2048
	sbcs	r1, fp, r3
	str	r0, [r6, #44]
	blt	.L4029
	mov	r0, #300
	mov	r1, #0
.L4030:
	cmp	r2, r0
	sbcs	r1, r3, r1
	blt	.L4065
.L4035:
	add	r1, r4, #28
#APP
@ 45 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	ldrb	r1, [r6, #24]	@ zero_extendqisi2
	mov	r7, #0
	str	r4, [r6]
	strd	r8, [r6, #8]
	strd	r2, [r6, #16]
	bfi	r1, r5, #1, #1
	strb	r1, [r6, #24]
	b	.L4020
.L4065:
	ldr	r1, .L4066+8
	mov	r2, r7
	add	r0, r6, #48
	mvn	r7, #524
.LPIC938:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	b	.L4020
.L4061:
	ldr	r1, [r3, #16]
	cmp	r1, #0
	bne	.L4022
.L4021:
	ldr	r1, .L4066+12
	mov	r2, r7
	add	r0, r6, #48
	mvn	r7, #21
.LPIC934:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	b	.L4020
.L4062:
	ldr	r3, [r3, #20]
	cmp	r3, #0
	moveq	r5, #1
	b	.L4023
.L4063:
	ldr	r1, .L4066+16
	mov	r2, r7
	add	r0, r6, #48
	mov	r7, r8
.LPIC935:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	b	.L4020
.L4029:
	ldr	r1, .L4066+20
	add	r3, r6, #48
	mov	r2, r7
	mov	r0, r3
	mov	r7, r3
.LPIC936:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	ldr	r1, .L4066+24
	movw	r2, #65502
	mov	r0, r7
	movt	r2, 255
.LPIC937:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	mov	r2, r10
	mov	r3, fp
	b	.L4035
.L4048:
#APP
@ 147 "/root/lol//include/linux/seqlock.h" 1
	dmb
@ 0 "" 2
	b	.L4058
.L4031:
	mov	r3, #9
	mov	r2, #512
	mov	r1, r3
	str	r2, [r6, #44]
	str	r3, [r6, #40]
	b	.L4034
.L4067:
	.align	2
.L4066:
	.word	.LC238-(.LPIC933+8)
	.word	.LC237-(.LPIC932+8)
	.word	.LC243-(.LPIC938+8)
	.word	.LC239-(.LPIC934+8)
	.word	.LC240-(.LPIC935+8)
	.word	.LC241-(.LPIC936+8)
	.word	.LC242-(.LPIC937+8)
	.fnend
	.size	fsg_lun_open, .-fsg_lun_open
	.align	2
	.type	conn_gadget_function_cleanup, %function
conn_gadget_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L4076
	ldr	r0, .L4076+4
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r4, .L4076+8
.LPIC940:
	add	r5, pc, r5
	add	r1, r5, #1456
.LPIC939:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L4076+12
.LPIC942:
	add	r4, pc, r4
.LPIC941:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [r4, #2492]
	cmp	r3, #0
	beq	.L4075
	ldr	r0, .L4076+16
.LPIC945:
	add	r0, pc, r0
	add	r0, r0, #472
	bl	misc_deregister(PLT)
	ldr	r0, [r4, #2492]
	ldr	r3, [r0, #188]
	cmp	r3, #0
	beq	.L4070
	mov	r0, r3
	bl	vfree(PLT)
	ldr	r0, [r4, #2492]
.L4070:
	bl	kfree(PLT)
	ldr	r3, .L4076+20
	mov	r2, #0
.LPIC948:
	add	r3, pc, r3
	str	r2, [r3, #2492]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4075:
	ldr	r0, .L4076+24
	add	r1, r5, #1488
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
.LPIC943:
	add	r0, pc, r0
	b	printk(PLT)
.L4077:
	.align	2
.L4076:
	.word	.LANCHOR3-(.LPIC940+8)
	.word	.LC244-(.LPIC939+8)
	.word	.LANCHOR1-(.LPIC942+8)
	.word	.LC245-(.LPIC941+8)
	.word	.LANCHOR0-(.LPIC945+8)
	.word	.LANCHOR1-(.LPIC948+8)
	.word	.LC246-(.LPIC943+8)
	.fnend
	.size	conn_gadget_function_cleanup, .-conn_gadget_function_cleanup
	.align	2
	.type	conn_gadget_function_init, %function
conn_gadget_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4093
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r0, .L4093+4
	str	lr, [sp, #12]
	str	r6, [sp, #8]
.LPIC950:
	add	r1, pc, r1
	add	r1, r1, #1504
.LPIC949:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, .L4093+8
.LPIC951:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, .L4093+12
.LPIC969:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L4084
	movw	r1, #32976
	mov	r2, #220
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L4090
.L4079:
	ldr	r5, .L4093+16
	mov	r6, #0
	add	r0, r4, #144
	ldr	r1, .L4093+20
	str	r6, [r4, #88]
.LPIC955:
	add	r5, pc, r5
	sub	r5, r5, #652
.LPIC954:
	add	r1, pc, r1
	mov	r2, r5
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L4093+24
	mov	r2, r5
	add	r0, r4, #156
.LPIC956:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L4093+28
	mov	r2, r5
	add	r0, r4, #200
.LPIC958:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	add	r1, r4, #128
	add	ip, r4, #120
	str	r6, [r4, #116]
	add	r2, r4, #136
	mov	r3, #262144
	str	r6, [r4, #108]
	mov	lr, #4096
	str	r1, [r4, #128]
	mov	r0, r3
	str	r1, [r4, #132]
	str	r6, [r4, #112]
	str	r6, [r4, #216]
	str	ip, [r4, #120]
	str	ip, [r4, #124]
	str	r2, [r4, #136]
	str	r2, [r4, #140]
	str	lr, [r4, #192]
	str	r3, [r4, #196]
	bl	vmalloc(PLT)
	cmp	r0, r6
	mov	r1, r0
	str	r0, [r4, #188]
	beq	.L4091
	ldr	r2, [r4, #196]
	mov	r3, #1
	add	r0, r4, #168
	bl	__kfifo_init(PLT)
	ldr	r0, .L4093+32
	ldr	r3, .L4093+36
.LPIC963:
	add	r0, pc, r0
.LPIC962:
	add	r3, pc, r3
	add	r0, r0, #472
	str	r4, [r3, #2492]
	bl	misc_register(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L4092
.L4080:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4084:
	mov	r4, #16
	b	.L4079
.L4092:
	ldr	r1, .L4093+40
	mov	r2, r5
	ldr	r0, .L4093+44
.LPIC965:
	add	r1, pc, r1
.LPIC964:
	add	r0, pc, r0
	add	r1, r1, #1536
	bl	printk(PLT)
.L4082:
	ldr	r0, [r4, #188]
	cmp	r0, #0
	beq	.L4083
	bl	vfree(PLT)
.L4083:
	ldr	r3, .L4093+48
	mov	r2, #0
	mov	r0, r4
.LPIC966:
	add	r3, pc, r3
	str	r2, [r3, #2492]
	bl	kfree(PLT)
	ldr	r1, .L4093+52
	ldr	r0, .L4093+56
.LPIC968:
	add	r1, pc, r1
.LPIC967:
	add	r0, pc, r0
	add	r1, r1, #1536
	bl	printk(PLT)
	mov	r0, r5
	b	.L4080
.L4091:
	ldr	r1, .L4093+60
	mvn	r5, #11
	ldr	r0, .L4093+64
.LPIC961:
	add	r1, pc, r1
	add	r1, r1, #1536
.LPIC960:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L4082
.L4090:
	ldr	r0, .L4093+68
.LPIC953:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #11
	b	.L4080
.L4094:
	.align	2
.L4093:
	.word	.LANCHOR3-(.LPIC950+8)
	.word	.LC247-(.LPIC949+8)
	.word	.LC248-(.LPIC951+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC969+8))
	.word	.LANCHOR4-(.LPIC955+8)
	.word	.LC207-(.LPIC954+8)
	.word	.LC208-(.LPIC956+8)
	.word	.LC250-(.LPIC958+8)
	.word	.LANCHOR0-(.LPIC963+8)
	.word	.LANCHOR1-(.LPIC962+8)
	.word	.LANCHOR3-(.LPIC965+8)
	.word	.LC252-(.LPIC964+8)
	.word	.LANCHOR1-(.LPIC966+8)
	.word	.LANCHOR3-(.LPIC968+8)
	.word	.LC253-(.LPIC967+8)
	.word	.LANCHOR3-(.LPIC961+8)
	.word	.LC251-(.LPIC960+8)
	.word	.LC249-(.LPIC953+8)
	.fnend
	.size	conn_gadget_function_init, .-conn_gadget_function_init
	.align	2
	.type	conn_gadget_usb_buffer_size_store, %function
conn_gadget_usb_buffer_size_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	ldr	r5, .L4108
	strd	r6, [sp, #8]
	mov	r6, r3
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
.LPIC970:
	add	r5, pc, r5
	ldr	r3, [r5, #2492]
	cmp	r3, #0
	beq	.L4105
	ldr	r3, [r3, #100]
	cmp	r3, #0
	bne	.L4106
	ldr	r1, .L4108+4
	mov	r0, r2
	add	r2, sp, #4
.LPIC975:
	add	r1, pc, r1
	bl	sscanf(PLT)
	ldr	r4, [sp, #4]
	mov	r4, r4, asl #16
	mov	r0, r4
	bl	vmalloc(PLT)
	subs	r7, r0, #0
	beq	.L4107
	ldr	ip, [r5, #2492]
	ldr	r0, [ip, #188]
	cmp	r0, #0
	beq	.L4100
	bl	vfree(PLT)
	ldr	ip, [r5, #2492]
.L4100:
	ldr	lr, [sp, #4]
	mov	r5, #0
	mov	r0, ip
	str	r4, [ip, #196]
	mov	r1, r7
	mov	r2, r4
	str	r7, [ip, #188]
	mov	r3, #1
	str	r5, [ip, #172]
	mov	lr, lr, asl #10
	str	lr, [ip, #192]
	str	r5, [r0, #168]!
	bl	__kfifo_init(PLT)
.L4097:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L4105:
	ldr	r1, .L4108+8
	ldr	r0, .L4108+12
.LPIC972:
	add	r1, pc, r1
	add	r1, r1, #1552
.LPIC971:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L4097
.L4107:
	ldr	r1, .L4108+16
	ldr	r0, .L4108+20
.LPIC977:
	add	r1, pc, r1
	add	r1, r1, #1552
.LPIC976:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L4097
.L4106:
	ldr	r1, .L4108+24
	ldr	r0, .L4108+28
.LPIC974:
	add	r1, pc, r1
	add	r1, r1, #1552
.LPIC973:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L4097
.L4109:
	.align	2
.L4108:
	.word	.LANCHOR1-(.LPIC970+8)
	.word	.LC256-(.LPIC975+8)
	.word	.LANCHOR3-(.LPIC972+8)
	.word	.LC254-(.LPIC971+8)
	.word	.LANCHOR3-(.LPIC977+8)
	.word	.LC257-(.LPIC976+8)
	.word	.LANCHOR3-(.LPIC974+8)
	.word	.LC255-(.LPIC973+8)
	.fnend
	.size	conn_gadget_usb_buffer_size_store, .-conn_gadget_usb_buffer_size_store
	.align	2
	.type	remote_wakeup_store, %function
remote_wakeup_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	ldr	r1, .L4120
	mov	r3, #0
	add	r2, sp, #8
	mov	r4, r0
	mov	r0, r6
	str	r3, [r2, #-4]!
.LPIC980:
	add	r1, pc, r1
	bl	sscanf(PLT)
	mov	r0, r4
	ldr	r3, [sp, #4]
	ldr	r2, [r0, #508]!
	cmp	r0, r2
	sub	r2, r2, #120
	beq	.L4118
	cmp	r3, #0
	bne	.L4115
.L4113:
	ldrb	r1, [r2, #22]	@ zero_extendqisi2
	ldr	r3, [r2, #120]
	bic	r1, r1, #32
	cmp	r0, r3
	strb	r1, [r2, #22]
	sub	r2, r3, #120
	bne	.L4113
.L4118:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4115:
	ldrb	r1, [r2, #22]	@ zero_extendqisi2
	ldr	ip, [r2, #120]
	orr	r1, r1, #32
	cmp	r0, ip
	strb	r1, [r2, #22]
	sub	r2, ip, #120
	bne	.L4115
	b	.L4118
.L4121:
	.align	2
.L4120:
	.word	.LC256-(.LPIC980+8)
	.fnend
	.size	remote_wakeup_store, .-remote_wakeup_store
	.align	2
	.type	bDeviceProtocol_store, %function
bDeviceProtocol_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4126
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	mov	r4, r3
	add	r2, sp, #4
.LPIC981:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4124
	ldr	r3, .L4126+4
	mov	r0, r4
	ldr	r2, [sp, #4]
.LPIC982:
	add	r3, pc, r3
	strb	r2, [r3, #398]
.L4123:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4124:
	mvn	r0, #0
	b	.L4123
.L4127:
	.align	2
.L4126:
	.word	.LC76-(.LPIC981+8)
	.word	.LANCHOR2-(.LPIC982+8)
	.fnend
	.size	bDeviceProtocol_store, .-bDeviceProtocol_store
	.align	2
	.type	bDeviceSubClass_store, %function
bDeviceSubClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4132
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	mov	r4, r3
	add	r2, sp, #4
.LPIC983:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4130
	ldr	r3, .L4132+4
	mov	r0, r4
	ldr	r2, [sp, #4]
.LPIC984:
	add	r3, pc, r3
	strb	r2, [r3, #397]
.L4129:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4130:
	mvn	r0, #0
	b	.L4129
.L4133:
	.align	2
.L4132:
	.word	.LC76-(.LPIC983+8)
	.word	.LANCHOR2-(.LPIC984+8)
	.fnend
	.size	bDeviceSubClass_store, .-bDeviceSubClass_store
	.align	2
	.type	bDeviceClass_store, %function
bDeviceClass_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4138
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	mov	r4, r3
	add	r2, sp, #4
.LPIC985:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4136
	ldr	r3, .L4138+4
	mov	r0, r4
	ldr	r2, [sp, #4]
.LPIC986:
	add	r3, pc, r3
	strb	r2, [r3, #396]
.L4135:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4136:
	mvn	r0, #0
	b	.L4135
.L4139:
	.align	2
.L4138:
	.word	.LC76-(.LPIC985+8)
	.word	.LANCHOR2-(.LPIC986+8)
	.fnend
	.size	bDeviceClass_store, .-bDeviceClass_store
	.align	2
	.type	bcdDevice_store, %function
bcdDevice_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4144
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	mov	r4, r3
	add	r2, sp, #4
.LPIC987:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4142
	ldr	r2, .L4144+4
	mov	r0, r4
	ldr	r3, [sp, #4]
.LPIC988:
	add	r2, pc, r2
	add	r2, r2, #392
	strh	r3, [r2, #12]	@ movhi
.L4141:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4142:
	mvn	r0, #0
	b	.L4141
.L4145:
	.align	2
.L4144:
	.word	.LC196-(.LPIC987+8)
	.word	.LANCHOR2-(.LPIC988+8)
	.fnend
	.size	bcdDevice_store, .-bcdDevice_store
	.align	2
	.type	idProduct_store, %function
idProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4150
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	mov	r4, r3
	add	r2, sp, #4
.LPIC989:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4148
	ldr	r2, .L4150+4
	mov	r0, r4
	ldr	r3, [sp, #4]
.LPIC990:
	add	r2, pc, r2
	add	r2, r2, #392
	strh	r3, [r2, #10]	@ movhi
.L4147:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4148:
	mvn	r0, #0
	b	.L4147
.L4151:
	.align	2
.L4150:
	.word	.LC196-(.LPIC989+8)
	.word	.LANCHOR2-(.LPIC990+8)
	.fnend
	.size	idProduct_store, .-idProduct_store
	.align	2
	.type	idVendor_store, %function
idVendor_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4156
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r2
	str	lr, [sp, #4]
	.pad #8
	sub	sp, sp, #8
	mov	r4, r3
	add	r2, sp, #4
.LPIC991:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4154
	ldr	r2, .L4156+4
	mov	r0, r4
	ldr	r3, [sp, #4]
.LPIC992:
	add	r2, pc, r2
	add	r2, r2, #392
	strh	r3, [r2, #8]	@ movhi
.L4153:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4154:
	mvn	r0, #0
	b	.L4153
.L4157:
	.align	2
.L4156:
	.word	.LC196-(.LPIC991+8)
	.word	.LANCHOR2-(.LPIC992+8)
	.fnend
	.size	idVendor_store, .-idVendor_store
	.align	2
	.type	mass_storage_product_store, %function
mass_storage_product_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	cmp	r4, #16
	ldr	r5, [r0, #4]
	bhi	.L4161
	ldr	r2, [r5, #96]
	mov	r0, r6
	ldr	r1, .L4164
	add	r2, r2, #218
.LPIC993:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	beq	.L4163
.L4161:
	mvn	r0, #21
.L4160:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4163:
	ldr	r1, .L4164+4
	ldr	r2, [r5, #96]
	ldr	r0, .L4164+8
.LPIC995:
	add	r1, pc, r1
	add	r1, r1, #1584
	add	r2, r2, #218
.LPIC994:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r4
	b	.L4160
.L4165:
	.align	2
.L4164:
	.word	.LC195-(.LPIC993+8)
	.word	.LANCHOR3-(.LPIC995+8)
	.word	.LC258-(.LPIC994+8)
	.fnend
	.size	mass_storage_product_store, .-mass_storage_product_store
	.align	2
	.type	mass_storage_vendor_store, %function
mass_storage_vendor_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	cmp	r4, #8
	ldr	r5, [r0, #4]
	bhi	.L4169
	ldr	r2, [r5, #96]
	mov	r0, r6
	ldr	r1, .L4172
	add	r2, r2, #209
.LPIC996:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	beq	.L4171
.L4169:
	mvn	r0, #21
.L4168:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4171:
	ldr	r1, .L4172+4
	ldr	r2, [r5, #96]
	ldr	r0, .L4172+8
.LPIC998:
	add	r1, pc, r1
	add	r1, r1, #1616
	add	r2, r2, #209
.LPIC997:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	b	.L4168
.L4173:
	.align	2
.L4172:
	.word	.LC195-(.LPIC996+8)
	.word	.LANCHOR3-(.LPIC998+8)
	.word	.LC259-(.LPIC997+8)
	.fnend
	.size	mass_storage_vendor_store, .-mass_storage_vendor_store
	.align	2
	.type	mass_storage_inquiry_store, %function
mass_storage_inquiry_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	cmp	r4, #28
	ldr	r3, [r0, #4]
	bhi	.L4177
	ldr	r2, [r3, #96]
	mov	r0, r5
	ldr	r1, .L4179
	add	r2, r2, #180
.LPIC999:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4177
	mov	r0, r4
.L4176:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4177:
	mvn	r0, #21
	b	.L4176
.L4180:
	.align	2
.L4179:
	.word	.LC260-(.LPIC999+8)
	.fnend
	.size	mass_storage_inquiry_store, .-mass_storage_inquiry_store
	.align	2
	.type	ecm_ethaddr_store, %function
ecm_ethaddr_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r5, r2
	mov	r4, r3
	str	lr, [sp, #8]
	.pad #20
	sub	sp, sp, #20
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #4]
	mov	r0, r5
	ldr	r1, .L4185
	add	lr, r3, #4
	add	ip, r3, #5
	add	r2, r3, #2
	add	r5, r3, #3
.LPIC1000:
	add	r1, pc, r1
	str	ip, [sp, #12]
	str	r2, [sp]
	mov	r2, r3
	add	r3, r3, #1
	stmib	sp, {r5, lr}
	bl	sscanf(PLT)
	cmp	r0, #6
	moveq	r0, r4
	mvnne	r0, #21
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L4186:
	.align	2
.L4185:
	.word	.LC197-(.LPIC1000+8)
	.fnend
	.size	ecm_ethaddr_store, .-ecm_ethaddr_store
	.align	2
	.type	rndis_max_pkt_per_xfer_store, %function
rndis_max_pkt_per_xfer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	ldr	r1, .L4191
	add	r2, sp, #4
	ldr	r6, [r0, #4]
	mov	r0, r5
.LPIC1001:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	streqb	r3, [r6, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4192:
	.align	2
.L4191:
	.word	.LC256-(.LPIC1001+8)
	.fnend
	.size	rndis_max_pkt_per_xfer_store, .-rndis_max_pkt_per_xfer_store
	.align	2
	.type	rndis_vendorID_store, %function
rndis_vendorID_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	ldr	r1, .L4197
	add	r2, sp, #4
	ldr	r6, [r0, #4]
	mov	r0, r5
.LPIC1002:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	ldreq	r3, [sp, #4]
	moveq	r0, r4
	mvnne	r0, #21
	streq	r3, [r6, #8]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4198:
	.align	2
.L4197:
	.word	.LC261-(.LPIC1002+8)
	.fnend
	.size	rndis_vendorID_store, .-rndis_vendorID_store
	.align	2
	.type	rndis_wceis_store, %function
rndis_wceis_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	ldr	r1, .L4203
	add	r2, sp, #4
	ldr	r6, [r0, #4]
	mov	r0, r5
.LPIC1003:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L4201
	ldr	r3, [sp, #4]
	mov	r0, r4
	adds	r3, r3, #0
	movne	r3, #1
	strb	r3, [r6, #269]
.L4200:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4201:
	mvn	r0, #21
	b	.L4200
.L4204:
	.align	2
.L4203:
	.word	.LC256-(.LPIC1003+8)
	.fnend
	.size	rndis_wceis_store, .-rndis_wceis_store
	.align	2
	.type	rndis_manufacturer_store, %function
rndis_manufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	cmp	r4, #255
	ldr	r2, [r0, #4]
	bhi	.L4207
	ldr	r1, .L4210
	mov	r0, r5
	add	r2, r2, #13
.LPIC1004:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	moveq	r0, r4
	mvnne	r0, #0
.L4206:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4207:
	mvn	r0, #21
	b	.L4206
.L4211:
	.align	2
.L4210:
	.word	.LC262-(.LPIC1004+8)
	.fnend
	.size	rndis_manufacturer_store, .-rndis_manufacturer_store
	.align	2
	.type	acm_instances_store, %function
acm_instances_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r3
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	.pad #8
	sub	sp, sp, #8
	mov	r6, r2
	bl	dev_get_drvdata(PLT)
	ldr	r1, .L4214
	add	r2, sp, #4
	ldr	r4, [r0, #4]
	mov	r0, r6
.LPIC1005:
	add	r1, pc, r1
	bl	sscanf(PLT)
	ldr	r2, [sp, #4]
	mov	r0, r5
	cmp	r2, #4
	movge	r2, #4
	str	r2, [r4]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4215:
	.align	2
.L4214:
	.word	.LC256-(.LPIC1005+8)
	.fnend
	.size	acm_instances_store, .-acm_instances_store
	.align	2
	.type	ncm_unwrap_ntb, %function
ncm_unwrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	mov	r4, r1
	strd	r8, [sp, #16]
	ldr	r3, .L4272
	strd	r6, [sp, #8]
	mov	r7, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	lr, [r1, #172]
	.pad #44
	sub	sp, sp, #44
	ldr	r6, [r0, #176]
.LPIC1006:
	add	r3, pc, r3
	ldrb	r0, [r0, #180]	@ zero_extendqisi2
	ldr	ip, [r3, #16]
	ldrb	r2, [lr, #2]	@ zero_extendqisi2
	ldrb	r10, [lr, #1]	@ zero_extendqisi2
	ldrb	r1, [lr]	@ zero_extendqisi2
	cmp	r0, #0
	ldrb	r9, [lr, #3]	@ zero_extendqisi2
	movne	r3, #18
	moveq	r3, #14
	mov	r2, r2, asl #16
	ldr	r0, [r6]
	movne	r8, #4
	moveq	r8, #0
	orr	r2, r2, r10, asl #8
	orr	r2, r2, r1
	orr	r2, r2, r9, asl #24
	cmp	r0, r2
	beq	.L4218
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r1, .L4272+4
	ldr	r2, [r4, #80]
	ldr	r3, [r3, #24]
.LPIC1007:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	ldr	r6, [r4, #172]
	mov	r3, #0
	mov	lr, #1
	ldr	r0, .L4272+8
	mov	ip, #32
	mov	r2, lr
	ldr	r1, .L4272+12
	str	r3, [sp, #12]
	mov	r3, ip
	str	lr, [sp]
	stmib	sp, {r6, ip}
.LPIC1008:
	add	r0, pc, r0
.LPIC1009:
	add	r1, pc, r1
	bl	print_hex_dump(PLT)
.L4219:
	mov	r0, r7
	bl	skb_queue_purge(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r5
.L4261:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4218:
	ldrb	r0, [lr, #5]	@ zero_extendqisi2
	ldrb	r1, [lr, #4]	@ zero_extendqisi2
	ldr	r2, [r6, #8]
	orr	r1, r1, r0, asl #8
	cmp	r1, r2
	beq	.L4220
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r1, .L4272+16
	ldr	r3, [r3, #24]
.LPIC1010:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	b	.L4219
.L4220:
	ldr	r0, [r6, #24]
	cmp	r0, #1
	beq	.L4222
	cmp	r0, #2
	bne	.L4260
	ldrb	r2, [lr, #10]	@ zero_extendqisi2
	ldrb	fp, [lr, #9]	@ zero_extendqisi2
	ldrb	r9, [lr, #8]	@ zero_extendqisi2
	ldrb	r10, [lr, #11]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	orr	r2, r2, fp, asl #8
	orr	r2, r2, r9
	orr	r2, r2, r10, asl #24
.L4224:
	cmp	ip, r2
	bcc	.L4265
	ldr	r2, [r6, #28]
	add	ip, lr, #8
	add	r9, ip, r0, asl #1
	cmp	r2, #1
	beq	.L4227
	cmp	r2, #2
	bne	.L4260
	ldrb	r10, [r9, #2]	@ zero_extendqisi2
	ldrb	r2, [r9, #1]	@ zero_extendqisi2
	ldrb	r0, [ip, r0, asl #1]	@ zero_extendqisi2
	ldrb	ip, [r9, #3]	@ zero_extendqisi2
	mov	r10, r10, asl #16
	orr	r2, r10, r2, asl #8
	orr	r2, r2, r0
	orr	r2, r2, ip, asl #24
.L4229:
	ands	r0, r2, #3
	movne	r0, #1
	cmp	r1, r2
	movls	r1, #0
	andhi	r1, r0, #1
	cmp	r1, #0
	bne	.L4266
	add	ip, lr, r2
	ldrb	r1, [lr, r2]	@ zero_extendqisi2
	ldrb	r2, [ip, #2]	@ zero_extendqisi2
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	ldrb	r10, [ip, #3]	@ zero_extendqisi2
	ldr	r0, [r6, #4]
	mov	r2, r2, asl #16
	orr	r2, r2, lr, asl #8
	orr	r2, r2, r1
	orr	r10, r2, r10, asl #24
	cmp	r0, r10
	beq	.L4231
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r1, .L4272+20
	ldr	r3, [r3, #24]
.LPIC1013:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	b	.L4219
.L4222:
	ldrb	r9, [lr, #9]	@ zero_extendqisi2
	ldrb	r2, [lr, #8]	@ zero_extendqisi2
	orr	r2, r2, r9, asl #8
	b	.L4224
.L4260:
#APP
@ 463 "/root/lol//drivers/usb/gadget/f_ncm.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/root/lol//drivers/usb/gadget/f_ncm.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 463, 0
.popsection
@ 0 "" 2
.L4265:
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r1, .L4272+24
	ldr	r3, [r3, #24]
.LPIC1011:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	b	.L4219
.L4227:
	ldrb	r9, [r9, #1]	@ zero_extendqisi2
	ldrb	r2, [ip, r0, asl #1]	@ zero_extendqisi2
	orr	r2, r2, r9, asl #8
	b	.L4229
.L4231:
	ldrb	r1, [ip, #5]	@ zero_extendqisi2
	ldrb	r2, [ip, #4]	@ zero_extendqisi2
	ldr	r9, [r6, #12]
	ldr	fp, [r6, #20]
	orr	r2, r2, r1, asl #8
	add	r1, r9, fp, asl #3
	cmp	r2, r1
	bcc	.L4232
	ldr	r0, [r6, #16]
	udiv	r1, r2, r0
	mls	r1, r0, r1, r2
	cmp	r1, #0
	bne	.L4232
	ldr	lr, [r6, #40]
	add	r1, ip, #6
	cmp	fp, #1
	ldr	r0, [r6, #32]
	ldr	ip, [r6, #36]
	add	r0, lr, r0
	add	r0, r0, ip
	add	r10, r1, r0, asl #1
	beq	.L4235
	cmp	fp, #2
	bne	.L4260
	ldrb	ip, [r10, #2]	@ zero_extendqisi2
	add	lr, r10, #4
	ldrb	r1, [r1, r0, asl #1]	@ zero_extendqisi2
	str	lr, [sp, #24]
	ldrb	r0, [r10, #1]	@ zero_extendqisi2
	ldrb	lr, [r10, #6]	@ zero_extendqisi2
	mov	ip, ip, asl #16
	str	r1, [sp, #20]
	ldrb	r1, [r10, #5]	@ zero_extendqisi2
	str	ip, [sp, #16]
	ldrb	ip, [r10, #4]	@ zero_extendqisi2
	mov	lr, lr, asl #16
	orr	lr, lr, r1, asl #8
	ldrb	r1, [r10, #3]	@ zero_extendqisi2
	ldrb	r10, [r10, #7]	@ zero_extendqisi2
	str	ip, [sp, #28]
	ldr	ip, [sp, #16]
	orr	ip, ip, r0, asl #8
	ldr	r0, [sp, #20]
	orr	ip, ip, r0
	ldr	r0, [sp, #28]
	orr	r1, ip, r1, asl #24
	orr	r0, lr, r0
	str	r1, [sp, #16]
	mov	lr, #4
	orr	r1, r0, r10, asl #24
	str	r1, [sp, #20]
.L4237:
	rsb	r2, r9, r2
	str	r7, [sp, #28]
	ldr	r7, [sp, #20]
	mov	r10, r3
	str	r6, [sp, #36]
	str	r2, [sp, #32]
	ldr	r2, [sp, #24]
	str	r4, [sp, #24]
	add	ip, r2, lr
	mov	r4, ip
.L4246:
	cmp	r7, r10
	bcc	.L4267
	ldrb	r3, [r5, #180]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L4268
.L4239:
	cmp	fp, #1
	beq	.L4242
	cmp	fp, #2
	bne	.L4260
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	add	r1, r4, #4
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	ldrb	r3, [r4, #6]	@ zero_extendqisi2
	ldrb	r6, [r4, #5]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	ldrb	lr, [r4]	@ zero_extendqisi2
	ldrb	ip, [r4, #7]	@ zero_extendqisi2
	orr	r2, r2, r0, asl #8
	mov	r3, r3, asl #16
	ldrb	r0, [r4, #4]	@ zero_extendqisi2
	orr	r3, r3, r6, asl #8
	ldrb	r6, [r4, #3]	@ zero_extendqisi2
	orr	r2, r2, lr
	orr	r3, r3, r0
	orr	r9, r3, ip, asl #24
	orr	r6, r2, r6, asl #24
	mov	r2, #4
.L4244:
	cmp	r6, #0
	cmpne	r9, #0
	add	r4, r1, r2
	moveq	r3, #1
	movne	r3, #0
	str	r3, [sp, #20]
	bne	.L4269
	ldr	r4, [sp, #24]
	str	r7, [sp, #20]
	ldr	r1, [sp, #16]
	ldr	r7, [sp, #28]
	mov	r0, r4
	bl	skb_pull(PLT)
	cmp	r0, #0
	beq	.L4270
	ldr	r3, [sp, #20]
	mov	r0, r4
	rsb	r1, r8, r3
	bl	skb_trim(PLT)
	mov	r0, r7
	mov	r1, r4
	bl	skb_queue_tail(PLT)
	mov	r0, #0
	b	.L4261
.L4232:
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r1, .L4272+28
	ldr	r3, [r3, #24]
.LPIC1014:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	b	.L4219
.L4266:
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r1, .L4272+32
	ldr	r3, [r3, #24]
.LPIC1012:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	b	.L4219
.L4235:
	ldrb	ip, [r1, r0, asl #1]	@ zero_extendqisi2
	add	r1, r10, #2
	mov	lr, #2
	ldrb	r0, [r10, #1]	@ zero_extendqisi2
	str	r1, [sp, #24]
	ldrb	r1, [r10, #3]	@ zero_extendqisi2
	ldrb	r10, [r10, #2]	@ zero_extendqisi2
	orr	r0, ip, r0, asl #8
	orr	r1, r10, r1, asl #8
	str	r0, [sp, #16]
	str	r1, [sp, #20]
	b	.L4237
.L4242:
	mov	r1, r4
	ldrb	r6, [r4, #1]	@ zero_extendqisi2
	mov	r2, #2
	ldrb	r0, [r1], #2	@ zero_extendqisi2
	ldrb	r9, [r4, #3]	@ zero_extendqisi2
	ldrb	r3, [r4, #2]	@ zero_extendqisi2
	orr	r6, r0, r6, asl #8
	orr	r9, r3, r9, asl #8
	b	.L4244
.L4268:
	ldr	r3, [sp, #24]
	mvn	r0, #0
	rsb	r2, r8, r7
	ldr	ip, [sp, #16]
	ldr	r1, [r3, #172]
	add	r3, ip, r7
	rsb	r3, r8, r3
	add	r6, r1, r3
	ldrb	r3, [r1, r3]	@ zero_extendqisi2
	add	r1, r1, ip
	ldrb	lr, [r6, #2]	@ zero_extendqisi2
	ldrb	r9, [r6, #1]	@ zero_extendqisi2
	ldrb	r6, [r6, #3]	@ zero_extendqisi2
	mov	lr, lr, asl #16
	orr	lr, lr, r9, asl #8
	orr	r3, lr, r3
	orr	r6, r3, r6, asl #24
	bl	crc32_le(PLT)
	mvn	r0, r0
	cmp	r0, r6
	bne	.L4240
	ldr	r3, [sp, #36]
	ldr	fp, [r3, #20]
	b	.L4239
.L4269:
	ldr	r0, [sp, #24]
	mov	r1, #32
	bl	skb_clone(PLT)
	subs	fp, r0, #0
	beq	.L4250
	ldr	r1, [sp, #16]
	bl	skb_pull(PLT)
	cmp	r0, #0
	beq	.L4251
	mov	r0, fp
	rsb	r1, r8, r7
	bl	skb_trim(PLT)
	ldr	r0, [sp, #28]
	mov	r1, fp
	bl	skb_queue_tail(PLT)
	ldr	r3, [sp, #36]
	ldr	r2, [sp, #32]
	ldr	fp, [r3, #20]
	mov	r3, fp, asl #2
	rsb	r2, r3, r2
	cmp	r3, r2
	str	r2, [sp, #32]
	bcs	.L4271
	mov	r7, r9
	str	r6, [sp, #16]
	b	.L4246
.L4267:
	ldr	r3, [r5, #20]
	mov	r2, r7
	mvn	r5, #21
	ldr	r1, .L4272+36
	ldr	r4, [sp, #24]
	ldr	r7, [sp, #28]
	ldr	r3, [r3, #24]
.LPIC1015:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	b	.L4219
.L4271:
	ldr	r0, [sp, #20]
	b	.L4261
.L4251:
	ldr	r4, [sp, #24]
	mvn	r5, #74
	ldr	r7, [sp, #28]
	b	.L4219
.L4270:
	mvn	r5, #74
	b	.L4219
.L4250:
	ldr	r4, [sp, #24]
	mvn	r5, #21
	ldr	r7, [sp, #28]
	b	.L4219
.L4240:
	ldr	r3, [r5, #20]
	mvn	r5, #21
	ldr	r1, .L4272+40
	ldr	r4, [sp, #24]
	ldr	r7, [sp, #28]
	ldr	r3, [r3, #24]
.LPIC1016:
	add	r1, pc, r1
	ldr	r0, [r3]
	add	r0, r0, #32
	bl	_dev_info(PLT)
	b	.L4219
.L4273:
	.align	2
.L4272:
	.word	.LANCHOR2-(.LPIC1006+8)
	.word	.LC263-(.LPIC1007+8)
	.word	.LC264-(.LPIC1008+8)
	.word	.LC265-(.LPIC1009+8)
	.word	.LC266-(.LPIC1010+8)
	.word	.LC269-(.LPIC1013+8)
	.word	.LC267-(.LPIC1011+8)
	.word	.LC270-(.LPIC1014+8)
	.word	.LC268-(.LPIC1012+8)
	.word	.LC271-(.LPIC1015+8)
	.word	.LC272-(.LPIC1016+8)
	.fnend
	.size	ncm_unwrap_ntb, .-ncm_unwrap_ntb
	.align	2
	.type	ncm_wrap_ntb, %function
ncm_wrap_ntb:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r4, .L4319
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r9, r0
	strd	r10, [sp, #24]
	mov	fp, r1
	str	lr, [sp, #32]
	ldrb	r3, [r0, #180]	@ zero_extendqisi2
.LPIC1017:
	add	r4, pc, r4
	ldr	r5, [r0, #176]
	.pad #20
	sub	sp, sp, #20
	ldr	r2, [r1, #80]
	ldrh	r1, [r4, #12]
	cmp	r3, #0
	movne	r3, #4
	moveq	r3, #0
	ldr	r0, [r5, #12]
	ldr	r10, [r5, #8]
	mov	ip, r3
	ldr	r7, [r5, #20]
	str	r3, [sp, #8]
	sub	r6, r1, #1
	ldrh	r3, [r4, #8]
	rsb	r1, r1, #0
	ldrh	r4, [r4, #10]
	add	r6, r6, r10
	add	r7, r0, r7, asl #3
	and	r6, r6, r1
	ldr	r1, [r9, #112]
	sub	r0, r3, #1
	add	r7, r7, r6
	rsb	r3, r3, #0
	add	r0, r0, r7
	and	r3, r3, r0
	add	r4, r3, r4
	add	r2, r4, r2
	add	r2, r2, ip
	cmp	r1, r2
	bcc	.L4314
	bhi	.L4315
.L4301:
	mov	r3, #0
	mov	r2, r3
	str	r3, [sp, #4]
	str	r3, [sp]
.L4278:
	mov	r1, r4
	mov	r3, #32
	mov	r0, fp
	bl	skb_copy_expand(PLT)
	mov	r8, r0
	mov	r0, fp
	bl	dev_kfree_skb_any(PLT)
	cmp	r8, #0
	beq	.L4316
	mov	r0, r8
	mov	r1, r4
	bl	skb_push(PLT)
	cmp	r4, #0
	mov	fp, r0
	bne	.L4317
.L4280:
	ldr	r3, [r5]
	mov	r2, r3, lsr #16
	strb	r3, [fp]
	ubfx	r1, r3, #8, #8
	mov	r3, r2, lsr #8
	strb	r1, [fp, #1]
	ldr	r1, [sp, #4]
	strb	r2, [fp, #2]
	strb	r3, [fp, #3]
	ldr	r3, [r5, #8]
	ubfx	r2, r3, #8, #8
	strb	r3, [fp, #4]
	strb	r2, [fp, #5]
	ldr	r2, [r5, #24]
	ldr	r3, [r8, #80]
	cmp	r2, #1
	add	r3, r1, r3
	beq	.L4282
	cmp	r2, #2
	bne	.L4312
	mov	r1, r3, lsr #16
	ubfx	r0, r3, #8, #8
	strb	r3, [fp, #8]
	mov	r3, r1, lsr #8
	strb	r0, [fp, #9]
	strb	r1, [fp, #10]
	strb	r3, [fp, #11]
.L4284:
	ldr	ip, [r5, #28]
	add	r3, fp, #8
	rsb	r6, r10, r6
	ldr	r1, [r5, #8]
	add	r0, r3, r2, asl #1
	cmp	ip, #1
	add	r1, r6, r1
	beq	.L4286
	cmp	ip, #2
	bne	.L4312
	mov	lr, r1, lsr #16
	ubfx	r10, r1, #8, #8
	mov	fp, lr, lsr #8
	strb	lr, [r0, #2]
	strb	fp, [r0, #3]
	strb	r1, [r3, r2, asl #1]
	strb	r10, [r0, #1]
.L4288:
	ldr	r3, [r5, #4]
	add	ip, r6, ip, asl #1
	uxth	fp, r4
	add	r6, r0, ip
	rsb	r7, r7, r4
	add	r10, r6, #6
	mov	lr, r3, lsr #16
	ubfx	r2, r3, #8, #8
	mov	r1, lr, lsr #8
	strb	lr, [r6, #2]
	strb	r1, [r6, #3]
	strb	r3, [r0, ip]
	strb	r2, [r6, #1]
	ldr	r3, [r5, #8]
	rsb	r3, r3, fp
	rsb	r7, r7, r3
	uxth	r7, r7
	mov	r3, r7, lsr #8
	strb	r7, [r6, #4]
	strb	r3, [r6, #5]
	ldrb	r1, [r9, #180]	@ zero_extendqisi2
	ldr	r3, [r5, #40]
	ldr	r2, [r5, #32]
	ldr	r6, [r5, #36]
	cmp	r1, #0
	add	r3, r3, r2
	add	r6, r3, r6
	add	r9, r10, r6, asl #1
	bne	.L4318
.L4289:
	ldr	r3, [r5, #20]
	cmp	r3, #1
	beq	.L4291
	cmp	r3, #2
	bne	.L4312
	mov	r2, r4, lsr #16
	mov	fp, fp, lsr #8
	mov	r1, r2, lsr #8
	strb	r2, [r9, #2]
	strb	r1, [r9, #3]
	strb	r4, [r10, r6, asl #1]
	strb	fp, [r9, #1]
.L4293:
	ldr	r1, [r5, #20]
	add	r0, r9, r3, asl #1
	ldr	r2, [r8, #80]
	cmp	r1, #1
	rsb	r4, r4, r2
	beq	.L4295
	cmp	r1, #2
	bne	.L4312
	mov	r2, r4, lsr #16
	ubfx	r1, r4, #8, #8
	mov	ip, r2, lsr #8
	strb	r2, [r0, #2]
	strb	ip, [r0, #3]
	strb	r4, [r9, r3, asl #1]
	strb	r1, [r0, #1]
.L4297:
	ldr	r3, [sp]
	cmp	r3, #0
	bne	.L4298
	mov	r0, r8
.L4308:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4312:
#APP
@ 445 "/root/lol//drivers/usb/gadget/f_ncm.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/root/lol//drivers/usb/gadget/f_ncm.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 445, 0
.popsection
@ 0 "" 2
.L4315:
	ldr	r3, [r9, #88]
	ldr	r3, [r3, #28]
	ldrh	r1, [r3, #4]	@ unaligned
	udiv	r3, r2, r1
	mls	r2, r1, r3, r2
	cmp	r2, #0
	bne	.L4301
	ldr	r0, .L4319+4
	mov	r3, #1
	mov	r8, r3
	str	r3, [sp, #4]
.LPIC1020:
	add	r0, pc, r0
	bl	printk(PLT)
	str	r8, [sp]
	mov	r2, r8
	b	.L4278
.L4282:
	ubfx	r1, r3, #8, #8
	strb	r3, [fp, #8]
	strb	r1, [fp, #9]
	b	.L4284
.L4317:
	mov	r1, r4
	bl	__memzero(PLT)
	b	.L4280
.L4286:
	ubfx	lr, r1, #8, #8
	strb	r1, [r3, r2, asl #1]
	strb	lr, [r0, #1]
	b	.L4288
.L4291:
	mov	fp, fp, lsr #8
	strb	r4, [r10, r6, asl #1]
	strb	fp, [r9, #1]
	b	.L4293
.L4318:
	ldr	r1, [r8, #172]
	mvn	r0, #0
	ldr	r2, [r8, #80]
	add	r1, r1, r4
	rsb	r2, r4, r2
	bl	crc32_le(PLT)
	ldr	r3, [r8, #80]
	mvn	r7, r0
	ldr	r1, [sp, #8]
	mov	ip, r7, lsr #16
	ldr	lr, [r8, #172]
	mov	r0, ip, lsr #8
	str	r3, [sp, #8]
	ubfx	r3, r7, #8, #8
	mov	r2, r0
	mov	r0, r8
	str	r3, [sp, #12]
	ldr	r3, [sp, #8]
	add	r3, lr, r3
	strb	r2, [r3, #3]
	ldr	r2, [sp, #8]
	strb	ip, [r3, #2]
	strb	r7, [lr, r2]
	ldrb	r2, [sp, #12]	@ zero_extendqisi2
	strb	r2, [r3, #1]
	bl	skb_put(PLT)
	b	.L4289
.L4295:
	ubfx	r2, r4, #8, #8
	strb	r4, [r9, r3, asl #1]
	strb	r2, [r0, #1]
	b	.L4297
.L4314:
	mov	r0, fp
	bl	dev_kfree_skb_any(PLT)
	mov	r0, #0
	b	.L4308
.L4316:
	ldr	r0, .L4319+8
.LPIC1021:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r8
	b	.L4308
.L4298:
	ldr	r1, [sp, #4]
	mov	r0, r8
	bl	skb_put(PLT)
	mov	r1, #1
	bl	__memzero(PLT)
	ldr	r1, .L4319+12
	ldr	r0, .L4319+16
	ldr	r2, [r8, #80]
.LPIC1023:
	add	r1, pc, r1
.LPIC1022:
	add	r0, pc, r0
	add	r1, r1, #1648
	bl	printk(PLT)
	mov	r0, r8
	b	.L4308
.L4320:
	.align	2
.L4319:
	.word	.LANCHOR2-(.LPIC1017+8)
	.word	.LC273-(.LPIC1020+8)
	.word	.LC274-(.LPIC1021+8)
	.word	.LANCHOR3-(.LPIC1023+8)
	.word	.LC275-(.LPIC1022+8)
	.fnend
	.size	ncm_wrap_ntb, .-ncm_wrap_ntb
	.align	2
	.type	acc_start_work, %function
acc_start_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L4323
	.save {lr}
	str	lr, [sp, #-4]!
	mov	ip, #0
	ldr	r3, .L4323+4
	.pad #12
	sub	sp, sp, #12
	mov	r1, #2
	mov	r2, sp
	str	ip, [sp, #4]
.LPIC1025:
	add	r0, pc, r0
	ldr	r0, [r0, #172]
.LPIC1024:
	add	r3, pc, r3
	str	r3, [sp]
	add	r0, r0, #8
	bl	kobject_uevent_env(PLT)
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L4324:
	.align	2
.L4323:
	.word	.LANCHOR0-(.LPIC1025+8)
	.word	.LC276-(.LPIC1024+8)
	.fnend
	.size	acc_start_work, .-acc_start_work
	.align	2
	.type	ncm_work, %function
ncm_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r1, .L4329
	mov	r2, #0
	ldr	r4, .L4329+4
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	ldr	ip, .L4329+8
	ldr	r3, .L4329+12
	str	r2, [sp, #4]
	ldr	r0, .L4329+16
.LPIC1029:
	add	r1, pc, r1
	str	r2, [sp, #12]
.LPIC1030:
	add	r4, pc, r4
	add	r1, r1, #1664
.LPIC1026:
	add	ip, pc, ip
	ldrb	r2, [r4, #-652]	@ zero_extendqisi2
.LPIC1027:
	add	r3, pc, r3
.LPIC1028:
	add	r0, pc, r0
	str	ip, [sp]
	str	r3, [sp, #8]
	bl	printk(PLT)
	ldrb	r3, [r4, #-652]	@ zero_extendqisi2
	mov	r1, #2
	cmp	r3, #0
	ldr	r3, .L4329+20
	addeq	r2, sp, #8
	movne	r2, sp
.LPIC1032:
	add	r3, pc, r3
	ldr	r0, [r3, #352]
	add	r0, r0, #8
	bl	kobject_uevent_env(PLT)
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4330:
	.align	2
.L4329:
	.word	.LANCHOR3-(.LPIC1029+8)
	.word	.LANCHOR4-(.LPIC1030+8)
	.word	.LC277-(.LPIC1026+8)
	.word	.LC278-(.LPIC1027+8)
	.word	.LC279-(.LPIC1028+8)
	.word	.LANCHOR0-(.LPIC1032+8)
	.fnend
	.size	ncm_work, .-ncm_work
	.align	2
	.type	macos_show, %function
macos_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L4332
	ldr	r0, [r3]
	bl	sec_get_ss_host_available(PLT)
	mov	r4, r0
	bl	get_host_os_type(PLT)
	cmp	r0, #1
	cmpeq	r4, #1
	mov	r3, r0
	movne	r5, #1
	beq	.L4337
.L4333:
	ldr	r1, .L4338
	mov	r2, r4
	ldr	r0, .L4338+4
.LPIC1036:
	add	r1, pc, r1
	add	r1, r1, #1664
.LPIC1035:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
.L4334:
	ldr	r1, .L4338+8
	mov	r0, r6
	mov	r2, r5
.LPIC1039:
	add	r1, pc, r1
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	sprintf(PLT)
.L4332:
	ldr	r1, .L4338+12
	mvn	r5, #0
	ldr	r0, .L4338+16
.LPIC1038:
	add	r1, pc, r1
	add	r1, r1, #1664
.LPIC1037:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L4334
.L4337:
	ldr	r1, .L4338+20
	str	r0, [sp, #4]
	mov	r5, #0
	ldr	r0, .L4338+24
.LPIC1034:
	add	r1, pc, r1
	add	r1, r1, #1664
.LPIC1033:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r3, [sp, #4]
	b	.L4333
.L4339:
	.align	2
.L4338:
	.word	.LANCHOR3-(.LPIC1036+8)
	.word	.LC281-(.LPIC1035+8)
	.word	.LC76-(.LPIC1039+8)
	.word	.LANCHOR3-(.LPIC1038+8)
	.word	.LC282-(.LPIC1037+8)
	.word	.LANCHOR3-(.LPIC1034+8)
	.word	.LC280-(.LPIC1033+8)
	.fnend
	.size	macos_show, .-macos_show
	.align	2
	.type	ss_host_available_show, %function
ss_host_available_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L4341
	ldr	r0, [r3]
	bl	sec_get_ss_host_available(PLT)
	mov	r5, r0
	bl	get_host_os_type(PLT)
	cmp	r0, #1
	cmpeq	r5, #1
	mov	r3, r0
	moveq	r4, #1
	movne	r4, #0
	beq	.L4346
.L4342:
	ldr	r1, .L4347
	mov	r2, r5
	ldr	r0, .L4347+4
.LPIC1043:
	add	r1, pc, r1
	add	r1, r1, #1680
.LPIC1042:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
.L4343:
	ldr	r1, .L4347+8
	mov	r0, r6
	mov	r2, r4
.LPIC1046:
	add	r1, pc, r1
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	sprintf(PLT)
.L4341:
	ldr	r1, .L4347+12
	mvn	r4, #0
	ldr	r0, .L4347+16
.LPIC1045:
	add	r1, pc, r1
	add	r1, r1, #1680
.LPIC1044:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L4343
.L4346:
	ldr	r1, .L4347+20
	str	r0, [sp, #4]
	mov	r4, #1
	ldr	r0, .L4347+24
.LPIC1041:
	add	r1, pc, r1
	add	r1, r1, #1680
.LPIC1040:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldr	r3, [sp, #4]
	b	.L4342
.L4348:
	.align	2
.L4347:
	.word	.LANCHOR3-(.LPIC1043+8)
	.word	.LC281-(.LPIC1042+8)
	.word	.LC76-(.LPIC1046+8)
	.word	.LANCHOR3-(.LPIC1045+8)
	.word	.LC282-(.LPIC1044+8)
	.word	.LANCHOR3-(.LPIC1041+8)
	.word	.LC280-(.LPIC1040+8)
	.fnend
	.size	ss_host_available_show, .-ss_host_available_show
	.align	2
	.type	iSerial_store, %function
iSerial_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L4351
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L4354
	mov	r1, r2
	mov	r2, #256
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC1047:
	add	r5, pc, r5
	add	r5, r5, #28
	mov	r0, r5
	bl	strlcpy(PLT)
	mov	r0, r5
	bl	strim(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4351:
	mvn	r0, #21
	bx	lr
.L4355:
	.align	2
.L4354:
	.word	.LANCHOR1-(.LPIC1047+8)
	.fnend
	.size	iSerial_store, .-iSerial_store
	.align	2
	.type	iProduct_store, %function
iProduct_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L4358
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L4361
	mov	r1, r2
	mov	r2, #256
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC1049:
	add	r5, pc, r5
	sub	r5, r5, #1184
	mov	r0, r5
	bl	strlcpy(PLT)
	mov	r0, r5
	bl	strim(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4358:
	mvn	r0, #21
	bx	lr
.L4362:
	.align	2
.L4361:
	.word	.LANCHOR4-(.LPIC1049+8)
	.fnend
	.size	iProduct_store, .-iProduct_store
	.align	2
	.type	iManufacturer_store, %function
iManufacturer_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #255
	bhi	.L4365
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L4368
	mov	r1, r2
	mov	r2, #256
	mov	r4, r3
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC1051:
	add	r5, pc, r5
	sub	r5, r5, #928
	mov	r0, r5
	bl	strlcpy(PLT)
	mov	r0, r5
	bl	strim(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4365:
	mvn	r0, #21
	bx	lr
.L4369:
	.align	2
.L4368:
	.word	.LANCHOR4-(.LPIC1051+8)
	.fnend
	.size	iManufacturer_store, .-iManufacturer_store
	.align	2
	.type	ffs_aliases_store, %function
ffs_aliases_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 264
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	ldr	r4, .L4377
	ldr	r5, .L4377+4
	strd	r8, [sp, #16]
	mov	r9, r2
	strd	r6, [sp, #8]
	mov	r6, r3
	str	lr, [sp, #24]
	.pad #268
	sub	sp, sp, #268
.LPIC1055:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
.LPIC1054:
	add	r5, pc, r5
	ldr	r7, [r5, #16]
	ldr	r3, [r4]
	sub	r8, r7, #496
	mov	r0, r8
	str	r3, [sp, #260]
	bl	mutex_lock(PLT)
	ldrb	r3, [r7, #-504]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L4375
	add	r5, sp, #4
	mov	r1, r9
	mov	r2, #256
	mov	r0, r5
	bl	strlcpy(PLT)
	mov	r0, r5
	bl	strim(PLT)
	mov	r1, r0
	mov	r2, #256
	sub	r0, r7, #324
	bl	strlcpy(PLT)
	mov	r0, r8
	bl	mutex_unlock(PLT)
	mov	r0, r6
.L4372:
	ldr	r2, [sp, #260]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L4376
	add	sp, sp, #268
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L4375:
	mov	r0, r8
	bl	mutex_unlock(PLT)
	mvn	r0, #15
	b	.L4372
.L4376:
	bl	__stack_chk_fail(PLT)
.L4378:
	.align	2
.L4377:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC1055+8))
	.word	.LANCHOR1-(.LPIC1054+8)
	.fnend
	.size	ffs_aliases_store, .-ffs_aliases_store
	.align	2
	.type	functions_store, %function
functions_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 560
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L4434
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	strd	r6, [sp, #8]
	mov	r6, r2
	str	lr, [sp, #32]
	strd	r10, [sp, #24]
	.pad #564
	sub	sp, sp, #564
	str	r3, [sp, #16]
.LPIC1069:
	ldr	r3, [pc, r1]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	ldr	r3, [r3]
	str	r3, [sp, #556]
	bl	dev_get_drvdata(PLT)
	add	r3, r0, #24
	add	r2, r0, #508
	mov	r8, r0
	mov	r0, r3
	str	r3, [sp, #12]
	str	r2, [sp, #8]
	bl	mutex_lock(PLT)
	ldrb	r5, [r8, #16]	@ zero_extendqisi2
	cmp	r5, #0
	bne	.L4428
	ldr	r7, [r8, #508]
	ldr	r3, [sp, #8]
	cmp	r3, r7
	sub	r7, r7, #120
	movne	r10, r3
	beq	.L4383
.L4385:
	mov	r9, r7
	ldr	r4, [r9, #112]!
	cmp	r4, r9
	beq	.L4387
.L4384:
	mov	r0, r4
	ldr	r3, [r4, #-4]!
	str	r5, [r3, #20]
	bl	list_del(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r4, [r7, #112]
	cmp	r4, r9
	bne	.L4384
.L4387:
	ldr	r3, [r7, #120]
	str	r9, [r7, #112]
	str	r9, [r7, #116]
	cmp	r10, r3
	sub	r7, r3, #120
	bne	.L4385
.L4383:
	add	r4, sp, #44
	mov	r2, #256
	mov	r1, r6
	mov	r0, r4
	bl	strlcpy(PLT)
	mov	r0, r4
	mov	r10, #0
	bl	strim(PLT)
	ldr	r3, [sp, #8]
	cmp	r0, #0
	str	r0, [sp, #36]
	ldr	r2, .L4434+4
	str	r3, [sp, #4]
	ldr	r3, .L4434+8
.LPIC1068:
	add	r2, pc, r2
	add	r2, r2, #1728
	add	r2, r2, #8
.LPIC1066:
	add	r3, pc, r3
	add	r3, r3, #1728
	str	r2, [sp, #24]
	add	r3, r3, #8
	str	r3, [sp, #28]
	beq	.L4429
.L4400:
	ldr	r1, .L4434+12
	add	r0, sp, #36
.LPIC1057:
	add	r1, pc, r1
	bl	strsep(PLT)
	cmp	r0, #0
	str	r0, [sp, #32]
	beq	.L4389
	ldr	r3, [sp, #4]
	ldr	r2, [sp, #8]
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L4390
	sub	r7, r3, #120
	str	r3, [sp, #4]
.L4389:
	ldr	r9, .L4434+16
	cmp	r0, #0
	ldr	r5, .L4434+20
.LPIC1062:
	add	r9, pc, r9
.LPIC1063:
	add	r5, pc, r5
	beq	.L4430
.L4399:
	mov	r1, r9
	add	r0, sp, #32
	bl	strsep(PLT)
	add	fp, sp, #300
	mov	r6, r0
	add	r1, r8, #196
	mov	r0, fp
	mov	r2, #256
	bl	strlcpy(PLT)
	add	r4, sp, #560
	str	fp, [r4, #-520]!
.L4396:
	mov	r1, r5
	mov	r0, r4
	bl	strsep(PLT)
	subs	r1, r0, #0
	beq	.L4394
	mov	r0, r6
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L4395
.L4394:
	ldr	r3, [sp, #40]
	cmp	r3, #0
	bne	.L4396
	mov	r0, r8
	mov	r1, r7
	mov	r2, r6
	bl	android_enable_function(PLT)
	cmp	r0, #0
	bne	.L4431
.L4398:
	ldr	r0, [sp, #32]
	cmp	r0, #0
	bne	.L4399
.L4430:
	ldr	r0, [sp, #36]
	cmp	r0, #0
	bne	.L4400
.L4429:
	ldr	r3, [sp, #4]
	ldr	r2, [sp, #8]
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L4403
	ldr	r5, [sp, #4]
	mov	r6, r2
.L4402:
	mov	r0, r3
	sub	r4, r3, #120
	bl	list_del(PLT)
	ldr	r3, [r8, #516]
	mov	r0, r4
	sub	r3, r3, #1
	str	r3, [r8, #516]
	bl	kfree(PLT)
	ldr	r3, [r5]
	cmp	r6, r3
	bne	.L4402
.L4403:
	ldr	r0, [sp, #12]
	bl	mutex_unlock(PLT)
	ldr	r0, [sp, #16]
.L4381:
	ldr	r3, [sp, #20]
	ldr	r2, [sp, #556]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L4432
	add	sp, sp, #564
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4395:
	cmp	r10, #0
	bne	.L4398
	ldr	r2, .L4434+24
	mov	r0, r8
	mov	r1, r7
.LPIC1064:
	add	r2, pc, r2
	bl	android_enable_function(PLT)
	subs	r2, r0, #0
	moveq	r10, #1
	beq	.L4398
	ldr	r0, .L4434+28
	ldr	r1, [sp, #28]
.LPIC1065:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L4398
.L4390:
	ldr	r3, .L4434+32
.LPIC1070:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L4407
	movw	r1, #32976
	mov	r2, #128
	bl	kmem_cache_alloc_trace(PLT)
	subs	r7, r0, #0
	beq	.L4433
.L4392:
	ldr	r3, [r8, #516]
	mvn	r0, #63
	mov	ip, #48
	ldr	r2, .L4434+36
	ldr	r1, [r8]
	add	r3, r3, #1
.LPIC1061:
	add	r2, pc, r2
	str	r3, [r8, #516]
	add	r3, r7, #112
	str	r2, [r7, #12]
	ldr	r2, [sp, #8]
	str	r1, [r7]
	ldr	r1, [r8, #516]
	strb	r0, [r7, #22]
	add	r0, r7, #120
	str	r3, [r7, #112]
	str	r3, [r7, #116]
	strb	ip, [r7, #23]
	strb	r1, [r7, #20]
	ldr	r1, [r8, #512]
	bl	__list_add(PLT)
	ldr	r3, [sp, #4]
	ldr	r0, [sp, #32]
	ldr	r3, [r3]
	str	r3, [sp, #4]
	b	.L4389
.L4407:
	mov	r7, #16
	b	.L4392
.L4433:
	ldr	r1, .L4434+40
	mvn	r7, #11
	ldr	r0, .L4434+44
.LPIC1059:
	add	r1, pc, r1
	add	r1, r1, #1712
.LPIC1058:
	add	r0, pc, r0
	mov	r2, r1
	bl	printk(PLT)
	ldr	r3, [sp, #4]
	ldr	r0, [sp, #32]
	ldr	r3, [r3]
	str	r3, [sp, #4]
	b	.L4389
.L4428:
	ldr	r0, [sp, #12]
	bl	mutex_unlock(PLT)
	mvn	r0, #15
	b	.L4381
.L4431:
	mov	r3, r0
	ldr	r0, .L4434+48
	mov	r2, r6
	ldr	r1, [sp, #24]
.LPIC1067:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L4398
.L4432:
	bl	__stack_chk_fail(PLT)
.L4435:
	.align	2
.L4434:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC1069+8))
	.word	.LANCHOR3-(.LPIC1068+8)
	.word	.LANCHOR3-(.LPIC1066+8)
	.word	.LC283-(.LPIC1057+8)
	.word	.LC285-(.LPIC1062+8)
	.word	.LC285-(.LPIC1063+8)
	.word	.LC286-(.LPIC1064+8)
	.word	.LC287-(.LPIC1065+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1070+8))
	.word	android_unbind_config-(.LPIC1061+8)
	.word	.LANCHOR3-(.LPIC1059+8)
	.word	.LC284-(.LPIC1058+8)
	.word	.LC288-(.LPIC1067+8)
	.fnend
	.size	functions_store, .-functions_store
	.align	2
	.type	android_work, %function
android_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4491
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, #0
	strd	r8, [sp, #16]
	ldr	ip, .L4491+4
	mov	r5, r0
	strd	r6, [sp, #8]
	ldr	r1, .L4491+8
	str	lr, [sp, #24]
	.pad #60
	sub	sp, sp, #60
	ldr	r6, [r0, #-172]
.LPIC1071:
	add	r3, pc, r3
	ldr	lr, .L4491+12
	ldr	r2, .L4491+16
.LPIC1073:
	add	ip, pc, ip
	str	r4, [sp, #12]
	str	r3, [sp, #8]
	ldr	r3, .L4491+20
.LPIC1074:
	add	r1, pc, r1
	add	r7, r6, #60
	str	r4, [sp, #20]
.LPIC1072:
	add	lr, pc, lr
	mov	r0, r7
	str	r4, [sp, #28]
.LPIC1075:
	add	r2, pc, r2
	str	ip, [sp, #24]
.LPIC1076:
	add	r3, pc, r3
	str	lr, [sp, #16]
	str	r1, [sp, #32]
	str	r3, [sp, #48]
	str	r2, [sp, #40]
	str	r4, [sp, #36]
	str	r4, [sp, #44]
	str	r4, [sp, #52]
	bl	_raw_spin_lock_irqsave(PLT)
	ldrb	r8, [r5, #-130]	@ zero_extendqisi2
	mov	r9, r0
	ldrb	r3, [r5, #-129]	@ zero_extendqisi2
	cmp	r3, r8
	beq	.L4437
	ldr	r3, [r6, #12]
	cmp	r3, r4
	beq	.L4438
	ldr	r1, .L4491+24
	sub	r0, r5, #128
	mov	r2, #3
.LPIC1077:
	add	r1, pc, r1
	bl	strncmp(PLT)
	cmp	r0, r4
	beq	.L4439
	cmp	r8, r4
	moveq	r4, #1
	bne	.L4440
.L4441:
	mov	r2, #4
	add	r6, sp, #40
.L4455:
	ldr	r3, .L4491+28
	strb	r8, [r5, #-129]
	mov	r0, r7
	ldrb	ip, [r5, #-132]	@ zero_extendqisi2
	mov	r1, r9
.LPIC1100:
	add	r3, pc, r3
	strb	ip, [r5, #-131]
	str	r2, [r3, #-648]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmn	r4, #1
	beq	.L4451
	ldr	r3, [r5, #-136]
	add	r7, sp, #16
	cmp	r3, #0
	beq	.L4446
.L4457:
	ldr	r2, .L4491+32
.LPIC1079:
	add	r2, pc, r2
	ldr	r2, [r2, #420]
	cmp	r4, r2
	beq	.L4446
	ldr	r1, [r3, #4]
	cmp	r1, #0
	beq	.L4446
	cmp	r4, #0
	addne	r1, r1, #1
	subne	r0, r5, #120
	subeq	r0, r5, #120
	mvneq	r1, #0
	bl	pm_qos_update_request(PLT)
	ldr	r3, .L4491+36
.LPIC1080:
	add	r3, pc, r3
	str	r4, [r3, #420]
.L4446:
	cmp	r6, r7
	beq	.L4456
.L4484:
	add	r3, sp, #24
	cmp	r6, r3
	beq	.L4488
.L4451:
	ldr	r3, .L4491+40
.LPIC1086:
	add	r3, pc, r3
	ldr	r3, [r3, #-648]
	sub	r3, r3, #3
	cmp	r3, #1
	bls	.L4453
	ldr	r0, [r5, #-168]
	add	r7, sp, #16
	mov	r1, #2
	mov	r2, r6
	add	r0, r0, #8
	bl	kobject_uevent_env(PLT)
	cmp	r6, r7
	beq	.L4460
.L4454:
	ldr	r3, .L4491+44
.LPIC1087:
	add	r3, pc, r3
	ldr	r2, [r3, #-648]
	str	r2, [r3, #-644]
.L4453:
	ldr	r1, .L4491+48
	ldr	r0, .L4491+52
	ldr	r3, [r6]
.LPIC1090:
	add	r1, pc, r1
	add	r1, r1, #1744
.LPIC1089:
	add	r0, pc, r0
	add	r1, r1, #8
	mov	r2, r1
	bl	printk(PLT)
.L4436:
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L4439:
	cmp	r8, #0
	mvn	r4, #0
	beq	.L4441
.L4440:
	mov	r2, #3
	add	r6, sp, #32
	b	.L4455
.L4437:
	ldr	r2, [r6, #12]
	cmp	r2, #0
	beq	.L4438
	strb	r3, [r5, #-129]
	ldr	r3, .L4491+56
	mov	r2, #2
	ldrb	ip, [r5, #-132]	@ zero_extendqisi2
	mov	r0, r7
	mov	r1, r9
.LPIC1078:
	add	r3, pc, r3
	strb	ip, [r5, #-131]
	str	r2, [r3, #-648]
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r3, sp, #24
	mov	r6, r3
	cmp	r6, r3
	bne	.L4451
.L4488:
	ldr	r3, .L4491+60
.LPIC1082:
	add	r3, pc, r3
	ldr	r2, [r3, #-644]
	cmp	r2, #2
	beq	.L4449
	ldr	r3, [r3, #-648]
	sub	r3, r3, #3
	cmp	r3, #1
	bls	.L4453
	ldr	r0, [r5, #-168]
	mov	r1, #2
	mov	r2, r6
	add	r0, r0, #8
	bl	kobject_uevent_env(PLT)
	b	.L4454
.L4438:
	ldrb	r4, [r5, #-132]	@ zero_extendqisi2
	ldrb	r3, [r5, #-131]	@ zero_extendqisi2
	cmp	r3, r4
	beq	.L4443
	cmp	r4, #0
	beq	.L4489
	ldr	r3, .L4491+64
	mov	r6, #1
	mov	r2, #3
	ldr	r1, .L4491+68
	sub	r0, r5, #128
.LPIC1092:
	add	r3, pc, r3
.LPIC1093:
	add	r1, pc, r1
	str	r6, [r3, #-648]
	bl	strncmp(PLT)
	adds	r4, r0, #0
	strb	r6, [r5, #-131]
	mov	r0, r7
	strb	r8, [r5, #-129]
	mov	r1, r9
	movne	r4, #1
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5, #-136]
	add	r7, sp, #16
	cmp	r3, #0
	movne	r6, r7
	bne	.L4457
.L4456:
	ldr	r3, .L4491+72
.LPIC1081:
	add	r3, pc, r3
	ldr	r2, [r3, #-644]
	cmp	r2, #0
	bne	.L4490
	ldr	r3, [r3, #-648]
	sub	r3, r3, #3
	cmp	r3, #1
	movls	r6, r7
	bls	.L4453
	ldr	r0, [r5, #-168]
	mov	r1, #2
	mov	r2, r7
	add	r0, r0, #8
	bl	kobject_uevent_env(PLT)
.L4460:
	ldr	r0, [r5, #-168]
	mov	r1, #2
	add	r2, sp, #48
	mov	r6, r7
	add	r0, r0, #8
	bl	kobject_uevent_env(PLT)
	b	.L4454
.L4443:
	mov	r0, r7
	mov	r1, r9
	strb	r8, [r5, #-129]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrb	r2, [r5, #-131]	@ zero_extendqisi2
	ldr	r1, .L4491+76
	ldrb	r3, [r5, #-132]	@ zero_extendqisi2
	ldr	r0, .L4491+80
	str	r2, [sp]
	ldr	ip, [r6, #12]
.LPIC1097:
	add	r1, pc, r1
	add	r1, r1, #1744
	add	r1, r1, #8
.LPIC1096:
	add	r0, pc, r0
	mov	r2, r1
	str	ip, [sp, #4]
	bl	printk(PLT)
	b	.L4436
.L4489:
	ldr	r3, .L4491+84
	strb	r4, [r5, #-131]
	mov	r0, r7
	strb	r8, [r5, #-129]
	mov	r1, r9
.LPIC1094:
	add	r3, pc, r3
	str	r4, [r3, #-648]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5, #-136]
	add	r6, sp, #8
	cmp	r3, #0
	beq	.L4484
	add	r7, sp, #16
	b	.L4457
.L4490:
	mov	r6, r7
.L4449:
	ldr	r1, .L4491+88
	ldr	r0, .L4491+92
.LPIC1084:
	add	r1, pc, r1
	add	r1, r1, #1744
.LPIC1083:
	add	r0, pc, r0
	add	r1, r1, #8
	mov	r2, r1
	bl	printk(PLT)
	ldr	r0, [r5, #-168]
	mov	r1, #2
	add	r2, sp, #8
	add	r0, r0, #8
	bl	kobject_uevent_env(PLT)
	b	.L4451
.L4492:
	.align	2
.L4491:
	.word	.LC289-(.LPIC1071+8)
	.word	.LC291-(.LPIC1073+8)
	.word	.LC292-(.LPIC1074+8)
	.word	.LC290-(.LPIC1072+8)
	.word	.LC293-(.LPIC1075+8)
	.word	.LC294-(.LPIC1076+8)
	.word	.LC295-(.LPIC1077+8)
	.word	.LANCHOR4-(.LPIC1100+8)
	.word	.LANCHOR2-(.LPIC1079+8)
	.word	.LANCHOR2-(.LPIC1080+8)
	.word	.LANCHOR4-(.LPIC1086+8)
	.word	.LANCHOR4-(.LPIC1087+8)
	.word	.LANCHOR3-(.LPIC1090+8)
	.word	.LC297-(.LPIC1089+8)
	.word	.LANCHOR4-(.LPIC1078+8)
	.word	.LANCHOR4-(.LPIC1082+8)
	.word	.LANCHOR4-(.LPIC1092+8)
	.word	.LC295-(.LPIC1093+8)
	.word	.LANCHOR4-(.LPIC1081+8)
	.word	.LANCHOR3-(.LPIC1097+8)
	.word	.LC298-(.LPIC1096+8)
	.word	.LANCHOR4-(.LPIC1094+8)
	.word	.LANCHOR3-(.LPIC1084+8)
	.word	.LC296-(.LPIC1083+8)
	.fnend
	.size	android_work, .-android_work
	.align	2
	.type	acc_complete_send_hid_event, %function
acc_complete_send_hid_event:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r2, r1
	ldr	r1, [r1, #44]
	ldr	r0, [r2, #32]
	ldr	r3, [r2, #48]
	cmp	r1, #0
	bne	.L4496
	.save {lr}
	str	lr, [sp, #-4]!
	mov	ip, #1
	ldr	r2, [r2]
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r0, #8]
	str	ip, [sp]
	bl	hid_report_raw_event(PLT)
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
.L4496:
	ldr	r0, .L4497
.LPIC1101:
	add	r0, pc, r0
	b	printk(PLT)
.L4498:
	.align	2
.L4497:
	.word	.LC299-(.LPIC1101+8)
	.fnend
	.size	acc_complete_send_hid_event, .-acc_complete_send_hid_event
	.align	2
	.type	acc_hid_work, %function
acc_hid_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4533
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
.LPIC1102:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r7, [r3, #2496]
	add	r9, sp, #16
	str	r9, [sp, #16]
	str	r9, [sp, #20]
	add	r6, r7, #88
	mov	r8, r7
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r8, #1776]!
	mov	r10, r0
	cmp	r5, r8
	ldr	r4, [r5]
	bne	.L4504
	b	.L4505
.L4503:
	cmp	r8, r4
	ldr	r3, [r4]
	mov	r5, r4
	beq	.L4505
.L4519:
	mov	r4, r3
.L4504:
	ldr	r2, [r5, #28]
	ldr	r3, [r5, #24]
	cmp	r2, r3
	bne	.L4503
	mov	r0, r5
	bl	__list_del_entry(PLT)
	ldr	r2, [sp, #16]
	mov	r0, r5
	mov	r1, r9
	bl	__list_add(PLT)
	cmp	r8, r4
	ldr	r3, [r4]
	mov	r5, r4
	bne	.L4519
.L4505:
	ldr	r2, [r7, #1784]
	add	r3, r7, #1776
	add	r3, r3, #8
	cmp	r2, r3
	beq	.L4530
	ldr	r1, [r7, #1788]
	add	r8, sp, #32
	str	r2, [r8, #-8]!
	str	r1, [sp, #28]
	str	r8, [r2, #4]
	ldr	r2, [sp, #28]
	str	r8, [r2]
	str	r3, [r7, #1784]
	str	r3, [r7, #1788]
.L4506:
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r4, [sp, #16]
	cmp	r4, r9
	ldr	r5, [r4]
	beq	.L4516
	ldr	r2, .L4533+4
	add	r3, r7, #1760
	ldr	fp, .L4533+8
	add	r3, r3, #8
.LPIC1106:
	add	r2, pc, r2
.LPIC1103:
	add	fp, pc, fp
	str	r2, [sp, #8]
	ldr	r2, .L4533+12
.LPIC1105:
	add	r2, pc, r2
	str	r2, [sp, #12]
	add	r2, fp, #508
	stmia	sp, {r2, r8}
	mov	r8, r3
	b	.L4515
.L4510:
	ldr	r3, [sp]
	str	r2, [r0, #36]
	ldr	r1, [fp, #172]
	str	r2, [r0, #40]
	str	r4, [r0, #3848]
	str	r3, [r0, #3548]
	mov	r3, #3
	str	r1, [r0, #3200]
	strh	r3, [r0, #32]	@ movhi
	bl	hid_add_device(PLT)
	cmp	r0, #0
	streq	r10, [r4, #8]
	bne	.L4531
.L4512:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r10, r0
	mov	r0, r4
	bl	__list_del_entry(PLT)
	mov	r0, r4
	mov	r1, r8
	ldr	r2, [r7, #1768]
	bl	__list_add(PLT)
	mov	r0, r6
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
.L4514:
	cmp	r5, r9
	ldr	r3, [r5]
	mov	r4, r5
	beq	.L4532
	mov	r5, r3
.L4515:
	bl	hid_allocate_device(PLT)
	cmn	r0, #4096
	mov	r10, r0
	mvn	r2, #0
	bls	.L4510
	cmp	r0, #0
	beq	.L4512
.L4511:
	mov	r1, r4
	ldr	r0, [sp, #8]
	bl	printk(PLT)
	ldr	r0, [r4, #20]
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	b	.L4514
.L4532:
	ldr	r8, [sp, #4]
.L4516:
	ldr	r4, [sp, #24]
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L4499
.L4518:
	mov	r0, r4
	bl	list_del(PLT)
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L4517
	bl	hid_destroy_device(PLT)
.L4517:
	ldr	r0, [r4, #20]
	bl	kfree(PLT)
	mov	r0, r4
	mov	r4, r5
	bl	kfree(PLT)
	cmp	r5, r8
	ldr	r5, [r5]
	bne	.L4518
.L4499:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4530:
	add	r8, sp, #24
	str	r8, [sp, #24]
	str	r8, [sp, #28]
	b	.L4506
.L4531:
	mov	r1, r0
	ldr	r0, [sp, #12]
	bl	printk(PLT)
	mov	r0, r10
	bl	hid_destroy_device(PLT)
	b	.L4511
.L4534:
	.align	2
.L4533:
	.word	.LANCHOR1-(.LPIC1102+8)
	.word	.LC301-(.LPIC1106+8)
	.word	.LANCHOR0-(.LPIC1103+8)
	.word	.LC300-(.LPIC1105+8)
	.fnend
	.size	acc_hid_work, .-acc_hid_work
	.align	2
	.type	acc_hid_parse, %function
acc_hid_parse:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #3848]
	ldr	r1, [r3, #20]
	ldr	r2, [r3, #24]
	bl	hid_parse_report(PLT)
	ldr	r4, [sp]
	add	sp, sp, #4
	mov	r0, #0
	ldr	pc, [sp], #4
	.fnend
	.size	acc_hid_parse, .-acc_hid_parse
	.align	2
	.type	fsg_show_file, %function
fsg_show_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	mov	r4, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	str	r8, [sp, #16]
	bl	dev_get_drvdata(PLT)
	mov	r7, r0
	bl	down_read(PLT)
	ldr	r0, [r4, #-48]
	cmp	r0, #0
	beq	.L4538
	add	r0, r0, #8
	mov	r1, r5
	movw	r2, #4095
	bl	d_path(PLT)
	cmn	r0, #4096
	mov	r4, r0
	bhi	.L4540
	bl	strlen(PLT)
	mov	r6, r0
	mov	r1, r4
	mov	r2, r6
	mov	r0, r5
	bl	memmove(PLT)
	add	r4, r6, #1
	mov	r2, #10
	mov	r3, #0
	strb	r2, [r5, r6]
	strb	r3, [r5, r4]
.L4540:
	mov	r0, r7
	bl	up_read(PLT)
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4538:
	mov	r4, r0
	strb	r0, [r5]
	b	.L4540
	.fnend
	.size	fsg_show_file, .-fsg_show_file
	.align	2
	.type	fsg_store_ro, %function
fsg_store_ro:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r2
	mov	r4, r3
	strd	r6, [sp, #8]
	mov	r7, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata(PLT)
	mov	r6, r0
	mov	r1, #2
	mov	r0, r5
	add	r2, sp, #4
	bl	kstrtouint(PLT)
	cmp	r0, #0
	beq	.L4548
.L4543:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L4548:
	mov	r0, r6
	bl	down_read(PLT)
	ldr	r3, [r7, #-48]
	cmp	r3, #0
	mvnne	r4, #15
	beq	.L4549
.L4544:
	mov	r0, r6
	bl	up_read(PLT)
	mov	r0, r4
	b	.L4543
.L4549:
	ldr	r2, [sp, #4]
	ldrb	r3, [r7, #-24]	@ zero_extendqisi2
	and	r2, r2, #1
	bfi	r3, r2, #1, #1
	bfi	r3, r2, #0, #1
	strb	r3, [r7, #-24]
	b	.L4544
	.fnend
	.size	fsg_store_ro, .-fsg_store_ro
	.align	2
	.type	fsg_store_cdrom, %function
fsg_store_cdrom:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r5, r2
	mov	r4, r3
	strd	r6, [sp, #8]
	mov	r7, r0
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata(PLT)
	mov	r6, r0
	mov	r1, #2
	mov	r0, r5
	add	r2, sp, #4
	bl	kstrtouint(PLT)
	cmp	r0, #0
	beq	.L4556
.L4551:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L4556:
	mov	r0, r6
	bl	down_read(PLT)
	ldr	r3, [r7, #-48]
	cmp	r3, #0
	mvnne	r4, #15
	beq	.L4557
.L4552:
	mov	r0, r6
	bl	up_read(PLT)
	mov	r0, r4
	b	.L4551
.L4557:
	ldrb	r3, [r7, #-24]	@ zero_extendqisi2
	ldr	r2, [sp, #4]
	bfi	r3, r2, #3, #1
	strb	r3, [r7, #-24]
	b	.L4552
	.fnend
	.size	fsg_store_cdrom, .-fsg_store_cdrom
	.align	2
	.type	fsg_store_file, %function
fsg_store_file:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	mov	r4, r3
	strd	r6, [sp, #8]
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata(PLT)
	ldrb	r3, [r5, #-24]	@ zero_extendqisi2
	mov	r6, r0
	tst	r3, #16
	beq	.L4559
	ldr	r3, [r5, #-48]
	cmp	r3, #0
	mvnne	r0, #15
	bne	.L4576
.L4559:
	cmp	r4, #0
	bne	.L4578
	mov	r0, r6
	bl	down_write(PLT)
	ldr	r0, [r5, #-48]
	cmp	r0, #0
	beq	.L4564
	bl	fput(PLT)
	mov	r3, #14848
	str	r4, [r5, #-48]
	movt	r3, 2
	str	r3, [r5, #-12]
.L4564:
	mov	r0, r6
	bl	up_write(PLT)
.L4566:
	mov	r0, r4
.L4576:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L4578:
	sub	r3, r4, #1
	mov	r0, r6
	ldrb	r2, [r7, r3]	@ zero_extendqisi2
	cmp	r2, #10
	moveq	r2, #0
	streqb	r2, [r7, r3]
	bl	down_write(PLT)
	ldr	r0, [r5, #-48]
	cmp	r0, #0
	beq	.L4568
	bl	fput(PLT)
	mov	r3, #14848
	mov	r2, #0
	movt	r3, 2
	str	r2, [r5, #-48]
	str	r3, [r5, #-12]
.L4568:
	ldrb	r3, [r7]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L4564
	mov	r1, r7
	sub	r0, r5, #48
	bl	fsg_lun_open(PLT)
	subs	r7, r0, #0
	bne	.L4565
	mov	r3, #10240
	movt	r3, 6
	str	r3, [r5, #-12]
	b	.L4564
.L4565:
	mov	r0, r6
	bl	up_write(PLT)
	cmp	r7, #0
	movlt	r0, r7
	blt	.L4576
	b	.L4566
	.fnend
	.size	fsg_store_file, .-fsg_store_file
	.align	2
	.type	send_message, %function
send_message:
	.fnstart
	@ args = 0, pretend = 0, frame = 256
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, r6, r7, r8, r9, r10, fp, lr}
	str	r4, [sp, #-32]!
	mov	r4, r1
	ldr	r1, .L4587
	strd	r10, [sp, #20]
	ldr	fp, .L4587+4
	mov	r2, r4
	strd	r6, [sp, #4]
	strd	r8, [sp, #12]
	str	lr, [sp, #28]
	ldr	r10, [r0]
.LPIC1109:
	add	r1, pc, r1
.LPIC1114:
	ldr	fp, [pc, fp]		@ tls_load_dot_plus_eight
	.pad #256
	sub	sp, sp, #256
	add	r1, r1, #1760
	ldr	r0, .L4587+8
	add	r1, r1, #8
	ldr	r3, [fp]
.LPIC1108:
	add	r0, pc, r0
	str	r3, [sp, #252]
	bl	printk(PLT)
	cmp	r10, #0
	moveq	r0, r10
	beq	.L4580
	ldr	r8, .L4587+12
	mov	r3, r4
	add	lr, sp, #12
	ldr	r2, .L4587+16
	add	r4, sp, #132
	mov	r1, #120
	mov	r0, r4
	str	lr, [sp]
.LPIC1110:
	add	r8, pc, r8
	ldrd	r6, [r8]
.LPIC1111:
	add	r2, pc, r2
	strd	r6, [sp, #12]
	ldrd	r6, [r8, #8]
	ldrd	r8, [r8, #16]
	strd	r6, [sp, #20]
	strd	r8, [sp, #28]
	bl	snprintf(PLT)
	ldr	r0, [r10, #356]
	mov	r3, #0
	str	r4, [sp, #4]
	str	r3, [sp, #8]
	cmp	r0, r3
	beq	.L4581
.L4582:
	add	r0, r10, #40
	mov	r1, #2
	mov	r2, sp
	bl	kobject_uevent_env(PLT)
	mov	r0, #0
.L4580:
	ldr	r2, [sp, #252]
	ldr	r3, [fp]
	cmp	r2, r3
	bne	.L4586
	add	sp, sp, #256
	@ sp needed
	ldr	r4, [sp]
	ldrd	r6, [sp, #4]
	ldrd	r8, [sp, #12]
	ldrd	r10, [sp, #20]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4581:
	ldr	r2, .L4587+20
	ldr	r1, .L4587+24
.LPIC1113:
	add	r2, pc, r2
.LPIC1112:
	add	r1, pc, r1
	sub	r2, r2, #640
	bl	__class_create(PLT)
	cmn	r0, #4096
	str	r0, [r10, #356]
	mvnhi	r0, #0
	bls	.L4582
	b	.L4580
.L4586:
	bl	__stack_chk_fail(PLT)
.L4588:
	.align	2
.L4587:
	.word	.LANCHOR3-(.LPIC1109+8)
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC1114+8))
	.word	.LC302-(.LPIC1108+8)
	.word	.LC303-(.LPIC1110+8)
	.word	.LC304-(.LPIC1111+8)
	.word	.LANCHOR4-(.LPIC1113+8)
	.word	.LC305-(.LPIC1112+8)
	.fnend
	.size	send_message, .-send_message
	.align	2
	.type	bulk_out_complete, %function
bulk_out_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	ldr	r6, [r1, #32]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	cmn	r2, #104
	beq	.L4599
.L4590:
#APP
@ 689 "/root/lol//drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	mov	r2, #0
	mov	r3, #1
	str	r2, [r6, #28]
	str	r3, [r6, #4]
#APP
@ 607 "/root/lol//drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	ldr	r0, [r4, #168]
	str	r3, [r4, #148]
	cmp	r0, r2
	beq	.L4591
	bl	wake_up_process(PLT)
.L4591:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
.L4599:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L4590
	blx	r3
	b	.L4590
	.fnend
	.size	bulk_out_complete, .-bulk_out_complete
	.align	2
	.type	bulk_in_complete, %function
bulk_in_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	ldr	r6, [r1, #32]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	cmn	r2, #104
	beq	.L4610
.L4601:
#APP
@ 668 "/root/lol//drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	mov	r3, #0
	str	r3, [r6, #20]
	str	r3, [r6, #4]
#APP
@ 607 "/root/lol//drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	ldr	r0, [r4, #168]
	mov	r3, #1
	str	r3, [r4, #148]
	cmp	r0, #0
	beq	.L4602
	bl	wake_up_process(PLT)
.L4602:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
.L4610:
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L4601
	blx	r3
	b	.L4601
	.fnend
	.size	bulk_in_complete, .-bulk_in_complete
	.align	2
	.type	sleep_thread, %function
sleep_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, sp
	strd	r6, [sp, #8]
	ldr	r7, .L4625
	bic	r5, r3, #8128
	strd	r8, [sp, #16]
	add	r6, r0, #44
	mov	r8, r0
	str	r10, [sp, #24]
	bic	r5, r5, #63
	mov	r9, #1
	str	lr, [sp, #28]
.LPIC1116:
	ldr	r7, [pc, r7]		@ tls_load_dot_plus_eight
	b	.L4616
.L4612:
	str	r9, [r0]
#APP
@ 819 "/root/lol//drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	ldr	r2, [r5, #12]
	mov	r0, r6
	ldr	r3, [r2, #4]
	ldr	r3, [r3]
	ands	r4, r3, #1
	bne	.L4617
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r8, #148]
	mov	r0, r6
	cmp	r3, #0
	bne	.L4623
	bl	_raw_spin_unlock_irq(PLT)
	bl	schedule(PLT)
.L4616:
	ldr	r3, [r7]
	ldr	r0, [r5, #12]
	cmp	r3, #0
	beq	.L4612
	bl	freezing_slow_path(PLT)
	cmp	r0, #0
	bne	.L4624
.L4622:
	ldr	r0, [r5, #12]
	b	.L4612
.L4617:
	mvn	r4, #3
.L4614:
	mov	r5, #0
	mov	r0, r6
	str	r5, [r2]
	bl	_raw_spin_lock_irq(PLT)
	str	r5, [r8, #148]
	mov	r0, r6
	bl	_raw_spin_unlock_irq(PLT)
#APP
@ 836 "/root/lol//drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4623:
	bl	_raw_spin_unlock_irq(PLT)
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r2, [r3, #12]
	b	.L4614
.L4624:
	mov	r0, #0
	bl	__refrigerator(PLT)
	b	.L4622
.L4626:
	.align	2
.L4625:
	.word	system_freezing_cnt(GOT_PREL)+(.-(.LPIC1116+8))
	.fnend
	.size	sleep_thread, .-sleep_thread
	.align	2
	.type	receive_file_work, %function
receive_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
#APP
@ 858 "/root/lol//drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	ldrd	r6, [r0, #32]
	ldr	r3, [r0, #16]
	ldrd	r4, [r0, #24]
	cmp	r6, #0
	str	r3, [sp, #4]
	sbcs	r3, r7, #0
	strd	r4, [sp, #8]
	blt	.L4628
	mov	r3, sp
	mov	r5, #0
	bic	r9, r3, #8128
	mov	r8, r0
	mov	r10, r5
	bic	r9, r9, #63
	b	.L4629
.L4666:
	ldr	r3, .L4668
	add	r1, r5, #42
	mov	lr, #0
	add	r1, r8, r1, asl #2
	mov	r2, #208
	eor	r5, r5, #1
	ldr	r4, [r1, #-200]
.LPIC1119:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	mov	r1, r4
	ldr	r3, [r3]
	str	r3, [r4, #4]
	ldr	r0, [r8, #-104]
	str	lr, [r8, #-24]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L4662
	cmp	fp, #0
	beq	.L4635
	add	r3, sp, #8
	ldr	r0, [sp, #4]
	ldr	r1, [r10]
	ldr	r2, [r10, #48]
	bl	vfs_write(PLT)
	ldr	r3, [r10, #48]
	cmp	r0, r3
	bne	.L4662
.L4635:
	cmp	r4, #0
	beq	.L4637
	ldr	r2, [r8, #-24]
	ldr	r3, [r8, #-96]
	cmp	r2, #0
	bne	.L4639
	cmp	r3, #2
	beq	.L4663
.L4639:
	cmp	r3, #3
	cmpne	r3, #0
	beq	.L4664
.L4642:
	ldr	r2, [r4, #4]
	mov	r1, #0
	cmp	r6, r2
	sbcs	r3, r7, r1
	bge	.L4644
	ldr	r0, [r4, #48]
	mov	r1, #0
	mov	r3, r6
	cmp	r0, r6
	sbcs	ip, r1, r7
	movlt	r3, r0
	str	r3, [r4, #48]
.L4646:
	subs	r6, r6, r3
	sbc	r7, r7, #0
.L4648:
	cmp	r2, r3
	movhi	r6, #0
	movhi	r7, #0
.L4637:
	mov	r10, r4
.L4629:
	cmp	r6, #1
	sbcs	r3, r7, #0
	movge	r4, #1
	movlt	r4, #0
	adds	fp, r10, #0
	movne	fp, #1
	orrs	r3, fp, r4
	beq	.L4665
	cmp	r4, #0
	bne	.L4666
	cmp	fp, #0
	beq	.L4653
	add	r3, sp, #8
	ldr	r0, [sp, #4]
	ldr	r1, [r10]
	ldr	r2, [r10, #48]
	bl	vfs_write(PLT)
	ldr	r3, [r10, #48]
	cmp	r0, r3
	beq	.L4637
.L4662:
	ldr	r3, [r8, #-96]
	cmp	r3, #0
	movne	r3, #4
	mvneq	r7, #4
	mvnne	r7, #4
	strne	r3, [r8, #-96]
.L4634:
	str	r7, [r8, #52]
#APP
@ 946 "/root/lol//drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
.L4627:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4644:
	mov	r1, #0
	mvn	r0, #0
	ldr	r3, [r4, #48]
	cmp	r7, r1
	cmpeq	r6, r0
	beq	.L4648
	b	.L4646
.L4653:
	mov	r4, fp
	b	.L4637
.L4663:
	ldr	r1, .L4668+4
	add	r3, sp, #32
	add	r10, sp, #20
	ldr	r0, [r9, #12]
	sub	fp, r8, #68
	str	r2, [sp, #20]
	str	r3, [sp, #32]
	str	r3, [sp, #36]
.LPIC1118:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	strd	r0, [sp, #24]
	b	.L4641
.L4667:
	bl	schedule(PLT)
.L4641:
	mov	r0, fp
	mov	r1, r10
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r3, [r8, #-24]
	cmp	r3, #0
	bne	.L4640
	ldr	r3, [r8, #-96]
	cmp	r3, #2
	bne	.L4640
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L4667
.L4640:
	mov	r0, fp
	mov	r1, r10
	bl	finish_wait(PLT)
	ldr	r3, [r8, #-96]
	cmp	r3, #3
	cmpne	r3, #0
	bne	.L4642
.L4664:
	ldr	r2, [r8, #-24]
	cmp	r3, #0
	mvneq	r7, #4
	mvnne	r7, #124
	cmp	r2, #0
	bne	.L4634
	ldr	r0, [r8, #-104]
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L4634
.L4665:
	mov	r7, r3
	b	.L4634
.L4628:
	mvn	r3, #21
	str	r3, [r0, #52]
	b	.L4627
.L4669:
	.align	2
.L4668:
	.word	mtp_rx_req_len(GOT_PREL)+(.-(.LPIC1119+8))
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1118+8))
	.fnend
	.size	receive_file_work, .-receive_file_work
	.align	2
	.type	ffs_function_cleanup, %function
ffs_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	ldr	r0, .L4672
	str	lr, [sp, #4]
.LPIC1120:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L4672+4
.LPIC1121:
	add	r0, pc, r0
	add	r0, r0, #536
	bl	unregister_filesystem(PLT)
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
.L4673:
	.align	2
.L4672:
	.word	.LC306-(.LPIC1120+8)
	.word	.LANCHOR0-(.LPIC1121+8)
	.fnend
	.size	ffs_function_cleanup, .-ffs_function_cleanup
	.align	2
	.type	ffs_ep0_complete, %function
ffs_ep0_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r1, #32]
	add	r0, r0, #32
	b	complete_all(PLT)
	.fnend
	.size	ffs_ep0_complete, .-ffs_ep0_complete
	.align	2
	.type	ffs_function_init, %function
ffs_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4683
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
.LPIC1126:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L4676
	movw	r1, #32976
	mov	r2, #12
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r4, #4]
	beq	.L4680
.L4679:
	ldr	r0, .L4683+4
.LPIC1123:
	add	r0, pc, r0
	add	r0, r0, #536
	bl	register_filesystem(PLT)
	subs	r4, r0, #0
	bne	.L4678
	ldr	r0, .L4683+8
.LPIC1124:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
.L4681:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4676:
	mov	r3, #16
	str	r3, [r4, #4]
	b	.L4679
.L4678:
	ldr	r0, .L4683+12
	mov	r1, r4
.LPIC1125:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	b	.L4681
.L4680:
	mvn	r0, #11
	b	.L4681
.L4684:
	.align	2
.L4683:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1126+8))
	.word	.LANCHOR0-(.LPIC1123+8)
	.word	.LC307-(.LPIC1124+8)
	.word	.LC308-(.LPIC1125+8)
	.fnend
	.size	ffs_function_init, .-ffs_function_init
	.align	2
	.type	rmnet_sdio_suspend, %function
rmnet_sdio_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #192]
	mov	r3, r0
	cmp	r2, #0
	bne	.L4687
	bx	lr
.L4687:
	ldr	ip, [r0, #332]
	add	r2, r3, #336
	mov	r0, #4
	ldr	r1, [r3, #200]
	bic	ip, ip, #2
	str	ip, [r3, #332]
	b	queue_work_on(PLT)
	.fnend
	.size	rmnet_sdio_suspend, .-rmnet_sdio_suspend
	.align	2
	.type	audio_disable, %function
audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldrb	r3, [r0, #152]	@ zero_extendqisi2
	cmp	r3, #0
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	strb	r3, [r4, #152]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	audio_disable, .-audio_disable
	.align	2
	.type	audio_pcm_hw_free, %function
audio_pcm_hw_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r2, [r0, #184]
	.pad #8
	sub	sp, sp, #8
	cmp	r2, #0
	beq	.L4696
	ldr	r0, [r0]
	ldr	r1, [r4, #192]
	ldr	r3, [r4, #188]
	ldr	r0, [r0]
	ldr	r0, [r0, #496]
	cmp	r0, #0
	beq	.L4697
	ldr	ip, [r0, #276]
	cmp	ip, #0
	beq	.L4697
.L4698:
	mov	lr, #0
	str	lr, [sp]
	ldr	ip, [ip, #4]
	blx	ip
.L4696:
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4, #184]
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4697:
	ldr	ip, .L4706
.LPIC1128:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	b	.L4698
.L4707:
	.align	2
.L4706:
	.word	arm_dma_ops(GOT_PREL)+(.-(.LPIC1128+8))
	.fnend
	.size	audio_pcm_hw_free, .-audio_pcm_hw_free
	.align	2
	.type	acm_complete_set_line_coding, %function
acm_complete_set_line_coding:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r1, #44]
	ldr	ip, [r0]
	cmp	r2, #0
	bne	.L4708
	ldr	r2, [r1, #48]
	cmp	r2, #7
	bne	.L4711
	ldr	r3, [r1]
	ldr	r1, [r3]	@ unaligned
	str	r1, [ip, #160]
	ldrh	r1, [r3, #4]	@ unaligned
	strh	r1, [ip, #164]	@ movhi
	ldrb	r3, [r3, #6]	@ zero_extendqisi2
	strb	r3, [ip, #166]
.L4708:
	bx	lr
.L4711:
	ldr	r3, [r0, #8]
	mov	r1, #1
	ldr	r3, [r3, #24]
	bx	r3
	.fnend
	.size	acm_complete_set_line_coding, .-acm_complete_set_line_coding
	.align	2
	.type	acc_hid_probe, %function
acc_hid_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	hid_open_report(PLT)
	subs	r4, r0, #0
	beq	.L4718
.L4713:
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4718:
	ldr	r3, [r5, #3548]
	mov	r0, r5
	ldr	r3, [r3]
	blx	r3
	cmp	r0, #0
	movne	r4, r0
	bne	.L4713
	mov	r0, r5
	mov	r1, #45
	bl	hid_connect(PLT)
	subs	r3, r0, #0
	beq	.L4713
	ldr	r2, [r5, #3548]
	mov	r4, r3
	mov	r0, r5
	ldr	r3, [r2, #4]
	blx	r3
	b	.L4713
	.fnend
	.size	acc_hid_probe, .-acc_hid_probe
	.align	2
	.type	ep_matches.part.12, %function
ep_matches.part.12:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	ldr	r6, .L4780
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	ip, [r2, #3]	@ zero_extendqisi2
	.pad #4
	sub	sp, sp, #4
.LPIC1130:
	add	r6, pc, r6
	ands	r4, ip, #3
	beq	.L4722
	ldr	r7, [r1, #4]
	ldrb	ip, [r7]	@ zero_extendqisi2
	cmp	ip, #101
	beq	.L4776
.L4722:
	mov	r0, #0
.L4769:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L4776:
	mov	r8, r3
	ldrb	r3, [r7, #2]	@ zero_extendqisi2
	mov	r5, r1
	mov	r9, r0
	mov	r10, r2
	cmp	r3, #45
	beq	.L4723
	mov	r0, r7
	mov	r1, #45
	bl	strrchr(PLT)
	subs	fp, r0, #0
	beq	.L4724
	cmp	r4, #2
	beq	.L4726
	cmp	r4, #3
	ldrb	r3, [fp, #2]	@ zero_extendqisi2
	bne	.L4770
	cmp	r3, #115
	beq	.L4722
	ldr	r0, .L4780+4
	ldr	r1, [r9, #28]
.LPIC1129:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L4728
	ldrb	r3, [fp, #1]	@ zero_extendqisi2
	cmp	r3, #105
	beq	.L4722
.L4728:
	ldr	r3, .L4780+8
	ldrb	r2, [fp, #-1]	@ zero_extendqisi2
	ldr	r3, [r6, r3]
	ldrb	r3, [r3, r2]	@ zero_extendqisi2
	tst	r3, #4
	beq	.L4741
	ldrh	r2, [r10, #4]	@ unaligned
	cmp	r2, #0
	bne	.L4777
	mov	r7, r2
	b	.L4739
.L4770:
	cmp	r3, #115
	bne	.L4722
.L4729:
	ldr	r3, .L4780+8
	ldrb	r2, [fp, #-1]	@ zero_extendqisi2
	ldr	r3, [r6, r3]
	ldrb	r3, [r3, r2]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L4723
.L4741:
	ldrsb	r3, [r10, #2]
	cmp	r3, #0
	blt	.L4778
	cmp	r2, #116
	bne	.L4722
.L4723:
	sub	r7, r4, #2
	clz	r7, r7
	mov	r7, r7, lsr #5
	cmp	r8, #0
	moveq	r3, #0
	andne	r3, r7, #1
	cmp	r3, #0
	beq	.L4731
	ldr	r3, [r9, #20]
	cmp	r3, #4
	bls	.L4731
	ldrb	r3, [r8, #3]	@ zero_extendqisi2
	ldrh	r2, [r5, #22]
	and	r3, r3, #31
	cmp	r3, r2
	bgt	.L4722
.L4731:
	ldrh	r2, [r10, #4]	@ unaligned
	cmp	r2, #0
	bne	.L4732
.L4739:
	ldrh	r2, [r5, #20]
	strh	r2, [r10, #4]	@ unaligned
.L4732:
	cmp	r4, #1
	ubfx	r3, r2, #0, #11
	beq	.L4734
	cmp	r4, #3
	bne	.L4733
.L4735:
	ldr	r0, [r9, #20]
	cmp	r3, #64
	movhi	r1, #1
	movls	r1, #0
	cmp	r0, #2
	movhi	r1, #0
	cmp	r1, #0
	bne	.L4722
.L4734:
	ldrh	r1, [r5, #20]
	cmp	r1, r3
	bcc	.L4722
	ldr	r4, [r9, #20]
	cmp	r4, #2
	movhi	r4, #0
	movls	r4, #1
	cmp	r3, #1024
	movcc	r3, #0
	andcs	r3, r4, #1
	cmp	r3, #0
	bne	.L4722
	tst	r2, #6144
	moveq	r4, #0
	andne	r4, r4, #1
	cmp	r4, #0
	bne	.L4722
.L4733:
	ldrb	r2, [r10, #2]	@ zero_extendqisi2
	ldr	r3, .L4780+8
	bic	r2, r2, #127
	uxtb	r2, r2
	strb	r2, [r10, #2]
	ldr	r0, [r5, #4]
	ldr	r1, [r6, r3]
	ldrb	r3, [r0, #2]	@ zero_extendqisi2
	ldrb	r3, [r1, r3]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L4779
	ldr	r1, .L4780+12
.LPIC1131:
	add	r1, pc, r1
	ldr	r3, [r1, #-640]
	add	r3, r3, #1
	cmp	r3, #15
	str	r3, [r1, #-640]
	bhi	.L4722
	orr	r3, r2, r3
	uxtb	r0, r3
	strb	r0, [r10, #2]
.L4737:
	cmp	r8, #0
	movne	r7, #0
	andeq	r7, r7, #1
	cmp	r7, #0
	beq	.L4738
	ldrh	r3, [r5, #20]
	cmp	r3, #64
	movge	r3, #64
	strh	r3, [r10, #4]	@ unaligned
.L4738:
	strb	r0, [r5, #25]
	mov	r0, #1
	b	.L4769
.L4726:
	ldrb	r3, [fp, #1]	@ zero_extendqisi2
	cmp	r3, #98
	bne	.L4722
	b	.L4729
.L4724:
	mov	r0, r7
	bl	strlen(PLT)
	add	fp, r7, r0
	b	.L4729
.L4779:
	add	r0, r0, #2
	mov	r1, #0
	mov	r2, #10
	bl	simple_strtoul(PLT)
	ldrb	r3, [r10, #2]	@ zero_extendqisi2
	orr	r0, r0, r3
	uxtb	r0, r0
	strb	r0, [r10, #2]
	b	.L4737
.L4778:
	cmp	r2, #110
	bne	.L4722
	b	.L4723
.L4777:
	ubfx	r3, r2, #0, #11
	mov	r7, #0
	b	.L4735
.L4781:
	.align	2
.L4780:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC1130+8)
	.word	.LC309-(.LPIC1129+8)
	.word	_ctype(GOT)
	.word	.LANCHOR4-(.LPIC1131+8)
	.fnend
	.size	ep_matches.part.12, .-ep_matches.part.12
	.align	2
	.type	rmnet_ctrl_open, %function
rmnet_ctrl_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L4787
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC1133:
	add	r4, pc, r4
	ldr	r3, [r4, #-672]
	add	r2, r3, #16
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r0, r5, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r5, #1
	beq	.L4783
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L4785:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4783:
	ldr	r0, [r4, #-672]
	str	r0, [r1, #124]
	add	r0, r0, #52
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	ldr	r0, [r4, #-672]
	strb	r5, [r0, #4]
	add	r0, r0, #52
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L4785
.L4788:
	.align	2
.L4787:
	.word	.LANCHOR4-(.LPIC1133+8)
	.fnend
	.size	rmnet_ctrl_open, .-rmnet_ctrl_open
	.align	2
	.type	ghsic_data_unthrottle_tx, %function
ghsic_data_unthrottle_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxeq	lr
	ldr	r3, [r0, #4]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #80
	mov	r4, r0
	mov	r0, r5
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #208]
	mov	r1, r0
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #208]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	add	r2, r4, #120
	mov	r0, #4
	ldr	r1, [r4, #84]
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_work_on(PLT)
	.fnend
	.size	ghsic_data_unthrottle_tx, .-ghsic_data_unthrottle_tx
	.align	2
	.type	ffs_epfile_open, %function
ffs_epfile_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, [r0, #328]
	ldr	r3, [r2, #36]
	ldr	r3, [r3, #92]
	cmp	r3, #2
	bne	.L4804
	str	r2, [r1, #124]
	ldr	r3, [r2, #36]
	add	r1, r3, #84
#APP
@ 45 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	add	r1, r3, #88
#APP
@ 45 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r0, [r1]
	add	r0, r0, #1
	strex	ip, r0, [r1]
	teq	ip, #0
	bne	1b
@ 0 "" 2
	mov	r3, #0
	mov	r0, r3
	str	r3, [r2, #32]
	bx	lr
.L4804:
	ldr	r0, .L4805
	.save {r4, lr}
	str	r4, [sp, #-8]!
	movw	r1, #947
	str	lr, [sp, #4]
.LPIC1136:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L4806:
	.align	2
.L4805:
	.word	.LC185-(.LPIC1136+8)
	.fnend
	.size	ffs_epfile_open, .-ffs_epfile_open
	.align	2
	.type	audio_pcm_mmap, %function
audio_pcm_mmap:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r2, [r0, #212]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r2, #544]
	cmp	r3, #0
	beq	.L4808
	ldr	lr, [r2, #548]
	cmp	lr, #0
	beq	.L4808
	ldr	r0, [r0]
	ldr	r2, [r2, #540]
	ldr	r0, [r0]
	ldr	r0, [r0, #496]
	cmp	r0, #0
	beq	.L4809
	ldr	ip, [r0, #276]
	cmp	ip, #0
	beq	.L4809
.L4810:
	mov	r4, #0
	str	lr, [sp]
	str	r4, [sp, #4]
	ldr	ip, [ip, #8]
	blx	ip
.L4811:
	add	sp, sp, #8
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4809:
	ldr	ip, .L4822
.LPIC1139:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	b	.L4810
.L4808:
	ldr	r0, .L4822+4
.LPIC1138:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #21
	b	.L4811
.L4823:
	.align	2
.L4822:
	.word	arm_dma_ops(GOT_PREL)+(.-(.LPIC1139+8))
	.word	.LC310-(.LPIC1138+8)
	.fnend
	.size	audio_pcm_mmap, .-audio_pcm_mmap
	.align	2
	.global	gsdio_read_complete
	.type	gsdio_read_complete, %function
gsdio_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L4827
	add	r6, r4, #4
	mov	r5, r1
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	ldr	r1, [r4, #24]
	add	r0, r5, #36
	add	r2, r4, #20
	bl	__list_add(PLT)
	ldr	r3, [r4, #48]
	add	r2, r4, #28
	mov	r0, #4
	ldr	r1, .L4828
	add	r3, r3, #1
.LPIC1142:
	add	r1, pc, r1
	ldr	r1, [r1, #2592]
	str	r3, [r4, #48]
	bl	queue_work_on(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	mov	r1, r7
	ldr	r8, [sp, #16]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L4827:
	ldr	r1, .L4828+4
	ldr	r0, .L4828+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC1141:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	add	r1, r1, #1776
	ldr	lr, [sp, #20]
.LPIC1140:
	add	r0, pc, r0
	add	r1, r1, #8
	add	sp, sp, #24
	b	printk(PLT)
.L4829:
	.align	2
.L4828:
	.word	.LANCHOR1-(.LPIC1142+8)
	.word	.LANCHOR3-(.LPIC1141+8)
	.word	.LC21-(.LPIC1140+8)
	.fnend
	.size	gsdio_read_complete, .-gsdio_read_complete
	.align	2
	.global	gsdio_ctrl_wq
	.type	gsdio_ctrl_wq, %function
gsdio_ctrl_wq:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #80
	beq	.L4832
	bx	lr
.L4832:
	ldr	r1, .L4833
	ldr	r0, .L4833+4
.LPIC1144:
	add	r1, pc, r1
	add	r1, r1, #1792
.LPIC1143:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L4834:
	.align	2
.L4833:
	.word	.LANCHOR3-(.LPIC1144+8)
	.word	.LC21-(.LPIC1143+8)
	.fnend
	.size	gsdio_ctrl_wq, .-gsdio_ctrl_wq
	.align	2
	.type	rmnet_ctrl_poll, %function
rmnet_ctrl_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	cmp	r4, #0
	beq	.L4848
	cmp	r1, #0
	beq	.L4838
	ldr	r3, [r1]
	cmp	r3, #0
	beq	.L4838
	mov	r2, r1
	add	r1, r4, #32
	blx	r3
.L4838:
	add	r5, r4, #52
	add	r4, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4]
	mov	r1, r0
	mov	r0, r5
	cmp	r3, r4
	movne	r4, #65
	moveq	r4, #0
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
.L4837:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4848:
	ldr	r1, .L4849
	ldr	r0, .L4849+4
.LPIC1146:
	add	r1, pc, r1
	add	r1, r1, #1808
.LPIC1145:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mov	r0, #8
	b	.L4837
.L4850:
	.align	2
.L4849:
	.word	.LANCHOR3-(.LPIC1146+8)
	.word	.LC311-(.LPIC1145+8)
	.fnend
	.size	rmnet_ctrl_poll, .-rmnet_ctrl_poll
	.align	2
	.type	ghsic_send_cbits_tomodem, %function
ghsic_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L4857
.LPIC1147:
	add	r3, pc, r3
	ldr	ip, [r3, #1212]
	cmp	r0, #0
	cmpne	r1, ip
	bcs	.L4855
	mov	r0, #104
	mla	r1, r0, r1, r3
	ldr	r3, [r1, #1216]
	cmp	r3, #0
	beq	.L4856
	ldr	r1, [r3, #88]
	cmp	r2, r1
	ldrne	r1, [r3, #84]
	strne	r2, [r3, #88]
	bx	lr
.L4855:
	ldr	r3, .L4857+4
	mov	r2, r1
	ldr	r0, .L4857+8
.LPIC1149:
	add	r3, pc, r3
	add	r1, r3, #1824
.LPIC1148:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L4856:
	ldr	r1, .L4857+12
	ldr	r0, .L4857+16
.LPIC1152:
	add	r1, pc, r1
	add	r1, r1, #1824
.LPIC1151:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L4858:
	.align	2
.L4857:
	.word	.LANCHOR1-(.LPIC1147+8)
	.word	.LANCHOR3-(.LPIC1149+8)
	.word	.LC25-(.LPIC1148+8)
	.word	.LANCHOR3-(.LPIC1152+8)
	.word	.LC21-(.LPIC1151+8)
	.fnend
	.size	ghsic_send_cbits_tomodem, .-ghsic_send_cbits_tomodem
	.align	2
	.type	ghsuart_send_cbits_tomodem, %function
ghsuart_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L4865
.LPIC1153:
	add	r3, pc, r3
	ldr	ip, [r3, #2052]
	cmp	r0, #0
	cmpne	r1, ip
	bcs	.L4863
	mov	r0, #84
	mla	r1, r0, r1, r3
	ldr	r3, [r1, #2056]
	cmp	r3, #0
	beq	.L4864
	ldr	r1, [r3, #92]
	cmp	r2, r1
	ldrne	r1, [r3, #88]
	strne	r2, [r3, #92]
	bx	lr
.L4863:
	ldr	r3, .L4865+4
	mov	r2, r1
	ldr	r0, .L4865+8
.LPIC1155:
	add	r3, pc, r3
	add	r1, r3, #1856
.LPIC1154:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L4864:
	ldr	r1, .L4865+12
	ldr	r0, .L4865+16
.LPIC1158:
	add	r1, pc, r1
	add	r1, r1, #1856
.LPIC1157:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L4866:
	.align	2
.L4865:
	.word	.LANCHOR1-(.LPIC1153+8)
	.word	.LANCHOR3-(.LPIC1155+8)
	.word	.LC25-(.LPIC1154+8)
	.word	.LANCHOR3-(.LPIC1158+8)
	.word	.LC21-(.LPIC1157+8)
	.fnend
	.size	ghsuart_send_cbits_tomodem, .-ghsuart_send_cbits_tomodem
	.align	2
	.type	bam_data_wake_cb, %function
bam_data_wake_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	cmp	r3, #0
	beq	.L4874
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L4875
	ldr	r0, [r3]
	cmp	r0, #0
	beq	.L4876
	ldr	r3, [r0]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L4872
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	bx	r3
.L4872:
	mvn	r0, #94
.L4869:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4876:
	ldr	r1, .L4877
	ldr	r0, .L4877+4
.LPIC1164:
	add	r1, pc, r1
	add	r1, r1, #1888
.LPIC1163:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L4869
.L4875:
	ldr	r1, .L4877+8
	ldr	r0, .L4877+12
.LPIC1162:
	add	r1, pc, r1
	add	r1, r1, #1888
.LPIC1161:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L4869
.L4874:
	ldr	r1, .L4877+16
	ldr	r0, .L4877+20
.LPIC1160:
	add	r1, pc, r1
	add	r1, r1, #1888
.LPIC1159:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L4869
.L4878:
	.align	2
.L4877:
	.word	.LANCHOR3-(.LPIC1164+8)
	.word	.LC314-(.LPIC1163+8)
	.word	.LANCHOR3-(.LPIC1162+8)
	.word	.LC313-(.LPIC1161+8)
	.word	.LANCHOR3-(.LPIC1160+8)
	.word	.LC312-(.LPIC1159+8)
	.fnend
	.size	bam_data_wake_cb, .-bam_data_wake_cb
	.align	2
	.type	mtp_open, %function
mtp_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L4886
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
.LPIC1165:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r1, .L4886+4
.LPIC1166:
	add	r1, pc, r1
	ldr	r3, [r1, #2504]
	add	r2, r3, #108
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r0, [r2]
	add	r0, r0, #1
	strex	ip, r0, [r2]
	teq	ip, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r0, #1
	beq	.L4880
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #15
	ldr	pc, [sp], #4
.L4880:
	ldr	r3, [r1, #2504]
	ldr	r2, [r3, #104]
	cmp	r2, #0
	strne	r0, [r3, #104]
	mov	r0, #0
	str	r3, [r4, #124]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L4887:
	.align	2
.L4886:
	.word	.LC315-(.LPIC1165+8)
	.word	.LANCHOR1-(.LPIC1166+8)
	.fnend
	.size	mtp_open, .-mtp_open
	.align	2
	.type	frmnet_connect, %function
frmnet_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	beq	.L4890
	mov	r3, #1
	str	r3, [r0, #124]
	bx	lr
.L4890:
	ldr	r1, .L4891
	mov	r2, r0
	ldr	r0, .L4891+4
.LPIC1169:
	add	r1, pc, r1
	add	r1, r1, #1904
.LPIC1168:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L4892:
	.align	2
.L4891:
	.word	.LANCHOR3-(.LPIC1169+8)
	.word	.LC316-(.LPIC1168+8)
	.fnend
	.size	frmnet_connect, .-frmnet_connect
	.align	2
	.type	frmnet_disconnect, %function
frmnet_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L4912
	ldr	r3, [r0, #120]
	mov	r2, #0
	str	r2, [r0, #124]
	cmp	r3, r2
	bxeq	lr
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r0, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, r2
	beq	.L4897
	blx	r3
.L4897:
	ldr	r3, [r5, #140]
	mov	r1, #0
	mvn	r0, #94
	mov	r2, #32
	ldr	r3, [r3]
	strb	r0, [r3]
	strb	r1, [r3, #1]
	strb	r1, [r3, #2]
	strb	r1, [r3, #3]
	ldrh	r0, [r5, #112]
	strb	r1, [r3, #6]
	strb	r1, [r3, #7]
	strh	r0, [r3, #4]	@ unaligned
	ldrd	r0, [r5, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L4913
.L4898:
	add	r8, r5, #132
	add	r7, r5, #144
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #144]
	mov	r9, r0
	cmp	r4, r7
	beq	.L4902
.L4901:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del(PLT)
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r6
	bl	kfree(PLT)
	ldr	r4, [r5, #144]
	cmp	r4, r7
	bne	.L4901
.L4902:
	mov	r3, #0
	mov	r0, r8
	mov	r1, r9
	str	r3, [r5, #152]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L4913:
	ldr	r3, [r5, #120]
	cmp	r3, #0
	bne	.L4914
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L4912:
	ldr	r1, .L4915
	mov	r2, r0
	ldr	r0, .L4915+4
.LPIC1171:
	add	r1, pc, r1
	add	r1, r1, #1920
.LPIC1170:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L4914:
	ldr	r1, .L4915+8
	mov	r2, r0
	ldr	r0, .L4915+12
.LPIC1173:
	add	r1, pc, r1
	add	r1, r1, #1920
.LPIC1172:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L4898
.L4916:
	.align	2
.L4915:
	.word	.LANCHOR3-(.LPIC1171+8)
	.word	.LC316-(.LPIC1170+8)
	.word	.LANCHOR3-(.LPIC1173+8)
	.word	.LC317-(.LPIC1172+8)
	.fnend
	.size	frmnet_disconnect, .-frmnet_disconnect
	.align	2
	.type	frmnet_cmd_complete, %function
frmnet_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #32]
	mov	r2, r1
	cmp	r3, #0
	beq	.L4921
	ldr	ip, [r3, #96]
	cmp	ip, #0
	bxeq	lr
	.save {lr}
	str	lr, [sp, #-4]!
	ldrb	lr, [r3, #116]	@ zero_extendqisi2
	ldr	r3, .L4922
	ldr	r1, [r1]
	ldr	r2, [r2, #48]
	mov	r0, lr, asl #5
.LPIC1176:
	add	r3, pc, r3
	sub	r0, r0, lr, asl #3
	ldr	lr, [sp], #4
	add	r3, r3, r0
	ldrb	r0, [r3, #2520]	@ zero_extendqisi2
	bx	ip
.L4921:
	ldr	r1, .L4922+4
	ldr	r0, .L4922+8
.LPIC1175:
	add	r1, pc, r1
	add	r1, r1, #1936
.LPIC1174:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L4923:
	.align	2
.L4922:
	.word	.LANCHOR1-(.LPIC1176+8)
	.word	.LANCHOR3-(.LPIC1175+8)
	.word	.LC318-(.LPIC1174+8)
	.fnend
	.size	frmnet_cmd_complete, .-frmnet_cmd_complete
	.align	2
	.type	mbim_open, %function
mbim_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L4935
	ldr	r5, .L4935+4
	str	r6, [sp, #8]
	mov	r6, r1
	ldr	r0, .L4935+8
	str	lr, [sp, #12]
.LPIC1178:
	add	r4, pc, r4
	add	r4, r4, #1968
.LPIC1179:
	add	r5, pc, r5
.LPIC1177:
	add	r0, pc, r0
	mov	r1, r4
	bl	printk(PLT)
	ldr	r3, [r5, #2580]
	cmp	r3, #0
	beq	.L4933
	add	r2, r3, #92
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r1, #1
	beq	.L4927
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldr	r0, .L4935+12
	mov	r1, r4
.LPIC1182:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #15
.L4930:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4927:
	ldr	r0, .L4935+16
	mov	r1, r4
.LPIC1189:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [r5, #2580]
	ldr	r2, [r3, #88]
	cmp	r2, #0
	beq	.L4934
.L4929:
	ldr	r1, .L4935+20
	mov	r4, #0
	str	r3, [r6, #124]
	ldr	r0, .L4935+24
	str	r4, [r3, #232]
.LPIC1188:
	add	r1, pc, r1
.LPIC1187:
	add	r0, pc, r0
	add	r1, r1, #1968
	bl	printk(PLT)
	mov	r0, r4
	b	.L4930
.L4933:
	ldr	r0, .L4935+28
	mov	r1, r4
.LPIC1180:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #18
	b	.L4930
.L4934:
	ldr	r0, .L4935+32
	mov	r1, r4
.LPIC1184:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [r5, #2580]
	b	.L4929
.L4936:
	.align	2
.L4935:
	.word	.LANCHOR3-(.LPIC1178+8)
	.word	.LANCHOR1-(.LPIC1179+8)
	.word	.LC319-(.LPIC1177+8)
	.word	.LC63-(.LPIC1182+8)
	.word	.LC323-(.LPIC1189+8)
	.word	.LANCHOR3-(.LPIC1188+8)
	.word	.LC322-(.LPIC1187+8)
	.word	.LC320-(.LPIC1180+8)
	.word	.LC321-(.LPIC1184+8)
	.fnend
	.size	mbim_open, .-mbim_open
	.align	2
	.type	conn_gadget_in_max_packet_size_show, %function
conn_gadget_in_max_packet_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4946
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC1192:
	add	r3, pc, r3
	ldr	r3, [r3, #2492]
	cmp	r3, #0
	beq	.L4938
	ldr	r3, [r3, #92]
	cmp	r3, #0
	beq	.L4938
	ldr	r1, .L4946+4
	mov	r0, r2
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrh	r2, [r3, #20]
.LPIC1195:
	add	r1, pc, r1
	b	sprintf(PLT)
.L4938:
	ldr	r1, .L4946+8
	ldr	r0, .L4946+12
.LPIC1194:
	add	r1, pc, r1
	add	r1, r1, #1968
.LPIC1193:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L4947:
	.align	2
.L4946:
	.word	.LANCHOR1-(.LPIC1192+8)
	.word	.LC76-(.LPIC1195+8)
	.word	.LANCHOR3-(.LPIC1194+8)
	.word	.LC254-(.LPIC1193+8)
	.fnend
	.size	conn_gadget_in_max_packet_size_show, .-conn_gadget_in_max_packet_size_show
	.align	2
	.type	conn_gadget_out_max_packet_size_show, %function
conn_gadget_out_max_packet_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4957
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC1196:
	add	r3, pc, r3
	ldr	r3, [r3, #2492]
	cmp	r3, #0
	beq	.L4949
	ldr	r3, [r3, #96]
	cmp	r3, #0
	beq	.L4949
	ldr	r1, .L4957+4
	mov	r0, r2
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	ldrh	r2, [r3, #20]
.LPIC1199:
	add	r1, pc, r1
	b	sprintf(PLT)
.L4949:
	ldr	r1, .L4957+8
	ldr	r0, .L4957+12
.LPIC1198:
	add	r1, pc, r1
.LPIC1197:
	add	r0, pc, r0
	add	r1, r1, #2016
	bl	printk(PLT)
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L4958:
	.align	2
.L4957:
	.word	.LANCHOR1-(.LPIC1196+8)
	.word	.LC76-(.LPIC1199+8)
	.word	.LANCHOR3-(.LPIC1198+8)
	.word	.LC254-(.LPIC1197+8)
	.fnend
	.size	conn_gadget_out_max_packet_size_show, .-conn_gadget_out_max_packet_size_show
	.align	2
	.type	conn_gadget_usb_buffer_size_show, %function
conn_gadget_usb_buffer_size_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L4965
.LPIC1200:
	add	r3, pc, r3
	ldr	r3, [r3, #2492]
	cmp	r3, #0
	beq	.L4963
	ldr	r3, [r3, #192]
	mov	r0, r2
	ldr	r1, .L4965+4
	add	r2, r3, #1020
	cmp	r3, #0
	add	r2, r2, #3
	movge	r2, r3
.LPIC1203:
	add	r1, pc, r1
	mov	r2, r2, asr #10
	b	sprintf(PLT)
.L4963:
	ldr	r1, .L4965+8
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L4965+12
	str	lr, [sp, #4]
.LPIC1202:
	add	r1, pc, r1
	add	r1, r1, #2048
.LPIC1201:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #18
	ldr	pc, [sp], #4
.L4966:
	.align	2
.L4965:
	.word	.LANCHOR1-(.LPIC1200+8)
	.word	.LC76-(.LPIC1203+8)
	.word	.LANCHOR3-(.LPIC1202+8)
	.word	.LC254-(.LPIC1201+8)
	.fnend
	.size	conn_gadget_usb_buffer_size_show, .-conn_gadget_usb_buffer_size_show
	.align	2
	.type	bcdUSB_show, %function
bcdUSB_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r2
	str	lr, [sp, #4]
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #8]
	cmp	r3, #0
	beq	.L4968
	ldr	r1, .L4970
	mov	r0, r4
	ldr	lr, [sp, #4]
	ldr	r4, [sp]
	add	sp, sp, #8
	ldrh	r2, [r3, #19]	@ unaligned
.LPIC1204:
	add	r1, pc, r1
	b	sprintf(PLT)
.L4968:
	ldr	r3, .L4970+4
	mov	r0, r4
	ldr	r1, .L4970+8
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC1206:
	add	r3, pc, r3
	add	r3, r3, #392
.LPIC1205:
	add	r1, pc, r1
	ldrh	r2, [r3, #2]
	b	sprintf(PLT)
.L4971:
	.align	2
.L4970:
	.word	.LC196-(.LPIC1204+8)
	.word	.LANCHOR2-(.LPIC1206+8)
	.word	.LC196-(.LPIC1205+8)
	.fnend
	.size	bcdUSB_show, .-bcdUSB_show
	.align	2
	.type	terminal_version_show, %function
terminal_version_show:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r2
	ldr	r4, .L4979
	ldr	r2, .L4979+4
	str	r6, [sp, #8]
	mov	r0, r5
	str	lr, [sp, #12]
	ldr	r1, .L4979+8
	.pad #8
	sub	sp, sp, #8
.LPIC1212:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
.LPIC1211:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
.LPIC1208:
	add	r1, pc, r1
	ldrh	r3, [r4]
	ldrh	ip, [r2]
	uxtb	r2, r3
	mov	r3, r3, lsr #8
	str	ip, [sp]
	bl	sprintf(PLT)
	ldrh	r3, [r4]
	mov	r6, r0
	cmp	r3, #0
	bne	.L4978
.L4973:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L4978:
	ldr	r1, .L4979+12
	mov	r2, r5
	ldr	r0, .L4979+16
.LPIC1210:
	add	r1, pc, r1
	add	r1, r1, #2080
.LPIC1209:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L4973
.L4980:
	.align	2
.L4979:
	.word	terminal_mode_version(GOT_PREL)+(.-(.LPIC1212+8))
	.word	terminal_mode_vendor_id(GOT_PREL)+(.-(.LPIC1211+8))
	.word	.LC324-(.LPIC1208+8)
	.word	.LANCHOR3-(.LPIC1210+8)
	.word	.LC325-(.LPIC1209+8)
	.fnend
	.size	terminal_version_show, .-terminal_version_show
	.align	2
	.type	ghsic_ctrl_connect_w, %function
ghsic_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #16
	beq	.L4981
	ldr	r3, [r0, #68]
	tst	r3, #2
	bne	.L4989
.L4981:
	bx	lr
.L4989:
	ldr	r1, .L4990
	mvn	r2, #18
	ldr	r0, .L4990+4
.LPIC1214:
	add	r1, pc, r1
	add	r1, r1, #2112
.LPIC1213:
	add	r0, pc, r0
	add	r1, r1, #4
	b	printk(PLT)
.L4991:
	.align	2
.L4990:
	.word	.LANCHOR3-(.LPIC1214+8)
	.word	.LC326-(.LPIC1213+8)
	.fnend
	.size	ghsic_ctrl_connect_w, .-ghsic_ctrl_connect_w
	.section	.init.text
	.align	2
	.type	gether_init, %function
gether_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L4996
	mov	r1, #10
	mov	r2, #1
	ldr	r0, .L4996+4
	movt	r1, 2
	stmfd	sp!, {r4, lr}
	.save {r4, lr}
	mov	r4, #0
	.pad #8
	sub	sp, sp, #8
	mov	r3, r4
.LPIC1216:
	add	ip, pc, ip
.LPIC1215:
	add	r0, pc, r0
	str	r4, [sp]
	str	ip, [sp, #4]
	bl	__alloc_workqueue_key(PLT)
	ldr	r3, .L4996+8
	cmp	r0, r4
.LPIC1217:
	add	r3, pc, r3
	str	r0, [r3, #-1492]
	movne	r0, r4
	bne	.L4993
	ldr	r1, .L4996+12
	ldr	r0, .L4996+16
.LPIC1219:
	add	r1, pc, r1
	add	r1, r1, #2128
.LPIC1218:
	add	r0, pc, r0
	add	r1, r1, #12
	mov	r2, r1
	bl	printk(PLT)
	mvn	r0, #11
.L4993:
	add	sp, sp, #8
	@ sp needed
	ldmfd	sp!, {r4, pc}
.L4997:
	.align	2
.L4996:
	.word	.LC327-(.LPIC1216+8)
	.word	.LC195-(.LPIC1215+8)
	.word	.LANCHOR4-(.LPIC1217+8)
	.word	.LANCHOR3-(.LPIC1219+8)
	.word	.LC328-(.LPIC1218+8)
	.fnend
	.size	gether_init, .-gether_init
	.text
	.align	2
	.type	gsmd_ctrl_send_cbits_tomodem, %function
gsmd_ctrl_send_cbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #5
	bhi	.L4999
	ldr	r3, .L5019
	mov	ip, #84
.LPIC1221:
	add	r3, pc, r3
	mla	r3, ip, r1, r3
	ldr	ip, [r3, #708]
	cmp	ip, #0
	beq	.L4999
	cmp	r0, #0
	beq	.L5017
	ands	r3, r2, #1
	moveq	r2, #2
	moveq	r1, r3
	beq	.L5001
	mov	r1, #2
	mov	r2, #0
	mov	r3, r1
.L5001:
	ldr	r0, [ip, #88]
	cmp	r0, r3
	beq	.L4998
	ldr	r0, [ip, #8]
	str	r3, [ip, #88]
	tst	r0, #1
	bne	.L5018
.L4998:
	bx	lr
.L4999:
	ldr	r3, .L5019+4
	mov	r2, r1
	ldr	r0, .L5019+8
.LPIC1225:
	add	r3, pc, r3
	add	r1, r3, #2144
.LPIC1224:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L5018:
	ldr	r0, [ip]
	b	smd_tiocmset(PLT)
.L5017:
	ldr	r1, .L5019+12
	ldr	r0, .L5019+16
.LPIC1223:
	add	r1, pc, r1
	add	r1, r1, #2144
.LPIC1222:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L5020:
	.align	2
.L5019:
	.word	.LANCHOR1-(.LPIC1221+8)
	.word	.LANCHOR3-(.LPIC1225+8)
	.word	.LC25-(.LPIC1224+8)
	.word	.LANCHOR3-(.LPIC1223+8)
	.word	.LC329-(.LPIC1222+8)
	.fnend
	.size	gsmd_ctrl_send_cbits_tomodem, .-gsmd_ctrl_send_cbits_tomodem
	.section	.init.text
	.align	2
	.type	init, %function
init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L5027
	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, #0
	ldr	r3, .L5027+4
	ldr	r6, .L5027+8
	ldr	r4, .L5027+12
.LPIC1234:
	add	r2, pc, r2
	ldr	lr, .L5027+16
	add	r7, r2, #16
	ldr	ip, .L5027+20
.LPIC1226:
	add	r3, pc, r3
	ldr	r1, .L5027+24
.LPIC1227:
	add	r6, pc, r6
	add	r0, r3, #32
.LPIC1229:
	add	r4, pc, r4
	str	r7, [r2, #16]
.LPIC1231:
	add	lr, pc, lr
	str	r7, [r2, #20]
.LPIC1233:
	add	ip, pc, ip
	str	r4, [r3, #588]
.LPIC1238:
	add	r1, pc, r1
	str	r6, [r3, #584]
	str	lr, [r3, #592]
	str	ip, [r3, #596]
	str	r5, [r1, #-636]
	bl	platform_driver_register(PLT)
	subs	r4, r0, #0
	beq	.L5022
	ldr	r1, .L5027+28
	ldr	r0, .L5027+32
.LPIC1241:
	add	r1, pc, r1
	add	r1, r1, #2176
.LPIC1240:
	add	r0, pc, r0
	add	r1, r1, #8
	mov	r2, r1
	bl	printk(PLT)
.L5022:
	mov	r0, r4
	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
.L5028:
	.align	2
.L5027:
	.word	.LANCHOR1-(.LPIC1234+8)
	.word	.LANCHOR0-(.LPIC1226+8)
	.word	android_setup-(.LPIC1227+8)
	.word	android_disconnect-(.LPIC1229+8)
	.word	android_suspend-(.LPIC1231+8)
	.word	android_resume-(.LPIC1233+8)
	.word	.LANCHOR4-(.LPIC1238+8)
	.word	.LANCHOR3-(.LPIC1241+8)
	.word	.LC330-(.LPIC1240+8)
	.fnend
	.size	init, .-init
	.text
	.align	2
	.type	conn_gadget_flush, %function
conn_gadget_flush:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5034
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L5034+4
	str	lr, [sp, #4]
.LPIC1243:
	add	r3, pc, r3
	ldr	r4, [r3, #2492]
.LPIC1244:
	add	r0, pc, r0
	bl	printk(PLT)
	cmp	r4, #0
	beq	.L5033
	mov	r3, #1
	add	r0, r4, #200
	mov	r2, r3
	mov	r1, #3
	str	r3, [r4, #216]
	mov	r3, #0
	bl	__wake_up(PLT)
	mov	r0, #0
.L5031:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5033:
	ldr	r1, .L5034+8
	ldr	r0, .L5034+12
.LPIC1246:
	add	r1, pc, r1
.LPIC1245:
	add	r0, pc, r0
	add	r1, r1, #2192
	bl	printk(PLT)
	mvn	r0, #18
	b	.L5031
.L5035:
	.align	2
.L5034:
	.word	.LANCHOR1-(.LPIC1243+8)
	.word	.LC331-(.LPIC1244+8)
	.word	.LANCHOR3-(.LPIC1246+8)
	.word	.LC332-(.LPIC1245+8)
	.fnend
	.size	conn_gadget_flush, .-conn_gadget_flush
	.align	2
	.type	ghsuart_ctrl_disconnect_w, %function
ghsuart_ctrl_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #36]
	mov	r3, r0
	tst	r2, #1
	bne	.L5038
	bx	lr
.L5038:
	mov	r2, #0
	add	r1, r0, #36
	mov	r0, #2
	str	r2, [r3, #-36]
	b	_clear_bit(PLT)
	.fnend
	.size	ghsuart_ctrl_disconnect_w, .-ghsuart_ctrl_disconnect_w
	.align	2
	.type	ghsuart_data_disconnect_w, %function
ghsuart_data_disconnect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #60]
	mov	r3, r0
	tst	r2, #1
	bne	.L5041
	bx	lr
.L5041:
	mov	r2, #0
	add	r1, r0, #60
	mov	r0, #2
	str	r2, [r3, #-100]
	b	_clear_bit(PLT)
	.fnend
	.size	ghsuart_data_disconnect_w, .-ghsuart_data_disconnect_w
	.align	2
	.type	ghsuart_data_write_tohost, %function
ghsuart_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #160
	bxeq	lr
	ldr	r3, [r0, #-156]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #88
	strd	r8, [sp, #16]
	mov	r0, r7
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r9, [r4, #-152]
	mov	r8, r0
	cmp	r9, #0
	beq	.L5045
	ldr	r3, [r4, #-112]
	sub	r2, r4, #112
	str	r2, [sp, #8]
	cmp	r2, r3
	beq	.L5045
	ldr	r5, [r4, #-104]
	sub	r3, r4, #104
	str	r3, [sp, #12]
	cmp	r3, r5
	cmpne	r5, #0
	beq	.L5045
	ldr	fp, .L5061
	mov	r10, #0
.LPIC1250:
	ldr	fp, [pc, fp]		@ tls_load_dot_plus_eight
.L5047:
	ldr	r2, [r4, #-96]
	sub	r2, r2, #1
	str	r2, [r4, #-96]
	ldmia	r5, {r1, r2}
	str	r10, [r5]
	str	r10, [r5, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	ldr	r6, [r4, #-112]
	str	r5, [r6, #-4]
	ldr	r1, [r5, #172]
	sub	r2, r6, #36
	str	r1, [r6, #-36]
	ldr	r1, [r5, #80]
	str	r1, [r6, #-32]
	ldr	r1, [r4, #32]
	ldr	r0, [fp]
	add	r1, r1, #1
	cmp	r1, r0
	mov	r0, r6
	str	r1, [r4, #32]
	ldrb	r1, [r6, #-10]	@ zero_extendqisi2
	bfceq	r1, #0, #1
	orrne	r1, r1, #1
	streqb	r1, [r6, #-10]
	strneb	r1, [r6, #-10]
	streq	r10, [r4, #32]
	str	r2, [sp, #4]
	bl	list_del(PLT)
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r2, [sp, #4]
	mov	r0, r9
	ldr	lr, [r9, #8]
	mov	r1, r2
	mov	r2, #208
	ldr	r8, [lr, #16]
	blx	r8
	str	r0, [sp, #4]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [sp, #4]
	mov	r8, r0
	cmp	r2, #0
	bne	.L5060
	ldr	r2, [r4, #48]
	ldr	r1, [r4, #-112]
	ldr	r3, [sp, #8]
	add	r2, r2, #1
	cmp	r1, r3
	str	r2, [r4, #48]
	beq	.L5045
	ldr	r5, [r4, #-104]
	ldr	r3, [sp, #12]
	cmp	r5, r3
	cmpne	r5, #0
	bne	.L5047
.L5045:
	mov	r0, r7
	mov	r1, r8
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L5060:
	ldr	r1, .L5061+4
	ldr	r0, .L5061+8
.LPIC1249:
	add	r1, pc, r1
	add	r1, r1, #2208
.LPIC1248:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r1, [sp, #8]
	mov	r0, r6
	ldr	r2, [r4, #-112]
	bl	__list_add(PLT)
	mov	r0, r5
	bl	dev_kfree_skb_any(PLT)
	b	.L5045
.L5062:
	.align	2
.L5061:
	.word	ghsuart_data_tx_intr_thld(GOT_PREL)+(.-(.LPIC1250+8))
	.word	.LANCHOR3-(.LPIC1249+8)
	.word	.LC333-(.LPIC1248+8)
	.fnend
	.size	ghsuart_data_write_tohost, .-ghsuart_data_write_tohost
	.align	2
	.global	usb_gadget_connect_work
	.type	usb_gadget_connect_work, %function
usb_gadget_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L5068
	mov	r5, r0
	ldr	r1, .L5068+4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	ip, [r0, #52]
	.pad #8
	sub	sp, sp, #8
	ldr	r0, .L5068+8
.LPIC1256:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
.LPIC1252:
	add	r1, pc, r1
	ldr	r6, [r5, #-444]
	add	r1, r1, #2240
.LPIC1251:
	add	r0, pc, r0
	mov	r2, r1
	ldr	r3, [r4]
	str	ip, [sp]
	bl	printk(PLT)
	ldr	r3, [r4]
	cmp	r3, #0
	ble	.L5064
	ldr	r3, [r5, #52]
	add	r3, r3, #1
	cmp	r3, #59
	str	r3, [r5, #52]
	ble	.L5067
.L5064:
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L5063
	mov	r1, #1
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L5063:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5067:
	mov	r0, #50
	bl	msecs_to_jiffies(PLT)
	ldr	r1, .L5068+12
	mov	r3, r0
	mov	r2, r5
	mov	r0, #4
.LPIC1255:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	ldr	r1, [r1]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_delayed_work_on(PLT)
.L5069:
	.align	2
.L5068:
	.word	speaker_status(GOT_PREL)+(.-(.LPIC1256+8))
	.word	.LANCHOR3-(.LPIC1252+8)
	.word	.LC334-(.LPIC1251+8)
	.word	system_wq(GOT_PREL)+(.-(.LPIC1255+8))
	.fnend
	.size	usb_gadget_connect_work, .-usb_gadget_connect_work
	.align	2
	.type	gsdio_ch_probe, %function
gsdio_ch_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L5079
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC1257:
	add	r5, pc, r5
	ldr	r7, [r5, #284]
	cmp	r7, #0
	ldreq	r6, [r0]
	beq	.L5072
	ldr	r4, [r5, #308]
	mov	r2, #9
	ldr	r6, [r0]
	ldr	r3, [r4, #120]
	mov	r1, r6
	ldr	r0, [r3]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5073
	cmp	r7, #1
	bls	.L5072
	ldr	r4, [r5, #412]
	mov	r1, r6
	mov	r2, #9
	ldr	r3, [r4, #120]
	ldr	r0, [r3]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5073
.L5072:
	ldr	r1, .L5079+4
	mov	r2, r6
	ldr	r0, .L5079+8
.LPIC1262:
	add	r1, pc, r1
	add	r1, r1, #2256
.LPIC1261:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #18
.L5074:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5073:
	ldr	r3, .L5079+12
	mov	r2, #1
	movw	r0, #10000
	str	r2, [r4, #112]
.LPIC1260:
	add	r3, pc, r3
	ldr	r5, [r3, #2592]
	bl	msecs_to_jiffies(PLT)
	mov	r3, r0
	add	r2, r4, #124
	mov	r0, #4
	mov	r1, r5
	bl	queue_delayed_work_on(PLT)
	mov	r0, #0
	b	.L5074
.L5080:
	.align	2
.L5079:
	.word	.LANCHOR1-(.LPIC1257+8)
	.word	.LANCHOR3-(.LPIC1262+8)
	.word	.LC335-(.LPIC1261+8)
	.word	.LANCHOR1-(.LPIC1260+8)
	.fnend
	.size	gsdio_ch_probe, .-gsdio_ch_probe
	.align	2
	.type	gsmd_connect_work, %function
gsmd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	ldr	r4, [r0, #-4]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r4, #8]
	tst	r3, #2
	bne	.L5090
.L5081:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L5090:
	ldr	ip, .L5091
	mov	r5, r0
	mov	r1, #0
	ldr	r0, [r4, #4]
	mov	r2, r4
	sub	r3, r5, #76
.LPIC1263:
	add	ip, pc, ip
	str	ip, [sp]
	bl	smd_named_open_on_edge(PLT)
	cmp	r0, #0
	beq	.L5081
	cmn	r0, #11
	bne	.L5085
	ldr	r3, .L5091+4
	mov	r0, #250
.LPIC1264:
	add	r3, pc, r3
	ldr	r4, [r3, #-1188]
	bl	msecs_to_jiffies(PLT)
	mov	r3, r0
	mov	r2, r5
	mov	r0, #4
	mov	r1, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	queue_delayed_work_on(PLT)
.L5085:
	ldr	r1, .L5091+8
	mov	r3, r0
	ldr	r0, .L5091+12
	ldr	r2, [r4, #4]
.LPIC1266:
	add	r1, pc, r1
	add	r1, r1, #2272
.LPIC1265:
	add	r0, pc, r0
	add	r1, r1, #8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldr	lr, [sp, #8]
	add	sp, sp, #12
	b	printk(PLT)
.L5092:
	.align	2
.L5091:
	.word	gsmd_notify-(.LPIC1263+8)
	.word	.LANCHOR4-(.LPIC1264+8)
	.word	.LANCHOR3-(.LPIC1266+8)
	.word	.LC151-(.LPIC1265+8)
	.fnend
	.size	gsmd_connect_work, .-gsmd_connect_work
	.align	2
	.type	gbam_disconnect_work, %function
gbam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-280]
	tst	r3, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-276]
	bl	msm_bam_dmux_close(PLT)
	ldr	lr, [sp, #4]
	sub	r1, r4, #280
	mov	r0, #1
	ldr	r4, [sp]
	add	sp, sp, #8
	b	_clear_bit(PLT)
	.fnend
	.size	gbam_disconnect_work, .-gbam_disconnect_work
	.align	2
	.type	gbam2bam_disconnect_work, %function
gbam2bam_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-168]
	cmp	r3, #7
	bxne	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	sub	r0, r0, #164
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa(PLT)
	cmp	r0, #0
	bne	.L5105
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5105:
	ldr	r1, .L5106
	mov	r2, r0
	ldr	r0, .L5106+4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC1268:
	add	r1, pc, r1
	add	r1, r1, #2288
.LPIC1267:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L5107:
	.align	2
.L5106:
	.word	.LANCHOR3-(.LPIC1268+8)
	.word	.LC336-(.LPIC1267+8)
	.fnend
	.size	gbam2bam_disconnect_work, .-gbam2bam_disconnect_work
	.align	2
	.type	bam2bam_data_disconnect_work, %function
bam2bam_data_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-124]
	cmp	r3, #7
	bxne	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	sub	r0, r0, #120
	str	lr, [sp, #4]
	bl	usb_bam_disconnect_ipa(PLT)
	cmp	r0, #0
	bne	.L5117
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5117:
	ldr	r1, .L5118
	mov	r2, r0
	ldr	r0, .L5118+4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC1270:
	add	r1, pc, r1
	add	r1, r1, #2320
.LPIC1269:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L5119:
	.align	2
.L5118:
	.word	.LANCHOR3-(.LPIC1270+8)
	.word	.LC336-(.LPIC1269+8)
	.fnend
	.size	bam2bam_data_disconnect_work, .-bam2bam_data_disconnect_work
	.align	2
	.type	ncm_function_init, %function
ncm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L5134
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
.LPIC1277:
	ldr	r5, [pc, r5]		@ tls_load_dot_plus_eight
	ldr	r0, [r5, #24]
	cmp	r0, #0
	beq	.L5124
	movw	r1, #32976
	mov	r2, #16
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L5125
	ldr	r0, [r5, #24]
	cmp	r0, #0
	beq	.L5121
	movw	r1, #32976
	mov	r2, #6
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r6, #4]
	beq	.L5132
.L5123:
	ldr	r1, .L5134+4
	mov	ip, #65024
	mov	r3, r4
	ldr	r0, .L5134+8
	movt	ip, 65535
	ldr	r2, .L5134+12
	str	ip, [r3], #4
.LPIC1272:
	add	r1, pc, r1
	str	r3, [r4, #4]
.LPIC1274:
	add	r0, pc, r0
	str	r3, [r4, #8]
.LPIC1273:
	add	r2, pc, r2
	str	r1, [r4, #12]
	add	r0, r0, #328
	str	r4, [r2, #-668]
	bl	misc_register(PLT)
	cmp	r0, #0
	bne	.L5133
.L5130:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5124:
	mov	r4, #16
.L5121:
	mov	r3, #16
	str	r3, [r6, #4]
	b	.L5123
.L5125:
	mvn	r0, #11
	b	.L5130
.L5132:
	mov	r0, r4
	bl	kfree(PLT)
	mvn	r0, #11
	b	.L5130
.L5133:
	ldr	r1, .L5134+16
	ldr	r0, .L5134+20
.LPIC1276:
	add	r1, pc, r1
	add	r1, r1, #2352
.LPIC1275:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, #0
	b	.L5130
.L5135:
	.align	2
.L5134:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1277+8))
	.word	ncm_work-(.LPIC1272+8)
	.word	.LANCHOR0-(.LPIC1274+8)
	.word	.LANCHOR4-(.LPIC1273+8)
	.word	.LANCHOR3-(.LPIC1276+8)
	.word	.LC337-(.LPIC1275+8)
	.fnend
	.size	ncm_function_init, .-ncm_function_init
	.align	2
	.type	show_timestamp, %function
show_timestamp:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L5153
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC1278:
	add	r5, pc, r5
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r5, #-632]
	cmp	r4, #0
	moveq	r0, r4
	beq	.L5137
	strd	r2, [sp, #12]
	ldr	r3, .L5153+4
	mov	r10, r1
.LPIC1286:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #48]
	cmp	r0, #0
	beq	.L5143
	movw	r1, #32976
	mov	r2, #4096
	bl	kmem_cache_alloc_trace(PLT)
	subs	r7, r0, #0
	beq	.L5152
.L5138:
	ldr	r4, .L5153+8
.LPIC1280:
	add	r4, pc, r4
	add	r0, r4, #3472
	bl	_raw_read_lock_irqsave(PLT)
	ldr	r5, [r4, #3468]
	str	r0, [sp, #20]
	add	ip, r5, #1
	and	r8, ip, #31
	cmp	r5, r8
	beq	.L5145
	ldr	fp, .L5153+12
	mov	r5, #0
	sub	r6, r4, #628
.LPIC1283:
	add	fp, pc, fp
	b	.L5141
.L5140:
	ldr	r3, [r4, #3468]
	add	r8, r8, #1
	and	r8, r8, #31
	cmp	r8, r3
	beq	.L5139
.L5141:
	add	r9, r6, r8, asl #7
	mov	r1, #128
	mov	r0, r9
	bl	strnlen(PLT)
	cmp	r0, #0
	beq	.L5140
	add	r0, r7, r5
	rsb	r1, r5, #4096
	mov	r3, r9
	mov	r2, fp
	bl	scnprintf(PLT)
	add	r5, r5, r0
	b	.L5140
.L5152:
	mvn	r0, #11
.L5137:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5145:
	mov	r5, #0
.L5139:
	ldr	r0, .L5153+16
	ldr	r1, [sp, #20]
.LPIC1285:
	add	r0, pc, r0
	add	r0, r0, #3472
	bl	_raw_read_unlock_irqrestore(PLT)
	ldr	r1, [sp, #12]
	mov	r3, r7
	str	r5, [sp]
	ldr	r2, [sp, #16]
	mov	r0, r10
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r7
	bl	kfree(PLT)
	mov	r0, r4
	b	.L5137
.L5143:
	mov	r7, #16
	b	.L5138
.L5154:
	.align	2
.L5153:
	.word	.LANCHOR4-(.LPIC1278+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1286+8))
	.word	.LANCHOR4-(.LPIC1280+8)
	.word	.LC82-(.LPIC1283+8)
	.word	.LANCHOR4-(.LPIC1285+8)
	.fnend
	.size	show_timestamp, .-show_timestamp
	.align	2
	.type	ghsic_data_connect_w, %function
ghsic_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #88
	beq	.L5155
	ldr	r3, [r0, #-84]
	cmp	r3, #0
	beq	.L5155
	ldr	r3, [r0, #92]
	tst	r3, #2
	bne	.L5166
.L5155:
	bx	lr
.L5166:
	ldr	r1, .L5167
	mvn	r3, #18
	ldr	r2, [r0, #68]
	ldr	r0, .L5167+4
.LPIC1288:
	add	r1, pc, r1
	add	r1, r1, #2368
.LPIC1287:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L5168:
	.align	2
.L5167:
	.word	.LANCHOR3-(.LPIC1288+8)
	.word	.LC338-(.LPIC1287+8)
	.fnend
	.size	ghsic_data_connect_w, .-ghsic_data_connect_w
	.align	2
	.type	ghsuart_ctrl_connect_w, %function
ghsuart_ctrl_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #36
	bxeq	lr
	ldr	r3, [r0, #52]
	tst	r3, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #52]
	tst	r3, #1
	beq	.L5171
	sub	r0, r0, #20
	mov	r1, #300
	bl	wait_for_completion_timeout(PLT)
	cmp	r0, #0
	beq	.L5183
.L5171:
	ldr	r1, .L5184
	ldr	r0, .L5184+4
.LPIC1292:
	add	r1, pc, r1
.LPIC1291:
	add	r0, pc, r0
.L5182:
	add	r1, r1, #2400
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	r1, r1, #4
	add	sp, sp, #8
	b	printk(PLT)
.L5183:
	ldr	r1, .L5184+8
	ldr	r0, .L5184+12
.LPIC1290:
	add	r1, pc, r1
.LPIC1289:
	add	r0, pc, r0
	b	.L5182
.L5185:
	.align	2
.L5184:
	.word	.LANCHOR3-(.LPIC1292+8)
	.word	.LC340-(.LPIC1291+8)
	.word	.LANCHOR3-(.LPIC1290+8)
	.word	.LC339-(.LPIC1289+8)
	.fnend
	.size	ghsuart_ctrl_connect_w, .-ghsuart_ctrl_connect_w
	.align	2
	.type	ghsuart_data_connect_w, %function
ghsuart_data_connect_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #112
	bxeq	lr
	ldr	r3, [r0, #-108]
	cmp	r3, #0
	bxeq	lr
	ldr	r3, [r0, #76]
	tst	r3, #2
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #76]
	tst	r3, #1
	beq	.L5188
	sub	r0, r0, #84
	mov	r1, #300
	bl	wait_for_completion_timeout(PLT)
	cmp	r0, #0
	beq	.L5202
.L5188:
	ldr	r1, .L5203
	mvn	r3, #18
	ldr	r0, .L5203+4
	ldr	r2, [r4, #68]
	ldr	lr, [sp, #4]
.LPIC1296:
	add	r1, pc, r1
	ldr	r4, [sp]
	add	sp, sp, #8
	add	r1, r1, #2416
.LPIC1295:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L5202:
	ldr	r1, .L5203+8
	ldr	r0, .L5203+12
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC1294:
	add	r1, pc, r1
	add	r1, r1, #2416
.LPIC1293:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L5204:
	.align	2
.L5203:
	.word	.LANCHOR3-(.LPIC1296+8)
	.word	.LC341-(.LPIC1295+8)
	.word	.LANCHOR3-(.LPIC1294+8)
	.word	.LC339-(.LPIC1293+8)
	.fnend
	.size	ghsuart_data_connect_w, .-ghsuart_data_connect_w
	.align	2
	.type	str_to_xport.part.65, %function
str_to_xport.part.65:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	ldr	r0, .L5214
	mov	r2, #12
	mov	r1, r4
	str	lr, [sp, #4]
.LPIC1297:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r0, #6
	bne	.L5213
.L5206:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5213:
	ldr	r0, .L5214+4
	mov	r1, r4
	mov	r2, #12
.LPIC1298:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r0, #7
	beq	.L5206
	ldr	r0, .L5214+8
	mov	r1, r4
	mov	r2, #12
.LPIC1299:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r0, #8
	beq	.L5206
	ldr	r0, .L5214+12
	mov	r1, r4
	mov	r2, #12
.LPIC1300:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r0, #9
	beq	.L5206
	ldr	r0, .L5214+16
	mov	r1, r4
	mov	r2, #12
.LPIC1301:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r0, #10
	movne	r0, #0
	b	.L5206
.L5215:
	.align	2
.L5214:
	.word	.LC5-(.LPIC1297+8)
	.word	.LC6-(.LPIC1298+8)
	.word	.LC7-(.LPIC1299+8)
	.word	.LC8-(.LPIC1300+8)
	.word	.LC342-(.LPIC1301+8)
	.fnend
	.size	str_to_xport.part.65, .-str_to_xport.part.65
	.align	2
	.type	ffs_data_put.part.72, %function
ffs_data_put.part.72:
	.fnstart
	@ Volatile: function does not return.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
#APP
@ 1362 "/root/lol//drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/root/lol//drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1363, 0
.popsection
@ 0 "" 2
	.fnend
	.size	ffs_data_put.part.72, .-ffs_data_put.part.72
	.align	2
	.type	_snd_pcm_hw_param_set.constprop.115, %function
_snd_pcm_hw_param_set.constprop.115:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	mov	r4, r0
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	add	r0, r0, #284
	ldrb	r3, [sp, #12]	@ zero_extendqisi2
	add	r1, sp, #4
	str	r2, [sp, #8]
	str	r2, [sp, #4]
	and	r3, r3, #244
	orr	r3, r3, #4
	strb	r3, [sp, #12]
	bl	snd_interval_refine(PLT)
	cmp	r0, #0
	beq	.L5218
	ldr	r2, [r4, #516]
	ldr	r3, [r4, #512]
	orr	r2, r2, #1024
	orr	r3, r3, #1024
	str	r2, [r4, #516]
	str	r3, [r4, #512]
.L5218:
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.115, .-_snd_pcm_hw_param_set.constprop.115
	.align	2
	.type	mbim_function_init, %function
mbim_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L5234
	mov	r2, #1
	ldr	r0, .L5234+4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC1303:
	add	r5, pc, r5
	add	r5, r5, #2448
.LPIC1302:
	add	r0, pc, r0
	add	r5, r5, #4
	mov	r1, r5
	bl	printk(PLT)
	ldr	r3, .L5234+8
.LPIC1327:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L5228
	movw	r1, #32976
	mov	r2, #236
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L5232
.L5224:
	ldr	r6, .L5234+12
	mov	r5, #0
	add	r3, r4, #216
	ldr	r1, .L5234+16
	add	r2, r4, #208
	add	r0, r4, #108
	str	r3, [r4, #216]
	str	r3, [r4, #220]
.LPIC1307:
	add	r6, pc, r6
	strb	r5, [r4, #136]
	add	r7, r6, #3472
	str	r5, [r4, #204]
.LPIC1309:
	add	r1, pc, r1
	add	r7, r7, #4
	str	r2, [r4, #208]
	str	r2, [r4, #212]
	mov	r2, r7
	str	r4, [r6, #-660]
	str	r5, [r6, #-656]
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L5234+20
	add	r0, r4, #120
	mov	r2, r7
.LPIC1311:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r2, [r6, #-664]
	str	r5, [r4, #92]
	ldr	r0, .L5234+24
	str	r5, [r4, #96]
	ldr	r3, .L5234+28
	str	r5, [r4, #100]
	str	r5, [r4, #104]
	add	r5, r2, #1
.LPIC1316:
	add	r0, pc, r0
.LPIC1315:
	add	r3, pc, r3
	add	r0, r0, #436
	str	r5, [r6, #-664]
	str	r4, [r3, #2580]
	bl	misc_register(PLT)
	subs	r4, r0, #0
	bne	.L5233
	ldr	r1, .L5234+32
	ldr	r0, .L5234+36
	ldr	r2, [r6, #-664]
.LPIC1320:
	add	r1, pc, r1
	add	r1, r1, #2448
.LPIC1319:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
.L5227:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5228:
	mov	r4, #16
	b	.L5224
.L5232:
	ldr	r0, .L5234+40
	mov	r1, r5
	mvn	r4, #11
.LPIC1305:
	add	r0, pc, r0
	bl	printk(PLT)
.L5225:
	ldr	r1, .L5234+44
	ldr	r5, .L5234+48
	ldr	r0, .L5234+52
.LPIC1323:
	add	r1, pc, r1
	add	r1, r1, #2448
.LPIC1324:
	add	r5, pc, r5
.LPIC1322:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r3, [r5, #-664]
	cmp	r3, #0
	beq	.L5227
	ldr	r0, [r5, #-660]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r5, #-660]
	b	.L5227
.L5233:
	ldr	r1, .L5234+56
	ldr	r0, .L5234+60
.LPIC1318:
	add	r1, pc, r1
	add	r1, r1, #2448
.LPIC1317:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L5225
.L5235:
	.align	2
.L5234:
	.word	.LANCHOR3-(.LPIC1303+8)
	.word	.LC343-(.LPIC1302+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1327+8))
	.word	.LANCHOR4-(.LPIC1307+8)
	.word	.LC207-(.LPIC1309+8)
	.word	.LC208-(.LPIC1311+8)
	.word	.LANCHOR0-(.LPIC1316+8)
	.word	.LANCHOR1-(.LPIC1315+8)
	.word	.LANCHOR3-(.LPIC1320+8)
	.word	.LC346-(.LPIC1319+8)
	.word	.LC344-(.LPIC1305+8)
	.word	.LANCHOR3-(.LPIC1323+8)
	.word	.LANCHOR4-(.LPIC1324+8)
	.word	.LC347-(.LPIC1322+8)
	.word	.LANCHOR3-(.LPIC1318+8)
	.word	.LC345-(.LPIC1317+8)
	.fnend
	.size	mbim_function_init, .-mbim_function_init
	.align	2
	.type	gen_ndis_query_resp.constprop.124, %function
gen_ndis_query_resp.constprop.124:
	.fnstart
	@ args = 0, pretend = 0, frame = 184
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L5278
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #8]
	.pad #184
	sub	sp, sp, #184
	cmp	r5, #0
	beq	.L5279
	ldr	r8, .L5307
	mov	r3, #16
	mov	r4, r0
	mov	r6, r1
	mov	r1, sp
	str	r3, [r5, #20]
	add	r7, r5, #24
.LPIC1328:
	add	r8, pc, r8
	ldr	r0, [r8, #3504]
	bl	dev_get_stats(PLT)
	movw	r3, #278
	movt	r3, 1
	cmp	r4, r3
	beq	.L5270
	bhi	.L5240
	movw	r3, #266
	movt	r3, 1
	cmp	r4, r3
	beq	.L5241
	bls	.L5301
	movw	r3, #270
	movt	r3, 1
	cmp	r4, r3
	beq	.L5250
	bhi	.L5251
	mov	r3, #268
	movt	r3, 1
	cmp	r4, r3
	beq	.L5252
	bhi	.L5302
	ldr	r3, .L5307+4
.LPIC1336:
	add	r3, pc, r3
	ldr	r4, [r3, #3504]
	cmp	r4, #0
	beq	.L5289
.L5295:
	ldr	r1, [r4, #356]
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5275
.L5240:
	movw	r3, #257
	movt	r3, 257
	cmp	r4, r3
	beq	.L5258
	movw	r3, #257
	movt	r3, 257
	cmp	r4, r3
	bls	.L5303
	movw	r3, #261
	movt	r3, 257
	cmp	r4, r3
	beq	.L5273
	bhi	.L5268
	movw	r3, #259
	movt	r3, 257
	cmp	r4, r3
	beq	.L5269
	bhi	.L5270
	ldr	r2, .L5307+8
.LPIC1343:
	add	r2, pc, r2
	ldr	r4, [r2, #3504]
	cmp	r4, #0
	beq	.L5289
	ldr	r1, [r2, #3496]
.L5296:
	ldr	r0, [r1]	@ unaligned
	mov	r2, #30
	mov	r3, #0
	mov	r4, #6
	str	r0, [r5, #24]	@ unaligned
	ldrh	r1, [r1, #4]	@ unaligned
	strh	r1, [r7, #4]	@ unaligned
	b	.L5275
.L5301:
	movw	r3, #259
	movt	r3, 1
	cmp	r4, r3
	beq	.L5243
	bls	.L5304
	movw	r3, #262
	movt	r3, 1
	cmp	r4, r3
	beq	.L5247
	movw	r3, #263
	movt	r3, 1
	cmp	r4, r3
	beq	.L5248
	mov	r3, #260
	movt	r3, 1
	cmp	r4, r3
	bne	.L5238
	ldr	r1, .L5307+12
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
.LPIC1331:
	add	r1, pc, r1
	ldr	r1, [r1, #3484]
	str	r1, [r5, #24]
	b	.L5275
.L5303:
	movw	r3, #258
	movt	r3, 2
	cmp	r4, r3
	beq	.L5260
	bls	.L5305
	mov	r3, #260
	movt	r3, 2
	cmp	r4, r3
	beq	.L5264
	bcc	.L5265
	movw	r3, #261
	movt	r3, 2
	cmp	r4, r3
	bne	.L5238
	cmp	r0, #0
	beq	.L5290
	ldr	r1, [r0, #48]
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5275
.L5251:
	movw	r3, #275
	movt	r3, 1
	cmp	r4, r3
	beq	.L5255
	mov	r3, #276
	movt	r3, 1
	cmp	r4, r3
	beq	.L5256
	movw	r3, #273
	movt	r3, 1
	cmp	r4, r3
	bne	.L5238
	movw	r1, #1558
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5275
.L5268:
	movw	r3, #258
	movt	r3, 258
	cmp	r4, r3
	beq	.L5273
	movw	r3, #259
	movt	r3, 258
	cmp	r4, r3
	beq	.L5273
	movw	r3, #257
	movt	r3, 258
	cmp	r4, r3
	bne	.L5238
	cmp	r0, #0
	beq	.L5290
	ldr	r1, [r0, #104]
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5275
.L5305:
	movw	r3, #514
	movt	r3, 1
	cmp	r4, r3
	bne	.L5306
.L5273:
	mov	r1, #0
	mov	r2, #28
	mov	r3, r1
	mov	r4, #4
	str	r1, [r5, #24]
.L5275:
	mov	r0, r3
	str	r4, [r5, #16]
	str	r2, [r6, #12]
	str	r2, [r5, #4]
.L5237:
	add	sp, sp, #184
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5270:
	mov	r1, #1
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5275
.L5304:
	movw	r3, #257
	movt	r3, 1
	cmp	r4, r3
	beq	.L5245
	movw	r3, #258
	movt	r3, 1
	cmp	r4, r3
	beq	.L5273
.L5238:
	ldr	r1, .L5307+16
	mov	r2, r4
	mov	r4, #0
	ldr	r0, .L5307+20
.LPIC1346:
	add	r1, pc, r1
.LPIC1345:
	add	r0, pc, r0
	add	r1, r1, #2576
	bl	printk(PLT)
	movw	r3, #65012
	mov	r2, #24
	movt	r3, 65535
	b	.L5275
.L5306:
	movw	r3, #257
	movt	r3, 2
	cmp	r4, r3
	bne	.L5238
	cmp	r0, #0
	beq	.L5290
	ldr	r1, [r0, #8]
	mov	r2, #28
	mov	r3, #0
	ldr	ip, [r0, #40]
	mov	r4, #4
	ldr	r0, [r0, #56]
	rsb	r1, ip, r1
	rsb	r1, r0, r1
	str	r1, [r5, #24]
	b	.L5275
.L5265:
	cmp	r0, #0
	beq	.L5290
	ldr	r1, [r0, #40]
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5275
.L5260:
	cmp	r0, #0
	beq	.L5290
	ldr	r1, [r0]
	mov	r2, #28
	mov	r3, #0
	ldr	ip, [r0, #32]
	mov	r4, #4
	ldr	r0, [r0, #48]
	rsb	r1, ip, r1
	rsb	r1, r0, r1
	str	r1, [r5, #24]
	b	.L5275
.L5243:
	ldr	r1, [r8, #3484]
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5275
.L5256:
	ldr	r1, .L5307+24
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
.LPIC1340:
	add	r1, pc, r1
	ldr	r1, [r1, #3492]
	str	r1, [r5, #24]
	b	.L5275
.L5245:
	ldr	r1, .L5307+28
	mov	r2, #112
	mov	r0, r7
	mov	r4, r2
.LPIC1329:
	add	r1, pc, r1
	add	r1, r1, #2464
	bl	memcpy(PLT)
	mov	r2, #136
	mov	r3, #0
	b	.L5275
.L5302:
	ldr	r3, .L5307+32
.LPIC1338:
	add	r3, pc, r3
	ldr	r8, [r3, #3516]
	cmp	r8, #0
	beq	.L5277
	mov	r0, r8
	bl	strlen(PLT)
	mov	r4, r0
	mov	r1, r8
	mov	r2, r4
	mov	r0, r7
	bl	memcpy(PLT)
	add	r2, r4, #24
	mov	r3, #0
	b	.L5275
.L5248:
	ldr	r3, .L5307+36
.LPIC1333:
	add	r3, pc, r3
	ldr	r2, [r3, #3492]
	cmp	r2, #1
	beq	.L5273
	ldr	r1, [r3, #3488]
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5275
.L5255:
	mov	r1, #18
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5275
.L5252:
	ldr	r1, [r8, #3508]
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5275
.L5269:
	mov	r1, #-536870912
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5275
.L5264:
	cmp	r0, #0
	beq	.L5286
	ldr	r1, [r0, #32]
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5275
.L5247:
	ldr	r3, [r8, #3504]
	cmp	r3, #0
	beq	.L5286
	ldr	r1, [r3, #356]
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	str	r1, [r5, #24]
	b	.L5275
.L5250:
	ldr	r1, [r8, #3500]
	mov	r2, #28
	mov	r3, #0
	mov	r4, #4
	ldrh	r1, [r1]
	str	r1, [r5, #24]
	b	.L5275
.L5258:
	ldr	r4, [r8, #3504]
	cmp	r4, #0
	beq	.L5289
	ldr	r1, [r8, #3496]
	b	.L5296
.L5241:
	ldr	r4, [r8, #3504]
	cmp	r4, #0
	bne	.L5295
.L5289:
	movw	r3, #65012
	mov	r2, #24
	movt	r3, 65535
	b	.L5275
.L5290:
	movw	r3, #65012
	mov	r4, r0
	movt	r3, 65535
	mov	r2, #24
	b	.L5275
.L5279:
	mvn	r0, #11
	b	.L5237
.L5277:
	str	r8, [r5, #24]
	mov	r3, r8
	mov	r2, #28
	mov	r4, #4
	b	.L5275
.L5286:
	movw	r3, #65012
	mov	r2, #24
	movt	r3, 65535
	mov	r4, #0
	b	.L5275
.L5278:
	mvn	r0, #11
	bx	lr
.L5308:
	.align	2
.L5307:
	.word	.LANCHOR4-(.LPIC1328+8)
	.word	.LANCHOR4-(.LPIC1336+8)
	.word	.LANCHOR4-(.LPIC1343+8)
	.word	.LANCHOR4-(.LPIC1331+8)
	.word	.LANCHOR3-(.LPIC1346+8)
	.word	.LC348-(.LPIC1345+8)
	.word	.LANCHOR4-(.LPIC1340+8)
	.word	.LANCHOR3-(.LPIC1329+8)
	.word	.LANCHOR4-(.LPIC1338+8)
	.word	.LANCHOR4-(.LPIC1333+8)
	.fnend
	.size	gen_ndis_query_resp.constprop.124, .-gen_ndis_query_resp.constprop.124
	.align	2
	.type	ccid_function_init, %function
ccid_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5322
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC1367:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L5315
	movw	r1, #32976
	mov	r2, #204
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L5320
.L5310:
	mov	r1, #0
	ldr	r5, .L5322+4
	add	r2, r4, #120
	ldr	r7, .L5322+8
	add	r0, r4, #128
	ldr	r3, .L5322+12
	str	r1, [r4, #92]
	ldr	r1, .L5322+16
	str	r2, [r4, #120]
.LPIC1350:
	add	r5, pc, r5
	str	r2, [r4, #124]
.LPIC1351:
	add	r7, pc, r7
	add	r5, r5, #3536
.LPIC1348:
	add	r3, pc, r3
	mov	r2, r5
.LPIC1349:
	add	r1, pc, r1
	add	r8, r7, #400
	str	r4, [r3, #2396]
	bl	__init_waitqueue_head(PLT)
	mov	r0, r8
	bl	misc_register(PLT)
	subs	r6, r0, #0
	bne	.L5321
	ldr	r1, .L5322+20
	add	r0, r4, #160
	mov	r2, r5
.LPIC1362:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L5322+24
	mov	r2, r5
	add	r0, r4, #172
.LPIC1364:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	add	r3, r4, #192
	add	r0, r7, #364
	str	r3, [r4, #192]
	str	r3, [r4, #196]
	bl	misc_register(PLT)
	subs	r6, r0, #0
	bne	.L5314
	mov	r0, r6
.L5317:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5315:
	mov	r4, #16
	b	.L5310
.L5320:
	mvn	r0, #11
	b	.L5317
.L5314:
	ldr	r5, .L5322+28
	ldr	r0, .L5322+32
.LPIC1357:
	add	r5, pc, r5
	add	r1, r5, #2624
.LPIC1356:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldr	r0, .L5322+36
	add	r1, r5, #2608
	mov	r2, r6
	add	r1, r1, #12
.LPIC1358:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r8
	bl	misc_deregister(PLT)
.L5313:
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r0, .L5322+40
.LPIC1361:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r6
	b	.L5317
.L5321:
	ldr	r5, .L5322+44
	ldr	r0, .L5322+48
.LPIC1353:
	add	r5, pc, r5
	add	r1, r5, #2592
.LPIC1352:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, .L5322+52
	add	r1, r5, #2608
	mov	r2, r6
	add	r1, r1, #12
.LPIC1354:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L5313
.L5323:
	.align	2
.L5322:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1367+8))
	.word	.LANCHOR4-(.LPIC1350+8)
	.word	.LANCHOR0-(.LPIC1351+8)
	.word	.LANCHOR1-(.LPIC1348+8)
	.word	.LC218-(.LPIC1349+8)
	.word	.LC352-(.LPIC1362+8)
	.word	.LC353-(.LPIC1364+8)
	.word	.LANCHOR3-(.LPIC1357+8)
	.word	.LC219-(.LPIC1356+8)
	.word	.LC350-(.LPIC1358+8)
	.word	.LC351-(.LPIC1361+8)
	.word	.LANCHOR3-(.LPIC1353+8)
	.word	.LC219-(.LPIC1352+8)
	.word	.LC349-(.LPIC1354+8)
	.fnend
	.size	ccid_function_init, .-ccid_function_init
	.section	.text.unlikely
	.align	2
	.type	acm_cdc_notify.constprop.138, %function
acm_cdc_notify.constprop.138:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L5328
	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.pad #20
	sub	sp, sp, #20
	add	r5, sp, #2
	mov	r4, r0
	mov	fp, r1
	mov	r0, r5
	ldr	r10, [r4, #152]
.LPIC1370:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	mov	r1, #10
	mov	r8, #32
	add	r7, r4, #148
	ldr	r3, [ip]
	mov	r6, ip
	str	r3, [sp, #12]
	bl	__memzero(PLT)
	ldr	r9, [r4, #156]
	mov	r2, #0
	mov	r1, #10
	mvn	ip, #94
	mov	lr, #2
	str	r2, [r4, #156]
	mov	r0, r7
	strb	r2, [r4, #147]
	ldr	r3, [r9]
	str	r1, [r9, #4]
	strb	ip, [r3]
	strb	r8, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	ldrb	ip, [r4, #144]	@ zero_extendqisi2
	strb	lr, [r3, #6]
	strb	r2, [r3, #7]
	strh	ip, [r3, #4]	@ unaligned
	ldrh	ip, [fp]	@ unaligned
	ldr	r2, [r5, #4]	@ unaligned
	strh	ip, [sp, #2]	@ unaligned
	ldr	ip, [r5]	@ unaligned
	str	r2, [r3, #12]	@ unaligned
	str	ip, [r3, #8]	@ unaligned
	ldrh	r2, [r5, #8]	@ unaligned
	strh	r2, [r3, #16]	@ unaligned
	ldrh	r2, [fp]	@ unaligned
	strh	r2, [r3, #8]	@ unaligned
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r10, #8]
	mov	r2, r8
	mov	r1, r9
	mov	r0, r10
	ldr	r3, [r3, #16]
	blx	r3
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	cmp	r5, #0
	bge	.L5325
	ldr	r0, [r4, #20]
	mov	r3, r5
	ldr	r1, .L5328+4
	ldrb	r2, [r4, #146]	@ zero_extendqisi2
	ldr	r0, [r0, #24]
.LPIC1369:
	add	r1, pc, r1
	ldr	r0, [r0]
	add	r0, r0, r8
	bl	dev_err(PLT)
	str	r9, [r4, #156]
.L5325:
	ldr	r2, [sp, #12]
	mov	r0, r5
	ldr	r3, [r6]
	cmp	r2, r3
	beq	.L5326
	bl	__stack_chk_fail(PLT)
.L5326:
	add	sp, sp, #20
	@ sp needed
	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L5329:
	.align	2
.L5328:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC1370+8))
	.word	.LC354-(.LPIC1369+8)
	.fnend
	.size	acm_cdc_notify.constprop.138, .-acm_cdc_notify.constprop.138
	.text
	.align	2
	.type	ghsuart_send_controlbits_tomodem, %function
ghsuart_send_controlbits_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L5352
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC1371:
	add	ip, pc, ip
	ldr	r3, [ip, #2052]
	cmp	r0, #0
	cmpne	r1, r3
	movcs	r5, #1
	movcc	r5, #0
	bcs	.L5349
	mov	r3, #84
	mla	r1, r3, r1, ip
	ldr	r4, [r1, #2228]
	cmp	r4, #0
	beq	.L5350
	ldr	r3, [r4, #196]
	cmp	r2, r3
	beq	.L5330
	ldr	r3, [r4, #188]
	str	r2, [r4, #196]
	tst	r3, #4
	beq	.L5330
	tst	r2, #1
	bne	.L5351
.L5330:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5351:
	add	r6, r4, #20
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	mov	r0, r6
	ldr	r6, [r4, #24]
	str	r5, [r4, #200]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	beq	.L5330
	ldr	r3, [r6, #136]
	cmp	r3, #0
	beq	.L5330
	mov	r0, r6
	mov	r1, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	bx	r3
.L5349:
	ldr	r3, .L5352+4
	mov	r2, r1
	ldr	r0, .L5352+8
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
.LPIC1373:
	add	r3, pc, r3
	ldr	lr, [sp, #12]
	add	sp, sp, #16
.LPIC1372:
	add	r0, pc, r0
	add	r1, r3, #2656
	b	printk(PLT)
.L5350:
	ldr	r1, .L5352+12
	ldr	r0, .L5352+16
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
.LPIC1376:
	add	r1, pc, r1
	ldr	lr, [sp, #12]
	add	sp, sp, #16
.LPIC1375:
	add	r0, pc, r0
	add	r1, r1, #2656
	b	printk(PLT)
.L5353:
	.align	2
.L5352:
	.word	.LANCHOR1-(.LPIC1371+8)
	.word	.LANCHOR3-(.LPIC1373+8)
	.word	.LC25-(.LPIC1372+8)
	.word	.LANCHOR3-(.LPIC1376+8)
	.word	.LC21-(.LPIC1375+8)
	.fnend
	.size	ghsuart_send_controlbits_tomodem, .-ghsuart_send_controlbits_tomodem
	.align	2
	.type	grmnet_ctrl_smd_send_cpkt_tomodem, %function
grmnet_ctrl_smd_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #5
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bhi	.L5355
	ldr	r3, .L5379
	mov	r4, r2
	mov	r2, #84
.LPIC1377:
	add	r3, pc, r3
	mla	r3, r2, r0, r3
	ldr	r5, [r3, #708]
	cmp	r5, #0
	beq	.L5355
	ldr	r3, .L5379+4
	mov	r6, r1
.LPIC1384:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r7, [r3, #24]
	cmp	r7, #0
	beq	.L5359
	mov	r0, r7
	movw	r1, #32800
	mov	r2, #16
	bl	kmem_cache_alloc_trace(PLT)
	subs	r7, r0, #0
	beq	.L5362
	mov	r0, r4
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r7]
	beq	.L5364
	cmn	r7, #4096
	str	r4, [r7, #4]
	bhi	.L5362
.L5363:
	mov	r1, r6
	mov	r2, r4
	add	r6, r5, #108
	bl	memcpy(PLT)
	str	r4, [r7, #4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #8]
	mov	r8, r0
	ands	r4, r4, #1
	beq	.L5378
	add	r0, r7, #8
	ldr	r1, [r5, #44]
	add	r2, r5, #40
	bl	__list_add(PLT)
	ldr	r3, .L5379+8
	add	r2, r5, #68
	mov	r0, #4
	mov	r4, #0
.LPIC1380:
	add	r3, pc, r3
	ldr	r1, [r3, #-1468]
	bl	queue_work_on(PLT)
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L5374
.L5355:
	ldr	r1, .L5379+12
	mov	r2, r0
	mvn	r4, #18
	ldr	r0, .L5379+16
.LPIC1383:
	add	r1, pc, r1
	add	r1, r1, #2688
.LPIC1382:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
.L5374:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5378:
	ldr	r0, [r7]
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L5374
.L5359:
	mov	r0, r4
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r7, #16]
	strne	r4, [r7, #20]
	movne	r7, #16
	bne	.L5363
	mov	r7, #16
.L5364:
	mov	r0, r7
	bl	kfree(PLT)
.L5362:
	ldr	r1, .L5379+20
	mvn	r4, #11
	ldr	r0, .L5379+24
.LPIC1379:
	add	r1, pc, r1
	add	r1, r1, #2688
.LPIC1378:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L5374
.L5380:
	.align	2
.L5379:
	.word	.LANCHOR1-(.LPIC1377+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1384+8))
	.word	.LANCHOR4-(.LPIC1380+8)
	.word	.LANCHOR3-(.LPIC1383+8)
	.word	.LC25-(.LPIC1382+8)
	.word	.LANCHOR3-(.LPIC1379+8)
	.word	.LC355-(.LPIC1378+8)
	.fnend
	.size	grmnet_ctrl_smd_send_cpkt_tomodem, .-grmnet_ctrl_smd_send_cpkt_tomodem
	.align	2
	.type	frmnet_send_cpkt_response, %function
frmnet_send_cpkt_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	cmpne	r0, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	beq	.L5412
	ldr	r3, .L5413
	mov	r5, r2
.LPIC1390:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r4, [r3, #24]
	cmp	r4, #0
	beq	.L5384
	mov	r0, r4
	movw	r1, #32800
	mov	r2, #16
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L5395
	mov	r0, r5
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L5396
	cmn	r4, #4096
	str	r5, [r4, #4]
	bhi	.L5395
.L5387:
	mov	r1, r7
	mov	r2, r5
	bl	memcpy(PLT)
	str	r5, [r4, #4]
	ldr	r3, [r6, #120]
	cmp	r3, #0
	beq	.L5388
	ldr	r3, [r6, #124]
	cmp	r3, #0
	bne	.L5389
.L5388:
	ldr	r0, [r4]
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, #0
.L5402:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L5389:
	add	r5, r6, #132
	add	r7, r6, #144
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	mov	r2, r7
	ldr	r1, [r6, #148]
	add	r0, r4, #8
	bl	__list_add(PLT)
	mov	r1, r8
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r5
	ldr	r4, [r6, #140]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	ldr	r0, [r6, #120]
	cmp	r4, #0
	cmpne	r0, #0
	moveq	r8, #1
	movne	r8, #0
	beq	.L5390
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L5390
	ldr	r3, [r6, #152]
	add	r3, r3, #1
	cmp	r3, #1
	str	r3, [r6, #152]
	bne	.L5390
	ldr	r2, [r4]
	mvn	ip, #94
	mov	r0, r5
	strb	ip, [r2]
	strb	r3, [r2, #1]
	strb	r8, [r2, #2]
	strb	r8, [r2, #3]
	ldrh	r3, [r6, #112]
	strb	r8, [r2, #6]
	strb	r8, [r2, #7]
	strh	r3, [r2, #4]	@ unaligned
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r6, #136]
	mov	r2, #32
	ldr	r1, [r6, #140]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L5402
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r8, [r6, #144]
	mov	r9, r0
	cmp	r7, r8
	beq	.L5393
	ldr	r4, [r6, #152]
	cmp	r4, #0
	beq	.L5394
	sub	r4, r4, #1
	mov	r0, r8
	sub	r7, r8, #8
	str	r4, [r6, #152]
	bl	list_del(PLT)
	ldr	r0, [r8, #-8]
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
.L5393:
	mov	r0, r5
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L5402
.L5390:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L5402
.L5384:
	mov	r0, r2
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r4, #16]
	strne	r5, [r4, #20]
	movne	r4, #16
	bne	.L5387
	mov	r4, #16
.L5396:
	mov	r0, r4
	bl	kfree(PLT)
.L5395:
	ldr	r1, .L5413+4
	ldr	r0, .L5413+8
.LPIC1389:
	add	r1, pc, r1
	add	r1, r1, #2720
.LPIC1388:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #11
	b	.L5402
.L5394:
	mov	r0, r5
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
	b	.L5402
.L5412:
	ldr	r1, .L5413+12
	mov	r2, r0
	mov	r3, r7
	ldr	r0, .L5413+16
.LPIC1386:
	add	r1, pc, r1
	add	r1, r1, #2720
.LPIC1385:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #18
	b	.L5402
.L5414:
	.align	2
.L5413:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1390+8))
	.word	.LANCHOR3-(.LPIC1389+8)
	.word	.LC355-(.LPIC1388+8)
	.word	.LANCHOR3-(.LPIC1386+8)
	.word	.LC356-(.LPIC1385+8)
	.fnend
	.size	frmnet_send_cpkt_response, .-frmnet_send_cpkt_response
	.align	2
	.type	rmnet_sdio_command_complete, %function
rmnet_sdio_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r1, #32]
	ldr	r6, [r1, #48]
	cmp	r2, #0
	ldr	r8, [r4, #84]
	blt	.L5429
	ldr	r3, [r4, #324]
	tst	r3, #2
	bne	.L5430
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5430:
	ldr	r3, .L5431
	mov	r5, r1
.LPIC1394:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r7, [r3, #24]
	cmp	r7, #0
	beq	.L5418
	mov	r0, r7
	mov	r1, #32
	mov	r2, #16
	bl	kmem_cache_alloc_trace(PLT)
	subs	r7, r0, #0
	beq	.L5422
	mov	r0, r6
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r7]
	beq	.L5423
	cmn	r7, #4096
	bhi	.L5422
.L5421:
	ldr	r1, [r5]
	mov	r2, r6
	add	r5, r4, #188
	bl	memcpy(PLT)
	mov	r0, r5
	str	r6, [r7, #4]
	bl	_raw_spin_lock(PLT)
	ldr	r1, [r4, #112]
	add	r2, r4, #108
	add	r0, r7, #8
	bl	__list_add(PLT)
	ldr	r3, [r4, #116]
	mov	r0, r5
	add	r3, r3, #1
	str	r3, [r4, #116]
	bl	_raw_spin_unlock(PLT)
	ldrd	r6, [sp, #8]
	add	r2, r4, #220
	mov	r0, #4
	ldr	r1, [r4, #200]
	ldr	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work_on(PLT)
.L5418:
	mov	r0, r6
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r7, #16]
	mov	r7, #16
	bne	.L5421
.L5423:
	mov	r0, r7
	bl	kfree(PLT)
.L5422:
	ldr	r0, [r8]
	ldr	r1, .L5431+4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
.LPIC1393:
	add	r1, pc, r1
	add	sp, sp, #24
	b	dev_err(PLT)
.L5429:
	ldr	r0, [r8]
	ldr	r1, .L5431+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
.LPIC1391:
	add	r1, pc, r1
	add	sp, sp, #24
	b	dev_err(PLT)
.L5432:
	.align	2
.L5431:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1394+8))
	.word	.LC357-(.LPIC1393+8)
	.word	.LC121-(.LPIC1391+8)
	.fnend
	.size	rmnet_sdio_command_complete, .-rmnet_sdio_command_complete
	.align	2
	.type	ffs_do_descs.constprop.151, %function
ffs_do_descs.constprop.151:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	cmpne	r0, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, [sp, #16]
	str	r6, [sp, #8]
	moveq	r4, #1
	str	lr, [sp, #12]
	movne	r4, #0
	beq	.L5452
	cmp	r2, #1
	bls	.L5439
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r2, r3
	bcc	.L5439
	mov	lr, r2
.L5438:
	ldrb	ip, [r1, #1]	@ zero_extendqisi2
	sub	ip, ip, #4
	cmp	ip, #44
	addls	pc, pc, ip, asl #2
	b	.L5439
.L5441:
	b	.L5440
	b	.L5442
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5443
	b	.L5439
	b	.L5444
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5445
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5439
	b	.L5446
	.p2align 1
.L5440:
	cmp	r3, #9
	beq	.L5464
.L5439:
	mvn	r0, #21
.L5459:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5444:
	cmp	r3, #8
	bne	.L5439
	ldrb	ip, [r1, #7]	@ zero_extendqisi2
	cmp	ip, #0
	beq	.L5449
.L5463:
	ldrh	r6, [r5, #176]
	uxth	ip, ip
	cmp	r6, ip
	strcch	ip, [r5, #176]	@ movhi
.L5449:
	adds	r1, r1, r3
	add	r4, r4, #1
	moveq	ip, #1
	movne	ip, #0
	cmp	r0, r4
	orreq	ip, ip, #1
	rsb	lr, r3, lr
	cmp	ip, #0
	bne	.L5465
	cmp	lr, #1
	bls	.L5439
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	lr, r3
	bcs	.L5438
	b	.L5439
.L5443:
	cmp	r3, #5
	beq	.L5449
	b	.L5439
.L5446:
	cmp	r3, #6
	beq	.L5449
	b	.L5439
.L5442:
	sub	ip, r3, #7
	tst	ip, #253
	bne	.L5439
	ldrb	ip, [r1, #2]	@ zero_extendqisi2
	ands	ip, ip, #15
	beq	.L5439
	ldrh	r6, [r5, #180]
	cmp	ip, r6
	strgth	ip, [r5, #180]	@ movhi
	b	.L5449
.L5445:
	cmp	r3, #9
	beq	.L5449
	b	.L5439
.L5464:
	ldrb	ip, [r1, #2]	@ zero_extendqisi2
	ldrh	r6, [r5, #178]
	cmp	r6, ip
	addls	ip, ip, #1
	strlsh	ip, [r5, #178]	@ movhi
	ldrb	ip, [r1, #8]	@ zero_extendqisi2
	cmp	ip, #0
	beq	.L5449
	b	.L5463
.L5465:
	rsb	r0, lr, r2
	b	.L5459
.L5452:
	mov	r0, #0
	b	.L5459
	.fnend
	.size	ffs_do_descs.constprop.151, .-ffs_do_descs.constprop.151
	.align	2
	.type	__ffs_data_do_entity, %function
__ffs_data_do_entity:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #2
	beq	.L5468
	cmp	r0, #3
	beq	.L5469
	cmp	r0, #1
	beq	.L5471
	mov	r0, #0
	bx	lr
.L5471:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #178]
	cmp	r1, r2
	addls	r2, r2, #1
	strlsh	r2, [r3, #178]	@ movhi
	bx	lr
.L5469:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #180]
	and	r2, r2, #15
	cmp	r2, r1
	strgth	r2, [r3, #180]	@ movhi
	bx	lr
.L5468:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, #0
	ldrh	r1, [r3, #176]
	cmp	r1, r2
	strcch	r2, [r3, #176]	@ movhi
	bx	lr
	.fnend
	.size	__ffs_data_do_entity, .-__ffs_data_do_entity
	.align	2
	.type	audio_unbind, %function
audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	add	r5, r1, #108
	strd	r8, [sp, #16]
	mov	r8, r1
	add	r9, r1, #96
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
.L5473:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r8, #96]
	mov	r6, r0
	cmp	r4, r9
	mov	r0, r4
	sub	r7, r4, #36
	beq	.L5474
	bl	list_del(PLT)
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r7, #0
	beq	.L5476
	ldr	r6, [r8, #104]
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	mov	r1, r7
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L5473
.L5474:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
.L5476:
	ldr	r0, [r8, #84]
	bl	snd_card_free_when_closed(PLT)
	mov	r3, #0
	str	r3, [r8, #84]
	str	r3, [r8, #88]
	str	r3, [r8, #92]
	str	r3, [r8, #104]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	audio_unbind, .-audio_unbind
	.align	2
	.type	f_audio_set_alt, %function
f_audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r3, .L5525
	mov	r5, r0
	strd	r8, [sp, #16]
	ldr	r9, .L5525+4
	strd	r10, [sp, #24]
	mov	r10, r2
	strd	r6, [sp, #8]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r6, [r0, #172]
.LPIC1395:
	add	r9, pc, r9
	ldr	r4, [r0, #176]
	ldr	r3, [r9, r3]
	ldrb	r2, [r3, #8]	@ zero_extendqisi2
	cmp	r2, r1
	beq	.L5516
	ldrb	r3, [r3, #9]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L5492
	cmp	r10, #1
	beq	.L5517
	ldr	r7, [r0, #184]
	cmp	r7, #0
	beq	.L5501
	ldr	r6, .L5525+8
	ldr	r0, .L5525+12
.LPIC1420:
	add	r6, pc, r6
	add	r1, r6, #2752
.LPIC1419:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	add	r0, r7, #8
	ldr	r1, [r5, #208]
	add	r2, r5, #204
	bl	__list_add(PLT)
	ldr	r3, .L5525+16
	mov	r0, #4
	add	r2, r5, #188
	ldr	r3, [r9, r3]
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	mov	r3, #0
	mov	r7, r3
	str	r3, [r5, #184]
.L5497:
	strb	r10, [r5, #249]
.L5484:
	mov	r0, r7
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5516:
	cmp	r10, #1
	beq	.L5518
	add	r9, r0, #212
	add	r7, r0, #236
	mov	r0, r9
	mov	r8, #0
	bl	_raw_spin_lock_irqsave(PLT)
	mov	fp, r0
.L5490:
	ldr	r4, [r5, #236]
	cmp	r4, r7
	sub	r6, r4, #8
	mov	r0, r4
	beq	.L5519
	bl	list_del(PLT)
	cmp	r6, #0
	beq	.L5490
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	str	r8, [r4, #-8]
	mov	r0, r6
	bl	kfree(PLT)
	b	.L5490
.L5519:
	mov	r0, r9
	mov	r1, fp
	mov	r7, #0
	bl	_raw_spin_unlock_irqrestore(PLT)
.L5488:
	strb	r10, [r5, #248]
	b	.L5484
.L5501:
	ldr	r1, .L5525+20
	ldr	r0, .L5525+24
.LPIC1422:
	add	r1, pc, r1
	add	r1, r1, #2752
.LPIC1421:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L5497
.L5517:
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r1, [r6, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r7, r0, #0
	bne	.L5520
	ldr	r4, .L5525+28
	str	r5, [r6]
.LPIC1409:
	add	r4, pc, r4
	ldr	r0, [r4, #228]
	bl	f_audio_buffer_alloc(PLT)
	cmn	r0, #4096
	str	r0, [r5, #184]
	bhi	.L5495
	ldr	r3, [r4, #428]
	cmp	r3, #0
	ble	.L5497
	ldr	r9, .L5525+32
	mov	r8, r7
	ldr	fp, .L5525+36
.LPIC1413:
	add	r9, pc, r9
.LPIC1415:
	add	fp, pc, fp
	b	.L5496
.L5522:
	ldr	r3, [r9, #432]
	str	r5, [r4, #32]
	str	fp, [r4, #28]
	str	r3, [r4, #4]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bne	.L5521
	ldr	r3, [r9, #428]
	cmp	r3, r8
	ble	.L5497
.L5496:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	add	r8, r8, #1
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	movw	r1, #32800
	beq	.L5498
	ldr	r0, [r9, #432]
	bl	__kmalloc(PLT)
	mov	r3, r0
	mov	r1, r4
	cmp	r3, #0
	mov	r0, r6
	mov	r2, #32
	str	r3, [r4]
	bne	.L5522
.L5499:
	ldr	r1, .L5525+40
	mvn	r7, #11
	ldr	r0, .L5525+44
.LPIC1402:
	add	r1, pc, r1
	add	r1, r1, #2752
.LPIC1401:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L5484
.L5518:
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r1, [r4, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r7, r0, #0
	bne	.L5523
	str	r5, [r4]
	mov	r0, r4
	mov	r1, #32
	str	r7, [r5, #216]
	ldr	r3, [r4, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L5498
	ldr	r7, .L5525+48
	movw	r1, #32800
.LPIC1400:
	add	r7, pc, r7
	ldr	r0, [r7, #424]
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L5499
	ldr	r3, .L5525+52
	str	r5, [r6, #32]
	mov	r1, r6
	ldr	ip, [r7, #424]
	mov	r0, r4
	mov	r2, #32
.LPIC1404:
	add	r3, pc, r3
	str	ip, [r6, #4]
	str	r3, [r6, #28]
	str	r6, [r5, #244]
	ldr	r3, [r4, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bne	.L5524
.L5487:
	ldr	r3, .L5525+16
	add	r2, r5, #220
	mov	r0, #4
	ldr	r3, [r9, r3]
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	b	.L5488
.L5495:
	ldr	r1, .L5525+56
	mvn	r7, #11
	ldr	r0, .L5525+60
.LPIC1412:
	add	r1, pc, r1
	add	r1, r1, #2752
.LPIC1411:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L5484
.L5498:
	ldr	r1, .L5525+64
	mvn	r7, #11
	ldr	r0, .L5525+68
.LPIC1399:
	add	r1, pc, r1
	add	r1, r1, #2752
.LPIC1398:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L5484
.L5521:
	ldr	r1, .L5525+72
	mov	r3, r7
	ldr	r0, .L5525+76
	ldr	r2, [r6, #4]
.LPIC1417:
	add	r1, pc, r1
	add	r1, r1, #2752
.LPIC1416:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L5497
.L5492:
	ldr	ip, .L5525+80
	mov	r2, r1
	mov	r3, #0
	ldr	r0, .L5525+84
	mov	r7, r3
.LPIC1424:
	add	ip, pc, ip
	add	r1, ip, #2752
.LPIC1423:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L5484
.L5524:
	ldr	r1, .L5525+88
	mov	r3, r7
	ldr	r0, .L5525+92
	ldr	r2, [r4, #4]
.LPIC1406:
	add	r1, pc, r1
	add	r1, r1, #2752
.LPIC1405:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L5487
.L5520:
	ldr	r1, .L5525+96
	ldr	r0, .L5525+100
.LPIC1408:
	add	r1, pc, r1
	add	r1, r1, #2752
.LPIC1407:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L5484
.L5523:
	ldr	r1, .L5525+104
	ldr	r0, .L5525+108
.LPIC1397:
	add	r1, pc, r1
	add	r1, r1, #2752
.LPIC1396:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L5484
.L5526:
	.align	2
.L5525:
	.word	uac1_ac_header_desc(GOT)
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC1395+8)
	.word	.LANCHOR3-(.LPIC1420+8)
	.word	.LC364-(.LPIC1419+8)
	.word	system_wq(GOT)
	.word	.LANCHOR3-(.LPIC1422+8)
	.word	.LC365-(.LPIC1421+8)
	.word	.LANCHOR2-(.LPIC1409+8)
	.word	.LANCHOR2-(.LPIC1413+8)
	.word	f_audio_complete-(.LPIC1415+8)
	.word	.LANCHOR3-(.LPIC1402+8)
	.word	.LC360-(.LPIC1401+8)
	.word	.LANCHOR2-(.LPIC1400+8)
	.word	f_audio_complete-(.LPIC1404+8)
	.word	.LANCHOR3-(.LPIC1412+8)
	.word	.LC35-(.LPIC1411+8)
	.word	.LANCHOR3-(.LPIC1399+8)
	.word	.LC359-(.LPIC1398+8)
	.word	.LANCHOR3-(.LPIC1417+8)
	.word	.LC363-(.LPIC1416+8)
	.word	.LANCHOR3-(.LPIC1424+8)
	.word	.LC366-(.LPIC1423+8)
	.word	.LANCHOR3-(.LPIC1406+8)
	.word	.LC361-(.LPIC1405+8)
	.word	.LANCHOR3-(.LPIC1408+8)
	.word	.LC362-(.LPIC1407+8)
	.word	.LANCHOR3-(.LPIC1397+8)
	.word	.LC358-(.LPIC1396+8)
	.fnend
	.size	f_audio_set_alt, .-f_audio_set_alt
	.align	2
	.type	qdss_unbind, %function
qdss_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r3, [r0, #24]
	ldr	r0, [r1, #196]
	ldr	r5, [r3]
	bl	flush_workqueue(PLT)
	ldr	r0, .L5552
	ldr	r1, [r5, #28]
.LPIC1425:
	add	r0, pc, r0
	bl	strcmp(PLT)
	subs	r1, r0, #0
	beq	.L5551
.L5528:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #108]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L5532
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L5533
	bl	kfree(PLT)
	ldr	r3, [r5, #20]
.L5532:
	cmp	r3, #2
	bls	.L5527
.L5533:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L5527
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree(PLT)
.L5527:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5551:
	ldr	r0, [r4, #108]
	bl	dwc3_tx_fifo_resize_request(PLT)
	b	.L5528
.L5553:
	.align	2
.L5552:
	.word	.LC367-(.LPIC1425+8)
	.fnend
	.size	qdss_unbind, .-qdss_unbind
	.align	2
	.type	rmnet_smd_free_buf, %function
rmnet_smd_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r3, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	str	r3, [r0, #424]
	str	r3, [r0, #428]
	str	r3, [r0, #432]
	str	r3, [r0, #436]
	str	r3, [r0, #440]
	str	r3, [r0, #444]
	str	r3, [r0, #448]
	str	r3, [r0, #452]
	ldr	r4, [r8, #140]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L5559
.L5558:
	mov	r0, r4
	sub	r9, r4, #36
	bl	list_del(PLT)
	ldr	r7, [r6, #88]
	ldr	r0, [r4, #-36]
	mov	r4, r5
	bl	kfree(PLT)
	mov	r1, r9
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L5558
.L5559:
	mov	r8, r6
	ldr	r4, [r8, #148]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L5557
.L5562:
	mov	r0, r4
	sub	r9, r4, #36
	bl	list_del(PLT)
	ldr	r7, [r6, #92]
	ldr	r0, [r4, #-36]
	mov	r4, r5
	bl	kfree(PLT)
	mov	r1, r9
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L5562
.L5557:
	mov	r8, r6
	ldr	r4, [r8, #108]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L5561
.L5565:
	mov	r0, r4
	sub	r7, r4, #8
	bl	list_del(PLT)
	ldr	r0, [r4, #-8]
	mov	r4, r5
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L5565
.L5561:
	mov	r8, r6
	ldr	r4, [r8, #116]!
	cmp	r4, r8
	ldr	r5, [r4]
	beq	.L5564
.L5566:
	mov	r0, r4
	sub	r7, r4, #8
	bl	list_del(PLT)
	ldr	r0, [r4, #-8]
	mov	r4, r5
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
	cmp	r8, r5
	ldr	r5, [r5]
	bne	.L5566
.L5564:
	ldrd	r4, [r6, #96]
	ldr	r0, [r5]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	rmnet_smd_free_buf, .-rmnet_smd_free_buf
	.align	2
	.type	rmnet_smd_unbind, %function
rmnet_smd_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	add	r0, r1, #284
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	tasklet_kill(PLT)
	add	r0, r4, #264
	bl	tasklet_kill(PLT)
	add	r0, r4, #348
	bl	tasklet_kill(PLT)
	add	r0, r4, #328
	bl	tasklet_kill(PLT)
	ldr	r0, [r4, #388]
	bl	flush_workqueue(PLT)
	mov	r0, r4
	bl	rmnet_smd_free_buf(PLT)
	mov	r3, #0
	ldr	r0, [r4, #388]
	str	r3, [r4, #96]
	str	r3, [r4, #92]
	str	r3, [r4, #88]
	bl	destroy_workqueue(PLT)
	ldr	r3, .L5574
.LPIC1427:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3]
	bl	debugfs_remove_recursive(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
.L5575:
	.align	2
.L5574:
	.word	dent_smd(GOT_PREL)+(.-(.LPIC1427+8))
	.fnend
	.size	rmnet_smd_unbind, .-rmnet_smd_unbind
	.align	2
	.type	ffs_epfile_read, %function
ffs_epfile_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r5, r2, #1
	strd	r6, [sp, #8]
	mvn	r7, r5, lsr #10
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mvn	r7, r7, asl #10
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #44
	sub	sp, sp, #44
	add	r3, r7, #1
	str	r3, [sp, #4]
	ldr	r9, [r4, #32]
	ldr	r6, [r4, #36]
	cmp	r9, #0
	bne	.L5601
.L5578:
	str	r2, [sp, #8]
	ldr	r2, [r6, #92]
	mov	r8, r0
	str	r1, [sp, #12]
	cmp	r2, #2
	bne	.L5602
	mov	r3, sp
	mov	r5, r9
	bic	fp, r3, #8128
	bic	fp, fp, #63
.L5580:
	ldr	r7, [r4, #40]
	cmp	r7, #0
	beq	.L5621
.L5597:
	ldrb	r10, [r4, #53]	@ zero_extendqisi2
	adds	r10, r10, #0
	movne	r10, #1
	cmp	r10, #0
	bne	.L5622
	cmp	r5, #0
	bne	.L5599
	ldr	r0, [sp, #4]
	movw	r1, #32976
	bl	__kmalloc(PLT)
	subs	r5, r0, #0
	beq	.L5623
.L5599:
	ldr	r2, [r8, #32]
	mov	r0, r4
	tst	r2, #2048
	beq	.L5586
	bl	mutex_trylock(PLT)
	cmp	r0, #0
	beq	.L5606
.L5589:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [r4, #40]
	cmp	r2, r7
	bne	.L5587
	cmp	r10, #0
	bne	.L5624
	ldr	r0, .L5630
	mov	r2, #32
	ldr	r8, [r7, #4]
	ldr	r3, [sp, #4]
.LPIC1431:
	add	r0, pc, r0
	str	r5, [r8]
	mov	r1, r8
	str	r3, [r8, #4]
	str	r0, [r8, #28]
	str	r10, [r6, #68]!
	str	r6, [r8, #32]
	ldr	r0, [r7]
	ldr	ip, [r0, #8]
	ldr	ip, [ip, #16]
	blx	ip
	mov	r9, r0
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r9, #0
	blt	.L5607
	mov	r0, r6
	bl	wait_for_completion_interruptible(PLT)
	cmp	r0, #0
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bne	.L5625
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [r4, #40]
	ldr	r0, [r4, #36]
	cmp	r2, r7
	beq	.L5626
	add	r0, r0, #24
	mvn	r9, #18
	bl	_raw_spin_unlock_irq(PLT)
.L5592:
	mov	r0, r4
	bl	mutex_unlock(PLT)
.L5581:
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r9
.L5616:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5622:
	ldrb	r2, [r4, #54]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L5599
	mvn	r9, #21
	b	.L5581
.L5586:
	bl	mutex_lock_interruptible(PLT)
	subs	r9, r0, #0
	beq	.L5589
	b	.L5581
.L5621:
	ldr	r2, [r8, #32]
	tst	r2, #2048
	bne	.L5606
	ldr	r2, [r4, #32]
	cmp	r2, #0
	bne	.L5604
	ldr	r1, .L5630+4
	add	r10, sp, #20
	add	r9, r4, #20
	ldr	r0, [fp, #12]
	str	r2, [sp, #20]
	add	r2, sp, #32
	str	r2, [sp, #32]
.LPIC1432:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	str	r2, [sp, #36]
	strd	r0, [sp, #24]
	b	.L5584
.L5627:
	bl	schedule(PLT)
.L5584:
	mov	r0, r9
	mov	r1, r10
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r7, [r4, #40]
	cmp	r7, #0
	bne	.L5582
	ldr	r2, [fp, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L5627
	mov	r0, r9
	mov	r1, r10
	mov	r9, #65024
	bl	finish_wait(PLT)
	movt	r9, 65535
	b	.L5581
.L5602:
	mov	r5, r9
.L5579:
	ldr	r0, .L5630+8
	movw	r1, #786
	mvn	r9, #18
.LPIC1428:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L5581
.L5587:
	ldr	r0, [r4, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r4
	bl	mutex_unlock(PLT)
	ldr	r2, [r4, #36]
	ldr	r2, [r2, #92]
	cmp	r2, #2
	beq	.L5580
	b	.L5579
.L5626:
	ldr	r9, [r7, #24]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r9, #0
	ble	.L5592
	ldr	r3, [sp, #8]
	cmp	r3, r9
	mvncc	r9, #74
	bcc	.L5592
	mov	r3, sp
	bic	r2, r3, #8128
	ldr	r3, [sp, #12]
	bic	r2, r2, #63
	ldr	r2, [r2, #8]
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r9; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	cmp	r2, #0
	mvnne	r9, #13
	bne	.L5592
	mov	r2, r9
	mov	r0, r3
	mov	r1, r5
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	mvnne	r9, #13
	b	.L5592
.L5604:
	mvn	r9, #18
	b	.L5581
.L5623:
	mvn	r0, #11
	b	.L5616
.L5582:
	mov	r0, r9
	mov	r1, r10
	bl	finish_wait(PLT)
	b	.L5597
.L5607:
	mvn	r9, #4
	b	.L5592
.L5624:
	ldr	r0, [r7]
	cmp	r0, #0
	beq	.L5628
	ldr	r2, [r0, #8]
	mov	r1, #1
	ldr	r2, [r2, #24]
	blx	r2
.L5598:
	ldr	r0, [r4, #36]
	mvn	r9, #73
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq(PLT)
	b	.L5592
.L5625:
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [r4, #40]
	cmp	r2, r7
	beq	.L5629
.L5594:
	ldr	r0, [r4, #36]
	mvn	r9, #3
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq(PLT)
	b	.L5592
.L5629:
	ldr	r0, [r7]
	mov	r1, r8
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
	b	.L5594
.L5606:
	mvn	r9, #10
	b	.L5581
.L5601:
	mvn	r0, #18
	b	.L5616
.L5628:
	ldr	r0, .L5630+12
	movw	r1, #861
.LPIC1430:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L5598
.L5631:
	.align	2
.L5630:
	.word	ffs_epfile_io_complete-(.LPIC1431+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1432+8))
	.word	.LC185-(.LPIC1428+8)
	.word	.LC185-(.LPIC1430+8)
	.fnend
	.size	ffs_epfile_read, .-ffs_epfile_read
	.align	2
	.type	ghsic_data_probe, %function
ghsic_data_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L5662
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
.LPIC1433:
	add	r5, pc, r5
	ldr	r7, [r5, #1632]
	cmp	r7, #0
	beq	.L5633
	ldr	r4, [r5, #1636]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5634
	cmp	r7, #1
	bls	.L5633
	ldr	r4, [r5, #1740]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5634
	cmp	r7, #2
	beq	.L5633
	ldr	r4, [r5, #1844]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5634
	cmp	r7, #3
	beq	.L5633
	ldr	r4, [r5, #1948]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5634
.L5633:
	ldr	r1, .L5662+4
	mvn	r2, #21
	ldr	r0, .L5662+8
.LPIC1439:
	add	r1, pc, r1
	add	r1, r1, #2768
.LPIC1438:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #21
.L5636:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5634:
	mov	r0, #1
	add	r1, r4, #180
	bl	_set_bit(PLT)
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L5636
	mov	r0, #4
	ldr	r1, [r4, #84]
	add	r2, r4, #88
	bl	queue_work_on(PLT)
	mov	r0, #0
	b	.L5636
.L5663:
	.align	2
.L5662:
	.word	.LANCHOR1-(.LPIC1433+8)
	.word	.LANCHOR3-(.LPIC1439+8)
	.word	.LC96-(.LPIC1438+8)
	.fnend
	.size	ghsic_data_probe, .-ghsic_data_probe
	.align	2
	.type	ghsic_ctrl_probe, %function
ghsic_ctrl_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L5695
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
.LPIC1440:
	add	r5, pc, r5
	ldr	r7, [r5, #1212]
	cmp	r7, #0
	beq	.L5665
	ldr	r4, [r5, #1216]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5666
	cmp	r7, #1
	bls	.L5665
	ldr	r4, [r5, #1320]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5666
	cmp	r7, #2
	beq	.L5665
	ldr	r4, [r5, #1424]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5666
	cmp	r7, #3
	beq	.L5665
	ldr	r4, [r5, #1528]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #64]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5666
.L5665:
	ldr	r1, .L5695+4
	mvn	r2, #21
	ldr	r0, .L5695+8
.LPIC1446:
	add	r1, pc, r1
	add	r1, r1, #2784
.LPIC1445:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #21
.L5668:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5666:
	mov	r0, #1
	add	r1, r4, #84
	add	r5, r4, #4
	bl	_set_bit(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #8]
	mov	r6, r0
	cmp	r3, #0
	beq	.L5669
	mov	r0, #4
	ldr	r1, [r4, #12]
	add	r2, r4, #16
	bl	queue_work_on(PLT)
.L5669:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L5668
.L5696:
	.align	2
.L5695:
	.word	.LANCHOR1-(.LPIC1440+8)
	.word	.LANCHOR3-(.LPIC1446+8)
	.word	.LC96-(.LPIC1445+8)
	.fnend
	.size	ghsic_ctrl_probe, .-ghsic_ctrl_probe
	.align	2
	.type	ghsuart_data_free_buffers, %function
ghsuart_data_free_buffers:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxeq	lr
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r7, r0, #72
	mov	r0, r7
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r6, [r5, #8]
	mov	r8, r0
	cmp	r6, #0
	beq	.L5708
	ldr	r1, [r5, #48]
	add	r9, r5, #48
	cmp	r9, r1
	beq	.L5704
.L5703:
	mov	r0, r1
	sub	r4, r1, #36
	bl	list_del(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r1, [r5, #48]
	cmp	r9, r1
	bne	.L5703
.L5704:
	ldr	r3, [r5, #56]
	add	r4, r5, #56
	cmp	r3, r4
	cmpne	r3, #0
	movne	r6, #0
	beq	.L5702
.L5705:
	ldr	r2, [r5, #64]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r5, #64]
	ldmia	r3, {r1, r2}
	str	r6, [r3]
	str	r6, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r5, #56]
	cmp	r3, r4
	cmpne	r3, #0
	bne	.L5705
.L5702:
	mov	r0, r7
	mov	r1, r8
	add	r7, r5, #104
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r6, [r5, #12]
	mov	r8, r0
	cmp	r6, #0
	beq	.L5708
	ldr	r1, [r5, #80]
	add	r9, r5, #80
	cmp	r1, r9
	beq	.L5710
.L5709:
	mov	r0, r1
	sub	r4, r1, #36
	bl	list_del(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r1, [r5, #80]
	cmp	r1, r9
	bne	.L5709
.L5710:
	ldr	r3, [r5, #88]
	add	r4, r5, #88
	cmp	r3, r4
	cmpne	r3, #0
	movne	r6, #0
	beq	.L5708
.L5711:
	ldr	r2, [r5, #96]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r5, #96]
	ldmia	r3, {r1, r2}
	str	r6, [r3]
	str	r6, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r5, #88]
	cmp	r3, r4
	cmpne	r3, #0
	bne	.L5711
.L5708:
	mov	r0, r7
	mov	r1, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
	.fnend
	.size	ghsuart_data_free_buffers, .-ghsuart_data_free_buffers
	.align	2
	.type	ghsuart_data_remove, %function
ghsuart_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5749
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0, #4]
.LPIC1447:
	add	r3, pc, r3
	ldr	r1, [r3, #2224]
	cmp	r2, r1
	bcs	.L5747
	mov	r1, #84
	mla	r2, r1, r2, r3
	ldr	r4, [r2, #2228]
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L5723
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5723
	blx	r3
.L5723:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L5724
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5724
	blx	r3
.L5724:
	mov	r0, r4
	bl	ghsuart_data_free_buffers(PLT)
	ldr	r5, [r4, #16]
	cmp	r5, #0
	beq	.L5748
.L5726:
	ldr	r1, .L5749+4
	add	r5, r4, #188
	ldr	r0, .L5749+8
	ldr	r2, [r4, #180]
.LPIC1452:
	add	r1, pc, r1
	add	r1, r1, #2800
.LPIC1451:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mov	r1, r5
	mov	r0, #1
	bl	_clear_bit(PLT)
	mov	r1, r5
	mov	r0, #0
	bl	_clear_bit(PLT)
	mov	r0, #2
	mov	r1, r5
	bl	_clear_bit(PLT)
	mov	r0, #0
.L5722:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L5748:
	add	r6, r4, #20
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	mov	r0, r6
	ldr	r6, [r4, #24]
	str	r5, [r4, #200]
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	beq	.L5726
	ldr	r3, [r6, #120]
	cmp	r3, #0
	beq	.L5726
	mov	r0, r6
	blx	r3
	b	.L5726
.L5747:
	ldr	r1, .L5749+12
	ldr	r0, .L5749+16
.LPIC1449:
	add	r1, pc, r1
	add	r1, r1, #2800
.LPIC1448:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #21
	b	.L5722
.L5750:
	.align	2
.L5749:
	.word	.LANCHOR1-(.LPIC1447+8)
	.word	.LANCHOR3-(.LPIC1452+8)
	.word	.LC368-(.LPIC1451+8)
	.word	.LANCHOR3-(.LPIC1449+8)
	.word	.LC96-(.LPIC1448+8)
	.fnend
	.size	ghsuart_data_remove, .-ghsuart_data_remove
	.align	2
	.type	ghsic_data_free_buffers, %function
ghsic_data_free_buffers:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxeq	lr
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r7, r0, #48
	mov	r0, r7
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r6, [r5, #8]
	mov	r8, r0
	cmp	r6, #0
	beq	.L5762
	ldr	r1, [r5, #24]
	add	r9, r5, #24
	cmp	r9, r1
	beq	.L5758
.L5757:
	mov	r0, r1
	sub	r4, r1, #36
	bl	list_del(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r1, [r5, #24]
	cmp	r9, r1
	bne	.L5757
.L5758:
	ldr	r3, [r5, #32]
	add	r4, r5, #32
	cmp	r3, r4
	cmpne	r3, #0
	movne	r6, #0
	beq	.L5756
.L5759:
	ldr	r2, [r5, #40]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r5, #40]
	ldmia	r3, {r1, r2}
	str	r6, [r3]
	str	r6, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r5, #32]
	cmp	r3, r4
	cmpne	r3, #0
	bne	.L5759
.L5756:
	mov	r0, r7
	mov	r1, r8
	add	r7, r5, #80
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r6, [r5, #12]
	mov	r8, r0
	cmp	r6, #0
	beq	.L5762
	ldr	r1, [r5, #56]
	add	r9, r5, #56
	cmp	r1, r9
	beq	.L5764
.L5763:
	mov	r0, r1
	sub	r4, r1, #36
	bl	list_del(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r1, [r5, #56]
	cmp	r1, r9
	bne	.L5763
.L5764:
	ldr	r3, [r5, #64]
	add	r4, r5, #64
	cmp	r3, r4
	cmpne	r3, #0
	movne	r6, #0
	beq	.L5762
.L5765:
	ldr	r2, [r5, #72]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r5, #72]
	ldmia	r3, {r1, r2}
	str	r6, [r3]
	str	r6, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r5, #64]
	cmp	r3, r4
	cmpne	r3, #0
	bne	.L5765
.L5762:
	mov	r0, r7
	mov	r1, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
	.fnend
	.size	ghsic_data_free_buffers, .-ghsic_data_free_buffers
	.align	2
	.type	ghsic_data_remove, %function
ghsic_data_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L5815
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
.LPIC1453:
	add	r5, pc, r5
	ldr	r7, [r5, #1632]
	cmp	r7, #0
	beq	.L5775
	ldr	r4, [r5, #1636]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5776
	cmp	r7, #1
	bls	.L5775
	ldr	r4, [r5, #1740]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5776
	cmp	r7, #2
	beq	.L5775
	ldr	r4, [r5, #1844]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5776
	cmp	r7, #3
	beq	.L5775
	ldr	r4, [r5, #1948]
	mov	r1, r6
	mov	r2, #20
	ldr	r0, [r4, #160]
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L5776
.L5775:
	ldr	r1, .L5815+4
	mvn	r2, #21
	ldr	r0, .L5815+8
.LPIC1459:
	add	r1, pc, r1
.LPIC1458:
	add	r0, pc, r0
	add	r1, r1, #2832
	bl	printk(PLT)
	mvn	r0, #21
.L5778:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5776:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L5779
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5779
	blx	r3
.L5779:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L5780
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L5780
	blx	r3
.L5780:
	add	r0, r4, #120
	add	r5, r4, #180
	bl	cancel_work_sync(PLT)
	mov	r0, r4
	bl	ghsic_data_free_buffers(PLT)
	add	r0, r4, #88
	bl	cancel_work_sync(PLT)
	mov	r1, r5
	mov	r0, #0
	bl	_test_and_clear_bit(PLT)
	mov	r0, #1
	mov	r1, r5
	bl	_clear_bit(PLT)
	mov	r0, #0
	b	.L5778
.L5816:
	.align	2
.L5815:
	.word	.LANCHOR1-(.LPIC1453+8)
	.word	.LANCHOR3-(.LPIC1459+8)
	.word	.LC96-(.LPIC1458+8)
	.fnend
	.size	ghsic_data_remove, .-ghsic_data_remove
	.align	2
	.type	acc_complete_in, %function
acc_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r3, .L5820
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
.LPIC1460:
	add	r3, pc, r3
	ldr	r4, [r3, #2496]
	cmn	r2, #108
	bne	.L5818
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	and	r3, r3, #254
	orr	r3, r3, #2
	strb	r3, [r4, #100]
.L5818:
	add	r5, r4, #88
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	add	r2, r4, #1648
	mov	r7, r0
	ldr	r1, [r4, #1660]
	add	r0, r6, #36
	add	r2, r2, #8
	bl	__list_add(PLT)
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r0, r4, #1664
	ldrd	r6, [sp, #8]
	mov	r1, #3
	ldrd	r4, [sp]
	add	r0, r0, #12
	mov	r2, #1
	ldr	r8, [sp, #16]
	mov	r3, #0
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up(PLT)
.L5821:
	.align	2
.L5820:
	.word	.LANCHOR1-(.LPIC1460+8)
	.fnend
	.size	acc_complete_in, .-acc_complete_in
	.align	2
	.type	audio_data_complete, %function
audio_data_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	str	r8, [sp, #16]
	ldr	r4, [r1, #32]
	add	r6, r4, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	ldr	r1, [r4, #100]
	add	r0, r5, #36
	add	r2, r4, #96
	bl	__list_add(PLT)
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #112]
	cmp	r3, #0
	beq	.L5822
	ldr	r6, [r5, #44]
	cmp	r6, #0
	bne	.L5822
	ldr	r3, [r5, #48]
	ldr	r1, [r4, #128]
	ldr	r2, [r4, #124]
	add	r3, r3, r1
	cmp	r3, r2
	str	r3, [r4, #128]
	bcs	.L5829
.L5824:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	audio_send(PLT)
.L5822:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5829:
	ldr	r0, [r4, #92]
	bl	snd_pcm_period_elapsed(PLT)
	str	r6, [r4, #128]
	b	.L5824
	.fnend
	.size	audio_data_complete, .-audio_data_complete
	.align	2
	.type	ccid_bulk_complete_in, %function
ccid_bulk_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5836
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	str	lr, [sp, #20]
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	ldr	r2, [r1, #44]
.LPIC1461:
	add	r3, pc, r3
	ldr	r4, [r3, #2396]
	cmp	r2, #0
	movne	r3, #1
	add	r5, r4, #92
	strne	r3, [r4, #148]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	add	r2, r4, #192
	ldr	r1, [r4, #196]
	add	r0, r6, #36
	bl	__list_add(PLT)
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	add	r0, r4, #172
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up(PLT)
.L5837:
	.align	2
.L5836:
	.word	.LANCHOR1-(.LPIC1461+8)
	.fnend
	.size	ccid_bulk_complete_in, .-ccid_bulk_complete_in
	.align	2
	.type	gsmd_read_complete, %function
gsmd_read_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L5846
	add	r7, r4, #4
	mov	r6, r0
	mov	r0, r7
	mov	r5, r1
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	beq	.L5840
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L5840
	add	r0, r5, #36
	ldr	r1, [r4, #24]
	add	r2, r4, #20
	bl	__list_add(PLT)
	ldr	r3, .L5847
	add	r2, r4, #28
	mov	r0, #4
.LPIC1464:
	add	r3, pc, r3
	ldr	r1, [r3, #-1188]
	bl	queue_work_on(PLT)
	ldrd	r4, [sp]
	mov	r0, r7
	ldr	r8, [sp, #16]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L5840:
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r5]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L5846:
	ldr	r1, .L5847+4
	ldr	r0, .L5847+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC1463:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	add	r1, r1, #2848
	ldr	lr, [sp, #20]
.LPIC1462:
	add	r0, pc, r0
	add	r1, r1, #4
	add	sp, sp, #24
	b	printk(PLT)
.L5848:
	.align	2
.L5847:
	.word	.LANCHOR4-(.LPIC1464+8)
	.word	.LANCHOR3-(.LPIC1463+8)
	.word	.LC21-(.LPIC1462+8)
	.fnend
	.size	gsmd_read_complete, .-gsmd_read_complete
	.align	2
	.type	gsmd_write_complete, %function
gsmd_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r4, [r0]
	.pad #12
	sub	sp, sp, #12
	cmp	r4, #0
	beq	.L5861
	add	r7, r4, #4
	mov	r6, r0
	mov	r0, r7
	mov	r5, r1
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #72]
	ldr	r3, [r3, #8]
	tst	r3, #1
	beq	.L5851
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L5851
	cmp	r3, #0
	bne	.L5862
.L5853:
	add	r0, r5, #36
	add	r1, r4, #44
	ldr	r2, [r4, #44]
	bl	__list_add(PLT)
	ldr	r3, .L5863
	add	r2, r4, #52
	mov	r0, #4
.LPIC1469:
	add	r3, pc, r3
	ldr	r1, [r3, #-1188]
	bl	queue_work_on(PLT)
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	_raw_spin_unlock(PLT)
.L5851:
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r5]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	bx	r3	@ indirect register sibling call
.L5861:
	ldr	r1, .L5863+4
	ldr	r0, .L5863+8
.LPIC1466:
	add	r1, pc, r1
	add	r1, r1, #2864
.LPIC1465:
	add	r0, pc, r0
	add	r1, r1, #8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	printk(PLT)
.L5862:
	ldr	r1, .L5863+12
	str	r3, [sp, #4]
	mov	r2, r4
	ldr	r3, [r6, #4]
	ldr	r0, .L5863+16
.LPIC1468:
	add	r1, pc, r1
	add	r1, r1, #2864
	str	r3, [sp]
	ldr	r3, [r4]
	add	r1, r1, #8
.LPIC1467:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L5853
.L5864:
	.align	2
.L5863:
	.word	.LANCHOR4-(.LPIC1469+8)
	.word	.LANCHOR3-(.LPIC1466+8)
	.word	.LC21-(.LPIC1465+8)
	.word	.LANCHOR3-(.LPIC1468+8)
	.word	.LC88-(.LPIC1467+8)
	.fnend
	.size	gsmd_write_complete, .-gsmd_write_complete
	.align	2
	.type	bam_data_start, %function
bam_data_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldr	r3, [r0, #4]
	beq	.L5880
	cmp	r3, #0
	beq	.L5865
	ldr	r3, [r3, #8]
	mov	r2, #32
	ldr	r1, [r0, #40]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r3, [ip, #16]
	blx	r3
	cmp	r0, #0
	bne	.L5881
.L5865:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L5880:
	cmp	r3, #0
	beq	.L5865
	ldr	r3, [r3, #12]
	mov	r2, #32
	ldr	r1, [r0, #36]
	ldr	ip, [r3, #8]
	mov	r0, r3
	ldr	r3, [ip, #16]
	blx	r3
	cmp	r0, #0
	beq	.L5865
	ldr	r1, .L5882
	mov	r2, r0
	ldr	r0, .L5882+4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC1471:
	add	r1, pc, r1
	add	r1, r1, #2880
.LPIC1470:
	add	r0, pc, r0
	add	r1, r1, #12
	b	printk(PLT)
.L5881:
	ldr	r1, .L5882+8
	mov	r2, r0
	ldr	r0, .L5882+12
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC1473:
	add	r1, pc, r1
	add	r1, r1, #2912
.LPIC1472:
	add	r0, pc, r0
	add	r1, r1, #8
	b	printk(PLT)
.L5883:
	.align	2
.L5882:
	.word	.LANCHOR3-(.LPIC1471+8)
	.word	.LC201-(.LPIC1470+8)
	.word	.LANCHOR3-(.LPIC1473+8)
	.word	.LC201-(.LPIC1472+8)
	.fnend
	.size	bam_data_start, .-bam_data_start
	.align	2
	.type	mbim_notify_complete, %function
mbim_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r8, [sp, #16]
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r6, [r1, #32]
	ldr	r5, [r1]
	add	r8, r6, #204
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #44]
	cmn	r3, #104
	beq	.L5886
	cmp	r3, #0
	beq	.L5887
	cmn	r3, #108
	beq	.L5886
	ldr	r1, .L5939
	ldr	r0, .L5939+4
	ldrb	r2, [r5, #1]	@ zero_extendqisi2
.LPIC1478:
	add	r1, pc, r1
	add	r1, r1, #2944
.LPIC1477:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
.L5888:
	ldr	r4, [r6, #160]
	cmp	r4, #0
	beq	.L5901
	ldrb	r3, [r6, #164]	@ zero_extendqisi2
	ldr	r2, [r4]
	cmp	r3, #0
	beq	.L5903
	cmp	r3, #3
	bne	.L5935
	ldr	r3, [r6, #168]
	cmp	r3, #0
	ble	.L5901
	mov	r0, r8
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r6, #156]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r4, r0
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	cmp	r4, #0
	bne	.L5936
.L5901:
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock(PLT)
.L5886:
	ldr	r1, .L5939+8
	mov	r3, #0
	mov	r9, r6
	ldr	r0, .L5939+12
	strb	r3, [r6, #164]
	str	r3, [r6, #168]
.LPIC1475:
	add	r1, pc, r1
	add	r1, r1, #2944
.LPIC1474:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r8
	bl	_raw_spin_unlock(PLT)
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	ldr	r4, [r9, #208]!
	cmp	r4, r9
	ldr	r5, [r4]
	bne	.L5893
	b	.L5894
.L5906:
	mov	r5, r3
.L5893:
	mov	r0, r4
	sub	r7, r4, #8
	bl	list_del(PLT)
	cmp	r7, #0
	beq	.L5892
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
.L5892:
	cmp	r9, r5
	ldr	r3, [r5]
	mov	r4, r5
	bne	.L5906
.L5894:
	mov	r10, r6
	ldr	r4, [r10, #216]!
	cmp	r4, r10
	ldr	r5, [r4]
	bne	.L5898
	b	.L5891
.L5908:
	mov	r5, r3
.L5898:
	mov	r0, r4
	sub	r7, r4, #8
	bl	list_del(PLT)
	cmp	r7, #0
	beq	.L5897
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r7
	bl	kfree(PLT)
.L5897:
	cmp	r5, r10
	ldr	r3, [r5]
	mov	r4, r5
	bne	.L5908
.L5891:
	mov	r0, r8
	bl	_raw_spin_unlock(PLT)
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	ldr	r3, .L5939+16
.LPIC1485:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L5937
	movw	r1, #32800
	mov	r2, #16
	bl	kmem_cache_alloc_trace(PLT)
	subs	r3, r0, #0
	beq	.L5938
.L5895:
	mov	r1, #16
	mov	r2, #0
	mov	r0, r3
	stmia	r3, {r1, r2}
.L5899:
	mov	r2, r9
	ldr	r1, [r6, #212]
	add	r0, r0, #8
	bl	__list_add(PLT)
	mov	r0, r8
	bl	_raw_spin_unlock(PLT)
	add	r0, r6, #108
	mov	r1, #3
	mov	r2, #1
	mov	r3, #0
	bl	__wake_up(PLT)
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	b	.L5888
.L5887:
	add	r3, r6, #168
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r3, [r6, #168]
	b	.L5888
.L5935:
	mvn	r3, #94
	add	r5, r6, #168
	strb	r3, [r2]
	ldrb	r3, [r6, #196]	@ zero_extendqisi2
	strh	r3, [r2, #4]	@ unaligned
#APP
@ 45 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, r8
	ldr	r3, [r6, #168]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r6, #156]
	mov	r1, r4
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r4, r0
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	cmp	r4, #0
	beq	.L5901
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L5939+20
	mov	r2, r4
	ldr	r0, .L5939+24
.LPIC1484:
	add	r1, pc, r1
	add	r1, r1, #2960
.LPIC1483:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L5901
.L5903:
	ldr	r3, [r6, #168]
	cmp	r3, #0
	ble	.L5901
	ldr	r1, .L5939+28
	ldr	r0, .L5939+32
.LPIC1480:
	add	r1, pc, r1
	add	r1, r1, #2960
.LPIC1479:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L5901
.L5937:
	mov	r3, #16
	b	.L5895
.L5938:
	mvn	r0, #11
	b	.L5899
.L5936:
	add	r3, r6, #168
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L5939+36
	mov	r2, r4
	ldr	r0, .L5939+40
.LPIC1482:
	add	r1, pc, r1
	add	r1, r1, #2960
.LPIC1481:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L5901
.L5940:
	.align	2
.L5939:
	.word	.LANCHOR3-(.LPIC1478+8)
	.word	.LC370-(.LPIC1477+8)
	.word	.LANCHOR3-(.LPIC1475+8)
	.word	.LC369-(.LPIC1474+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1485+8))
	.word	.LANCHOR3-(.LPIC1484+8)
	.word	.LC373-(.LPIC1483+8)
	.word	.LANCHOR3-(.LPIC1480+8)
	.word	.LC371-(.LPIC1479+8)
	.word	.LANCHOR3-(.LPIC1482+8)
	.word	.LC372-(.LPIC1481+8)
	.fnend
	.size	mbim_notify_complete, .-mbim_notify_complete
	.align	2
	.type	ghsic_data_write_tohost, %function
ghsic_data_write_tohost:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #136
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r5, r0, #88
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r0, r5
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r7, [r4, #-128]
	mov	r6, r0
	cmp	r7, #0
	beq	.L5945
	sub	r2, r4, #112
	ldr	r9, .L5971
	movw	r3, #16960
	movt	r3, 15
	str	r2, [sp, #4]
	ldr	r2, .L5971+4
	str	r3, [sp, #12]
.LPIC1490:
	add	r9, pc, r9
.LPIC1487:
	add	r2, pc, r2
	str	r2, [sp, #8]
.L5944:
	ldr	r3, [r4, #-112]
	ldr	r2, [sp, #4]
	cmp	r2, r3
	beq	.L5945
	mov	r3, r4
	ldr	r10, [r3, #-104]!
	cmp	r10, r3
	cmpne	r10, #0
	beq	.L5945
	ldr	r3, [r4, #-96]
	mov	r1, #0
	ldr	r2, .L5971+8
	sub	r3, r3, #1
.LPIC1492:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [r4, #-96]
	ldmia	r10, {r0, r3}
	str	r1, [r10]
	str	r1, [r10, #4]
	str	r3, [r0, #4]
	str	r0, [r3]
	ldr	fp, [r4, #-112]
	str	r10, [fp, #-4]
	ldr	r0, [r10, #172]
	sub	r8, fp, #36
	ldrb	r3, [fp, #-10]	@ zero_extendqisi2
	str	r0, [fp, #-36]
	ldr	r0, [r10, #80]
	orr	r3, r3, #2
	strb	r3, [fp, #-10]
	str	r0, [fp, #-32]
	ldr	r3, [r4, #48]
	mov	r0, fp
	ldr	r2, [r2]
	add	r3, r3, #1
	cmp	r3, r2
	str	r3, [r4, #48]
	ldrb	r3, [fp, #-10]	@ zero_extendqisi2
	bfieq	r3, r1, #0, #1
	orrne	r3, r3, #1
	streqb	r3, [fp, #-10]
	strneb	r3, [fp, #-10]
	streq	r1, [r4, #48]
	bl	list_del(PLT)
	ldr	r3, [sp, #8]
	ldr	r3, [r3, #-632]
	cmp	r3, #0
	bne	.L5969
.L5948:
	mov	r1, r6
	str	r3, [r10, #44]
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r7, #8]
	mov	r1, r8
	mov	r2, #208
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r8, #0
	mov	r6, r0
	bne	.L5970
	ldr	r3, [r4, #56]
	ldr	r2, [r9, #316]
	add	r3, r3, #1
	cmp	r2, #0
	str	r3, [r4, #56]
	beq	.L5944
	ldr	r2, [r4, #-96]
	ldr	r3, [r9, #436]
	cmp	r2, r3
	bhi	.L5944
	mov	r0, #2
	add	r1, r4, #28
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	beq	.L5944
	ldr	r3, [r4, #64]
	ldr	r2, [r4, #-96]
	add	r3, r3, #1
	str	r2, [r4, #80]
	str	r3, [r4, #64]
	b	.L5944
.L5970:
	ldr	r1, .L5971+12
	ldr	r0, .L5971+16
.LPIC1489:
	add	r1, pc, r1
	add	r1, r1, #2976
.LPIC1488:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r1, [sp, #4]
	mov	r0, fp
	ldr	r2, [r4, #-112]
	bl	__list_add(PLT)
	mov	r0, r10
	bl	dev_kfree_skb_any(PLT)
.L5945:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L5969:
	add	r0, sp, #16
	bl	do_gettimeofday(PLT)
	ldr	r3, [sp, #16]
	ldr	r2, [sp, #20]
	ldr	r1, [sp, #12]
	ubfx	r3, r3, #0, #12
	mla	r3, r1, r3, r2
	b	.L5948
.L5972:
	.align	2
.L5971:
	.word	.LANCHOR2-(.LPIC1490+8)
	.word	.LANCHOR4-(.LPIC1487+8)
	.word	ghsic_data_tx_intr_thld(GOT_PREL)+(.-(.LPIC1492+8))
	.word	.LANCHOR3-(.LPIC1489+8)
	.word	.LC333-(.LPIC1488+8)
	.fnend
	.size	ghsic_data_write_tohost, .-ghsic_data_write_tohost
	.align	2
	.type	ffs_sb_fill, %function
ffs_sb_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L5993
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r2, #29537
	strd	r6, [sp, #8]
	mov	ip, #12
	mov	r6, r1
	str	r8, [sp, #16]
	movt	r2, 2660
	mov	r8, #0
	str	lr, [sp, #20]
	ldr	r7, [r1, #20]
	mov	lr, #4096
.LPIC1493:
	add	r3, pc, r3
	mov	r1, #1
	.pad #8
	sub	sp, sp, #8
	mov	r5, r0
	str	r0, [r7, #192]
	str	r8, [r6, #20]
	str	r7, [r0, #616]
	str	lr, [r0, #16]
	strb	ip, [r0, #13]
	str	r2, [r0, #56]
	str	r3, [r0, #36]
	str	r1, [r0, #628]
	ldrh	r3, [r6, #12]
	strh	r3, [r6]	@ movhi
	bl	new_inode(PLT)
	subs	r4, r0, #0
	beq	.L5974
	mov	r0, sp
	bl	current_kernel_time(PLT)
	bl	get_next_ino(PLT)
	str	r0, [r4, #40]
	ldrh	ip, [r6]
	ldr	r0, .L5993+4
	ldr	r1, .L5993+8
	ldrd	r2, [sp]
	strh	ip, [r4]	@ movhi
	ldr	ip, [r6, #4]
.LPIC1499:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
.LPIC1498:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	str	ip, [r4, #4]
	ldr	ip, [r6, #8]
	str	r8, [r4, #328]
	str	r0, [r4, #200]
	str	r1, [r4, #24]
	str	ip, [r4, #8]
	strd	r2, [r4, #52]
	strd	r2, [r4, #60]
	strd	r2, [r4, #68]
.L5974:
	mov	r0, r4
	bl	d_make_root(PLT)
	cmp	r0, #0
	str	r0, [r5, #60]
	beq	.L5978
	ldr	r1, .L5993+12
	ldr	r6, [r5, #616]
.LPIC1495:
	add	r1, pc, r1
	bl	d_alloc_name(PLT)
	subs	r8, r0, #0
	beq	.L5978
	mov	r0, r5
	bl	new_inode(PLT)
	subs	r4, r0, #0
	beq	.L5979
	mov	r0, sp
	bl	current_kernel_time(PLT)
	bl	get_next_ino(PLT)
	str	r0, [r4, #40]
	ldrh	r2, [r6, #196]
	ldr	r3, .L5993+16
	ldrd	r0, [sp]
	strh	r2, [r4]	@ movhi
	ldr	r2, [r6, #200]
.LPIC1496:
	add	r3, pc, r3
	adds	r3, r3, #104
	str	r2, [r4, #4]
	ldr	r2, [r6, #204]
	strd	r0, [r4, #52]
	strd	r0, [r4, #60]
	strd	r0, [r4, #68]
	mov	r1, r4
	mov	r0, r8
	str	r2, [r4, #8]
	strne	r3, [r4, #200]
	str	r7, [r4, #328]
	bl	d_instantiate(PLT)
	mov	r0, r8
	bl	d_rehash(PLT)
	mov	r0, #0
.L5991:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L5979:
	mov	r0, r8
	bl	dput(PLT)
.L5978:
	mvn	r0, #11
	b	.L5991
.L5994:
	.align	2
.L5993:
	.word	.LANCHOR6-(.LPIC1493+8)
	.word	simple_dir_operations(GOT_PREL)+(.-(.LPIC1499+8))
	.word	simple_dir_inode_operations(GOT_PREL)+(.-(.LPIC1498+8))
	.word	.LC374-(.LPIC1495+8)
	.word	.LANCHOR6-(.LPIC1496+8)
	.fnend
	.size	ffs_sb_fill, .-ffs_sb_fill
	.align	2
	.type	ghsic_data_write_tomdm, %function
ghsic_data_write_tomdm:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #120
	bxeq	lr
	ldr	r3, [r0, #-116]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #40
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #44]
	mov	r8, r0
	ubfx	r3, r3, #1, #1
	cmp	r3, #0
	bne	.L6000
	mov	r2, r5
	ldr	r4, [r2, #-56]!
	cmp	r4, r2
	cmpne	r4, #0
	beq	.L6000
	ldr	r1, [r5, #-48]
	ldr	r2, .L6053
	sub	r1, r1, #1
.LPIC1504:
	add	r2, pc, r2
	str	r1, [r5, #-48]
	ldrd	r0, [r4]
	str	r3, [r4]
	str	r3, [r4, #4]
	str	r1, [r0, #4]
	str	r0, [r1]
	ldr	r3, [r2, #-632]
	cmp	r3, #0
	bne	.L6047
.L6001:
	mov	r1, r8
	str	r3, [r4, #40]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r7, .L6053+4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	ldr	r0, .L6053+8
.LPIC1501:
	add	r7, pc, r7
	add	r7, r7, #3008
.LPIC1500:
	add	r0, pc, r0
	add	r7, r7, #4
	add	r0, r0, #440
	mov	r1, r7
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L6048
.L5999:
	ldr	r3, [r5, #92]
	mov	r0, r4
	add	r3, r3, #1
	str	r3, [r5, #92]
	bl	dev_kfree_skb_any(PLT)
.L6000:
.L5998:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r7, [r5, #-108]
	mov	fp, r0
	cmp	r7, #0
	beq	.L6004
	movw	r3, #16960
	sub	r2, r5, #64
	ldr	r10, .L6053+12
	movt	r3, 15
	ldr	r8, .L6053+16
	str	r2, [sp, #8]
	ldr	r2, .L6053+20
	str	r3, [sp, #20]
	ldr	r3, .L6053+24
.LPIC1505:
	add	r10, pc, r10
.LPIC1507:
	add	r8, pc, r8
.LPIC1506:
	add	r2, pc, r2
.LPIC1509:
	add	r3, pc, r3
	str	r2, [sp, #12]
	str	r3, [sp, #16]
	b	.L6008
.L6005:
	ldr	r0, [r8, #468]
	mov	r1, #208
	mov	r2, #0
	mvn	r3, #0
	bl	__alloc_skb(PLT)
	subs	r9, r0, #0
	beq	.L6049
	ldr	r2, [r9, #172]
	str	fp, [r9, #28]
	ldr	r3, [sp, #16]
	str	r2, [r4, #-36]
	ldr	r2, [r8, #468]
	str	r9, [r4, #-4]
	str	r2, [r4, #-32]
	ldr	ip, [r3, #-632]
	cmp	ip, #0
	bne	.L6050
.L6007:
	str	ip, [r9, #32]
	ldr	ip, [r7, #8]
	mov	r2, #208
	ldr	r1, [sp]
	mov	r0, r7
	ldr	ip, [ip, #16]
	blx	ip
	str	r0, [sp, #4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [sp, #4]
	mov	fp, r0
	cmp	r2, #0
	bne	.L6051
.L6008:
	ldr	r3, [r5, #-116]
	cmp	r3, #0
	beq	.L6004
	ldr	r4, [r5, #-64]
	ldr	r3, [sp, #8]
	mov	r0, r4
	cmp	r4, r3
	sub	r3, r4, #36
	str	r3, [sp]
	beq	.L6004
	ldr	r2, [r5, #-48]
	ldr	r3, [r10, #464]
	cmp	r2, r3
	bhi	.L6004
	bl	list_del(PLT)
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [sp, #12]
	ldr	fp, [r3, #-632]
	cmp	fp, #0
	beq	.L6005
	add	r0, sp, #24
	bl	do_gettimeofday(PLT)
	ldr	r3, [sp, #24]
	ldr	ip, [sp, #28]
	ldr	r2, [sp, #20]
	ubfx	r3, r3, #0, #12
	mla	fp, r2, r3, ip
	b	.L6005
.L6050:
	add	r0, sp, #24
	bl	do_gettimeofday(PLT)
	ldr	r2, [sp, #24]
	ldr	ip, [sp, #28]
	ldr	r3, [sp, #20]
	ubfx	r2, r2, #0, #12
	mla	ip, r3, r2, ip
	b	.L6007
.L6051:
	ldr	r8, .L6053+28
	mov	r0, r9
	bl	dev_kfree_skb_any(PLT)
	ldr	r0, .L6053+32
.LPIC1511:
	add	r8, pc, r8
	add	r8, r8, #3024
.LPIC1510:
	add	r0, pc, r0
	add	r8, r8, #12
	add	r0, r0, #472
	mov	r1, r8
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L6052
.L6009:
	ldr	r3, [r5, #-116]
	cmp	r3, #0
	beq	.L6010
	mov	r0, r4
	ldr	r1, [sp, #8]
	ldr	r2, [r5, #-64]
	bl	__list_add(PLT)
.L6004:
	mov	r0, r6
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6047:
	add	r0, sp, #24
	bl	do_gettimeofday(PLT)
	ldr	r2, [sp, #24]
	movw	r3, #16960
	ldr	r1, [sp, #28]
	movt	r3, 15
	ubfx	r2, r2, #0, #12
	mla	r3, r3, r2, r1
	b	.L6001
.L6049:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	fp, r0
	ldr	r1, [sp, #8]
	mov	r0, r4
	ldr	r2, [r5, #-64]
	bl	__list_add(PLT)
	b	.L6004
.L6010:
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r1, [sp]
	ldr	r3, [r3, #12]
	blx	r3
	b	.L6004
.L6052:
	ldr	r0, .L6053+36
	mov	r1, r8
.LPIC1512:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L6009
.L6048:
	ldr	r0, .L6053+40
	mov	r1, r7
	mvn	r2, #18
.LPIC1502:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L5999
.L6054:
	.align	2
.L6053:
	.word	.LANCHOR4-(.LPIC1504+8)
	.word	.LANCHOR3-(.LPIC1501+8)
	.word	.LANCHOR2-(.LPIC1500+8)
	.word	.LANCHOR2-(.LPIC1505+8)
	.word	.LANCHOR2-(.LPIC1507+8)
	.word	.LANCHOR4-(.LPIC1506+8)
	.word	.LANCHOR4-(.LPIC1509+8)
	.word	.LANCHOR3-(.LPIC1511+8)
	.word	.LANCHOR2-(.LPIC1510+8)
	.word	.LC150-(.LPIC1512+8)
	.word	.LC87-(.LPIC1502+8)
	.fnend
	.size	ghsic_data_write_tomdm, .-ghsic_data_write_tomdm
	.align	2
	.type	mtp_complete_in, %function
mtp_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6061
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	str	lr, [sp, #20]
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	ldr	r2, [r1, #44]
.LPIC1514:
	add	r3, pc, r3
	ldr	r4, [r3, #2504]
	cmp	r2, #0
	movne	r3, #4
	add	r5, r4, #88
	strne	r3, [r4, #104]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	add	r2, r4, #116
	ldr	r1, [r4, #120]
	add	r0, r6, #36
	bl	__list_add(PLT)
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	add	r0, r4, #144
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up(PLT)
.L6062:
	.align	2
.L6061:
	.word	.LANCHOR1-(.LPIC1514+8)
	.fnend
	.size	mtp_complete_in, .-mtp_complete_in
	.align	2
	.type	mtp_complete_intr, %function
mtp_complete_intr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6069
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	str	lr, [sp, #20]
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	ldr	r2, [r1, #44]
.LPIC1515:
	add	r3, pc, r3
	ldr	r4, [r3, #2504]
	cmp	r2, #0
	movne	r3, #4
	add	r5, r4, #88
	strne	r3, [r4, #104]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	add	r2, r4, #124
	ldr	r1, [r4, #128]
	add	r0, r6, #36
	bl	__list_add(PLT)
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	add	r0, r4, #156
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up(PLT)
.L6070:
	.align	2
.L6069:
	.word	.LANCHOR1-(.LPIC1515+8)
	.fnend
	.size	mtp_complete_intr, .-mtp_complete_intr
	.align	2
	.type	_snd_pcm_hw_param_set.constprop.114, %function
_snd_pcm_hw_param_set.constprop.114:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #36]
	cmp	r3, #0
	beq	.L6072
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L6089
	ldr	r4, [r0, #40]
	adds	r4, r4, #0
	movne	r4, #1
.L6073:
	mov	r6, r1, lsr #5
	and	r2, r1, #31
	mov	r7, #1
	add	r6, r5, r6, asl #2
	add	r0, r5, #36
	mov	r1, #32
	ldr	r3, [r6, #36]
	and	r7, r3, r7, asl r2
	bl	__memzero(PLT)
	str	r7, [r6, #36]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L6075
	ldr	r3, [r5, #40]
	cmp	r3, #0
	mvneq	r0, #21
	bne	.L6075
.L6076:
	ldr	r2, [r5, #516]
	ldr	r3, [r5, #512]
	orr	r2, r2, #2
	orr	r3, r3, #2
	str	r2, [r5, #516]
	str	r3, [r5, #512]
	b	.L6085
.L6075:
	cmp	r4, #0
	movne	r0, #1
	bne	.L6076
	mov	r0, r4
.L6085:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6072:
	ldr	r0, [r0, #40]
	cmp	r0, #0
	beq	.L6079
	sub	r3, r0, #1
	tst	r3, r0
	movne	r4, #1
	moveq	r4, #0
	b	.L6073
.L6089:
	mov	r4, #1
	b	.L6073
.L6079:
	mov	r4, r0
	b	.L6073
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.114, .-_snd_pcm_hw_param_set.constprop.114
	.align	2
	.type	_snd_pcm_hw_param_set.constprop.113, %function
_snd_pcm_hw_param_set.constprop.113:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #4]
	cmp	r3, #0
	beq	.L6091
	sub	r2, r3, #1
	tst	r2, r3
	bne	.L6108
	ldr	r4, [r0, #8]
	adds	r4, r4, #0
	movne	r4, #1
.L6092:
	mov	r6, r1, lsr #5
	and	r2, r1, #31
	mov	r7, #1
	add	r6, r5, r6, asl #2
	add	r0, r5, #4
	mov	r1, #32
	ldr	r3, [r6, #4]
	and	r7, r3, r7, asl r2
	bl	__memzero(PLT)
	str	r7, [r6, #4]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L6094
	ldr	r3, [r5, #8]
	cmp	r3, #0
	mvneq	r0, #21
	bne	.L6094
.L6095:
	ldr	r2, [r5, #516]
	ldr	r3, [r5, #512]
	orr	r2, r2, #1
	orr	r3, r3, #1
	str	r2, [r5, #516]
	str	r3, [r5, #512]
	b	.L6104
.L6094:
	cmp	r4, #0
	movne	r0, #1
	bne	.L6095
	mov	r0, r4
.L6104:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6091:
	ldr	r0, [r0, #8]
	cmp	r0, #0
	beq	.L6098
	sub	r3, r0, #1
	tst	r3, r0
	movne	r4, #1
	moveq	r4, #0
	b	.L6092
.L6108:
	mov	r4, #1
	b	.L6092
.L6098:
	mov	r4, r0
	b	.L6092
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.113, .-_snd_pcm_hw_param_set.constprop.113
	.align	2
	.type	_snd_pcm_hw_param_set.constprop.116, %function
_snd_pcm_hw_param_set.constprop.116:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	mov	r4, r0
	str	lr, [sp, #4]
	.pad #16
	sub	sp, sp, #16
	add	r0, r0, #296
	ldrb	r3, [sp, #12]	@ zero_extendqisi2
	add	r1, sp, #4
	str	r2, [sp, #8]
	str	r2, [sp, #4]
	and	r3, r3, #244
	orr	r3, r3, #4
	strb	r3, [sp, #12]
	bl	snd_interval_refine(PLT)
	cmp	r0, #0
	beq	.L6110
	ldr	r2, [r4, #516]
	ldr	r3, [r4, #512]
	orr	r2, r2, #2048
	orr	r3, r3, #2048
	str	r2, [r4, #516]
	str	r3, [r4, #512]
.L6110:
	add	sp, sp, #16
	@ sp needed
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	_snd_pcm_hw_param_set.constprop.116, .-_snd_pcm_hw_param_set.constprop.116
	.align	2
	.type	ffs_func_resume, %function
ffs_func_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r6, [r0, #-28]
	add	r4, r6, #116
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #96]
	mov	r5, r0
	add	lr, r6, #100
	ldrh	ip, [r6, #104]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r6, #96]
	cmp	ip, #0
	beq	.L6121
	add	ip, lr, ip
	mov	r3, lr
	mov	r1, lr
.L6119:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	sub	r0, r2, #5
	cmp	r0, #1
	strhib	r2, [r1]
	addhi	r1, r1, #1
	cmp	r3, ip
	bne	.L6119
	rsb	r1, lr, r1
	add	r3, r1, #1
	uxth	ip, r1
	uxth	r3, r3
.L6117:
	add	ip, r6, ip
	strh	r3, [r6, #104]	@ movhi
	mov	r2, #6
	mov	r0, r4
	mov	r1, #3
	strb	r2, [ip, #100]
	mov	r2, #1
	bl	__wake_up_locked(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	mov	r1, r5
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L6121:
	mov	r3, #1
	b	.L6117
	.fnend
	.size	ffs_func_resume, .-ffs_func_resume
	.align	2
	.type	ffs_func_suspend, %function
ffs_func_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #-28]
	add	r4, r6, #116
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #96]
	mov	r5, r0
	add	r0, r6, #100
	ldrh	ip, [r6, #104]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r6, #96]
	cmp	ip, #0
	beq	.L6130
	add	ip, r0, ip
	mov	r3, r0
	mov	r1, r0
.L6128:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	cmp	r2, #5
	strneb	r2, [r1]
	addne	r1, r1, #1
	cmp	r3, ip
	bne	.L6128
	rsb	r1, r0, r1
	add	r3, r1, #1
	uxth	ip, r1
	uxth	r3, r3
.L6126:
	add	ip, r6, ip
	strh	r3, [r6, #104]	@ movhi
	mov	r2, #5
	mov	r0, r4
	mov	r1, #3
	strb	r2, [ip, #100]
	mov	r2, #1
	bl	__wake_up_locked(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	mov	r1, r5
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L6130:
	mov	r3, #1
	b	.L6126
	.fnend
	.size	ffs_func_suspend, .-ffs_func_suspend
	.align	2
	.type	gs_put_char, %function
gs_put_char:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #92]
	mov	r1, r0
	ldr	r3, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r3, r5
	rsb	r3, r0, r3
	sub	r3, r3, #1
	udiv	r2, r3, r5
	mls	r3, r5, r2, r3
	cmp	r3, #0
	moveq	r5, r3
	beq	.L6134
	ldr	r3, [r4, #96]
	add	r5, r3, r5
	subs	r5, r5, r0
	bne	.L6146
	strb	r6, [r3]
	ldr	r3, [r4, #96]
	mov	r5, #1
	add	r3, r3, r5
	str	r3, [r4, #104]
.L6134:
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6146:
	cmp	r5, #1
	strb	r6, [r0]
	ldrne	r3, [r4, #104]
	movne	r5, #1
	ldreq	r3, [r4, #96]
	addne	r3, r3, r5
	str	r3, [r4, #104]
	b	.L6134
	.fnend
	.size	gs_put_char, .-gs_put_char
	.align	2
	.type	conn_gadget_ioctl, %function
conn_gadget_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	movw	r3, #29441
	ubfx	r4, r1, #8, #8
	str	lr, [sp, #20]
	movw	ip, #29442
	mov	lr, #29440
	strd	r6, [sp, #8]
	movt	lr, 32772
	movt	r3, 32772
	str	r8, [sp, #16]
	movt	ip, 32772
	.pad #40
	sub	sp, sp, #40
	mov	r0, #0
	cmp	r4, #115
	str	lr, [sp, #4]
	str	r3, [sp, #8]
	str	ip, [sp, #12]
	str	r0, [sp, #16]
	bne	.L6182
	mov	r5, r2
	uxtb	r2, r1
	cmp	r2, #2
	bhi	.L6183
	ubfx	r2, r1, #16, #14
	cmp	r2, #0
	beq	.L6184
	cmp	r1, #0
	bge	.L6185
	ldr	r2, .L6193
.LPIC1524:
	add	r2, pc, r2
	ldr	r4, [r2, #2492]
	cmp	r4, #0
	beq	.L6186
	cmp	r1, r3
	beq	.L6154
	cmp	r1, ip
	beq	.L6155
	cmp	r1, lr
	beq	.L6187
.L6177:
	add	sp, sp, #40
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6155:
	ldr	r2, [r4, #100]
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
	cmp	r2, #0
	movne	r2, #1
	moveq	r2, #2
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r1, r5, #4; sbcccs r1, r1, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	str	r2, [sp, #20]
	movne	r2, #4
	beq	.L6188
.L6167:
	ldr	r4, .L6193+4
	ldr	r0, .L6193+8
.LPIC1537:
	add	r4, pc, r4
	add	r1, r4, #3072
.LPIC1536:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, .L6193+12
	add	r1, r4, #3056
	mvn	r2, #13
.LPIC1538:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #13
	b	.L6177
.L6187:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r2, r5, #16; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	movne	r2, #16
	beq	.L6189
.L6157:
	ldr	r1, .L6193+16
	ldr	r0, .L6193+20
.LPIC1528:
	add	r1, pc, r1
.LPIC1527:
	add	r0, pc, r0
	add	r1, r1, #3056
	bl	printk(PLT)
	mvn	r0, #13
	b	.L6177
.L6154:
	ldr	r3, [r4, #100]
	ldr	r2, [r4, #212]
	cmp	r2, r3
	beq	.L6190
.L6180:
	mov	r2, sp
	cmp	r3, #0
	str	r3, [r4, #212]
	bic	r2, r2, #8128
	movne	r1, #1
	bic	r2, r2, #63
	moveq	r1, #2
	ldr	r3, [r2, #8]
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r2, r5, #4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	str	r1, [sp, #20]
	movne	r2, #4
	beq	.L6191
.L6164:
	ldr	r4, .L6193+24
	ldr	r0, .L6193+28
.LPIC1533:
	add	r4, pc, r4
	add	r1, r4, #3072
.LPIC1532:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, .L6193+32
	add	r1, r4, #3056
	mvn	r2, #13
.LPIC1534:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #13
	b	.L6177
.L6189:
	mov	r2, #16
	mov	r0, r5
	add	r1, sp, #4
	bl	__copy_to_user(PLT)
	subs	r2, r0, #0
	bne	.L6157
.L6172:
	mov	r0, #0
	b	.L6177
.L6188:
	mov	r2, #4
	mov	r0, r5
	add	r1, sp, #20
	bl	__copy_to_user(PLT)
	subs	r2, r0, #0
	moveq	r0, r2
	beq	.L6177
	b	.L6167
.L6190:
	ldr	r3, [r4, #216]
	cmp	r3, #0
	bne	.L6159
	ldr	r2, .L6193+36
	mov	r1, sp
	str	r3, [sp, #20]
	bic	r6, r1, #8128
	add	r3, sp, #32
	bic	r6, r6, #63
	add	r8, r4, #200
	ldr	r1, [r6, #12]
	add	r7, sp, #20
	str	r3, [sp, #32]
.LPIC1540:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #36]
	str	r1, [sp, #24]
	str	r2, [sp, #28]
	b	.L6162
.L6192:
	bl	schedule(PLT)
.L6162:
	mov	r2, #1
	mov	r0, r8
	mov	r1, r7
	bl	prepare_to_wait(PLT)
	ldr	r2, [r4, #212]
	ldr	r3, [r4, #100]
	cmp	r2, r3
	bne	.L6160
	ldr	r3, [r4, #216]
	cmp	r3, #0
	bne	.L6161
	ldr	r3, [r6, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L6192
.L6160:
	mov	r0, r8
	mov	r1, r7
	bl	finish_wait(PLT)
	ldr	r3, [r4, #100]
	b	.L6180
.L6191:
	mov	r2, #4
	mov	r0, r5
	add	r1, sp, #20
	bl	__copy_to_user(PLT)
	subs	r2, r0, #0
	beq	.L6172
	b	.L6164
.L6161:
	mov	r0, r8
	mov	r1, r7
	bl	finish_wait(PLT)
	ldr	r3, [r4, #100]
	str	r3, [r4, #212]
.L6159:
	ldr	r1, .L6193+40
	ldr	r0, .L6193+44
.LPIC1531:
	add	r1, pc, r1
.LPIC1530:
	add	r0, pc, r0
	add	r1, r1, #3056
	bl	printk(PLT)
	mvn	r0, #3
	b	.L6177
.L6185:
	ldr	r1, .L6193+48
	ldr	r0, .L6193+52
.LPIC1523:
	add	r1, pc, r1
.LPIC1522:
	add	r0, pc, r0
	add	r1, r1, #3056
	bl	printk(PLT)
	mvn	r0, #21
	b	.L6177
.L6184:
	ldr	r1, .L6193+56
	ldr	r0, .L6193+60
.LPIC1521:
	add	r1, pc, r1
.LPIC1520:
	add	r0, pc, r0
	add	r1, r1, #3056
	bl	printk(PLT)
	mvn	r0, #21
	b	.L6177
.L6183:
	ldr	r1, .L6193+64
	ldr	r0, .L6193+68
.LPIC1519:
	add	r1, pc, r1
.LPIC1518:
	add	r0, pc, r0
	add	r1, r1, #3056
	bl	printk(PLT)
	mvn	r0, #24
	b	.L6177
.L6182:
	ldr	r1, .L6193+72
	mov	r2, r4
	ldr	r0, .L6193+76
.LPIC1517:
	add	r1, pc, r1
.LPIC1516:
	add	r0, pc, r0
	add	r1, r1, #3056
	bl	printk(PLT)
	mvn	r0, #21
	b	.L6177
.L6186:
	ldr	r1, .L6193+80
	ldr	r0, .L6193+84
.LPIC1526:
	add	r1, pc, r1
.LPIC1525:
	add	r0, pc, r0
	add	r1, r1, #3056
	bl	printk(PLT)
	mvn	r0, #18
	b	.L6177
.L6194:
	.align	2
.L6193:
	.word	.LANCHOR1-(.LPIC1524+8)
	.word	.LANCHOR3-(.LPIC1537+8)
	.word	.LC381-(.LPIC1536+8)
	.word	.LC383-(.LPIC1538+8)
	.word	.LANCHOR3-(.LPIC1528+8)
	.word	.LC379-(.LPIC1527+8)
	.word	.LANCHOR3-(.LPIC1533+8)
	.word	.LC381-(.LPIC1532+8)
	.word	.LC382-(.LPIC1534+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1540+8))
	.word	.LANCHOR3-(.LPIC1531+8)
	.word	.LC380-(.LPIC1530+8)
	.word	.LANCHOR3-(.LPIC1523+8)
	.word	.LC378-(.LPIC1522+8)
	.word	.LANCHOR3-(.LPIC1521+8)
	.word	.LC377-(.LPIC1520+8)
	.word	.LANCHOR3-(.LPIC1519+8)
	.word	.LC376-(.LPIC1518+8)
	.word	.LANCHOR3-(.LPIC1517+8)
	.word	.LC375-(.LPIC1516+8)
	.word	.LANCHOR3-(.LPIC1526+8)
	.word	.LC254-(.LPIC1525+8)
	.fnend
	.size	conn_gadget_ioctl, .-conn_gadget_ioctl
	.align	2
	.type	acc_write, %function
acc_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #44
	sub	sp, sp, #44
	str	r2, [sp, #8]
	str	r1, [sp]
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	and	r2, r3, #3
	cmp	r2, #1
	bne	.L6213
	cmp	r5, #0
	beq	.L6214
	tst	r3, #1
	beq	.L6197
	mov	r3, sp
	add	r7, r4, #1648
	bic	r8, r3, #8128
	add	r7, r7, #8
	bic	r8, r8, #63
	add	r6, r4, #88
.L6198:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1656]
	mov	fp, r0
	cmp	r7, r3
	beq	.L6199
	mov	r0, r3
	sub	r10, r3, #36
	mov	r9, r3
	bl	list_del(PLT)
	mov	r0, r6
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r10, #0
	beq	.L6211
.L6200:
	cmp	r5, #16384
	movhi	fp, #16384
	movhi	r2, #0
	bhi	.L6205
	ldr	r2, [r4, #92]
	mov	fp, r5
	ldrh	r1, [r2, #20]
	sdiv	r2, r5, r1
	mls	r2, r1, r2, r5
	clz	r2, r2
	mov	r2, r2, lsr #5
.L6205:
	ldrb	r1, [r10, #26]	@ zero_extendqisi2
	ldr	r0, [r10]
	bfi	r1, r2, #1, #1
	strb	r1, [r10, #26]
	ldr	r2, [r8, #8]
	ldr	r3, [sp]
#APP
@ 439 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, fp; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	cmp	r2, #0
	beq	.L6233
	mov	r1, fp
	mvn	r5, #13
	bl	__memzero(PLT)
.L6206:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	ldr	r1, [r4, #1660]
	mov	r0, r9
	mov	r2, r7
	bl	__list_add(PLT)
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r5
.L6227:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6233:
	ldr	r1, [sp]
	mov	r2, fp
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	bne	.L6234
	str	fp, [r10, #4]
	ldr	r0, [r4, #92]
	mov	r1, r10
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L6220
	ldr	r3, [sp]
	subs	r5, r5, fp
	add	r3, r3, fp
	str	r3, [sp]
	beq	.L6235
	ldrb	r3, [r4, #100]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L6198
.L6197:
	mvn	r0, #4
	b	.L6227
.L6199:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
.L6211:
	ldrb	r0, [r4, #100]	@ zero_extendqisi2
	ands	r0, r0, #1
	beq	.L6227
	ldr	r2, .L6237
	mov	r3, #0
	add	r0, sp, #20
	ldr	r1, [r8, #12]
	add	fp, r4, #1664
	str	r3, [sp, #20]
	add	r3, sp, #32
	add	fp, fp, #12
	str	r0, [sp, #12]
.LPIC1542:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #32]
	str	r1, [sp, #24]
	mov	r1, r0
	str	r3, [sp, #36]
	str	r2, [sp, #28]
	b	.L6204
.L6236:
	bl	schedule(PLT)
	ldr	r1, [sp, #12]
.L6204:
	mov	r2, #1
	mov	r0, fp
	bl	prepare_to_wait(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #1656]
	mov	r1, r0
	cmp	r7, r2
	mov	r9, r2
	sub	r10, r2, #36
	mov	r0, r2
	beq	.L6201
	str	r1, [sp, #4]
	bl	list_del(PLT)
	ldr	r1, [sp, #4]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r10, #0
	bne	.L6202
.L6212:
	ldrb	r0, [r4, #100]	@ zero_extendqisi2
	ands	r0, r0, #1
	beq	.L6216
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L6236
	mov	r9, #65024
	movt	r9, 65535
.L6203:
	mov	r0, fp
	ldr	r1, [sp, #12]
	bl	finish_wait(PLT)
	mov	r0, r9
	b	.L6227
.L6213:
	mvn	r0, #18
	b	.L6227
.L6201:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L6212
.L6214:
	mov	r0, r5
	b	.L6227
.L6202:
	mov	r0, fp
	ldr	r1, [sp, #12]
	bl	finish_wait(PLT)
	b	.L6200
.L6216:
	mov	r9, r0
	b	.L6203
.L6220:
	mvn	r5, #4
	b	.L6206
.L6235:
	ldr	r0, [sp, #8]
	b	.L6227
.L6234:
	mvn	r5, #13
	b	.L6206
.L6238:
	.align	2
.L6237:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1542+8))
	.fnend
	.size	acc_write, .-acc_write
	.align	2
	.type	fsg_store_nofua, %function
fsg_store_nofua:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r1, #2
	mov	r5, r0
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r2
	add	r2, sp, #4
	mov	r4, r3
	bl	kstrtouint(PLT)
	cmp	r0, #0
	bne	.L6240
	ldr	r3, [sp, #4]
	cmp	r3, #0
	beq	.L6247
.L6241:
	ldrb	r2, [r5, #-24]	@ zero_extendqisi2
	mov	r0, r4
	bfi	r2, r3, #7, #1
	strb	r2, [r5, #-24]
.L6240:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L6247:
	ldrb	r2, [r5, #-24]	@ zero_extendqisi2
	tst	r2, #128
	beq	.L6241
	ldr	r0, [r5, #-48]
	ubfx	r2, r2, #1, #1
	cmp	r0, #0
	orreq	r2, r2, #1
	cmp	r2, #0
	bne	.L6241
	mov	r1, #1
	bl	vfs_fsync(PLT)
	ldr	r3, [sp, #4]
	b	.L6241
	.fnend
	.size	fsg_store_nofua, .-fsg_store_nofua
	.align	2
	.type	qdss_disable, %function
qdss_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #188
	mov	r4, r0
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #92]
	mov	r1, r0
	cmp	r3, #0
	beq	.L6263
	mov	r6, #0
	mov	r0, r5
	str	r6, [r4, #92]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L6264
	tst	r3, #4
	bne	.L6265
.L6251:
	tst	r3, #1
	bne	.L6266
.L6252:
	ldr	r1, [r4, #196]
	add	r2, r4, #172
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on(PLT)
.L6266:
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	bfc	r3, #0, #1
	strb	r3, [r4, #192]
	b	.L6252
.L6263:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L6265:
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfc	r2, #2, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
	tst	r3, #1
	beq	.L6252
	b	.L6266
.L6264:
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfi	r2, r6, #1, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
	tst	r3, #4
	beq	.L6251
	b	.L6265
	.fnend
	.size	qdss_disable, .-qdss_disable
	.align	2
	.type	acc_function_unbind, %function
acc_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r8, [sp, #16]
	add	r9, r1, #1648
	strd	r6, [sp, #8]
	add	r9, r9, #8
	mov	r6, r1
	add	r7, r1, #88
	str	r10, [sp, #24]
	str	lr, [sp, #28]
.L6268:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r6, #1656]
	mov	r5, r0
	cmp	r4, r9
	mov	r0, r4
	sub	r8, r4, #36
	beq	.L6269
	bl	list_del(PLT)
	mov	r0, r7
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r8, #0
	beq	.L6279
	ldr	r5, [r6, #92]
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	mov	r1, r8
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L6268
.L6269:
	mov	r1, r5
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
.L6279:
	mov	r5, #0
.L6272:
	add	r3, r5, #420
	ldr	r8, [r6, #96]
	add	r3, r3, #2
	ldr	r4, [r6, r3, asl #2]
	cmp	r4, #0
	beq	.L6271
	ldr	r0, [r4]
	bl	kfree(PLT)
	ldr	r3, [r8, #8]
	mov	r1, r4
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L6271:
	cmp	r5, #1
	mov	r5, #1
	bne	.L6272
	ldr	r0, .L6288
	mov	r9, r6
.LPIC1543:
	add	r0, pc, r0
	add	r0, r0, #660
	bl	hid_unregister_driver(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r9, #1768]!
	mov	r8, r0
	cmp	r9, r5
	ldr	r4, [r5]
	addne	r10, r6, #1776
	addne	r10, r10, #8
	beq	.L6277
.L6276:
	mov	r0, r5
	bl	list_del(PLT)
	mov	r0, r5
	mov	r1, r10
	ldr	r2, [r6, #1784]
	bl	__list_add(PLT)
	cmp	r4, r9
	mov	r5, r4
	ldr	r4, [r4]
	bne	.L6276
.L6277:
	mov	r9, r6
	ldr	r5, [r9, #1776]!
	cmp	r5, r9
	ldr	r4, [r5]
	addne	r10, r6, #1776
	addne	r10, r10, #8
	beq	.L6275
.L6278:
	mov	r0, r5
	bl	list_del(PLT)
	mov	r0, r5
	mov	r1, r10
	ldr	r2, [r6, #1784]
	bl	__list_add(PLT)
	cmp	r9, r4
	mov	r5, r4
	ldr	r4, [r4]
	bne	.L6278
.L6275:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L6288+4
	add	r2, r6, #1744
	mov	r0, #4
	ldrd	r4, [sp]
	add	r2, r2, #8
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
.LPIC1545:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, [r3]
	b	queue_work_on(PLT)
.L6289:
	.align	2
.L6288:
	.word	.LANCHOR0-(.LPIC1543+8)
	.word	system_wq(GOT_PREL)+(.-(.LPIC1545+8))
	.fnend
	.size	acc_function_unbind, .-acc_function_unbind
	.align	2
	.type	ffs_func_setup, %function
ffs_func_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #-28]
	ldr	r3, [r4, #92]
	cmp	r3, #2
	bne	.L6302
	ldrb	r3, [r1]	@ zero_extendqisi2
	and	r3, r3, #31
	cmp	r3, #1
	beq	.L6292
	cmp	r3, #2
	beq	.L6293
	mvn	r0, #94
.L6311:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6293:
	ldrh	r3, [r1, #4]	@ unaligned
	and	r3, r3, #15
	add	r0, r0, r3
	ldrb	r2, [r0, #-20]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L6306
	mov	r8, r2
.L6295:
	add	r5, r4, #116
	mov	r7, r1
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r1, [r4, #96]
	mov	r6, r0
	add	r0, r4, #100
	ldr	r3, [r7, #4]	@ unaligned
	ldr	r2, [r7]	@ unaligned
	ldrh	ip, [r4, #104]
	cmp	r1, #1
	strd	r2, [r4, #108]
	moveq	r3, #2
	strh	r8, [r4, #112]	@ movhi
	streq	r3, [r4, #96]
	cmp	ip, #0
	beq	.L6307
	add	ip, r0, ip
	mov	r3, r0
	mov	r1, r0
.L6300:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	cmp	r2, #4
	strneb	r2, [r1]
	addne	r1, r1, #1
	cmp	r3, ip
	bne	.L6300
	rsb	r1, r0, r1
	add	r3, r1, #1
	uxth	ip, r1
	uxth	r3, r3
.L6298:
	add	ip, r4, ip
	strh	r3, [r4, #104]	@ movhi
	mov	r2, #4
	mov	r0, r5
	mov	r1, #3
	strb	r2, [ip, #100]
	mov	r2, #1
	bl	__wake_up_locked(PLT)
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L6311
.L6292:
	ldrh	ip, [r4, #178]
	ldrh	r6, [r1, #4]	@ unaligned
	ldr	lr, [r0, #-4]
	cmp	ip, #0
	uxtb	r5, r6
	beq	.L6306
	mov	r2, lr
.L6296:
	mov	r0, r2
	ldrh	r3, [r2], #2
	sxth	r3, r3
	cmp	r3, #0
	blt	.L6294
	cmp	r3, r5
	beq	.L6315
.L6294:
	subs	ip, ip, #1
	bne	.L6296
.L6306:
	mvn	r0, #32
	b	.L6311
.L6315:
	rsb	r3, lr, r0
	mov	r3, r3, asr #1
	cmp	r3, #0
	mov	r8, r3
	bge	.L6295
	mov	r0, r3
	b	.L6311
.L6302:
	mvn	r0, #18
	b	.L6311
.L6307:
	mov	r3, #1
	b	.L6298
	.fnend
	.size	ffs_func_setup, .-ffs_func_setup
	.align	2
	.type	rmnet_sdio_complete_epout, %function
rmnet_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #44]
	.pad #8
	sub	sp, sp, #8
	ldr	r4, [r0]
	ldr	r6, [r1, #32]
	cmn	r3, #104
	ldr	r8, [r4, #84]
	beq	.L6318
	cmp	r3, #0
	beq	.L6319
	cmn	r3, #108
	beq	.L6318
	ldr	lr, [r1, #48]
	ldr	ip, [r1, #4]
	ldr	r0, [r8]
	ldr	r1, .L6345
	ldr	r2, [r7, #4]
	str	lr, [sp]
	str	ip, [sp, #4]
	add	r0, r0, #32
.LPIC1548:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #320]
	tst	r3, #2
	beq	.L6321
	add	r7, r4, #188
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
.L6326:
	ldr	r3, .L6345+4
	ldr	r2, [r4, #328]
.LPIC1551:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3]
	cmp	r2, r3
	bcs	.L6343
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	movw	r0, #2056
	mov	r1, #32
	mov	r2, #0
	mvn	r3, #0
	bl	__alloc_skb(PLT)
	subs	r6, r0, #0
	beq	.L6327
	ldr	r3, [r6, #172]
	mov	ip, #2048
	mov	r1, r5
	ldr	r0, [r6, #160]
	mov	r2, #32
	add	r3, r3, #8
	add	r0, r0, #8
	str	r3, [r6, #172]
	str	r0, [r6, #160]
	str	r3, [r5]
	str	r6, [r5, #32]
	str	ip, [r5, #4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bne	.L6344
.L6316:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6321:
	ldr	r1, .L6345+8
	ldr	r0, .L6345+12
.LPIC1547:
	add	r1, pc, r1
	add	r1, r1, #3104
.LPIC1546:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
.L6318:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
	mov	r3, #0
	mov	r0, r3
	str	r3, [r5]
	bl	kfree(PLT)
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3	@ indirect register sibling call
.L6319:
	mov	r0, r6
	ldr	r1, [r1, #48]
	bl	skb_put(PLT)
	ldr	r3, [r4, #320]
	tst	r3, #2
	beq	.L6321
	add	r7, r4, #188
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #176]
	add	r1, r4, #172
	add	r2, r4, #236
	mov	r0, #4
	stmia	r6, {r1, r3}
	str	r6, [r3]
	ldr	r3, [r4, #180]
	str	r6, [r4, #176]
	ldr	r1, [r4, #200]
	add	r3, r3, #1
	str	r3, [r4, #180]
	bl	queue_work_on(PLT)
	b	.L6326
.L6343:
	add	r0, r5, #36
	ldr	r1, [r4, #164]
	add	r2, r4, #160
	bl	__list_add(PLT)
	ldr	r3, [r4, #168]
	mov	r0, r7
	add	r3, r3, #1
	str	r3, [r4, #168]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L6344:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
.L6324:
	ldr	r0, [r8]
	mov	r2, r7
	ldr	r1, .L6345+16
	add	r0, r0, #32
.LPIC1550:
	add	r1, pc, r1
	bl	dev_err(PLT)
	add	r0, r5, #36
	ldr	r1, [r4, #164]
	add	r2, r4, #160
	bl	__list_add(PLT)
	ldr	r3, [r4, #168]
	add	r3, r3, #1
	str	r3, [r4, #168]
	b	.L6316
.L6327:
	mvn	r7, #11
	b	.L6324
.L6346:
	.align	2
.L6345:
	.word	.LC124-(.LPIC1548+8)
	.word	sdio_rx_fctrl_en_thld(GOT_PREL)+(.-(.LPIC1551+8))
	.word	.LANCHOR3-(.LPIC1547+8)
	.word	.LC145-(.LPIC1546+8)
	.word	.LC126-(.LPIC1550+8)
	.fnend
	.size	rmnet_sdio_complete_epout, .-rmnet_sdio_complete_epout
	.align	2
	.type	acm_send_break, %function
acm_send_break:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	cmp	r1, #0
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #148
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r0, #170]
	bic	r3, r3, #4
	uxth	r3, r3
	orrne	r3, r3, #4
	strh	r3, [r0, #170]	@ movhi
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #156]
	mov	r7, r0
	cmp	r3, #0
	moveq	r5, r3
	moveq	r3, #1
	streqb	r3, [r4, #147]
	bne	.L6355
.L6350:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6355:
	mov	r5, r4
	ldr	r0, .L6356
	ldrh	r2, [r5, #170]!
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
.LPIC1552:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r1, r5
	mov	r0, r4
	bl	acm_cdc_notify.constprop.138(PLT)
	mov	r5, r0
	b	.L6350
.L6357:
	.align	2
.L6356:
	.word	.LC384-(.LPIC1552+8)
	.fnend
	.size	acm_send_break, .-acm_send_break
	.align	2
	.type	acm_connect, %function
acm_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r5, r0, #148
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r0, #170]
	mov	r0, r5
	orr	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #156]
	mov	r6, r0
	cmp	r3, #0
	moveq	r3, #1
	streqb	r3, [r4, #147]
	bne	.L6362
.L6360:
	mov	r0, r5
	mov	r1, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L6362:
	mov	r7, r4
	ldr	r0, .L6363
	ldrh	r2, [r7, #170]!
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
.LPIC1553:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	mov	r1, r7
	bl	acm_cdc_notify.constprop.138(PLT)
	b	.L6360
.L6364:
	.align	2
.L6363:
	.word	.LC384-(.LPIC1553+8)
	.fnend
	.size	acm_connect, .-acm_connect
	.align	2
	.type	acm_disconnect, %function
acm_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r5, r0, #148
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrh	r3, [r0, #170]
	mov	r0, r5
	bic	r3, r3, #3
	strh	r3, [r4, #170]	@ movhi
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #156]
	mov	r6, r0
	cmp	r3, #0
	moveq	r3, #1
	streqb	r3, [r4, #147]
	bne	.L6369
.L6367:
	mov	r0, r5
	mov	r1, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L6369:
	mov	r7, r4
	ldr	r0, .L6370
	ldrh	r2, [r7, #170]!
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
.LPIC1554:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	mov	r1, r7
	bl	acm_cdc_notify.constprop.138(PLT)
	b	.L6367
.L6371:
	.align	2
.L6370:
	.word	.LC384-(.LPIC1554+8)
	.fnend
	.size	acm_disconnect, .-acm_disconnect
	.align	2
	.type	gs_close, %function
gs_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r4, [r0, #272]
	.pad #28
	sub	sp, sp, #28
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #1
	beq	.L6373
	cmp	r3, #0
	subne	r3, r3, #1
	strne	r3, [r4, #12]
	beq	.L6413
.L6375:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L6373:
	ldr	r0, [r4, #4]
	mov	r2, #0
	strb	r3, [r4, #16]
	str	r2, [r4, #12]
	cmp	r0, r2
	beq	.L6376
	ldr	r3, [r0, #120]
	cmp	r3, r2
	beq	.L6377
	blx	r3
.L6377:
	ldr	r1, [r4, #92]
	ldr	r0, [r4, #104]
	ldr	r2, [r4, #100]
	add	r3, r0, r1
	rsb	r3, r2, r3
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	beq	.L6384
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L6378
	ldr	r1, [r4, #92]
	ldrd	r2, [r4, #100]
	add	r3, r3, r1
	rsb	r3, r2, r3
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	beq	.L6378
	mov	r0, r4
	add	r8, r4, #108
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r2, .L6414
	mov	r3, sp
	movw	r7, #1500
	bic	r6, r3, #8128
	mov	r3, #0
	bic	r6, r6, #63
	add	r9, sp, #4
	ldr	r1, [r6, #12]
	str	r3, [sp, #4]
	add	r3, sp, #16
.LPIC1557:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
.L6383:
	mov	r0, r8
	mov	r1, r9
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #4]
	mov	r0, r4
	cmp	r3, #0
	beq	.L6380
	ldr	r1, [r4, #92]
	ldrd	r2, [r4, #100]
	add	r3, r3, r1
	rsb	r3, r2, r3
	udiv	r2, r3, r1
	mls	r3, r1, r2, r3
	cmp	r3, #0
	beq	.L6380
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r6, #12]
	mov	r0, r7
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L6386
	bl	schedule_timeout(PLT)
	subs	r7, r0, #0
	bne	.L6383
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
.L6386:
	mov	r0, r8
	mov	r1, r9
	bl	finish_wait(PLT)
.L6387:
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L6376
	ldr	r0, [r4, #104]
.L6384:
	str	r0, [r4, #100]
.L6385:
	mov	ip, #0
	mov	r1, #1
	mov	r3, ip
	mov	r2, r1
	str	ip, [r5, #272]
	add	r0, r4, #20
	str	ip, [r4, #8]
	strb	ip, [r4, #16]
	bl	__wake_up(PLT)
	b	.L6375
.L6413:
	ldr	r0, .L6414+4
	movw	r1, #905
.LPIC1555:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L6375
.L6380:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	b	.L6386
.L6378:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	b	.L6387
.L6376:
	ldr	r0, [r4, #96]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #96]
	b	.L6385
.L6415:
	.align	2
.L6414:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1557+8))
	.word	.LC385-(.LPIC1555+8)
	.fnend
	.size	gs_close, .-gs_close
	.align	2
	.type	rmnet_mux_disable, %function
rmnet_mux_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #372]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r3, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r0, #96]
	str	r3, [r4, #372]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L6418
	blx	r2
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
.L6418:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r6, [r4, #100]
	ldr	r5, [r4, #96]
	ldr	r0, [r6]
	bl	kfree(PLT)
	ldr	r3, [r5, #8]
	mov	r0, r5
	mov	r1, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L6419
	blx	r2
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
.L6419:
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r2, [r3, #36]
	cmp	r2, #0
	beq	.L6420
	blx	r2
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
.L6420:
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	ldr	r1, [r4, #380]
	add	r2, r4, #384
	mov	r0, #4
	str	r3, [r4, #352]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on(PLT)
	.fnend
	.size	rmnet_mux_disable, .-rmnet_mux_disable
	.align	2
	.type	fsg_disable, %function
fsg_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r3, [r0, #94]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L6447
.L6432:
	tst	r3, #2
	beq	.L6433
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #104]
	bfc	r3, #1, #1
	strb	r3, [r4, #94]
	str	r1, [r2]
.L6433:
	ldr	r3, [r4, #88]
	mov	r2, #0
	str	r2, [r3, #12]
	ldr	r4, [r4, #88]
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #112]
	mov	r6, r0
	cmp	r3, #4
	bgt	.L6435
	ldr	r2, [r4, #168]
	mov	r1, #4
	ldr	r3, [r4, #56]
	str	r1, [r4, #112]
	cmp	r2, #0
	str	r3, [r4, #116]
	beq	.L6435
	mov	r0, #10
	mov	r1, #2
	bl	send_sig_info(PLT)
.L6435:
	mov	r0, r5
	mov	r1, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L6447:
	ldr	r0, [r0, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r2, [r4, #100]
	bfc	r3, #0, #1
	strb	r3, [r4, #94]
	str	r1, [r2]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	b	.L6432
	.fnend
	.size	fsg_disable, .-fsg_disable
	.align	2
	.type	gqti_ctrl_notify_modem, %function
gqti_ctrl_notify_modem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L6458
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC1558:
	add	r3, pc, r3
	ldr	r4, [r3, #-672]
	add	r5, r4, #52
	str	r2, [r4, #12]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldrb	r3, [r4, #4]	@ zero_extendqisi2
	mov	r6, r0
	cmp	r3, #0
	beq	.L6456
	ldr	r3, .L6458+4
.LPIC1562:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L6452
	movw	r1, #32800
	mov	r2, #16
	bl	kmem_cache_alloc_trace(PLT)
	subs	r3, r0, #0
	beq	.L6457
.L6450:
	mov	r1, #16
	mov	r2, #0
	mov	r0, r3
	stmia	r3, {r1, r2}
.L6451:
	add	r2, r4, #44
	ldr	r1, [r4, #48]
	add	r0, r0, #8
	bl	__list_add(PLT)
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	add	r0, r4, #32
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up(PLT)
.L6452:
	mov	r3, #16
	b	.L6450
.L6457:
	mvn	r0, #11
	b	.L6451
.L6456:
	ldr	r1, .L6458+8
	mov	r2, r4
	ldr	r0, .L6458+12
.LPIC1560:
	add	r1, pc, r1
	add	r1, r1, #3136
.LPIC1559:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldr	lr, [sp, #12]
	mov	r0, r5
	mov	r1, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L6459:
	.align	2
.L6458:
	.word	.LANCHOR4-(.LPIC1558+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1562+8))
	.word	.LANCHOR3-(.LPIC1560+8)
	.word	.LC386-(.LPIC1559+8)
	.fnend
	.size	gqti_ctrl_notify_modem, .-gqti_ctrl_notify_modem
	.align	2
	.type	rx_complete, %function
rx_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #44]
	ldr	r4, [r0]
	ldr	r6, [r1, #32]
	cmn	r3, #103
	beq	.L6462
	ble	.L6488
	cmn	r3, #75
	beq	.L6465
	cmp	r3, #0
	bne	.L6461
	mov	r0, r6
	ldr	r1, [r1, #48]
	bl	skb_put(PLT)
	ldr	r3, [r4, #84]
	cmp	r3, #0
	beq	.L6467
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L6468
	mov	r1, r6
	ldr	r3, [r4, #84]
	add	r2, r4, #52
	blx	r3
	cmn	r0, #22
	mov	r6, r0
	beq	.L6489
	cmn	r0, #75
	beq	.L6490
	mov	r1, r7
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	beq	.L6472
	b	.L6473
.L6465:
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #276]
	add	r3, r3, #1
	str	r3, [r2, #276]
.L6461:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
.L6472:
	add	r6, r4, #16
.L6487:
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	add	r1, r4, #28
	ldr	r2, [r4, #28]
	add	r0, r5, #36
	bl	__list_add(PLT)
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r3, .L6491
	add	r2, r4, #104
	mov	r0, #4
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
.LPIC1565:
	add	r3, pc, r3
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	ldr	r1, [r3, #-1492]
	b	queue_work_on(PLT)
.L6488:
	cmn	r3, #108
	beq	.L6464
	cmn	r3, #104
	bne	.L6461
.L6464:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
.L6473:
	add	r6, r4, #16
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	add	r0, r5, #36
	add	r1, r4, #28
	ldr	r2, [r4, #28]
	bl	__list_add(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	ldr	r8, [sp, #16]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L6462:
	mov	r0, #0
	add	r1, r4, #120
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	bne	.L6464
	ldr	r3, .L6491+4
	mov	r0, #4
	add	r2, r4, #88
.LPIC1566:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	cmp	r0, #0
	bne	.L6464
	mov	r2, r0
	ldr	r0, .L6491+8
	ldr	r1, [r4, #8]
.LPIC1564:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L6464
.L6467:
	mov	r1, r6
	add	r0, r4, #52
	add	r6, r4, #16
	bl	skb_queue_tail(PLT)
	b	.L6487
.L6489:
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
.L6470:
	mov	r1, r7
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L6473
.L6490:
	ldr	r2, [r4, #8]
	ldr	r3, [r2, #276]
	add	r3, r3, #1
	str	r3, [r2, #276]
	b	.L6470
.L6468:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
	b	.L6470
.L6492:
	.align	2
.L6491:
	.word	.LANCHOR4-(.LPIC1565+8)
	.word	system_wq(GOT_PREL)+(.-(.LPIC1566+8))
	.word	.LC387-(.LPIC1564+8)
	.fnend
	.size	rx_complete, .-rx_complete
	.align	2
	.type	gbam_free_buffers, %function
gbam_free_buffers:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r7, r0, #4
	add	r6, r0, #8
	mov	r0, r7
	strd	r8, [sp, #16]
	str	lr, [sp, #28]
	str	r10, [sp, #24]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	cmp	r5, #0
	beq	.L6495
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L6495
	ldr	r1, [r5, #28]
	add	r10, r5, #28
	ldr	r9, [r3, #84]
	cmp	r10, r1
	beq	.L6496
.L6497:
	mov	r0, r1
	sub	r4, r1, #36
	bl	list_del(PLT)
	ldr	r3, [r9, #8]
	mov	r1, r4
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r1, [r5, #28]
	cmp	r10, r1
	bne	.L6497
	ldr	r3, [r5, #12]
.L6496:
	ldr	r1, [r5, #52]
	add	r10, r5, #52
	ldr	r9, [r3, #88]
	cmp	r1, r10
	beq	.L6502
.L6501:
	mov	r0, r1
	sub	r4, r1, #36
	bl	list_del(PLT)
	ldr	r3, [r9, #8]
	mov	r1, r4
	mov	r0, r9
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r1, [r5, #52]
	cmp	r1, r10
	bne	.L6501
.L6502:
	ldr	r3, [r5, #36]
	add	r4, r5, #36
	cmp	r3, r4
	cmpne	r3, #0
	movne	r9, #0
	beq	.L6500
.L6504:
	ldr	r2, [r5, #44]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r5, #44]
	ldmia	r3, {r1, r2}
	str	r9, [r3]
	str	r9, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r5, #36]
	cmp	r3, r4
	cmpne	r3, #0
	bne	.L6504
.L6500:
	ldr	r3, [r5, #60]
	add	r4, r5, #60
	cmp	r3, r4
	cmpne	r3, #0
	movne	r9, #0
	beq	.L6495
.L6505:
	ldr	r2, [r5, #68]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r5, #68]
	ldmia	r3, {r1, r2}
	str	r9, [r3]
	str	r9, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r5, #60]
	cmp	r3, r4
	cmpne	r3, #0
	bne	.L6505
.L6495:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldrd	r4, [sp]
	mov	r0, r7
	mov	r1, r8
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
	.fnend
	.size	gbam_free_buffers, .-gbam_free_buffers
	.align	2
	.type	gbam_data_ch_remove, %function
gbam_data_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r4, .L6541
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC1567:
	add	r4, pc, r4
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r7, [r4, #2400]
	cmp	r7, #0
	ble	.L6538
	ldr	r3, .L6541+4
	mov	r4, #0
	mov	r6, r0
	ldr	fp, .L6541+8
	mov	r5, r4
	mov	r9, r4
	mov	r8, r4
.LPIC1569:
	add	r3, pc, r3
.LPIC1568:
	add	fp, pc, fp
	str	r3, [sp, #4]
	ldr	r3, .L6541+12
.LPIC1570:
	add	r3, pc, r3
	str	r3, [sp, #8]
.L6520:
	mov	r0, fp
	ldr	r1, [r6]
	mov	r2, #20
	bl	strncmp(PLT)
	cmp	r0, #0
	beq	.L6540
.L6516:
	add	r5, r5, #1
	add	r4, r4, #84
	cmp	r5, r7
	blt	.L6520
.L6538:
	mov	r0, #0
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6540:
	ldr	r3, [sp, #4]
	add	r3, r3, #2400
	add	r3, r3, #4
	ldr	r7, [r4, r3]
	add	r3, r7, #8
	add	r10, r7, #4
	mov	r0, r10
	str	r3, [sp]
	bl	_raw_spin_lock_irqsave(PLT)
	str	r0, [sp, #12]
	ldr	r0, [sp]
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r7, #12]
	cmp	r3, #0
	ldrned	r8, [r3, #84]
.L6517:
	ldr	r0, [sp]
	bl	_raw_spin_unlock(PLT)
	ldr	r1, [sp, #12]
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r8, #0
	beq	.L6518
	ldr	r3, [r8, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6518
	mov	r0, r8
	blx	r3
.L6518:
	cmp	r9, #0
	beq	.L6519
	ldr	r3, [r9, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L6519
	mov	r0, r9
	blx	r3
.L6519:
	mov	r0, r7
	add	r10, r7, #20
	bl	gbam_free_buffers(PLT)
	ldr	r0, [r7, #24]
	bl	msm_bam_dmux_close(PLT)
	mov	r3, #0
	mov	r1, r10
	mov	r0, #2
	str	r3, [r7, #240]
	bl	_clear_bit(PLT)
	mov	r1, r10
	mov	r0, #1
	bl	_clear_bit(PLT)
	ldr	r3, [sp, #8]
	ldr	r7, [r3, #2400]
	b	.L6516
.L6542:
	.align	2
.L6541:
	.word	.LANCHOR1-(.LPIC1567+8)
	.word	.LANCHOR1-(.LPIC1569+8)
	.word	.LC198-(.LPIC1568+8)
	.word	.LANCHOR1-(.LPIC1570+8)
	.fnend
	.size	gbam_data_ch_remove, .-gbam_data_ch_remove
	.align	2
	.type	mbim_setup, %function
mbim_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #88]
	.pad #28
	sub	sp, sp, #28
	ldr	r8, [r0, #84]
	ldrh	r9, [r1, #4]	@ unaligned
	ldrh	r10, [r1, #2]	@ unaligned
	cmp	r3, #0
	ldrh	r7, [r1, #6]	@ unaligned
	ldr	r6, [r8, #4]
	beq	.L6585
	ldrb	r3, [r1]	@ zero_extendqisi2
	movw	r2, #8582
	ldrb	r0, [r1, #1]	@ zero_extendqisi2
	orr	r1, r0, r3, asl #8
	cmp	r1, r2
	beq	.L6547
	ble	.L6586
	movw	r2, #41344
	cmp	r1, r2
	beq	.L6552
	ble	.L6587
	movw	r2, #41347
	cmp	r1, r2
	beq	.L6555
	movw	r2, #41349
	cmp	r1, r2
	bne	.L6546
	cmp	r7, #3
	movhi	r2, #0
	movls	r2, #1
	cmp	r10, #0
	orrne	r2, r2, #1
	cmp	r2, #0
	bne	.L6559
	ldrb	r1, [r5, #196]	@ zero_extendqisi2
	cmp	r1, r9
	beq	.L6588
.L6582:
	mov	r10, r2
	b	.L6559
.L6586:
	movw	r2, #8453
	cmp	r1, r2
	beq	.L6549
	movw	r2, #8580
	cmp	r1, r2
	beq	.L6550
	cmp	r1, #8448
	beq	.L6589
.L6546:
	ldr	r1, .L6594
	mov	r2, r3
	mov	r3, r0
	ldr	r0, .L6594+4
	str	r9, [sp, #4]
	str	r7, [sp, #8]
	str	r10, [sp]
.LPIC1587:
	add	r1, pc, r1
.LPIC1586:
	add	r0, pc, r0
	add	r1, r1, #3168
	bl	printk(PLT)
	ldrb	r3, [r4]	@ zero_extendqisi2
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
.L6559:
	ldr	r1, .L6594+8
	stmia	sp, {r0, r10}
	mvn	r2, #94
	ldr	r0, .L6594+12
	str	r9, [sp, #8]
	str	r7, [sp, #12]
.LPIC1591:
	add	r1, pc, r1
.LPIC1590:
	add	r0, pc, r0
	add	r1, r1, #3168
	bl	printk(PLT)
	mvn	r0, #94
.L6579:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6550:
	cmp	r7, #0
	bne	.L6559
	ldrb	r2, [r5, #196]	@ zero_extendqisi2
	cmp	r2, r9
	bne	.L6559
	cmp	r10, #0
	beq	.L6574
	cmp	r10, #1
	bne	.L6590
	ldr	r3, .L6594+16
	mov	r9, r7
	mov	fp, r7
.LPIC1585:
	add	r3, pc, r3
	add	r3, r3, #540
	str	r3, [r5, #200]
	b	.L6557
.L6555:
	cmp	r7, #1
	movhi	r2, #0
	movls	r2, #1
	cmp	r10, #0
	orrne	r2, r2, #1
	cmp	r2, #0
	bne	.L6559
	ldrb	r1, [r5, #196]	@ zero_extendqisi2
	cmp	r1, r9
	bne	.L6582
	ldr	r3, .L6594+20
	cmp	r7, #2
	mov	r9, #2
	ldr	r1, [r5, #200]
	movle	fp, #0
	movgt	fp, #1
	ldr	r0, [r6]
.LPIC1583:
	add	r3, pc, r3
	add	r3, r3, #496
	subs	r3, r1, r3
	strb	r2, [r0, #1]
	movne	r3, #1
	strb	r3, [r0]
	b	.L6557
.L6587:
	movw	r2, #41217
	cmp	r1, r2
	bne	.L6546
	cmp	r10, #0
	bne	.L6591
	add	r3, r5, #204
	mov	r0, r3
	str	r3, [sp, #20]
	bl	_raw_spin_lock(PLT)
	ldr	fp, [r5, #216]!
	cmp	fp, r5
	beq	.L6592
	mov	r0, fp
	sub	r5, fp, #8
	bl	list_del(PLT)
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock(PLT)
	ldr	r2, [fp, #-4]
	ldr	r0, [r6]
	ldr	r1, [fp, #-8]
	cmp	r7, r2
	movcc	r9, r7
	movcs	r9, r2
	mov	r2, r9
	bl	memcpy(PLT)
	cmp	r5, #0
	beq	.L6561
	ldr	r0, [fp, #-8]
	cmp	r9, r7
	movge	fp, #0
	movlt	fp, #1
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
.L6557:
	ldrb	r3, [r6, #26]	@ zero_extendqisi2
	str	r9, [r6, #4]
	mov	r1, r6
	mov	r2, #32
	bfi	r3, fp, #1, #1
	strb	r3, [r6, #26]
	ldr	r3, [r8]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	blt	.L6576
	mov	r0, r5
	b	.L6579
.L6552:
	clz	fp, r7
	mov	fp, fp, lsr #5
	cmp	r10, #0
	orrne	fp, fp, #1
	cmp	fp, #0
	bne	.L6559
	ldrb	r2, [r5, #196]	@ zero_extendqisi2
	cmp	r2, r9
	movne	r10, fp
	bne	.L6559
	ldr	r1, .L6594+24
	cmp	r7, #28
	movls	r9, r7
	movhi	r9, #28
	ldr	r0, [r6]
	mov	r2, r9
	movhi	fp, #1
	movls	fp, #0
.LPIC1579:
	add	r1, pc, r1
	add	r1, r1, #28
	bl	memcpy(PLT)
	b	.L6557
.L6589:
	ldr	r3, .L6594+28
	str	r5, [r6, #32]
	mov	r9, r7
	mov	fp, #0
.LPIC1574:
	add	r3, pc, r3
	str	r3, [r6, #28]
	b	.L6557
.L6549:
	ldr	r3, .L6594+32
	adds	fp, r7, #0
	str	r5, [r6, #32]
	movne	fp, #1
	mov	r9, #0
.LPIC1573:
	add	r3, pc, r3
	str	r3, [r6, #28]
	b	.L6557
.L6547:
	sub	r2, r7, #4
	bic	r2, r2, #4
	uxth	r2, r2
	cmp	r2, #0
	bne	.L6593
	cmp	r10, #0
	bne	.L6559
	ldrb	r2, [r5, #196]	@ zero_extendqisi2
	cmp	r2, r9
	bne	.L6559
	ldr	r3, .L6594+36
	str	r5, [r6, #32]
	mov	r9, r7
	mov	fp, r10
.LPIC1582:
	add	r3, pc, r3
	str	r3, [r6, #28]
	b	.L6557
.L6588:
	ldr	r2, [r5, #224]
	cmp	r7, #4
	mov	r9, #4
	ldr	r3, [r6]
	movle	fp, #0
	movgt	fp, #1
	mov	r1, r2, lsr #16
	ubfx	r0, r2, #8, #8
	strb	r2, [r3]
	mov	r2, r1, lsr #8
	strb	r0, [r3, #1]
	strb	r1, [r3, #2]
	strb	r2, [r3, #3]
	b	.L6557
.L6561:
	cmp	r9, r7
	movge	fp, #0
	movlt	fp, #1
	b	.L6557
.L6590:
	mov	r9, r7
	mov	fp, r7
	b	.L6557
.L6574:
	ldr	r3, .L6594+40
	mov	r9, r10
	mov	fp, r10
.LPIC1584:
	add	r3, pc, r3
	add	r3, r3, #496
	str	r3, [r5, #200]
	b	.L6557
.L6585:
	ldr	r1, .L6594+44
	ldr	r0, .L6594+48
.LPIC1572:
	add	r1, pc, r1
.LPIC1571:
	add	r0, pc, r0
	add	r1, r1, #3168
	bl	printk(PLT)
	mvn	r0, #106
	b	.L6579
.L6576:
	ldr	r1, .L6594+52
	str	r5, [sp]
	ldr	r0, .L6594+56
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
.LPIC1589:
	add	r1, pc, r1
.LPIC1588:
	add	r0, pc, r0
	add	r1, r1, #3168
	bl	printk(PLT)
	mov	r0, r5
	b	.L6579
.L6593:
	ldr	r1, .L6594+60
	mov	r2, r7
	ldr	r0, .L6594+64
.LPIC1581:
	add	r1, pc, r1
.LPIC1580:
	add	r0, pc, r0
	add	r1, r1, #3168
	bl	printk(PLT)
	ldrb	r3, [r4]	@ zero_extendqisi2
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	b	.L6559
.L6592:
	ldr	r1, .L6594+68
	ldr	r0, .L6594+72
.LPIC1578:
	add	r1, pc, r1
	add	r1, r1, #3168
.LPIC1577:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [sp, #20]
	bl	_raw_spin_unlock(PLT)
	ldrb	r3, [r4]	@ zero_extendqisi2
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	b	.L6559
.L6591:
	ldr	r1, .L6594+76
	mov	r2, r7
	ldr	r0, .L6594+80
.LPIC1576:
	add	r1, pc, r1
.LPIC1575:
	add	r0, pc, r0
	add	r1, r1, #3168
	bl	printk(PLT)
	ldrb	r3, [r4]	@ zero_extendqisi2
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	b	.L6559
.L6595:
	.align	2
.L6594:
	.word	.LANCHOR3-(.LPIC1587+8)
	.word	.LC392-(.LPIC1586+8)
	.word	.LANCHOR3-(.LPIC1591+8)
	.word	.LC394-(.LPIC1590+8)
	.word	.LANCHOR2-(.LPIC1585+8)
	.word	.LANCHOR2-(.LPIC1583+8)
	.word	.LANCHOR2-(.LPIC1579+8)
	.word	fmbim_cmd_complete-(.LPIC1574+8)
	.word	fmbim_reset_cmd_complete-(.LPIC1573+8)
	.word	mbim_ep0out_complete-(.LPIC1582+8)
	.word	.LANCHOR2-(.LPIC1584+8)
	.word	.LANCHOR3-(.LPIC1572+8)
	.word	.LC388-(.LPIC1571+8)
	.word	.LANCHOR3-(.LPIC1589+8)
	.word	.LC393-(.LPIC1588+8)
	.word	.LANCHOR3-(.LPIC1581+8)
	.word	.LC391-(.LPIC1580+8)
	.word	.LANCHOR3-(.LPIC1578+8)
	.word	.LC390-(.LPIC1577+8)
	.word	.LANCHOR3-(.LPIC1576+8)
	.word	.LC389-(.LPIC1575+8)
	.fnend
	.size	mbim_setup, .-mbim_setup
	.align	2
	.type	fmbim_reset_cmd_complete, %function
fmbim_reset_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	add	r5, r4, #204
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, .L6604
.LPIC1593:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L6599
	movw	r1, #32800
	mov	r2, #16
	bl	kmem_cache_alloc_trace(PLT)
	subs	r3, r0, #0
	beq	.L6603
.L6597:
	mov	r1, #16
	mov	r2, #0
	mov	r0, r3
	stmia	r3, {r1, r2}
.L6598:
	ldr	r1, [r4, #212]
	add	r2, r4, #208
	add	r0, r0, #8
	bl	__list_add(PLT)
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r6, [sp, #8]
	add	r0, r4, #108
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up(PLT)
.L6599:
	mov	r3, #16
	b	.L6597
.L6603:
	mvn	r0, #11
	b	.L6598
.L6605:
	.align	2
.L6604:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1593+8))
	.fnend
	.size	fmbim_reset_cmd_complete, .-fmbim_reset_cmd_complete
	.align	2
	.type	mtp_function_unbind, %function
mtp_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	add	r4, r1, #88
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	add	r9, r1, #116
	str	r10, [sp, #24]
	str	lr, [sp, #28]
.L6607:
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r6, #116]
	mov	r7, r0
	cmp	r9, r5
	mov	r0, r5
	sub	r8, r5, #36
	beq	.L6608
	bl	list_del(PLT)
	mov	r0, r4
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r8, #0
	beq	.L6615
	ldr	r7, [r6, #92]
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	mov	r1, r8
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L6607
.L6608:
	mov	r1, r7
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
.L6615:
	mov	r7, #0
.L6611:
	add	r3, r7, #42
	ldr	r8, [r6, #96]
	ldr	r5, [r6, r3, asl #2]
	cmp	r5, #0
	beq	.L6610
	ldr	r0, [r5]
	bl	kfree(PLT)
	ldr	r3, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L6610:
	cmp	r7, #1
	mov	r7, #1
	bne	.L6611
	add	r9, r6, #124
.L6612:
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r6, #124]
	mov	r7, r0
	cmp	r5, r9
	mov	r0, r5
	sub	r8, r5, #36
	beq	.L6613
	bl	list_del(PLT)
	mov	r0, r4
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r8, #0
	beq	.L6617
	ldr	r7, [r6, #100]
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	mov	r1, r8
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L6612
.L6613:
	mov	r0, r4
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
.L6617:
	mov	r3, #0
	str	r3, [r6, #104]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	mtp_function_unbind, .-mtp_function_unbind
	.align	2
	.type	rmnet_mux_smd_complete_epin, %function
rmnet_mux_smd_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r3, [r4, #364]
	ldr	r1, [r4, #84]
	cmp	r3, #0
	beq	.L6648
	cmn	r2, #104
	beq	.L6628
	cmp	r2, #0
	beq	.L6629
	cmn	r2, #108
	beq	.L6628
	ldr	r0, [r1]
	ldr	r1, .L6650
	add	r0, r0, #32
.LPIC1594:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L6629:
	add	r6, r4, #368
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #104]
	add	r2, r4, #104
	cmp	r3, r2
	beq	.L6649
	add	r0, r5, #36
	ldr	r1, [r4, #108]
	bl	__list_add(PLT)
.L6633:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
.L6628:
	add	r6, r4, #368
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	add	r0, r5, #36
	ldr	r1, [r4, #108]
	add	r2, r4, #104
	bl	__list_add(PLT)
	b	.L6633
.L6648:
	mov	r6, r0
	ldr	r0, [r5]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
.L6649:
	add	r0, r5, #36
	mov	r2, r3
	ldr	r1, [r4, #108]
	bl	__list_add(PLT)
	mov	r0, #0
	add	r1, r4, #136
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	add	r0, r4, #132
	bne	.L6633
	bl	__tasklet_schedule(PLT)
	b	.L6633
.L6651:
	.align	2
.L6650:
	.word	.LC395-(.LPIC1594+8)
	.fnend
	.size	rmnet_mux_smd_complete_epin, .-rmnet_mux_smd_complete_epin
	.align	2
	.type	acm_cdc_notify_complete, %function
acm_cdc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #32]
	add	r6, r4, #148
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #44]
	mov	r1, r0
	cmn	r3, #108
	beq	.L6653
	ldrb	r7, [r4, #147]	@ zero_extendqisi2
	str	r5, [r4, #156]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r7, #0
	beq	.L6652
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #156]
	mov	r5, r0
	cmp	r3, #0
	moveq	r3, #1
	streqb	r3, [r4, #147]
	bne	.L6659
.L6656:
	mov	r0, r6
	mov	r1, r5
.L6658:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L6652:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6653:
	str	r5, [r4, #156]
	mov	r0, r6
	b	.L6658
.L6659:
	mov	r7, r4
	ldr	r0, .L6660
	ldrh	r2, [r7, #170]!
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
.LPIC1595:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	mov	r1, r7
	bl	acm_cdc_notify.constprop.138(PLT)
	b	.L6656
.L6661:
	.align	2
.L6660:
	.word	.LC384-(.LPIC1595+8)
	.fnend
	.size	acm_cdc_notify_complete, .-acm_cdc_notify_complete
	.align	2
	.type	composite_disconnect, %function
composite_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r0, r0, #32
	str	lr, [sp, #20]
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	bl	dev_get_drvdata(PLT)
	mov	r8, r0
	mov	r0, #0
	bl	set_string_mode(PLT)
	ldr	r1, .L6683
	add	r5, r8, #60
	ldr	r0, .L6683+4
.LPIC1597:
	add	r1, pc, r1
	add	r1, r1, #3168
.LPIC1596:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r8, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L6663
	ldr	r4, [r3, #36]!
	cmp	r4, r3
	sub	r4, r4, #72
	movne	r7, #0
	beq	.L6669
.L6668:
	ldr	r3, [r4, #48]
	mov	r0, r4
	cmp	r3, #0
	beq	.L6667
	blx	r3
.L6667:
	str	r7, [r4, #80]
	ldr	r3, [r8, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r4, r3
	sub	r4, r4, #72
	bne	.L6668
.L6669:
	ldr	r3, .L6683+8
	mov	r2, #0
	str	r2, [r8, #12]
	str	r2, [r8, #56]
.LPIC1598:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	ldr	r3, [r3, #32]
	cmp	r3, r2
	beq	.L6670
.L6665:
	mov	r0, r8
	blx	r3
.L6671:
	ldr	r3, [r8, #56]
	cmp	r3, #0
	beq	.L6670
	ldr	r0, [r8]
	ldr	r1, .L6683+12
	add	r0, r0, #32
.LPIC1600:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	mov	r3, #0
	str	r3, [r8, #56]
.L6670:
	mov	r0, r5
	mov	r1, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L6663:
	ldr	r3, .L6683+16
.LPIC1599:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	ldr	r3, [r3, #32]
	cmp	r3, #0
	bne	.L6665
	b	.L6671
.L6684:
	.align	2
.L6683:
	.word	.LANCHOR3-(.LPIC1597+8)
	.word	.LC396-(.LPIC1596+8)
	.word	.LANCHOR1-(.LPIC1598+8)
	.word	.LC397-(.LPIC1600+8)
	.word	.LANCHOR1-(.LPIC1599+8)
	.fnend
	.size	composite_disconnect, .-composite_disconnect
	.align	2
	.type	rmnet_sdio_free_buf, %function
rmnet_sdio_free_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #188
	strd	r8, [sp, #16]
	mov	r9, #0
	strd	r10, [sp, #24]
	mov	r10, r0
	mov	r0, r7
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave(PLT)
	str	r9, [r4, #356]
	str	r9, [r4, #360]
	str	r9, [r4, #368]
	str	r9, [r4, #372]
	str	r9, [r4, #328]
	str	r9, [r4, #364]
	ldr	r5, [r10, #132]!
	str	r0, [sp, #4]
	cmp	r5, r10
	ldr	r6, [r5]
	beq	.L6690
.L6689:
	mov	r0, r5
	sub	r8, r5, #36
	bl	list_del(PLT)
	ldr	r3, [r4, #140]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #140]
	str	r9, [r5, #-36]
	ldr	fp, [r4, #88]
	mov	r5, r6
	bl	kfree(PLT)
	mov	r1, r8
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r10, r6
	ldr	r6, [r6]
	bne	.L6689
.L6690:
	mov	r9, r4
	ldr	r5, [r9, #160]!
	cmp	r5, r9
	ldr	r6, [r5]
	movne	r10, #0
	beq	.L6688
.L6693:
	mov	r0, r5
	sub	r8, r5, #36
	bl	list_del(PLT)
	ldr	r3, [r4, #168]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #168]
	str	r10, [r5, #-36]
	ldr	fp, [r4, #92]
	mov	r5, r6
	bl	kfree(PLT)
	mov	r1, r8
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r9, r6
	ldr	r6, [r6]
	bne	.L6693
.L6688:
	mov	r9, r4
	ldr	r5, [r9, #108]!
	cmp	r5, r9
	ldr	r6, [r5]
	beq	.L6692
.L6696:
	mov	r0, r5
	sub	r10, r5, #8
	bl	list_del(PLT)
	ldr	r3, [r4, #116]
	sub	r3, r3, #1
	str	r3, [r4, #116]
	ldr	r0, [r5, #-8]
	mov	r5, r6
	bl	kfree(PLT)
	mov	r0, r10
	bl	kfree(PLT)
	cmp	r9, r6
	ldr	r6, [r6]
	bne	.L6696
.L6692:
	mov	r9, r4
	ldr	r5, [r9, #120]!
	cmp	r5, r9
	ldr	r6, [r5]
	beq	.L6695
.L6699:
	mov	r0, r5
	sub	r10, r5, #8
	bl	list_del(PLT)
	ldr	r3, [r4, #128]
	sub	r3, r3, #1
	str	r3, [r4, #128]
	ldr	r0, [r5, #-8]
	mov	r5, r6
	bl	kfree(PLT)
	mov	r0, r10
	bl	kfree(PLT)
	cmp	r9, r6
	ldr	r6, [r6]
	bne	.L6699
.L6695:
	ldr	r3, [r4, #144]
	add	r5, r4, #144
	cmp	r3, r5
	cmpne	r3, #0
	movne	r6, #0
	beq	.L6698
.L6701:
	ldr	r2, [r4, #152]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #152]
	ldmia	r3, {r1, r2}
	str	r6, [r3]
	str	r6, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #144]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L6701
.L6698:
	ldr	r3, [r4, #172]
	add	r5, r4, #172
	cmp	r3, r5
	cmpne	r3, #0
	movne	r6, #0
	beq	.L6703
.L6702:
	ldr	r2, [r4, #180]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #180]
	ldmia	r3, {r1, r2}
	str	r6, [r3]
	str	r6, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #172]
	cmp	r5, r3
	cmpne	r3, #0
	bne	.L6702
.L6703:
	ldrd	r4, [r4, #96]
	ldr	r0, [r5]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r1, [sp, #4]
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
	.fnend
	.size	rmnet_sdio_free_buf, .-rmnet_sdio_free_buf
	.align	2
	.type	rmnet_sdio_disable, %function
rmnet_sdio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #192]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, #0
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r0, [r0, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r4
	str	r5, [r4, #192]
	str	r5, [r4, #196]
	bl	rmnet_sdio_free_buf(PLT)
	ldr	r1, [r4, #200]
	add	r2, r4, #204
	mov	r0, #4
	bl	queue_work_on(PLT)
	str	r5, [r4, #332]
	ldr	r1, [r4, #200]
	add	r2, r4, #336
	ldr	r6, [sp, #8]
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	queue_work_on(PLT)
	.fnend
	.size	rmnet_sdio_disable, .-rmnet_sdio_disable
	.align	2
	.type	rmnet_sdio_start_io, %function
rmnet_sdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #188
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #192]
	mov	r7, r0
	cmp	r5, #0
	beq	.L6744
	ldr	r3, [r4, #320]
	tst	r3, #2
	beq	.L6717
	ldr	r3, [r4, #324]
	tst	r3, #2
	beq	.L6717
	ldr	r9, .L6746
	mov	r5, #16
	add	r8, r4, #160
.LPIC1601:
	add	r9, pc, r9
.L6718:
	ldr	r0, [r4, #88]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r8
	add	r0, r3, #36
	beq	.L6732
	cmn	r3, #4096
	bhi	.L6743
	str	r9, [r3, #28]
	ldr	r1, [r4, #164]
	bl	__list_add(PLT)
	ldr	r3, [r4, #168]
	subs	r5, r5, #1
	add	r3, r3, #1
	str	r3, [r4, #168]
	bne	.L6718
	ldr	r10, .L6746+4
	mov	r5, #200
	add	r9, r4, #132
.LPIC1602:
	add	r10, pc, r10
.L6724:
	ldr	r0, [r4, #92]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r9
	add	r0, r3, #36
	beq	.L6732
	cmn	r3, #4096
	bhi	.L6743
	str	r10, [r3, #28]
	ldr	r1, [r4, #136]
	bl	__list_add(PLT)
	ldr	r3, [r4, #140]
	subs	r5, r5, #1
	add	r3, r3, #1
	str	r3, [r4, #140]
	bne	.L6724
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r5, [r4, #192]
	ldr	r9, [r4, #84]
	cmp	r5, #0
	movne	r0, r6
	beq	.L6745
.L6742:
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #160]
	mov	r10, r0
	cmp	r5, r8
	beq	.L6726
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del(PLT)
	ldr	r3, [r4, #168]
	mov	r1, r10
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r4, #168]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r1, #32
	mov	r2, #0
	movw	r0, #2056
	mvn	r3, #0
	bl	__alloc_skb(PLT)
	mov	r1, r7
	subs	r7, r0, #0
	mov	ip, #2048
	mov	r2, #32
	beq	.L6733
	ldr	r3, [r7, #172]
	ldr	r0, [r7, #160]
	add	r3, r3, #8
	add	r0, r0, #8
	str	r3, [r7, #172]
	str	r0, [r7, #160]
	str	r3, [r5, #-36]
	str	ip, [r5, #-32]
	str	r7, [r5, #-4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	fp, r0, #0
	mov	r0, r6
	beq	.L6742
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
.L6727:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r10, r0
	ldr	r1, .L6746+8
	mov	r2, fp
	ldr	r0, [r9]
.LPIC1605:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r0, r5
	mov	r2, r8
	ldr	r1, [r4, #164]
	bl	__list_add(PLT)
	ldr	r3, [r4, #168]
	add	r3, r3, #1
	str	r3, [r4, #168]
.L6726:
	mov	r0, r6
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r5, #0
	b	.L6740
.L6717:
	mov	r0, r6
	mov	r1, r7
	mov	r5, #0
	bl	_raw_spin_unlock_irqrestore(PLT)
.L6740:
	mov	r0, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6744:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L6740
.L6732:
	mvn	r5, #11
.L6722:
.L6721:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
	bl	rmnet_sdio_free_buf(PLT)
	mov	r3, #0
	str	r3, [r4, #96]
	str	r3, [r4, #92]
	str	r3, [r4, #88]
	b	.L6740
.L6733:
	mvn	fp, #11
	b	.L6727
.L6745:
	ldr	r1, .L6746+12
	ldr	r0, .L6746+16
.LPIC1604:
	add	r1, pc, r1
	add	r1, r1, #3200
.LPIC1603:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L6740
.L6743:
	mov	r5, r3
	b	.L6722
.L6747:
	.align	2
.L6746:
	.word	rmnet_sdio_complete_epout-(.LPIC1601+8)
	.word	rmnet_sdio_complete_epin-(.LPIC1602+8)
	.word	.LC126-(.LPIC1605+8)
	.word	.LANCHOR3-(.LPIC1604+8)
	.word	.LC398-(.LPIC1603+8)
	.fnend
	.size	rmnet_sdio_start_io, .-rmnet_sdio_start_io
	.align	2
	.type	rmnet_open_sdio_work, %function
rmnet_open_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #72]
	ldr	r3, [r0, #68]
	ldr	r3, [r0, #68]
	ldr	r5, [r0, #-168]
	tst	r3, #2
	beq	.L6749
	ldr	r3, [r0, #72]
	tst	r3, #2
	bne	.L6764
.L6749:
	ldr	r2, .L6767
.LPIC1610:
	add	r2, pc, r2
	ldr	r3, [r2, #3536]
	add	r3, r3, #1
	cmp	r3, #90
	str	r3, [r2, #3536]
	ble	.L6752
	ldr	r3, [r4, #72]
	tst	r3, #2
	beq	.L6765
.L6753:
	ldr	r3, [r4, #68]
	tst	r3, #2
	beq	.L6766
.L6748:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L6752:
	ldr	r5, [r4, #-52]
	mov	r0, #2000
	bl	msecs_to_jiffies(PLT)
	mov	r3, r0
	mov	r2, r4
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	mov	r0, #4
	mov	r1, r5
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	queue_delayed_work_on(PLT)
.L6766:
	ldr	r0, [r5]
	ldr	r1, .L6767+4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	r0, r0, #32
	add	sp, sp, #16
.LPIC1613:
	add	r1, pc, r1
	b	dev_err(PLT)
.L6765:
	ldr	r0, [r5]
	ldr	r1, .L6767+8
	add	r0, r0, #32
.LPIC1612:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L6753
.L6764:
	sub	r0, r0, #252
	bl	rmnet_sdio_start_io(PLT)
	ldr	r3, [r4, #-60]
	cmp	r3, #0
	beq	.L6750
	mov	r0, #4
	ldr	r1, [r4, #-52]
	add	r2, r4, #84
	bl	queue_work_on(PLT)
.L6750:
	ldr	r1, .L6767+12
	ldr	r4, .L6767+16
	ldr	r0, .L6767+20
.LPIC1607:
	add	r1, pc, r1
.LPIC1608:
	add	r4, pc, r4
	add	r1, r1, #3216
.LPIC1606:
	add	r0, pc, r0
	add	r1, r1, #8
	ldr	r2, [r4, #3536]
	bl	printk(PLT)
	mov	r3, #0
	str	r3, [r4, #3536]
	b	.L6748
.L6768:
	.align	2
.L6767:
	.word	.LANCHOR4-(.LPIC1610+8)
	.word	.LC401-(.LPIC1613+8)
	.word	.LC400-(.LPIC1612+8)
	.word	.LANCHOR3-(.LPIC1607+8)
	.word	.LANCHOR4-(.LPIC1608+8)
	.word	.LC399-(.LPIC1606+8)
	.fnend
	.size	rmnet_open_sdio_work, .-rmnet_open_sdio_work
	.align	2
	.type	mbim_read, %function
mbim_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #36
	sub	sp, sp, #36
	str	r1, [sp]
	cmp	r4, #0
	beq	.L6797
	cmp	r2, #4096
	mov	fp, r2
	bhi	.L6798
	add	r7, r4, #100
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r7]
	add	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L6799
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L6805
	ldr	r0, .L6805+4
.LPIC1619:
	add	r1, pc, r1
.LPIC1618:
	add	r0, pc, r0
	add	r1, r1, #3248
	bl	printk(PLT)
	mvn	r0, #15
.L6794:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L6799:
	ldr	r3, .L6805+8
	ldr	r6, .L6805+12
.LPIC1621:
	add	r3, pc, r3
.LPIC1620:
	add	r6, pc, r6
	add	r5, r3, #3248
.L6773:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	bne	.L6778
	ldr	r3, [r4, #232]
	cmp	r3, #0
	beq	.L6779
.L6778:
	ldr	r3, [r4, #232]
	cmp	r3, #0
	bne	.L6800
	add	r6, r4, #204
	add	r5, r4, #208
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r8, [r4, #208]
	mov	r1, r0
	cmp	r5, r8
	bne	.L6781
	mov	r3, sp
	bic	r10, r3, #8128
	bic	r10, r10, #63
	b	.L6786
.L6782:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r8, [r4, #208]
	mov	r1, r0
	cmp	r8, r5
	bne	.L6781
.L6786:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #208]
	cmp	r5, r3
	bne	.L6782
	ldr	r2, .L6805+16
	mov	r3, #0
	add	r8, sp, #12
	ldr	r1, [r10, #12]
	add	r9, r4, #108
	str	r3, [sp, #12]
	add	r3, sp, #24
.LPIC1629:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #24]
	str	r3, [sp, #28]
	str	r1, [sp, #16]
	str	r2, [sp, #20]
	b	.L6785
.L6801:
	bl	schedule(PLT)
.L6785:
	mov	r0, r9
	mov	r1, r8
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #208]
	cmp	r5, r3
	bne	.L6783
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L6801
	mov	r0, r9
	mov	r1, r8
	bl	finish_wait(PLT)
	ldr	r1, .L6805+20
	ldr	r0, .L6805+24
.LPIC1628:
	add	r1, pc, r1
	add	r1, r1, #3248
.LPIC1627:
	add	r0, pc, r0
	bl	printk(PLT)
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, #65024
	movt	r0, 65535
	b	.L6794
.L6783:
	mov	r0, r9
	mov	r1, r8
	bl	finish_wait(PLT)
	b	.L6782
.L6781:
	ldr	r3, [r8, #-4]
	sub	r5, r8, #8
	cmp	fp, r3
	bcc	.L6802
	mov	r0, r8
	str	r1, [sp, #4]
	bl	list_del(PLT)
	ldr	r1, [sp, #4]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r3, sp
	ldr	r2, [r8, #-4]
	bic	r3, r3, #8128
	ldr	ip, [sp]
	bic	r3, r3, #63
	ldr	r1, [r8, #-8]
	ldr	r3, [r3, #8]
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r0, ip, r2; sbcccs r0, r0, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L6803
.L6788:
	cmp	r2, #0
	ldreq	r4, [r8, #-4]
	bne	.L6804
.L6790:
	cmp	r5, #0
	moveq	r0, r4
	beq	.L6794
	ldr	r0, [r8, #-8]
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
	b	.L6794
.L6803:
	mov	r0, ip
	bl	__copy_to_user(PLT)
	mov	r2, r0
	b	.L6788
.L6800:
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #4
	b	.L6794
.L6798:
	ldr	r1, .L6805+28
	mov	r3, #4096
	ldr	r0, .L6805+32
.LPIC1617:
	add	r1, pc, r1
.LPIC1616:
	add	r0, pc, r0
	add	r1, r1, #3248
	bl	printk(PLT)
	mvn	r0, #21
	b	.L6794
.L6797:
	ldr	r1, .L6805+36
	ldr	r0, .L6805+40
.LPIC1615:
	add	r1, pc, r1
.LPIC1614:
	add	r0, pc, r0
	add	r1, r1, #3248
	bl	printk(PLT)
	mvn	r0, #18
	b	.L6794
.L6802:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L6805+44
	mov	r3, fp
	ldr	r0, .L6805+48
	ldr	r2, [r8, #-4]
.LPIC1624:
	add	r1, pc, r1
.LPIC1623:
	add	r0, pc, r0
	add	r1, r1, #3248
	bl	printk(PLT)
	mvn	r0, #11
	b	.L6794
.L6804:
	ldr	r1, .L6805+52
	mvn	r4, #11
	ldr	r0, .L6805+56
.LPIC1626:
	add	r1, pc, r1
	add	r1, r1, #3248
.LPIC1625:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L6790
.L6779:
	mov	r0, r6
	mov	r1, r5
	bl	printk(PLT)
	ldr	r3, [r4, #88]
	cmp	r3, #0
	bne	.L6773
	ldr	r1, [r4, #232]
	cmp	r1, #0
	bne	.L6773
	add	r8, sp, #12
	mov	r2, #20
	mov	r0, r8
	add	r10, r4, #108
	bl	memset(PLT)
	ldr	r2, .L6805+60
	mov	r3, sp
	bic	r9, r3, #8128
	add	r3, sp, #24
	bic	r9, r9, #63
	ldr	r1, [r9, #12]
	str	r3, [sp, #24]
.LPIC1630:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #28]
	str	r1, [sp, #16]
	str	r2, [sp, #20]
.L6777:
	mov	r0, r10
	mov	r1, r8
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #88]
	cmp	r3, #0
	bne	.L6775
	ldr	r3, [r4, #232]
	cmp	r3, #0
	bne	.L6775
	ldr	r3, [r9, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L6776
	bl	schedule(PLT)
	b	.L6777
.L6775:
	mov	r0, r10
	mov	r1, r8
	bl	finish_wait(PLT)
	b	.L6773
.L6776:
	mov	r0, r10
	mov	r1, r8
	bl	finish_wait(PLT)
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, #65024
	movt	r0, 65535
	b	.L6794
.L6806:
	.align	2
.L6805:
	.word	.LANCHOR3-(.LPIC1619+8)
	.word	.LC404-(.LPIC1618+8)
	.word	.LANCHOR3-(.LPIC1621+8)
	.word	.LC405-(.LPIC1620+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1629+8))
	.word	.LANCHOR3-(.LPIC1628+8)
	.word	.LC408-(.LPIC1627+8)
	.word	.LANCHOR3-(.LPIC1617+8)
	.word	.LC403-(.LPIC1616+8)
	.word	.LANCHOR3-(.LPIC1615+8)
	.word	.LC402-(.LPIC1614+8)
	.word	.LANCHOR3-(.LPIC1624+8)
	.word	.LC406-(.LPIC1623+8)
	.word	.LANCHOR3-(.LPIC1626+8)
	.word	.LC407-(.LPIC1625+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1630+8))
	.fnend
	.size	mbim_read, .-mbim_read
	.align	2
	.type	gbam_start, %function
gbam_start:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L6821
	add	r5, r0, #8
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L6822
	ldr	r0, [r3, #84]
	mov	r2, #32
	ldr	r1, [r4, #116]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L6823
.L6812:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
.L6821:
	add	r5, r0, #4
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L6824
	ldr	r0, [r3, #88]
	mov	r2, #32
	ldr	r1, [r4, #112]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L6812
	ldr	r1, .L6825
	mov	r2, r0
	ldr	r0, .L6825+4
.LPIC1634:
	add	r1, pc, r1
	add	r1, r1, #1264
.LPIC1633:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L6812
.L6823:
	ldr	r1, .L6825+8
	mov	r2, r0
	ldr	r0, .L6825+12
.LPIC1638:
	add	r1, pc, r1
	add	r1, r1, #1296
.LPIC1637:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L6812
.L6822:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L6825+16
	ldr	r0, .L6825+20
.LPIC1636:
	add	r1, pc, r1
	add	r1, r1, #1296
.LPIC1635:
	add	r0, pc, r0
	add	r1, r1, #4
.L6820:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk(PLT)
.L6824:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L6825+24
	ldr	r0, .L6825+28
.LPIC1632:
	add	r1, pc, r1
	add	r1, r1, #1264
.LPIC1631:
	add	r0, pc, r0
	add	r1, r1, #12
	b	.L6820
.L6826:
	.align	2
.L6825:
	.word	.LANCHOR3-(.LPIC1634+8)
	.word	.LC201-(.LPIC1633+8)
	.word	.LANCHOR3-(.LPIC1638+8)
	.word	.LC201-(.LPIC1637+8)
	.word	.LANCHOR3-(.LPIC1636+8)
	.word	.LC23-(.LPIC1635+8)
	.word	.LANCHOR3-(.LPIC1632+8)
	.word	.LC23-(.LPIC1631+8)
	.fnend
	.size	gbam_start, .-gbam_start
	.align	2
	.type	rmnet_mux_disconnect_work, %function
rmnet_mux_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #-20]
	cmp	r3, #3
	beq	.L6866
.L6828:
	sub	r6, r4, #16
	sub	r8, r4, #192
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #-192]
	mov	r7, r0
	cmp	r8, r5
	movne	r9, #0
	beq	.L6833
.L6832:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del(PLT)
	str	r9, [r5, #-36]
	ldr	r5, [r4, #-296]
	mov	r0, #0
	bl	kfree(PLT)
	mov	r1, r10
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-192]
	cmp	r8, r5
	bne	.L6832
.L6833:
	ldr	r5, [r4, #-168]
	sub	r8, r4, #168
	cmp	r8, r5
	movne	r9, #0
	beq	.L6831
.L6836:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del(PLT)
	str	r9, [r5, #-36]
	ldr	r5, [r4, #-292]
	mov	r0, #0
	bl	kfree(PLT)
	mov	r1, r10
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-168]
	cmp	r8, r5
	bne	.L6836
.L6831:
	ldr	r3, [r4, #-184]
	sub	r5, r4, #184
	cmp	r3, r5
	cmpne	r3, #0
	movne	r8, #0
	beq	.L6835
.L6839:
	ldr	r2, [r4, #-176]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #-176]
	ldmia	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #-184]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L6839
.L6835:
	ldr	r3, [r4, #-160]
	sub	r5, r4, #160
	cmp	r3, r5
	cmpne	r3, #0
	movne	r8, #0
	beq	.L6838
.L6840:
	ldr	r2, [r4, #-152]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #-152]
	ldmia	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #-160]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L6840
.L6838:
	ldr	r5, [r4, #-280]
	sub	r9, r4, #280
	cmp	r5, r9
	beq	.L6855
.L6841:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del(PLT)
	ldr	r8, [r4, #-296]
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	mov	r1, r10
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-280]
	cmp	r5, r9
	bne	.L6841
.L6855:
	ldr	r5, [r4, #-272]
	sub	r9, r4, #272
	cmp	r9, r5
	beq	.L6846
.L6845:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del(PLT)
	ldr	r8, [r4, #-292]
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	mov	r1, r10
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-272]
	cmp	r9, r5
	bne	.L6845
.L6846:
	ldr	r5, [r4, #-264]
	sub	r9, r4, #264
	cmp	r9, r5
	beq	.L6844
.L6849:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del(PLT)
	ldr	r8, [r4, #-292]
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	mov	r1, r10
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #-264]
	cmp	r9, r5
	bne	.L6849
.L6844:
	ldr	r5, [r4, #-68]
	sub	r9, r4, #68
	cmp	r9, r5
	beq	.L6848
.L6852:
	mov	r0, r5
	sub	r8, r5, #8
	bl	list_del(PLT)
	ldr	r0, [r5, #-8]
	bl	kfree(PLT)
	mov	r0, r8
	bl	kfree(PLT)
	ldr	r3, [r4, #-48]
	ldr	r5, [r4, #-68]
	sub	r3, r3, #1
	cmp	r9, r5
	str	r3, [r4, #-48]
	bne	.L6852
.L6848:
	ldr	r5, [r4, #-44]
	sub	r9, r4, #44
	cmp	r9, r5
	beq	.L6851
.L6853:
	mov	r0, r5
	sub	r8, r5, #8
	bl	list_del(PLT)
	ldr	r0, [r5, #-8]
	bl	kfree(PLT)
	mov	r0, r8
	bl	kfree(PLT)
	ldr	r3, [r4, #-36]
	ldr	r5, [r4, #-44]
	sub	r3, r3, #1
	cmp	r9, r5
	str	r3, [r4, #-36]
	bne	.L6853
.L6851:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r2, #0
	sub	r0, r4, #60
	mov	r3, r2
	mov	r1, #3
	str	r2, [r4, #-20]
	mov	r2, #1
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up(PLT)
.L6866:
	sub	r0, r0, #232
	bl	tasklet_kill(PLT)
	sub	r0, r4, #252
	bl	tasklet_kill(PLT)
	b	.L6828
	.fnend
	.size	rmnet_mux_disconnect_work, .-rmnet_mux_disconnect_work
	.align	2
	.type	fsg_setup, %function
fsg_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r0, [r0, #88]
	ldrh	lr, [r1, #4]	@ unaligned
	ldrh	r5, [r1, #2]	@ unaligned
	ldrh	r6, [r1, #6]	@ unaligned
	ldr	r3, [r0, #8]
	ldr	ip, [r0, #52]
	cmp	r3, #0
	beq	.L6892
	ldr	r3, [r0, #56]
	mov	r2, #0
	add	r3, r3, #1
	str	r3, [r0, #56]
	str	r2, [ip, #32]
	str	r2, [ip, #4]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	cmp	r3, #254
	beq	.L6874
	cmp	r3, #255
	bne	.L6890
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #33
	bne	.L6890
	ldrh	r3, [r4, #92]
	cmp	r3, lr
	bne	.L6881
	orrs	r3, r6, r5
	bne	.L6881
	ldr	r5, [r4, #88]
	add	r6, r5, #44
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #112]
	mov	r7, r0
	cmp	r3, #2
	bgt	.L6872
	ldr	r2, [r5, #168]
	mov	r1, #2
	ldr	r3, [r5, #56]
	str	r1, [r5, #112]
	cmp	r2, #0
	str	r3, [r5, #116]
	beq	.L6872
	mov	r0, #10
	bl	send_sig_info(PLT)
.L6872:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r2, [r4, #88]
	movw	r0, #32767
	movw	r3, #1255
	ldr	r4, [r2, #4]
	cmp	r4, #0
	movne	r4, r0
	moveq	r4, r3
	b	.L6885
.L6890:
	mvn	r4, #94
.L6885:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L6874:
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #161
	bne	.L6890
	ldrh	r3, [r4, #92]
	cmp	r3, lr
	bne	.L6881
	cmp	r6, #1
	cmpeq	r5, #0
	bne	.L6881
	ldr	r3, [r4, #88]
	mov	r1, #1
	mov	r2, #32
	ldr	r0, [ip]
	ldr	r3, [r3, #92]
	sub	r3, r3, #1
	strb	r3, [r0]
	str	r1, [ip, #4]
	ldr	r5, [r4, #88]
	ldrd	r0, [r5, #48]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r3, [r5, #48]
	cmp	r0, #0
	cmnne	r0, #108
	mov	r4, r0
	str	r5, [r3]
	beq	.L6885
	ldr	r0, [r5]
	mov	r3, r4
	ldr	r2, [r5, #48]
	ldr	r1, .L6893
	add	r0, r0, #32
	ldr	r2, [r2, #4]
.LPIC1642:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	b	.L6885
.L6881:
	mvn	r4, #32
	b	.L6885
.L6892:
	ldr	r2, .L6893+4
	movw	r3, #706
	mvn	r4, #94
	ldr	r0, [r0]
	ldr	r1, .L6893+8
.LPIC1640:
	add	r2, pc, r2
	add	r2, r2, #3248
	add	r0, r0, #32
.LPIC1639:
	add	r1, pc, r1
	add	r2, r2, #12
	bl	dev_err(PLT)
	ldr	r0, .L6893+12
	movw	r1, #550
.LPIC1641:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L6885
.L6894:
	.align	2
.L6893:
	.word	.LC411-(.LPIC1642+8)
	.word	.LANCHOR3-(.LPIC1640+8)
	.word	.LC409-(.LPIC1639+8)
	.word	.LC410-(.LPIC1641+8)
	.fnend
	.size	fsg_setup, .-fsg_setup
	.align	2
	.type	rmnet_mux_sdio_complete_epout, %function
rmnet_mux_sdio_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r4, [r0]
	.pad #12
	sub	sp, sp, #12
	ldr	r7, [r1, #32]
	ldr	r3, [r1, #44]
	ldr	r8, [r4, #364]
	ldr	r9, [r4, #84]
	cmp	r8, #0
	beq	.L6914
	cmn	r3, #104
	beq	.L6898
	cmp	r3, #0
	beq	.L6899
	cmn	r3, #108
	beq	.L6898
	ldr	r2, [r0, #4]
	add	r6, r4, #368
	ldr	lr, [r1, #48]
	ldr	ip, [r1, #4]
	ldr	r0, [r9]
	ldr	r1, .L6917
	str	lr, [sp]
	str	ip, [sp, #4]
	add	r0, r0, #32
.LPIC1643:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
.L6900:
	ldr	r3, .L6917+4
	ldr	r2, [r4, #312]
.LPIC1644:
	add	r3, pc, r3
	ldr	r3, [r3, #584]
	cmp	r2, r3
	bcs	.L6915
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	movw	r0, #2056
	mov	r1, #32
	mov	r2, #0
	mvn	r3, #0
	bl	__alloc_skb(PLT)
	subs	r6, r0, #0
	beq	.L6904
	ldr	r3, [r6, #172]
	mov	ip, #2048
	mov	r1, r5
	ldr	r0, [r6, #160]
	mov	r2, #32
	add	r3, r3, #8
	add	r0, r0, #8
	str	r3, [r6, #172]
	str	r0, [r6, #160]
	str	r3, [r5]
	str	r6, [r5, #32]
	str	ip, [r5, #4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	bne	.L6916
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L6899:
	ldr	r1, [r1, #48]
	mov	r0, r7
	add	r6, r4, #368
	bl	skb_put(PLT)
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #228]
	add	r1, r4, #224
	add	r2, r4, #240
	mov	r0, #4
	stmia	r7, {r1, r3}
	str	r7, [r3]
	ldr	r3, [r4, #232]
	str	r7, [r4, #228]
	ldr	r1, [r4, #380]
	add	r3, r3, #1
	str	r3, [r4, #232]
	bl	queue_work_on(PLT)
	b	.L6900
.L6898:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	mov	r3, #0
	mov	r0, r3
	str	r3, [r5]
.L6913:
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	bx	r3	@ indirect register sibling call
.L6914:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	str	r8, [r5]
	mov	r0, r8
	b	.L6913
.L6915:
	ldr	r1, [r4, #220]
	add	r0, r5, #36
	add	r2, r4, #216
	bl	__list_add(PLT)
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	_raw_spin_unlock(PLT)
.L6916:
	mov	r0, r6
	bl	dev_kfree_skb_any(PLT)
.L6902:
	ldr	r0, [r9]
	mov	r2, r7
	ldr	r1, .L6917+8
	add	r0, r0, #32
.LPIC1645:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldr	r1, [r4, #220]
	add	r0, r5, #36
	add	r2, r4, #216
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	__list_add(PLT)
.L6904:
	mvn	r7, #11
	b	.L6902
.L6918:
	.align	2
.L6917:
	.word	.LC412-(.LPIC1643+8)
	.word	.LANCHOR2-(.LPIC1644+8)
	.word	.LC413-(.LPIC1645+8)
	.fnend
	.size	rmnet_mux_sdio_complete_epout, .-rmnet_mux_sdio_complete_epout
	.align	2
	.type	android_disconnect, %function
android_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	add	r0, r0, #32
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	dev_get_drvdata(PLT)
	ldr	r2, .L6935
	mov	r7, r0
.LPIC1646:
	add	r2, pc, r2
	ldr	r3, [r2, #16]!
	cmp	r3, r2
	sub	r6, r3, #520
	bne	.L6923
	b	.L6920
.L6934:
	ldr	r3, [r6, #520]
	cmp	r3, r2
	sub	r6, r3, #520
	beq	.L6920
.L6923:
	ldr	r3, [r3, #-512]
	cmp	r7, r3
	bne	.L6934
.L6920:
	mov	r0, r4
	bl	composite_disconnect(PLT)
	ldr	r3, .L6935+4
.LPIC1649:
	add	r3, pc, r3
	ldr	r5, [r3, #2496]
	add	r9, r5, #88
	mov	r8, r5
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r10, [r8, #1768]!
	str	r0, [sp, #4]
	cmp	r10, r8
	ldr	r4, [r10]
	addne	fp, r5, #1776
	addne	fp, fp, #8
	beq	.L6928
.L6927:
	mov	r0, r10
	bl	list_del(PLT)
	mov	r0, r10
	mov	r1, fp
	ldr	r2, [r5, #1784]
	bl	__list_add(PLT)
	cmp	r8, r4
	mov	r10, r4
	ldr	r4, [r4]
	bne	.L6927
.L6928:
	mov	r8, r5
	ldr	r10, [r8, #1776]!
	cmp	r10, r8
	ldr	r4, [r10]
	addne	fp, r5, #1776
	addne	fp, fp, #8
	beq	.L6926
.L6929:
	mov	r0, r10
	bl	list_del(PLT)
	mov	r0, r10
	mov	r1, fp
	ldr	r2, [r5, #1784]
	bl	__list_add(PLT)
	cmp	r8, r4
	mov	r10, r4
	ldr	r4, [r4]
	bne	.L6929
.L6926:
	ldr	r4, .L6935+8
	mov	r0, r9
	add	r7, r7, #60
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r2, r5, #1744
	mov	r0, #4
.LPIC1651:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
	add	r2, r2, #8
	ldr	r1, [r4]
	bl	queue_work_on(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, #0
	mov	r5, r0
	ldr	r1, [r4]
	add	r2, r6, #180
	mov	r0, #4
	strb	r3, [r6, #48]
	bl	queue_work_on(PLT)
	mov	r0, r7
	mov	r1, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L6936:
	.align	2
.L6935:
	.word	.LANCHOR1-(.LPIC1646+8)
	.word	.LANCHOR1-(.LPIC1649+8)
	.word	system_wq(GOT_PREL)+(.-(.LPIC1651+8))
	.fnend
	.size	android_disconnect, .-android_disconnect
	.align	2
	.type	gbam2bam_connect_work, %function
gbam2bam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #284
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #-152]
	cmp	r3, #6
	beq	.L6968
	cmp	r3, #7
	beq	.L6969
.L6940:
	sub	r6, r4, #280
	sub	r5, r4, #276
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L6970
	ldr	r0, [r3, #88]
	mov	r1, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-172]
	beq	.L6971
	ldr	r3, .L6979
	str	r7, [r0, #32]
	mov	r9, #0
	ldr	r2, [r4, #-172]
	mov	r1, #32
.LPIC1660:
	add	r3, pc, r3
	str	r3, [r2, #28]
	ldr	r3, [r4, #-172]
	str	r9, [r3, #4]
	ldr	r2, [r4, #-172]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r3, [r4, #-164]
	ldr	r2, [r4, #-172]
	bic	r3, r3, #65536
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, r1
	str	r3, [r2, #52]
	ldr	r3, [r4, #-272]
	ldr	r0, [r3, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	str	r0, [r4, #-168]
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #-168]
	cmp	r3, r9
	beq	.L6972
	str	r7, [r3, #32]
	ldr	r3, .L6979+4
	mov	r0, r6
	ldr	r2, [r4, #-168]
.LPIC1663:
	add	r3, pc, r3
	str	r3, [r2, #28]
	ldr	r3, [r4, #-168]
	str	r9, [r3, #4]
	ldr	r2, [r4, #-168]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r3, [r4, #-160]
	ldr	r2, [r4, #-168]
	bic	r3, r3, #65536
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, #32
	str	r3, [r2, #52]
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L6973
	ldr	r0, [r3, #88]
	mov	r2, #32
	ldr	r1, [r4, #-172]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L6974
.L6946:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
.L6945:
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #-272]
	cmp	r3, #0
	beq	.L6975
	ldr	r0, [r3, #84]
	mov	r2, #32
	ldr	r1, [r4, #-168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L6976
.L6949:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
.L6948:
	ldr	r3, [r4, #-152]
	cmp	r3, #6
	beq	.L6977
.L6937:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L6977:
	ldr	r3, [r4, #-284]
	cmp	r3, #0
	bne	.L6937
	ldr	r0, .L6979+8
	mov	r1, r7
.LPIC1672:
	add	r0, pc, r0
	bl	usb_bam_register_peer_reset_cb(PLT)
	mov	r0, #1
	bl	usb_bam_client_ready(PLT)
	cmp	r0, #0
	beq	.L6937
	ldr	r1, .L6979+12
	mov	r2, r0
	ldr	r0, .L6979+16
.LPIC1674:
	add	r1, pc, r1
.LPIC1673:
	add	r0, pc, r0
	b	.L6966
.L6970:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	mov	r1, r8
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L6968:
	bl	usb_bam_reset_complete(PLT)
	ldrb	r0, [r4, #-156]	@ zero_extendqisi2
	sub	r1, r4, #164
	bl	usb_bam_connect(PLT)
	cmp	r0, #0
	bne	.L6978
	ldrb	r0, [r4, #-155]	@ zero_extendqisi2
	sub	r1, r4, #160
	bl	usb_bam_connect(PLT)
	cmp	r0, #0
	beq	.L6940
	ldr	r1, .L6979+20
	mov	r2, r0
	ldr	r0, .L6979+24
.LPIC1655:
	add	r1, pc, r1
.LPIC1654:
	add	r0, pc, r0
.L6966:
	add	r1, r1, #3264
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	r1, r1, #8
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L6971:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, .L6979+28
	ldr	r0, .L6979+32
.LPIC1659:
	add	r1, pc, r1
.LPIC1658:
	add	r0, pc, r0
.L6967:
	add	r1, r1, #3264
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	r1, r1, #8
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L6975:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L6979+36
	ldr	r0, .L6979+40
.LPIC1669:
	add	r1, pc, r1
	add	r1, r1, #1296
.LPIC1668:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L6948
.L6974:
	ldr	r1, .L6979+44
	mov	r2, r0
	ldr	r0, .L6979+48
.LPIC1667:
	add	r1, pc, r1
	add	r1, r1, #1264
.LPIC1666:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L6946
.L6973:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r1, .L6979+52
	ldr	r0, .L6979+56
.LPIC1665:
	add	r1, pc, r1
	add	r1, r1, #1264
.LPIC1664:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L6945
.L6969:
	ldr	r1, .L6979+60
	ldr	r0, .L6979+64
.LPIC1657:
	add	r1, pc, r1
.LPIC1656:
	add	r0, pc, r0
	b	.L6967
.L6976:
	ldr	r1, .L6979+68
	mov	r2, r0
	ldr	r0, .L6979+72
.LPIC1671:
	add	r1, pc, r1
	add	r1, r1, #1296
.LPIC1670:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L6949
.L6972:
	ldr	r1, .L6979+76
	ldr	r0, .L6979+80
.LPIC1662:
	add	r1, pc, r1
.LPIC1661:
	add	r0, pc, r0
	b	.L6967
.L6978:
	ldr	r1, .L6979+84
	mov	r2, r0
	ldr	r0, .L6979+88
.LPIC1653:
	add	r1, pc, r1
.LPIC1652:
	add	r0, pc, r0
	b	.L6966
.L6980:
	.align	2
.L6979:
	.word	gbam_endless_rx_complete-(.LPIC1660+8)
	.word	gbam_endless_tx_complete-(.LPIC1663+8)
	.word	gbam_peer_reset_cb-(.LPIC1672+8)
	.word	.LANCHOR3-(.LPIC1674+8)
	.word	.LC418-(.LPIC1673+8)
	.word	.LANCHOR3-(.LPIC1655+8)
	.word	.LC415-(.LPIC1654+8)
	.word	.LANCHOR3-(.LPIC1659+8)
	.word	.LC417-(.LPIC1658+8)
	.word	.LANCHOR3-(.LPIC1669+8)
	.word	.LC23-(.LPIC1668+8)
	.word	.LANCHOR3-(.LPIC1667+8)
	.word	.LC201-(.LPIC1666+8)
	.word	.LANCHOR3-(.LPIC1665+8)
	.word	.LC23-(.LPIC1664+8)
	.word	.LANCHOR3-(.LPIC1657+8)
	.word	.LC416-(.LPIC1656+8)
	.word	.LANCHOR3-(.LPIC1671+8)
	.word	.LC201-(.LPIC1670+8)
	.word	.LANCHOR3-(.LPIC1662+8)
	.word	.LC417-(.LPIC1661+8)
	.word	.LANCHOR3-(.LPIC1653+8)
	.word	.LC414-(.LPIC1652+8)
	.fnend
	.size	gbam2bam_connect_work, .-gbam2bam_connect_work
	.align	2
	.type	ecm_close, %function
ecm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #0
	mov	r3, #1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #168]
	strb	r3, [r0, #172]
	strb	ip, [r0, #173]
	cmp	r5, ip
	beq	.L6981
	ldr	r3, [r5]
	mov	r4, r0
	mov	lr, #2
	mvn	r0, #94
	mov	r6, #8
	mov	r1, r5
	mov	r2, #32
	strb	ip, [r3, #1]
	ldrb	r7, [r4, #173]	@ zero_extendqisi2
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	strh	r7, [r3, #2]	@ unaligned
	str	r6, [r5, #4]
	strb	lr, [r4, #172]
	strb	r0, [r3]
	ldrb	r0, [r4, #148]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #164]
	str	ip, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #168]
.L6981:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_close, .-ecm_close
	.align	2
	.type	ecm_open, %function
ecm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, #1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #168]
	strb	r3, [r0, #173]
	strb	r3, [r0, #172]
	cmp	r5, #0
	beq	.L6986
	ldr	r3, [r5]
	mov	ip, #0
	mov	r4, r0
	mov	lr, #2
	mvn	r0, #94
	mov	r6, #8
	mov	r1, r5
	mov	r2, #32
	strb	ip, [r3, #1]
	ldrb	r7, [r4, #173]	@ zero_extendqisi2
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	strh	r7, [r3, #2]	@ unaligned
	str	r6, [r5, #4]
	strb	lr, [r4, #172]
	strb	r0, [r3]
	ldrb	r0, [r4, #148]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #164]
	str	ip, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #168]
.L6986:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_open, .-ecm_open
	.align	2
	.type	ecm_qc_open, %function
ecm_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, #1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #148]
	strb	r3, [r0, #153]
	strb	r3, [r0, #152]
	cmp	r5, #0
	beq	.L6991
	ldr	r3, [r5]
	mov	ip, #0
	mov	r4, r0
	mov	lr, #2
	mvn	r0, #94
	mov	r6, #8
	mov	r1, r5
	mov	r2, #32
	strb	ip, [r3, #1]
	ldrb	r7, [r4, #153]	@ zero_extendqisi2
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	strh	r7, [r3, #2]	@ unaligned
	str	r6, [r5, #4]
	strb	lr, [r4, #152]
	strb	r0, [r3]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	ip, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #148]
.L6991:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_qc_open, .-ecm_qc_open
	.align	2
	.type	ecm_qc_close, %function
ecm_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #0
	mov	r3, #1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #148]
	strb	r3, [r0, #152]
	strb	ip, [r0, #153]
	cmp	r5, ip
	beq	.L6996
	ldr	r3, [r5]
	mov	r4, r0
	mov	lr, #2
	mvn	r0, #94
	mov	r6, #8
	mov	r1, r5
	mov	r2, #32
	strb	ip, [r3, #1]
	ldrb	r7, [r4, #153]	@ zero_extendqisi2
	strb	ip, [r3, #6]
	strb	ip, [r3, #7]
	strh	r7, [r3, #2]	@ unaligned
	str	r6, [r5, #4]
	strb	lr, [r4, #152]
	strb	r0, [r3]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	ip, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r4, #148]
.L6996:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_qc_close, .-ecm_qc_close
	.align	2
	.type	transport_store, %function
transport_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L7117
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r3
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC1675:
	add	r1, pc, r1
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r4, [r1, #2488]
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L7108
	ldr	r1, .L7117+4
	mov	r0, r2
	add	r2, sp, #8
.LPIC1678:
	add	r1, pc, r1
	bl	sscanf(PLT)
	ldr	r3, [sp, #8]
	ldr	r5, [r4, #364]
	cmp	r3, #0
	movne	r6, #2
	moveq	r6, #3
	cmp	r5, r6
	beq	.L7109
	mov	r3, #0
	cmp	r5, #0
	str	r3, [r4, #364]
	beq	.L7006
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L7007
	blx	r3
.L7007:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L7008
	blx	r3
.L7008:
	cmp	r5, #2
	beq	.L7009
	cmp	r5, #3
	bne	.L7006
	add	r0, r4, #152
	add	r8, r4, #368
	bl	tasklet_kill(PLT)
	add	r0, r4, #132
	add	fp, r4, #104
	bl	tasklet_kill(PLT)
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #104]
	str	r0, [sp, #4]
	cmp	fp, r5
	beq	.L7025
.L7024:
	mov	r0, r5
	sub	r9, r5, #36
	bl	list_del(PLT)
	ldr	r10, [r4, #88]
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	mov	r1, r9
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #104]
	cmp	fp, r5
	bne	.L7024
.L7025:
	ldr	r5, [r4, #112]
	add	fp, r4, #112
	cmp	fp, r5
	beq	.L7023
.L7028:
	mov	r0, r5
	sub	r9, r5, #36
	bl	list_del(PLT)
	ldr	r10, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	mov	r1, r9
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #112]
	cmp	fp, r5
	bne	.L7028
.L7023:
	ldr	r5, [r4, #120]
	add	fp, r4, #120
	cmp	fp, r5
	beq	.L7027
.L7029:
	mov	r0, r5
	sub	r9, r5, #36
	bl	list_del(PLT)
	ldr	r10, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	mov	r1, r9
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #120]
	cmp	fp, r5
	bne	.L7029
.L7027:
	mov	r0, r8
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7006:
	cmp	r6, #2
	str	r6, [r4, #364]
	beq	.L7064
	cmp	r6, #3
	bne	.L7110
	ldr	r3, [r4, #172]
	ldr	r5, [r4, #84]
	tst	r3, #1
	beq	.L7111
.L7041:
	ldr	fp, .L7117+8
	mov	r9, #8
	mov	r10, #2048
.LPIC1687:
	add	fp, pc, fp
.L7051:
	ldr	r6, [r4, #88]
	mov	r1, #208
	ldr	r8, .L7117+12
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L7034
.LPIC1693:
	ldr	r8, [pc, r8]		@ tls_load_dot_plus_eight
	str	r10, [r5, #4]
	mov	r1, #208
	mov	r2, #2048
	ldr	r3, [r8, #44]
	subs	r0, r3, #0
	beq	.L7047
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r5]
	beq	.L7112
.L7048:
	cmn	r5, #4096
	add	r6, r4, #112
	add	r0, r5, #36
	mov	r2, r6
	bhi	.L7034
	str	r10, [r5, #4]
	str	r4, [r5, #32]
	str	fp, [r5, #28]
	ldr	r1, [r4, #116]
	bl	__list_add(PLT)
	subs	r9, r9, #1
	bne	.L7051
	ldr	r10, .L7117+16
	mov	r9, #8
.LPIC1688:
	add	r10, pc, r10
.L7055:
	ldr	fp, [r4, #92]
	mov	r1, #208
	ldr	r2, [fp, #8]
	mov	r0, fp
	ldr	r2, [r2, #8]
	blx	r2
	subs	r5, r0, #0
	beq	.L7034
	mov	r3, #2048
	mov	r1, #208
	mov	r2, r3
	str	r3, [r5, #4]
	ldr	ip, [r8, #44]
	subs	r0, ip, #0
	beq	.L7052
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r5]
	beq	.L7113
.L7053:
	cmn	r5, #4096
	add	r0, r5, #36
	add	r2, r4, #104
	bhi	.L7034
	str	r4, [r5, #32]
	str	r10, [r5, #28]
	ldr	r1, [r4, #108]
	bl	__list_add(PLT)
	subs	r9, r9, #1
	bne	.L7055
	add	r8, r4, #368
	ldr	r10, [r4, #84]
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r9, r0
	b	.L7056
.L7058:
	bl	list_del(PLT)
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #88]
	mov	r1, fp
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	fp, #0
	mov	r9, r0
	bne	.L7114
.L7056:
	ldr	r5, [r4, #112]
	cmp	r6, r5
	mov	r0, r5
	sub	fp, r5, #36
	bne	.L7058
.L7057:
	mov	r0, r8
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7034
.L7110:
	ldr	r1, .L7117+20
	ldr	r0, .L7117+24
.LPIC1691:
	add	r1, pc, r1
.LPIC1690:
	add	r0, pc, r0
	add	r1, r1, #3296
	bl	printk(PLT)
.L7034:
	mov	r0, r7
.L7101:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7064:
	ldr	r8, .L7117+28
	mov	r5, #16
	add	r6, r4, #216
.LPIC1681:
	add	r8, pc, r8
.L7031:
	ldr	r0, [r4, #88]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r6
	add	r0, r3, #36
	beq	.L7034
	cmn	r3, #4096
	bhi	.L7034
	str	r8, [r3, #28]
	ldr	r1, [r4, #220]
	bl	__list_add(PLT)
	subs	r5, r5, #1
	bne	.L7031
	ldr	r9, .L7117+32
	mov	r5, #100
	add	r8, r4, #192
.LPIC1682:
	add	r9, pc, r9
.L7036:
	ldr	r0, [r4, #92]
	mov	r1, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r8
	add	r0, r3, #36
	beq	.L7034
	cmn	r3, #4096
	bhi	.L7034
	str	r9, [r3, #28]
	ldr	r1, [r4, #196]
	bl	__list_add(PLT)
	subs	r5, r5, #1
	bne	.L7036
	ldr	r3, [r4, #372]
	ldr	r2, [r4, #84]
	cmp	r3, #0
	str	r2, [sp, #4]
	beq	.L7034
	add	r9, r4, #368
	mov	r0, r9
.L7106:
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #216]
	mov	fp, r0
	cmp	r5, r6
	beq	.L7037
	mov	r0, r5
	sub	r8, r5, #36
	bl	list_del(PLT)
	mov	r0, r9
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r1, #208
	mov	r2, #0
	movw	r0, #2056
	mvn	r3, #0
	bl	__alloc_skb(PLT)
	mov	r1, r8
	subs	r8, r0, #0
	mov	ip, #2048
	mov	r2, #208
	beq	.L7065
	ldr	r3, [r8, #172]
	ldr	r0, [r8, #160]
	add	r3, r3, #8
	add	r0, r0, #8
	str	r3, [r8, #172]
	str	r0, [r8, #160]
	str	r3, [r5, #-36]
	str	ip, [r5, #-32]
	str	r8, [r5, #-4]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r10, r0, #0
	mov	r0, r9
	beq	.L7106
	mov	r0, r8
	bl	dev_kfree_skb_any(PLT)
.L7038:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp, #4]
	mov	fp, r0
	mov	r2, r10
	ldr	r1, .L7117+36
	ldr	r0, [r3]
.LPIC1692:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r0, r5
	ldr	r1, [r4, #220]
	mov	r2, r6
	bl	__list_add(PLT)
.L7037:
	mov	r0, r9
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7034
.L7009:
	add	r9, r4, #368
	add	fp, r4, #192
	mov	r0, r9
	mov	r8, #0
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #192]
	str	r0, [sp, #4]
	str	r8, [r4, #312]
	cmp	r5, fp
	beq	.L7015
.L7014:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del(PLT)
	str	r8, [r5, #-36]
	ldr	r5, [r4, #88]
	mov	r0, #0
	bl	kfree(PLT)
	mov	r1, r10
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #192]
	cmp	r5, fp
	bne	.L7014
.L7015:
	ldr	r5, [r4, #216]
	add	r8, r4, #216
	cmp	r8, r5
	movne	fp, #0
	beq	.L7013
.L7018:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del(PLT)
	str	fp, [r5, #-36]
	ldr	r5, [r4, #92]
	mov	r0, #0
	bl	kfree(PLT)
	mov	r1, r10
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #216]
	cmp	r8, r5
	bne	.L7018
.L7013:
	ldr	r3, [r4, #200]
	add	r5, r4, #200
	cmp	r5, r3
	cmpne	r3, #0
	movne	r8, #0
	beq	.L7017
.L7019:
	ldr	r2, [r4, #208]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #208]
	ldmia	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #200]
	cmp	r5, r3
	cmpne	r3, #0
	bne	.L7019
.L7017:
	ldr	r3, [r4, #224]
	add	r5, r4, #224
	cmp	r3, r5
	cmpne	r3, #0
	movne	r8, #0
	beq	.L7060
.L7020:
	ldr	r2, [r4, #232]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #232]
	ldmia	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #224]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L7020
.L7060:
	mov	r0, r9
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7006
.L7047:
	mov	r3, #16
	str	r3, [r5]
	b	.L7048
.L7111:
	ldr	r0, .L7117+40
	add	r1, r4, #128
	mov	r2, r4
	ldr	r3, .L7117+44
.LPIC1683:
	add	r0, pc, r0
.LPIC1684:
	add	r3, pc, r3
	ldr	r0, [r0, #3540]
	bl	smd_open(PLT)
	cmp	r0, #0
	bne	.L7115
	ldr	r3, [r4, #172]
	ands	r3, r3, #1
	bne	.L7041
	ldr	r2, .L7117+48
	mov	r1, sp
	str	r3, [sp, #12]
	bic	r1, r1, #8128
	add	r3, sp, #24
	bic	r1, r1, #63
	add	r6, r4, #180
	ldr	r1, [r1, #12]
	add	r5, sp, #12
	str	r3, [sp, #24]
.LPIC1694:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #28]
	str	r1, [sp, #16]
	str	r2, [sp, #20]
	b	.L7045
.L7116:
	bl	schedule(PLT)
.L7045:
	mov	r0, r6
	mov	r1, r5
	mov	r2, #2
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #172]
	tst	r3, #1
	beq	.L7116
	mov	r0, r6
	mov	r1, r5
	bl	finish_wait(PLT)
	b	.L7041
.L7052:
	mov	r3, #16
	str	r3, [r5]
	b	.L7053
.L7115:
	ldr	r0, [r5]
	ldr	r1, .L7117+52
	add	r0, r0, #32
.LPIC1685:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L7034
.L7112:
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7034
.L7114:
	ldr	r0, [r10]
	mov	r2, fp
	ldr	r1, .L7117+56
	add	r0, r0, #32
.LPIC1689:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r5
	ldr	r1, [r4, #116]
	mov	r2, r6
	bl	__list_add(PLT)
	b	.L7057
.L7113:
	ldr	r2, [fp, #8]
	mov	r1, r5
	mov	r0, fp
	ldr	r3, [r2, #12]
	blx	r3
	b	.L7034
.L7108:
	ldr	r1, .L7117+60
	ldr	r0, .L7117+64
.LPIC1677:
	add	r1, pc, r1
.LPIC1676:
	add	r0, pc, r0
	add	r1, r1, #3296
	bl	printk(PLT)
	mvn	r0, #21
	b	.L7101
.L7109:
	mov	r0, r5
	bl	xport_to_str(PLT)
	ldr	r1, .L7117+68
	mov	r2, r0
	ldr	r0, .L7117+72
	mov	r3, r2
.LPIC1680:
	add	r1, pc, r1
.LPIC1679:
	add	r0, pc, r0
	add	r1, r1, #3296
	bl	printk(PLT)
	mov	r0, #0
	b	.L7101
.L7065:
	mvn	r10, #11
	b	.L7038
.L7118:
	.align	2
.L7117:
	.word	.LANCHOR1-(.LPIC1675+8)
	.word	.LC256-(.LPIC1678+8)
	.word	rmnet_mux_smd_complete_epout-(.LPIC1687+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1693+8))
	.word	rmnet_mux_smd_complete_epin-(.LPIC1688+8)
	.word	.LANCHOR3-(.LPIC1691+8)
	.word	.LC422-(.LPIC1690+8)
	.word	rmnet_mux_sdio_complete_epout-(.LPIC1681+8)
	.word	rmnet_mux_sdio_complete_epin-(.LPIC1682+8)
	.word	.LC413-(.LPIC1692+8)
	.word	.LANCHOR4-(.LPIC1683+8)
	.word	rmnet_mux_smd_notify-(.LPIC1684+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1694+8))
	.word	.LC421-(.LPIC1685+8)
	.word	.LC126-(.LPIC1689+8)
	.word	.LANCHOR3-(.LPIC1677+8)
	.word	.LC419-(.LPIC1676+8)
	.word	.LANCHOR3-(.LPIC1680+8)
	.word	.LC420-(.LPIC1679+8)
	.fnend
	.size	transport_store, .-transport_store
	.align	2
	.type	gsmd_notify, %function
gsmd_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r1, r1, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0, #72]
	cmp	r1, #3
	addls	pc, pc, r1, asl #2
	b	.L7119
.L7122:
	b	.L7121
	b	.L7123
	b	.L7124
	b	.L7125
	.p2align 1
.L7125:
	ldr	r0, [r5]
	bl	smd_tiocmget(PLT)
	and	r3, r0, #128
	cmp	r3, #0
	moveq	r1, #0
	movne	r1, #8
	moveq	r3, #1
	movne	r3, #9
	tst	r0, #64
	movne	r1, r3
	tst	r0, #256
	ldr	r0, [r4, #68]
	orrne	r1, r1, #2
	str	r1, [r4, #164]
	cmp	r0, #0
	beq	.L7119
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L7119
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3
.L7124:
	add	r1, r5, #8
	mov	r0, #0
	add	r8, r4, #4
	bl	_clear_bit(PLT)
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #68]
	mov	r1, r0
	cmp	r3, #0
	beq	.L7200
	ldr	r7, [r3, #88]
	mov	r0, r8
	ldr	r6, [r3, #92]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r7, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L7139
	mov	r0, r7
	blx	r3
.L7139:
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L7140
	mov	r0, r6
	blx	r3
.L7140:
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	ldr	r0, [r4, #68]
	cmp	r0, #0
	beq	.L7141
	ldr	r5, [r4, #12]
	add	r9, r4, #12
	cmp	r5, r9
	beq	.L7146
.L7145:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del(PLT)
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r10
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #12]
	cmp	r5, r9
	bne	.L7145
.L7146:
	ldr	r5, [r4, #20]
	add	r9, r4, #20
	cmp	r9, r5
	beq	.L7144
.L7149:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del(PLT)
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r10
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #20]
	cmp	r9, r5
	bne	.L7149
.L7144:
	ldr	r5, [r4, #44]
	add	r9, r4, #44
	cmp	r9, r5
	beq	.L7148
.L7150:
	mov	r0, r5
	sub	r6, r5, #36
	bl	list_del(PLT)
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r5, [r4, #44]
	cmp	r9, r5
	bne	.L7150
.L7148:
	ldr	r0, [r4, #68]
	mov	r3, #0
	str	r3, [r4, #8]
	str	r3, [r4, #164]
.L7141:
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L7151
	ldr	r1, [r4, #164]
	blx	r3
.L7151:
	mov	r0, r8
.L7198:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock(PLT)
.L7123:
	add	r3, r4, #4
	add	r1, r5, #8
	mov	r0, #0
	mov	r5, r3
	str	r3, [sp, #4]
	bl	_set_bit(PLT)
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L7128
	ldr	r3, [r4, #72]
	add	r7, r4, #12
	mov	r6, #8
	ldr	r1, [r4, #160]
	mov	fp, #2048
	ldr	r9, .L7209
	ldr	r0, [r3]
	mvn	r2, r1
	bl	smd_tiocmset_from_cb(PLT)
	ldr	r3, [r4, #68]
.LPIC1708:
	add	r9, pc, r9
	ldr	r8, [r3, #92]
	b	.L7158
.L7203:
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r5]
	beq	.L7201
.L7132:
	str	r9, [r5, #28]
	add	r0, r5, #36
	ldr	r2, [r4, #12]
	mov	r1, r7
	bl	__list_add(PLT)
	subs	r6, r6, #1
	beq	.L7157
.L7158:
	ldr	r3, [r8, #8]
	mov	r1, #32
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	ldr	r3, .L7209+4
	mov	r1, #32
	mov	r2, #2048
	beq	.L7202
.LPIC1713:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	fp, [r5, #4]
	ldr	r3, [r3, #44]
	subs	r0, r3, #0
	bne	.L7203
	mov	r3, #16
	str	r3, [r5]
	b	.L7132
.L7121:
	ldr	r0, [r5]
	bl	smd_read_avail(PLT)
	cmp	r0, #0
	bne	.L7204
.L7126:
	ldr	r0, [r5]
	bl	smd_write_avail(PLT)
	cmp	r0, #0
	bne	.L7205
.L7119:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7201:
	ldr	r1, .L7209+8
	ldr	r0, .L7209+12
.LPIC1701:
	add	r1, pc, r1
	add	r1, r1, #3312
.LPIC1700:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [r8, #8]
	mov	r1, r5
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L7130:
	ldr	r3, [r4, #12]
	cmp	r7, r3
	bne	.L7157
	ldr	r1, .L7209+16
	ldr	r0, .L7209+20
.LPIC1710:
	add	r1, pc, r1
.LPIC1709:
	add	r0, pc, r0
	add	r1, r1, #3328
	bl	printk(PLT)
.L7128:
	ldr	r0, [sp, #4]
	b	.L7198
.L7205:
	ldr	r3, .L7209+24
	add	r2, r4, #28
	mov	r0, #4
.LPIC1696:
	add	r3, pc, r3
	ldr	r1, [r3, #-1188]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work_on(PLT)
.L7204:
	ldr	r3, .L7209+28
	add	r2, r4, #52
	mov	r0, #4
.LPIC1695:
	add	r3, pc, r3
	ldr	r1, [r3, #-1188]
	bl	queue_work_on(PLT)
	b	.L7126
.L7157:
	ldr	r3, [r4, #68]
	add	r8, r4, #44
	mov	r5, #8
	ldr	fp, .L7209+32
	mov	r9, #2048
	ldr	r6, [r3, #88]
.LPIC1711:
	add	fp, pc, fp
	b	.L7159
.L7208:
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r10]
	beq	.L7206
.L7136:
	str	fp, [r10, #28]
	add	r0, r10, #36
	ldr	r2, [r4, #44]
	mov	r1, r8
	bl	__list_add(PLT)
	subs	r5, r5, #1
	beq	.L7160
.L7159:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r10, r0, #0
	ldr	ip, .L7209+36
	mov	r1, #32
	mov	r2, #2048
	beq	.L7207
.LPIC1712:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	str	r9, [r10, #4]
	ldr	ip, [ip, #44]
	subs	r0, ip, #0
	bne	.L7208
	mov	r2, #16
	str	r2, [r10]
	b	.L7136
.L7160:
	ldr	r0, [sp, #4]
	bl	_raw_spin_unlock(PLT)
	mov	r0, r4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsmd_start_rx(PLT)
.L7200:
	mov	r0, r8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L7202:
	ldr	r1, .L7209+40
	ldr	r0, .L7209+44
.LPIC1698:
	add	r1, pc, r1
	add	r1, r1, #3312
.LPIC1697:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L7130
.L7206:
	ldr	r1, .L7209+48
	ldr	r0, .L7209+52
.LPIC1705:
	add	r1, pc, r1
	add	r1, r1, #3312
.LPIC1704:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r2, [r6, #8]
	mov	r1, r10
	mov	r0, r6
	ldr	r3, [r2, #12]
	blx	r3
.L7134:
	ldr	r3, [r4, #44]
	cmp	r8, r3
	bne	.L7160
	ldr	r3, [r4, #68]
	ldr	r5, [r3, #92]
	b	.L7161
.L7137:
	bl	list_del(PLT)
	ldr	r0, [r6, #-36]
	bl	kfree(PLT)
	ldr	r3, [r5, #8]
	mov	r1, r8
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L7161:
	ldr	r6, [r4, #12]
	cmp	r7, r6
	mov	r0, r6
	sub	r8, r6, #36
	bne	.L7137
	ldr	r1, .L7209+56
	ldr	r0, .L7209+60
.LPIC1707:
	add	r1, pc, r1
	add	r1, r1, #3328
.LPIC1706:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L7128
.L7207:
	ldr	r1, .L7209+64
	ldr	r0, .L7209+68
.LPIC1703:
	add	r1, pc, r1
	add	r1, r1, #3312
.LPIC1702:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L7134
.L7210:
	.align	2
.L7209:
	.word	gsmd_read_complete-(.LPIC1708+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1713+8))
	.word	.LANCHOR3-(.LPIC1701+8)
	.word	.LC424-(.LPIC1700+8)
	.word	.LANCHOR3-(.LPIC1710+8)
	.word	.LC426-(.LPIC1709+8)
	.word	.LANCHOR4-(.LPIC1696+8)
	.word	.LANCHOR4-(.LPIC1695+8)
	.word	gsmd_write_complete-(.LPIC1711+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1712+8))
	.word	.LANCHOR3-(.LPIC1698+8)
	.word	.LC423-(.LPIC1697+8)
	.word	.LANCHOR3-(.LPIC1705+8)
	.word	.LC424-(.LPIC1704+8)
	.word	.LANCHOR3-(.LPIC1707+8)
	.word	.LC425-(.LPIC1706+8)
	.word	.LANCHOR3-(.LPIC1703+8)
	.word	.LC423-(.LPIC1702+8)
	.fnend
	.size	gsmd_notify, .-gsmd_notify
	.align	2
	.type	ecm_qc_notify_complete, %function
ecm_qc_notify_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r1, #44]
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, [r1, #32]
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	cmn	r3, #108
	beq	.L7213
	cmn	r3, #104
	beq	.L7213
.L7212:
	ldr	r3, [r5, #20]
	cmp	r1, #0
	str	r1, [r5, #148]
	ldr	r0, [r3, #24]
	beq	.L7211
	ldrb	r2, [r5, #152]	@ zero_extendqisi2
	ldr	r3, [r1]
	cmp	r2, #1
	beq	.L7217
	bcc	.L7211
	cmp	r2, #2
	bne	.L7216
	mov	r2, #0
	mov	ip, #8
	mov	r4, #42
	mov	lr, #16
	strb	r2, [r3, #2]
	strb	r4, [r3, #1]
	strb	r2, [r3, #3]
	strb	r2, [r3, #7]
	strb	ip, [r3, #6]
	ldr	ip, [r1]
	str	lr, [r1, #4]
	ldr	r2, [r0]
	ldr	r0, [r2, #20]
	cmp	r0, #2
	movls	r2, #28672
	movtls	r2, 148
	bhi	.L7230
.L7219:
	mov	r0, #0
	str	r2, [ip, #8]
	str	r2, [ip, #12]
	strb	r0, [r5, #152]
.L7216:
	mvn	r0, #94
	mov	ip, #0
	mov	r2, #32
	mov	r4, r1
	strb	r0, [r3]
	ldrb	r0, [r5, #120]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r5, #144]
	str	ip, [r5, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r4, [r5, #148]
.L7211:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L7213:
	mov	r3, #0
	strb	r3, [r5, #152]
	b	.L7212
.L7217:
	mov	r2, #0
	mov	ip, #8
	mov	r0, #2
	strb	r2, [r3, #1]
	ldrb	lr, [r5, #153]	@ zero_extendqisi2
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	strh	lr, [r3, #2]	@ unaligned
	str	ip, [r1, #4]
	strb	r0, [r5, #152]
	b	.L7216
.L7230:
	ldr	lr, [r2, #16]
	mov	r0, #28672
	mov	r2, #0
	movt	r0, 148
	movt	r2, 6500
	cmp	lr, #3
	movne	r2, r0
	b	.L7219
	.fnend
	.size	ecm_qc_notify_complete, .-ecm_qc_notify_complete
	.align	2
	.type	ncm_close, %function
ncm_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #188
	mov	r0, r6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock(PLT)
	ldr	r5, [r4, #168]
	mov	r2, #0
	mov	r1, #2
	ldr	r3, [r4, #20]
	strb	r1, [r4, #172]
	strb	r2, [r4, #173]
	cmp	r5, r2
	ldr	r1, [r3, #24]
	beq	.L7233
	ldr	r3, [r5]
	mov	r0, #8
	mov	lr, #42
	mov	ip, #16
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	r2, [r3, #7]
	strb	lr, [r3, #1]
	strb	r0, [r3, #6]
	ldr	r0, [r5]
	str	ip, [r5, #4]
	ldr	r2, [r1]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	movls	r2, #28672
	movtls	r2, 148
	bhi	.L7239
.L7234:
	mov	ip, #1
	mvn	r1, #94
	str	r2, [r0, #8]
	str	r2, [r0, #12]
	mov	r2, #0
	mov	r0, r6
	strb	ip, [r4, #172]
	strb	r1, [r3]
	ldrb	r1, [r4, #148]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	str	r2, [r4, #168]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #164]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	cmp	r7, #0
	strlt	r5, [r4, #168]
.L7233:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L7239:
	ldr	ip, [r2, #16]
	mov	r1, #28672
	mov	r2, #0
	movt	r1, 148
	movt	r2, 6500
	cmp	ip, #3
	movne	r2, r1
	b	.L7234
	.fnend
	.size	ncm_close, .-ncm_close
	.align	2
	.type	ncm_open, %function
ncm_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #188
	mov	r0, r6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock(PLT)
	ldr	r5, [r4, #168]
	mov	r1, #1
	mov	r2, #2
	ldr	r3, [r4, #20]
	strb	r1, [r4, #173]
	strb	r2, [r4, #172]
	cmp	r5, #0
	ldr	r1, [r3, #24]
	beq	.L7242
	ldr	r3, [r5]
	mov	r2, #0
	mov	r0, #8
	mov	lr, #42
	mov	ip, #16
	strb	lr, [r3, #1]
	strb	r0, [r3, #6]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	r2, [r3, #7]
	ldr	r0, [r5]
	str	ip, [r5, #4]
	ldr	r2, [r1]
	ldr	r1, [r2, #20]
	cmp	r1, #2
	movls	r2, #28672
	movtls	r2, 148
	bhi	.L7248
.L7243:
	mov	ip, #1
	mvn	r1, #94
	str	r2, [r0, #8]
	str	r2, [r0, #12]
	mov	r2, #0
	mov	r0, r6
	strb	ip, [r4, #172]
	strb	r1, [r3]
	ldrb	r1, [r4, #148]	@ zero_extendqisi2
	strh	r1, [r3, #4]	@ unaligned
	str	r2, [r4, #168]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #164]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r7, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	cmp	r7, #0
	strlt	r5, [r4, #168]
.L7242:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock(PLT)
.L7248:
	ldr	ip, [r2, #16]
	mov	r1, #28672
	mov	r2, #0
	movt	r1, 148
	movt	r2, 6500
	cmp	ip, #3
	movne	r2, r1
	b	.L7243
	.fnend
	.size	ncm_open, .-ncm_open
	.align	2
	.type	rmnet_mux_read_stats, %function
rmnet_mux_read_stats:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L7270
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	mov	r9, r1
	mov	r8, r2
	strd	r6, [sp, #8]
	mov	r7, r3
	strd	r10, [sp, #24]
.LPIC1727:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #92
	sub	sp, sp, #92
	ldr	r4, [r0, #124]
	ldr	r0, [ip, #40]
	cmp	r0, #0
	beq	.L7264
	mov	r1, #208
	mov	r2, #1024
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L7269
.L7250:
	add	r6, r4, #368
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r4, #352]
	mov	r10, r0
	ldr	r2, [r4, #364]
	ldr	r3, [r4, #400]
	ldr	r0, [r4, #404]
	str	ip, [sp, #56]
	ldr	ip, [r4, #208]
	sub	r2, r2, #1
	ldr	r1, [r4, #420]
	ldr	fp, [r4, #408]
	ldr	lr, [r4, #416]
	str	ip, [sp, #60]
	ldr	ip, [r4, #232]
	str	ip, [sp, #64]
	ldr	ip, [r4, #312]
	str	ip, [sp, #68]
	ldr	ip, [r4, #412]
	str	ip, [sp, #72]
	ldr	ip, [r4, #424]
	str	ip, [sp, #76]
	ldr	ip, [r4, #336]
	str	ip, [sp, #80]
	ldr	ip, [r4, #348]
	str	ip, [sp, #84]
	cmp	r2, #9
	addls	pc, pc, r2, asl #2
	b	.L7252
.L7254:
	b	.L7266
	b	.L7255
	b	.L7256
	b	.L7257
	b	.L7258
	b	.L7259
	b	.L7260
	b	.L7261
	b	.L7262
	b	.L7263
	.p2align 1
.L7264:
	mov	r5, #16
	b	.L7250
.L7266:
	ldr	ip, .L7270+4
.LPIC1714:
	add	ip, pc, ip
.L7253:
	str	lr, [sp, #12]
	ldr	lr, [sp, #56]
	str	r0, [sp]
	ldr	r2, .L7270+8
	mov	r0, r5
	str	r1, [sp, #4]
	mov	r1, #1024
	str	fp, [sp, #8]
	str	lr, [sp, #16]
	ldr	lr, [sp, #60]
	str	ip, [sp, #48]
.LPIC1726:
	add	r2, pc, r2
	str	lr, [sp, #20]
	ldr	lr, [sp, #64]
	str	lr, [sp, #24]
	ldr	lr, [sp, #68]
	str	lr, [sp, #28]
	ldr	lr, [sp, #72]
	str	lr, [sp, #32]
	ldr	lr, [sp, #76]
	str	lr, [sp, #36]
	ldr	lr, [sp, #80]
	str	lr, [sp, #40]
	ldr	lr, [sp, #84]
	str	lr, [sp, #44]
	ldr	ip, [r4, #356]
	str	ip, [sp, #52]
	bl	scnprintf(PLT)
	mov	r4, r0
	mov	r1, r10
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	str	r4, [sp]
	mov	r1, r8
	mov	r2, r7
	mov	r3, r5
	mov	r0, r9
	bl	simple_read_from_buffer(PLT)
	mov	r4, r0
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
.L7251:
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7255:
	ldr	ip, .L7270+12
.LPIC1715:
	add	ip, pc, ip
	b	.L7253
.L7256:
	ldr	ip, .L7270+16
.LPIC1716:
	add	ip, pc, ip
	b	.L7253
.L7257:
	ldr	ip, .L7270+20
.LPIC1717:
	add	ip, pc, ip
	b	.L7253
.L7258:
	ldr	ip, .L7270+24
.LPIC1718:
	add	ip, pc, ip
	b	.L7253
.L7259:
	ldr	ip, .L7270+28
.LPIC1719:
	add	ip, pc, ip
	b	.L7253
.L7260:
	ldr	ip, .L7270+32
.LPIC1720:
	add	ip, pc, ip
	b	.L7253
.L7261:
	ldr	ip, .L7270+36
.LPIC1721:
	add	ip, pc, ip
	b	.L7253
.L7262:
	ldr	ip, .L7270+40
.LPIC1722:
	add	ip, pc, ip
	b	.L7253
.L7263:
	ldr	ip, .L7270+44
.LPIC1723:
	add	ip, pc, ip
	b	.L7253
.L7252:
	ldr	ip, .L7270+48
.LPIC1724:
	add	ip, pc, ip
	b	.L7253
.L7269:
	mvn	r0, #11
	b	.L7251
.L7271:
	.align	2
.L7270:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1727+8))
	.word	.LC0-(.LPIC1714+8)
	.word	.LC427-(.LPIC1726+8)
	.word	.LC1-(.LPIC1715+8)
	.word	.LC2-(.LPIC1716+8)
	.word	.LC3-(.LPIC1717+8)
	.word	.LC4-(.LPIC1718+8)
	.word	.LC5-(.LPIC1719+8)
	.word	.LC6-(.LPIC1720+8)
	.word	.LC7-(.LPIC1721+8)
	.word	.LC8-(.LPIC1722+8)
	.word	.LC9-(.LPIC1723+8)
	.word	.LC10-(.LPIC1724+8)
	.fnend
	.size	rmnet_mux_read_stats, .-rmnet_mux_read_stats
	.align	2
	.type	ffs_func_disable, %function
ffs_func_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r7, [r0, #-28]
	.pad #4
	sub	sp, sp, #4
	ldr	r9, [r7, #132]
	cmp	r9, #0
	beq	.L7273
	ldr	r3, [r9, #8]
	mov	r8, #1
	mov	fp, #0
	ldr	r4, [r9, #12]
	add	r0, r3, #24
	ldr	r5, [r3, #208]
	ldrh	r6, [r3, #180]
	add	r4, r4, #28
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r10, r0
.L7275:
	str	r8, [r5, #32]
	ldr	r3, [r4, #-28]
	subs	r0, r3, #0
	beq	.L7274
	ldr	r3, [r3, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #-28]
	str	fp, [r3]
.L7274:
	subs	r6, r6, #1
	str	fp, [r5, #40]
	add	r4, r4, #28
	add	r5, r5, #56
	bne	.L7275
	ldr	r0, [r9, #8]
	mov	r1, r10
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore(PLT)
	str	r6, [r7, #132]
.L7273:
	ldr	r6, [r7, #92]
	cmp	r6, #2
	bne	.L7272
	mov	r3, #0
	add	r4, r7, #116
	mov	r0, r4
	str	r3, [r7, #132]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r7, #96]
	mov	r5, r0
	add	lr, r7, #100
	ldrh	ip, [r7, #104]
	cmp	r3, #1
	streq	r6, [r7, #96]
	cmp	ip, #0
	beq	.L7282
	add	ip, lr, ip
	mov	r3, lr
	mov	r1, lr
.L7280:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	sub	r0, r2, #5
	cmp	r0, #1
	bhi	.L7281
	strb	r2, [r1]
	add	r1, r1, #1
.L7281:
	cmp	r3, ip
	bne	.L7280
	rsb	r1, lr, r1
	add	r3, r1, #1
	uxth	ip, r1
	uxth	r3, r3
.L7278:
	add	ip, r7, ip
	strh	r3, [r7, #104]	@ movhi
	mov	r2, #3
	mov	r0, r4
	mov	r1, r2
	strb	r2, [ip, #100]
	mov	r2, #1
	bl	__wake_up_locked(PLT)
	mov	r0, r4
	mov	r1, r5
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L7272:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7282:
	mov	r3, #1
	b	.L7278
	.fnend
	.size	ffs_func_disable, .-ffs_func_disable
	.align	2
	.type	send_file_work, %function
send_file_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 72
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #76
	sub	sp, sp, #76
#APP
@ 751 "/root/lol//drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	ldrd	r6, [r0, #48]
	ldr	r1, [r0, #32]
	ldrd	r2, [r0, #40]
	cmp	r6, #0
	str	r1, [sp, #8]
	sbcs	r1, r7, #0
	strd	r2, [sp, #40]
	mvnlt	r3, #21
	strlt	r3, [r0, #68]
	blt	.L7292
	ldr	r4, [r0, #56]
	cmp	r4, #0
	bne	.L7335
.L7295:
	ldr	r3, [r0, #-92]
	mov	r5, r0
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	and	r1, r7, r3, asr #31
	and	r0, r6, r3
	orrs	r3, r0, r1
	moveq	r8, #1
	movne	r8, #0
	cmp	r6, #1
	sbcs	r3, r7, #0
	movlt	r3, r8
	orrge	r3, r8, #1
	cmp	r3, #0
	beq	.L7312
	mov	r3, sp
	sub	r2, r5, #68
	bic	r3, r3, #8128
	sub	r9, r5, #96
	bic	r3, r3, #63
	str	r2, [sp, #4]
	str	r3, [sp, #12]
	b	.L7311
.L7337:
	ldr	r2, [r5, #-80]
	mov	r3, #0
.L7301:
	cmp	r2, #3
	beq	.L7305
.L7339:
	cmp	fp, #0
	beq	.L7297
	ldr	r3, .L7340
	mov	r1, #0
.LPIC1729:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r2, [r3]
	cmp	r2, r6
	sbcs	r3, r1, r7
	movge	r2, r6
	cmp	r4, #0
	beq	.L7308
	ldr	r3, [fp]
	mov	r1, #2
	str	r6, [r3]
	strh	r1, [r3, #4]	@ movhi
	ldrh	r1, [r5, #60]
	strh	r1, [r3, #6]	@ movhi
	ldr	r1, [r5, #64]
	str	r1, [r3, #8]
.L7308:
	ldr	r1, [fp]
	add	r3, sp, #40
	rsb	r2, r4, r2
	ldr	r0, [sp, #8]
	add	r1, r1, r4
	bl	vfs_read(PLT)
	subs	r3, r0, #0
	blt	.L7309
	add	r4, r3, r4
	mov	r1, fp
	mov	r2, #208
	str	r4, [fp, #4]
	ldr	r0, [r5, #-92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L7336
	subs	r6, r6, r4
	and	r3, r8, #1
	sbc	r7, r7, r4, asr #31
	cmp	r6, #1
	mov	r4, #0
	sbcs	r2, r7, #0
	orrge	r3, r3, #1
	cmp	r3, r4
	beq	.L7312
.L7311:
	orrs	r3, r6, r7
	mov	r0, r9
	moveq	r8, #0
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp, #4]
	mov	r10, r0
	ldr	ip, [r5, #-68]
	cmp	ip, r3
	beq	.L7299
	mov	r0, ip
	sub	fp, ip, #36
	bl	list_del(PLT)
	mov	r0, r9
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	fp, #0
	bne	.L7337
.L7300:
	ldr	r2, [r5, #-80]
	cmp	r2, #2
	movne	r3, #0
	movne	fp, r3
	bne	.L7301
	ldr	r2, .L7340+4
	mov	r3, #0
	add	r0, sp, #52
	ldr	fp, [sp, #12]
	sub	ip, r5, #40
	strd	r6, [sp, #24]
	str	r0, [sp, #20]
	ldr	r6, [sp, #4]
	mov	r7, ip
	str	ip, [sp, #16]
	mov	r10, r0
.LPIC1730:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r8, [sp, #32]
	ldr	r1, [fp, #12]
	str	r3, [sp, #52]
	add	r3, sp, #64
	str	r4, [sp, #36]
	str	r3, [sp, #64]
	str	r3, [sp, #68]
	str	r1, [sp, #56]
	str	r2, [sp, #60]
	b	.L7304
.L7338:
	bl	schedule(PLT)
.L7304:
	mov	r2, #1
	mov	r0, r7
	mov	r1, r10
	bl	prepare_to_wait(PLT)
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r5, #-68]
	mov	r8, r0
	cmp	r2, r6
	mov	r0, r2
	sub	r4, r2, #36
	beq	.L7302
	bl	list_del(PLT)
	mov	r0, r9
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r4, #0
	bne	.L7317
.L7313:
	ldr	r3, [r5, #-80]
	cmp	r3, #2
	bne	.L7318
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L7338
	ldrd	r6, [sp, #24]
	mov	r3, #65024
	mov	fp, #0
	ldr	r8, [sp, #32]
	movt	r3, 65535
	ldr	r4, [sp, #36]
.L7303:
	ldrd	r0, [sp, #16]
	str	r3, [sp, #24]
	bl	finish_wait(PLT)
	ldr	r2, [r5, #-80]
	ldr	r3, [sp, #24]
	cmp	r2, #3
	bne	.L7339
.L7305:
	cmp	fp, #0
	mvn	r3, #124
	beq	.L7297
.L7309:
	mov	r0, r9
	str	r3, [sp, #8]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r4, r0
	ldr	r2, [sp, #4]
	add	r0, fp, #36
	ldr	r1, [r5, #-64]
	bl	__list_add(PLT)
	mov	r0, r9
	mov	r1, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [sp, #8]
.L7297:
	str	r3, [r5, #68]
#APP
@ 841 "/root/lol//drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
.L7292:
	add	sp, sp, #76
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7335:
	adds	r6, r6, #12
	mov	r4, #12
	adc	r7, r7, #0
	b	.L7295
.L7299:
	mov	r1, r0
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7300
.L7312:
	mov	r3, #0
	str	r3, [r5, #68]
#APP
@ 841 "/root/lol//drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	b	.L7292
.L7336:
	ldr	r3, [r5, #-80]
	cmp	r3, #0
	mvneq	r3, #4
	beq	.L7309
	mov	r2, #4
	mvn	r3, #4
	str	r2, [r5, #-80]
	b	.L7309
.L7302:
	mov	r1, r8
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7313
.L7317:
	mov	fp, r4
	ldrd	r6, [sp, #24]
	mov	r3, #0
	ldr	r8, [sp, #32]
	ldr	r4, [sp, #36]
	b	.L7303
.L7318:
	mov	fp, #0
	ldrd	r6, [sp, #24]
	ldr	r8, [sp, #32]
	mov	r3, fp
	ldr	r4, [sp, #36]
	b	.L7303
.L7341:
	.align	2
.L7340:
	.word	mtp_tx_req_len(GOT_PREL)+(.-(.LPIC1729+8))
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1730+8))
	.fnend
	.size	send_file_work, .-send_file_work
	.align	2
	.type	mtp_write, %function
mtp_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	mov	r9, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	str	r2, [sp, #4]
	add	r7, r4, #88
	mov	r0, r7
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #104]
	cmp	r3, #3
	beq	.L7382
	cmp	r3, #0
	beq	.L7383
	mov	r3, #2
	mov	r0, r7
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r4, #92]
	ldrh	r3, [r3, #20]
	sub	r3, r3, #1
	tst	r3, r6
	moveq	r8, #1
	movne	r8, #0
	cmp	r6, #0
	moveq	r3, r8
	orrne	r3, r8, #1
	cmp	r3, #0
	beq	.L7346
	mov	r3, sp
	mov	r5, r4
	str	r9, [sp]
	bic	fp, r3, #8128
	bic	fp, fp, #63
.L7359:
	ldr	r2, [r5, #104]
	cmp	r6, #0
	moveq	r8, #0
	cmp	r2, #2
	bne	.L7364
	mov	r0, r7
	add	r10, r5, #116
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	ip, [r5, #116]
	mov	r4, r0
	cmp	r10, ip
	beq	.L7348
	mov	r0, ip
	sub	r9, ip, #36
	bl	list_del(PLT)
	mov	r0, r7
	mov	r1, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r9, #0
	beq	.L7361
.L7349:
	ldr	r2, .L7388
.LPIC1732:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	ldr	r4, [r2]
	cmp	r4, r6
	movcs	r4, r6
	cmp	r4, #0
	beq	.L7356
	ldr	r2, [fp, #8]
	ldr	r3, [sp]
#APP
@ 439 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r4; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	cmp	r2, #0
	ldr	r0, [r9]
	beq	.L7384
	mov	r3, r4
	mov	r4, r5
	mov	r1, r3
	mov	r5, r9
	bl	__memzero(PLT)
	mvn	r3, #13
	str	r3, [sp, #4]
.L7358:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	ldr	r1, [r4, #120]
	add	r0, r5, #36
	mov	r2, r10
	bl	__list_add(PLT)
	mov	r0, r7
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7346:
	mov	r0, r7
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #104]
	cmp	r3, #3
	beq	.L7371
	cmp	r3, #0
	movne	r3, #1
	strne	r3, [r4, #104]
.L7360:
	mov	r0, r7
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r0, [sp, #4]
.L7380:
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7384:
	mov	r1, r3
	mov	r2, r4
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	bne	.L7385
.L7356:
	str	r4, [r9, #4]
	ldr	r0, [r5, #92]
	mov	r1, r9
	mov	r2, #208
	ldr	lr, [r0, #8]
	ldr	r3, [lr, #16]
	blx	r3
	cmp	r0, #0
	blt	.L7370
	ldr	r3, [sp]
	subs	r6, r6, r4
	and	r2, r8, #1
	orrne	r2, r2, #1
	cmp	r2, #0
	add	r3, r3, r4
	str	r3, [sp]
	bne	.L7359
	mov	r4, r5
	b	.L7346
.L7371:
	mvn	r3, #124
	str	r3, [sp, #4]
	b	.L7360
.L7348:
	mov	r1, r0
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7361:
	ldr	r2, [r5, #104]
	cmp	r2, #2
	beq	.L7386
	mov	r3, #0
	mov	r4, r5
	str	r3, [sp, #4]
	b	.L7346
.L7386:
	ldr	r1, .L7388+4
	mov	r2, #0
	add	r3, sp, #28
	ldr	r0, [fp, #12]
	add	ip, r5, #144
	str	r8, [sp, #16]
	str	r2, [sp, #28]
	add	r2, sp, #40
	mov	r4, ip
	str	r3, [sp, #12]
	mov	r9, r3
.LPIC1733:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	str	ip, [sp, #8]
	str	r2, [sp, #40]
	str	r2, [sp, #44]
	str	r6, [sp, #20]
	strd	r0, [sp, #32]
	b	.L7353
.L7387:
	bl	schedule(PLT)
.L7353:
	mov	r0, r4
	mov	r1, r9
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #116]
	mov	r8, r0
	cmp	r10, r3
	mov	r0, r3
	sub	r6, r3, #36
	beq	.L7350
	bl	list_del(PLT)
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	bne	.L7351
.L7362:
	ldr	r3, [r5, #104]
	cmp	r3, #2
	bne	.L7366
	ldr	r3, [fp, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L7387
	mov	r3, #65024
	mov	r4, r5
	movt	r3, 65535
	str	r3, [sp, #4]
.L7352:
	ldrd	r0, [sp, #8]
	bl	finish_wait(PLT)
	b	.L7346
.L7383:
	mov	r0, r7
	bl	_raw_spin_unlock_irq(PLT)
	mvn	r0, #18
	b	.L7380
.L7364:
	mvn	r3, #4
	mov	r4, r5
	str	r3, [sp, #4]
	b	.L7346
.L7350:
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7362
.L7370:
	mvn	r3, #4
	mov	r4, r5
	mov	r5, r9
	str	r3, [sp, #4]
	b	.L7358
.L7351:
	ldrd	r0, [sp, #8]
	mov	r9, r6
	ldr	r8, [sp, #16]
	ldr	r6, [sp, #20]
	bl	finish_wait(PLT)
	b	.L7349
.L7366:
	mov	r3, #0
	mov	r4, r5
	str	r3, [sp, #4]
	b	.L7352
.L7382:
	mov	r3, #1
	mov	r0, r7
	str	r3, [r4, #104]
	bl	_raw_spin_unlock_irq(PLT)
	mvn	r0, #124
	b	.L7380
.L7385:
	mvn	r3, #13
	mov	r4, r5
	mov	r5, r9
	str	r3, [sp, #4]
	b	.L7358
.L7389:
	.align	2
.L7388:
	.word	mtp_tx_req_len(GOT_PREL)+(.-(.LPIC1732+8))
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1733+8))
	.fnend
	.size	mtp_write, .-mtp_write
	.align	2
	.type	android_suspend, %function
android_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #32
	mov	r0, r6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	dev_get_drvdata(PLT)
	ldr	r2, .L7410
.LPIC1734:
	add	r2, pc, r2
	ldr	r3, [r2, #16]!
	cmp	r3, r2
	sub	r4, r3, #520
	bne	.L7394
	b	.L7391
.L7409:
	ldr	r3, [r4, #520]
	cmp	r3, r2
	sub	r4, r3, #520
	beq	.L7391
.L7394:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L7409
.L7391:
	add	r7, r0, #60
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldrb	r3, [r4, #50]	@ zero_extendqisi2
	mov	r8, r0
	cmp	r3, #0
	bne	.L7395
	ldr	r3, .L7410+4
	mov	r1, #1
	add	r2, r4, #180
	mov	r0, #4
	strb	r1, [r4, #50]
.LPIC1739:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
.L7395:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	dev_get_drvdata(PLT)
	ldr	r3, [r0, #12]
	mov	r6, r0
	cmp	r3, #0
	beq	.L7399
	ldr	r4, [r3, #36]!
	cmp	r3, r4
	sub	r4, r4, #72
	beq	.L7399
.L7401:
	ldr	r2, [r4, #56]
	mov	r0, r4
	cmp	r2, #0
	beq	.L7400
	blx	r2
	ldr	r3, [r6, #12]
	add	r3, r3, #36
.L7400:
	ldr	r4, [r4, #72]
	cmp	r3, r4
	sub	r4, r4, #72
	bne	.L7401
.L7399:
	ldr	r3, .L7410+8
.LPIC1738:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L7398
	mov	r0, r6
	blx	r3
.L7398:
	ldrb	r3, [r6, #16]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r6, #16]
	ldr	r3, [r5]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L7390
	mov	r0, r5
	ldrd	r6, [sp, #8]
	mov	r1, #2
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	bx	r3
.L7390:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7411:
	.align	2
.L7410:
	.word	.LANCHOR1-(.LPIC1734+8)
	.word	system_wq(GOT_PREL)+(.-(.LPIC1739+8))
	.word	.LANCHOR1-(.LPIC1738+8)
	.fnend
	.size	android_suspend, .-android_suspend
	.align	2
	.type	diag_function_unbind, %function
diag_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L7428
	cmp	r3, #2
	bhi	.L7429
.L7414:
	ldr	r0, [r6, #16]
	bl	kfree(PLT)
	ldr	r3, [r6, #124]
	cmp	r3, #0
	beq	.L7415
	ldr	r2, [r3, #20]
	cmp	r6, r2
	moveq	r2, #0
	streq	r2, [r3, #20]
.L7415:
	add	r0, r6, #140
	add	r7, r6, #108
	bl	list_del(PLT)
	mov	r9, r6
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r1, [r9, #100]!
	mov	r8, r0
	cmp	r1, r9
	ldr	r5, [r1]
	bne	.L7419
	b	.L7420
.L7422:
	mov	r5, r3
.L7419:
	mov	r0, r1
	sub	r4, r1, #36
	bl	list_del(PLT)
	ldr	r0, [r6, #88]
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r9, r5
	ldr	r3, [r5]
	mov	r1, r5
	bne	.L7422
.L7420:
	mov	r9, r6
	ldr	r1, [r9, #92]!
	cmp	r1, r9
	ldr	r5, [r1]
	bne	.L7421
	b	.L7418
.L7423:
	mov	r5, r3
.L7421:
	mov	r0, r1
	sub	r4, r1, #36
	bl	list_del(PLT)
	ldr	r0, [r6, #84]
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r9, r5
	ldr	r3, [r5]
	mov	r1, r5
	bne	.L7423
.L7418:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r8, [sp, #16]
	ldrd	r6, [sp, #8]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree(PLT)
.L7428:
	ldr	r0, [r1, #12]
	bl	kfree(PLT)
	ldr	r3, [r4, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L7414
.L7429:
	ldr	r0, [r6, #8]
	bl	kfree(PLT)
	b	.L7414
	.fnend
	.size	diag_function_unbind, .-diag_function_unbind
	.align	2
	.type	gbam_connect_work, %function
gbam_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r10, [sp, #24]
	sub	r10, r0, #280
	strd	r8, [sp, #16]
	sub	r9, r0, #276
	mov	r0, r10
	str	lr, [sp, #32]
	strd	r6, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r5, r0
	mov	r0, r9
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #-272]
	mov	r0, r9
	cmp	r3, #0
	beq	.L7460
	bl	_raw_spin_unlock(PLT)
	mov	r0, r10
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #-264]
	tst	r3, #4
	bne	.L7461
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7461:
	ldr	r2, .L7466
	sub	r3, r4, #284
	ldr	r0, [r4, #-260]
	mov	r1, r3
	str	r3, [sp, #4]
.LPIC1740:
	add	r2, pc, r2
	bl	msm_bam_dmux_open(PLT)
	subs	r5, r0, #0
	bne	.L7462
	mov	r0, #1
	sub	r1, r4, #264
	bl	_set_bit(PLT)
	mov	r0, r10
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #-272]
	str	r0, [sp]
	cmp	r2, #0
	beq	.L7463
	ldr	r3, .L7466+4
	sub	r7, r4, #232
	ldr	r6, [r2, #88]
.LPIC1743:
	add	r3, pc, r3
	ldr	r8, [r3, #588]
	cmp	r8, #0
	ble	.L7435
	ldr	fp, .L7466+8
.LPIC1744:
	add	fp, pc, fp
	b	.L7438
.L7436:
	str	fp, [r3, #28]
	ldr	r2, [r4, #-232]
	bl	__list_add(PLT)
	cmp	r8, r5
	beq	.L7435
.L7438:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	add	r5, r5, #1
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r1, r7
	add	r0, r3, #36
	bne	.L7436
	ldr	r3, [r4, #-232]
	cmp	r7, r3
	beq	.L7464
.L7435:
	mov	r0, r10
	ldr	r1, [sp]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #-272]
	str	r0, [sp]
	cmp	r2, #0
	beq	.L7456
	ldr	r3, .L7466+12
	sub	r10, r4, #256
	ldr	r6, [r2, #84]
.LPIC1745:
	add	r3, pc, r3
	ldr	r8, [r3, #592]
	cmp	r8, #0
	ble	.L7440
	ldr	fp, .L7466+16
	mov	r5, #0
.LPIC1746:
	add	fp, pc, fp
	b	.L7443
.L7441:
	str	fp, [r3, #28]
	ldr	r2, [r4, #-256]
	bl	__list_add(PLT)
	cmp	r8, r5
	beq	.L7440
.L7443:
	ldr	r3, [r6, #8]
	mov	r1, #32
	mov	r0, r6
	add	r5, r5, #1
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r1, r10
	add	r0, r3, #36
	bne	.L7441
	ldr	r3, [r4, #-256]
	cmp	r10, r3
	beq	.L7465
.L7440:
	mov	r0, r9
	ldr	r1, [sp]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [sp, #4]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gbam_start_rx(PLT)
.L7439:
	mov	r0, r1
	sub	r5, r1, #36
	bl	list_del(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L7456:
	ldr	r1, [r4, #-232]
	cmp	r7, r1
	bne	.L7439
.L7449:
	mov	r0, r9
	ldr	r1, [sp]
	b	.L7457
.L7460:
	bl	_raw_spin_unlock(PLT)
	mov	r0, r10
	mov	r1, r5
.L7457:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L7464:
	ldr	r1, .L7466+20
	ldr	r0, .L7466+24
.LPIC1748:
	add	r1, pc, r1
	add	r1, r1, #3360
.LPIC1747:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r1, [sp]
	mov	r0, r10
	b	.L7457
.L7465:
	ldr	r1, .L7466+28
	ldr	r0, .L7466+32
.LPIC1750:
	add	r1, pc, r1
	add	r1, r1, #3360
.LPIC1749:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r3, [r4, #-232]
	cmp	r7, r3
	beq	.L7449
.L7444:
	mov	r0, r3
	sub	r5, r3, #36
	bl	list_del(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, [r4, #-232]
	cmp	r7, r3
	bne	.L7444
	b	.L7449
.L7463:
	mov	r1, r0
	mov	r0, r10
	b	.L7457
.L7462:
	ldr	r1, .L7466+36
	mov	r3, r5
	ldr	r0, .L7466+40
	ldr	r2, [r4, #-260]
.LPIC1742:
	add	r1, pc, r1
.LPIC1741:
	add	r0, pc, r0
	add	r1, r1, #3344
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk(PLT)
.L7467:
	.align	2
.L7466:
	.word	gbam_notify-(.LPIC1740+8)
	.word	.LANCHOR2-(.LPIC1743+8)
	.word	gbam_epout_complete-(.LPIC1744+8)
	.word	.LANCHOR2-(.LPIC1745+8)
	.word	gbam_epin_complete-(.LPIC1746+8)
	.word	.LANCHOR3-(.LPIC1748+8)
	.word	.LC429-(.LPIC1747+8)
	.word	.LANCHOR3-(.LPIC1750+8)
	.word	.LC430-(.LPIC1749+8)
	.word	.LANCHOR3-(.LPIC1742+8)
	.word	.LC428-(.LPIC1741+8)
	.fnend
	.size	gbam_connect_work, .-gbam_connect_work
	.align	2
	.type	ccid_bulk_write, %function
ccid_bulk_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #124]
	.pad #36
	sub	sp, sp, #36
	ldr	r5, [r6, #96]
	cmp	r5, #0
	beq	.L7504
	cmp	r2, #0
	mov	r4, r2
	mov	r7, r1
	beq	.L7506
	cmp	r2, #524
	bcs	.L7507
	add	r8, r6, #92
	add	r9, r6, #192
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r6, #192]
	mov	r10, r0
	cmp	r9, r5
	beq	.L7473
	mov	r0, r5
	sub	r5, r5, #36
	bl	list_del(PLT)
	mov	r0, r8
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #0
	beq	.L7490
.L7474:
	ldr	r3, [r6, #148]
	cmp	r3, #0
	bne	.L7508
	mov	r3, sp
	ldr	r0, [r5]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 439 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r4; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L7509
	mov	r1, r4
	bl	__memzero(PLT)
.L7481:
	ldr	r3, [r6, #96]
	cmp	r3, #0
	bne	.L7483
	cmp	r5, #0
	ldr	r4, [r6, #104]
	beq	.L7504
	ldr	r0, [r5]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	mvn	r0, #18
	b	.L7499
.L7483:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r4, r0
	ldr	r1, [r6, #196]
	add	r0, r5, #36
	mov	r2, r9
	bl	__list_add(PLT)
	mov	r0, r8
	mov	r1, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #13
.L7499:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7509:
	mov	r1, r7
	mov	r2, r4
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	bne	.L7481
	str	r4, [r5, #4]
	ldr	r0, [r6, #104]
	mov	r1, r5
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L7510
.L7503:
	mov	r0, r4
	b	.L7499
.L7473:
	mov	r1, r0
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7490:
	ldr	r5, [r6, #148]
	cmp	r5, #0
	bne	.L7493
	ldr	r2, .L7513
	mov	r3, sp
	str	r5, [sp, #12]
	bic	r10, r3, #8128
	add	r3, r6, #172
	bic	r10, r10, #63
	ldr	r1, [r10, #12]
	str	r3, [sp]
	add	r3, sp, #12
.LPIC1758:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #4]
	add	r3, sp, #24
	str	r1, [sp, #16]
	str	r3, [sp, #24]
	str	r3, [sp, #28]
	str	r2, [sp, #20]
	b	.L7478
.L7511:
	bl	schedule(PLT)
.L7478:
	ldrd	r0, [sp]
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #192]
	mov	fp, r0
	cmp	r9, r3
	mov	r0, r3
	sub	r5, r3, #36
	beq	.L7475
	bl	list_del(PLT)
	mov	r0, r8
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #0
	bne	.L7476
.L7491:
	ldr	r3, [r6, #148]
	cmp	r3, #0
	bne	.L7494
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L7511
	ldrd	r0, [sp]
	bl	finish_wait(PLT)
	mov	r0, #65024
	movt	r0, 65535
	b	.L7499
.L7506:
	ldr	r1, .L7513+4
	ldr	r0, .L7513+8
.LPIC1752:
	add	r1, pc, r1
	add	r1, r1, #3376
.LPIC1751:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
.L7504:
	mvn	r0, #18
	b	.L7499
.L7493:
	mov	r5, #0
	b	.L7474
.L7494:
	mov	r5, #0
.L7476:
	ldrd	r0, [sp]
	bl	finish_wait(PLT)
	b	.L7474
.L7475:
	mov	r1, fp
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7491
.L7507:
	ldr	r1, .L7513+12
	mov	r3, r2
	movw	r2, #523
	ldr	r0, .L7513+16
.LPIC1754:
	add	r1, pc, r1
	add	r1, r1, #3376
.LPIC1753:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #11
	b	.L7499
.L7508:
	ldr	r1, .L7513+20
	ldr	r0, .L7513+24
.LPIC1757:
	add	r1, pc, r1
	add	r1, r1, #3376
.LPIC1756:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #4
	b	.L7499
.L7510:
	mov	r3, #1
	mov	r0, r8
	str	r3, [r6, #148]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r4, r0
	mov	r2, r9
	ldr	r1, [r6, #196]
	add	r0, r5, #36
	bl	__list_add(PLT)
	mov	r1, r4
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #96]
	mov	r7, r0
	cmp	r3, #0
	mvnne	r4, #4
	beq	.L7512
.L7486:
	mov	r0, r8
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7503
.L7512:
	mov	r0, r8
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7487:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r6, #192]
	mov	r5, r0
	cmp	r9, r4
	mov	r0, r4
	sub	r10, r4, #36
	beq	.L7488
	bl	list_del(PLT)
	mov	r0, r8
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r10, #0
	beq	.L7502
	ldr	r5, [r6, #104]
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	mov	r1, r10
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7487
.L7488:
	mov	r1, r5
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7502:
	mvn	r4, #18
	b	.L7486
.L7514:
	.align	2
.L7513:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1758+8))
	.word	.LANCHOR3-(.LPIC1752+8)
	.word	.LC170-(.LPIC1751+8)
	.word	.LANCHOR3-(.LPIC1754+8)
	.word	.LC431-(.LPIC1753+8)
	.word	.LANCHOR3-(.LPIC1757+8)
	.word	.LC432-(.LPIC1756+8)
	.fnend
	.size	ccid_bulk_write, .-ccid_bulk_write
	.align	2
	.type	send_status, %function
send_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #44
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #104]
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L7538
	b	.L7520
.L7547:
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L7520
.L7538:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	bl	sleep_thread(PLT)
	subs	r3, r0, #0
	mov	r0, r4
	beq	.L7547
	mov	r0, r3
.L7544:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7520:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r7, #0
	beq	.L7548
	ldr	r1, [r7, #28]
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
.L7521:
	tst	r3, #4
	movne	r1, #2
	bne	.L7522
	adds	r1, r1, #0
	movne	r1, #1
.L7522:
	ldr	r3, [r6]
	movw	r2, #21333
	ldr	r0, .L7551
	movt	r2, 21314
	str	r2, [r3]
	ldr	ip, [r5, #132]
.LPIC1759:
	add	r0, pc, r0
	ldr	r2, [r0, #3544]
	str	ip, [r3, #4]
	ldr	ip, [r5, #136]
	cmp	r2, #0
	str	ip, [r3, #8]
	beq	.L7523
	ldr	r2, [r5, #136]
	mov	ip, #0
	str	ip, [r0, #3544]
.L7523:
	str	r2, [r3, #8]
	mov	r2, #13
	strb	r1, [r3, #12]
	ldr	r3, [r6, #16]
	str	r2, [r3, #4]
	ldr	r3, [r6, #16]
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	ldr	r4, [r5, #8]
	cmp	r4, #0
	beq	.L7549
	ldr	r0, [r4, #88]
	ldr	r7, [r4, #100]
	ldr	r8, [r6, #16]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq(PLT)
	mov	r2, #1
	mov	r3, #2
	str	r2, [r6, #20]
	str	r3, [r6, #4]
	ldr	r0, [r4, #88]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r7, #8]
	mov	r0, r7
	mov	r1, r8
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L7527
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r6, #20]
	str	r2, [r6, #4]
	beq	.L7527
	cmn	r3, #95
	beq	.L7550
.L7526:
	ldr	r0, [r4, #84]
	ldr	r1, .L7551+4
	ldr	r2, [r7, #4]
	add	r0, r0, #32
.LPIC1764:
	add	r1, pc, r1
	bl	dev_warn(PLT)
.L7527:
	ldr	r3, [r6, #8]
	mov	r0, #0
	str	r3, [r5, #60]
	b	.L7544
.L7550:
	ldr	r2, [r8, #4]
	cmp	r2, #0
	bne	.L7526
	b	.L7527
.L7548:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	mov	r1, #9472
	movt	r1, 5
	tst	r3, #16
	movne	r1, #0
	b	.L7521
.L7549:
	ldr	r2, .L7551+8
	mov	r3, #796
	ldr	r0, [r5]
	ldr	r1, .L7551+12
.LPIC1762:
	add	r2, pc, r2
	add	r2, r2, #3392
	add	r0, r0, #32
.LPIC1761:
	add	r1, pc, r1
	add	r2, r2, #4
	bl	dev_err(PLT)
	ldr	r0, .L7551+16
	movw	r1, #550
.LPIC1763:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	mvn	r0, #4
	b	.L7544
.L7552:
	.align	2
.L7551:
	.word	.LANCHOR4-(.LPIC1759+8)
	.word	.LC411-(.LPIC1764+8)
	.word	.LANCHOR3-(.LPIC1762+8)
	.word	.LC409-(.LPIC1761+8)
	.word	.LC410-(.LPIC1763+8)
	.fnend
	.size	send_status, .-send_status
	.align	2
	.type	do_write, %function
do_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 72
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r0, #104]
	.pad #92
	sub	sp, sp, #92
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	tst	r3, #2
	movne	r3, #9984
	mvnne	r0, #21
	movtne	r3, 7
	strne	r3, [r6, #28]
	bne	.L7617
	mov	r4, r0
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_lock(PLT)
	ldr	r2, [r6]
	ldr	r3, [r2, #32]
	bic	r3, r3, #1048576
	bic	r3, r3, #4096
	str	r3, [r2, #32]
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_unlock(PLT)
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	r3, #10
	ldrb	r3, [r4, #79]	@ zero_extendqisi2
	beq	.L7621
	ldrb	r0, [r4, #78]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	ldrb	r1, [r4, #77]	@ zero_extendqisi2
	ldrb	r2, [r4, #81]	@ zero_extendqisi2
	ldrb	r5, [r4, #80]	@ zero_extendqisi2
	orr	r3, r3, r0, asl #24
	tst	r1, #231
	orr	r3, r3, r2
	mvnne	r0, #21
	orr	r5, r3, r5, asl #8
	movne	r3, #9216
	movtne	r3, 5
	strne	r3, [r6, #28]
	bne	.L7617
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	tst	r3, #128
	beq	.L7622
.L7557:
	ldrd	r2, [r6, #16]
	mov	r1, #0
	mov	r0, r5
	cmp	r5, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r0, #21
	movtge	r3, 5
	strge	r3, [r6, #28]
	bge	.L7617
	ldr	r3, [r6, #40]
	ldr	r0, [r4, #128]
	sub	r1, r3, #32
	rsb	r2, r3, #32
	mov	fp, r5, asl r1
	str	r0, [sp, #40]
	cmp	r0, #0
	mov	r10, r5, asl r3
	orr	fp, fp, r5, lsr r2
	beq	.L7620
	ldr	r3, .L7629
	mov	r9, #1
	strd	r10, [sp, #24]
	ldr	r2, .L7629+4
	mov	r7, r9
	strd	r10, [sp, #16]
	ldr	r1, .L7629+8
.LPIC1771:
	add	r3, pc, r3
.LPIC1770:
	add	r2, pc, r2
	str	r3, [sp, #76]
	movw	r3, #3074
.LPIC1769:
	add	r1, pc, r1
	movt	r3, 3
	str	r2, [sp, #72]
	mov	r2, #8448
	movt	r2, 5
	str	r1, [sp, #60]
	str	r3, [sp, #68]
	ldr	r3, .L7629+12
	str	r2, [sp, #56]
.LPIC1768:
	add	r3, pc, r3
	str	r3, [sp, #64]
	ldr	r3, [sp, #40]
	str	r3, [sp, #44]
.L7561:
	ldr	r5, [r4, #60]
	ldr	r3, [r5, #4]
	cmp	r3, #0
	movne	r3, #0
	andeq	r3, r7, #1
	cmp	r3, #0
	beq	.L7562
	ldrd	r2, [r6, #8]
	ldrd	r0, [sp, #16]
	cmp	r0, r2
	sbcs	r3, r1, r3
	blt	.L7563
	ldr	r3, [r6, #40]
	mov	r9, r1
	ldr	r2, [sp, #56]
	subs	r1, r3, #32
	str	r2, [r6, #28]
	mov	r2, r0, lsr r3
	rsb	r3, r3, #32
	orr	r2, r2, r9, asl r3
	movpl	r3, r9
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	mov	r9, #0
	mov	r7, r9
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L7561
.L7562:
	ldr	r5, [r4, #64]
	ldr	r2, [r5, #4]
	cmp	r2, #0
	bne	.L7571
	cmp	r9, #0
	beq	.L7620
.L7573:
	mov	r0, r4
	bl	sleep_thread(PLT)
	cmp	r0, #0
	beq	.L7561
.L7617:
	add	sp, sp, #92
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7571:
	cmp	r2, #1
	bne	.L7573
	ldr	r2, [r4, #136]
	cmp	r2, #0
	beq	.L7573
#APP
@ 1354 "/root/lol//drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	ldr	r2, [r5, #8]
	str	r2, [r4, #64]
	ldr	r2, [r5, #24]
	str	r3, [r5, #4]
	ldr	r3, [r2, #44]
	cmp	r3, #0
	bne	.L7623
	ldrd	r0, [r6, #8]
	ldr	r2, [r2, #48]
	mov	r10, r0
	mov	fp, r1
	mov	r0, r2
	mov	r1, #0
	strd	r10, [sp, #48]
	strd	r0, [sp, #32]
	ldrd	r0, [sp, #24]
	subs	r0, r10, r0
	sbc	r1, fp, r1
	ldrd	r10, [sp, #32]
	cmp	r0, r10
	sbcs	r3, r1, fp
	blt	.L7624
.L7576:
	ldr	r8, [r6, #44]
	ldr	r3, [r5, #12]
	rsb	r8, r8, #0
	cmp	r2, r3
	andls	r8, r8, r2
	andhi	r8, r8, r3
	cmp	r8, #0
	bne	.L7625
	ldr	r2, [r5, #24]
	ldr	r2, [r2, #48]
	cmp	r2, r3
	bcs	.L7561
.L7591:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #4
	orr	r3, r3, #8
	strb	r3, [r4, #144]
	b	.L7617
.L7563:
	mov	r9, r1
	ldr	r1, [sp, #40]
	mov	r8, r0
	ldr	r2, [r4, #140]
	cmp	r1, #16384
	movcc	r3, r1
	movcs	r3, #16384
	adds	r8, r8, r3
	rsb	r2, r3, r2
	adc	r9, r9, #0
	subs	r1, r1, r3
	str	r2, [r4, #140]
	str	r1, [sp, #40]
	str	r3, [r5, #12]
	ldr	r1, [r4, #108]
	strd	r8, [sp, #16]
	movne	r9, #1
	moveq	r9, #0
	udiv	r2, r3, r1
	mls	r2, r1, r2, r3
	cmp	r2, #0
	addne	r3, r3, r1
	rsbne	r3, r2, r3
	ldr	r2, [r5, #24]
	str	r3, [r2, #4]
	ldr	r7, [r4, #8]
	cmp	r7, #0
	beq	.L7626
	ldr	r0, [r7, #88]
	ldr	r8, [r7, #104]
	ldr	r10, [r5, #24]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq(PLT)
	mov	r2, #1
	mov	r3, #2
	str	r2, [r5, #28]
	str	r3, [r5, #4]
	ldr	r0, [r7, #88]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r8, #8]
	mov	r0, r8
	mov	r1, r10
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L7570
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r5, #28]
	str	r2, [r5, #4]
	beq	.L7570
	cmn	r3, #95
	beq	.L7627
.L7569:
	ldr	r0, [r7, #84]
	ldr	r1, [sp, #64]
	ldr	r2, [r8, #4]
	add	r0, r0, #32
	bl	dev_warn(PLT)
.L7570:
	ldr	r3, [r5, #8]
	and	r7, r9, #1
	str	r3, [r4, #60]
	b	.L7561
.L7625:
	ldrd	r0, [sp, #24]
	add	r3, sp, #88
	mov	r2, r8
	strd	r0, [r3, #-8]!
	ldr	r0, [r6]
	ldr	r1, [r5]
	bl	vfs_write(PLT)
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L7593
	cmp	r0, #0
	blt	.L7594
	cmp	r8, r0
	bls	.L7579
	ldr	r3, [r6, #44]
	ldrd	r10, [sp, #24]
	ldr	r2, [r4, #136]
	rsb	r3, r3, #0
	and	r3, r3, r0
	adds	r10, r10, r3
	mov	r0, r3
	adc	fp, fp, r3, asr #31
	rsb	r2, r3, r2
	cmp	r8, r3
	ldr	r3, [sp, #44]
	str	r2, [r4, #136]
	strd	r10, [sp, #24]
	rsb	r3, r0, r3
	str	r3, [sp, #44]
	bls	.L7580
.L7578:
	ldr	r3, [r6, #40]
	ldr	r2, [sp, #68]
	subs	r1, r3, #32
	str	r2, [r6, #28]
	mov	r2, r10, lsr r3
	rsb	r3, r3, #32
	orr	r2, r2, fp, asl r3
	movpl	r3, fp
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	ldr	r1, [sp, #72]
	str	r2, [r6, #32]
	mov	r2, #1
	orr	r3, r3, #64
	str	r2, [r1, #3544]
	strb	r3, [r6, #24]
.L7580:
	cmp	r8, r0
	beq	.L7628
.L7619:
.L7583:
	ldr	r3, [r5, #24]
	ldr	r2, [r5, #12]
	ldr	r3, [r3, #48]
	cmp	r3, r2
	bcc	.L7591
	ldr	r3, [sp, #44]
	cmp	r3, #0
	bne	.L7561
.L7620:
	mvn	r0, #4
	b	.L7617
.L7624:
	ldrd	r0, [sp, #24]
	ldrd	r10, [sp, #48]
	strd	r0, [sp]
	add	r0, r6, #48
	ldr	r1, [sp, #60]
	strd	r10, [sp, #8]
	bl	dev_err(PLT)
	ldr	r3, [sp, #24]
	ldr	r2, [r6, #8]
	rsb	r2, r3, r2
	b	.L7576
.L7627:
	ldr	r2, [r10, #4]
	cmp	r2, #0
	bne	.L7569
	b	.L7570
.L7622:
	tst	r1, #8
	beq	.L7557
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_lock(PLT)
	ldr	r2, [r6]
	ldr	r3, [r2, #32]
	orr	r3, r3, #1048576
	orr	r3, r3, #4096
	str	r3, [r2, #32]
	ldr	r0, [r6]
	add	r0, r0, #20
	bl	_raw_spin_unlock(PLT)
	b	.L7557
.L7621:
	ldrb	r2, [r4, #77]	@ zero_extendqisi2
	orr	r3, r3, #167772160
	ldrb	r5, [r4, #78]	@ zero_extendqisi2
	orr	r3, r3, r2, asl #16
	orr	r5, r3, r5, asl #8
	bic	r5, r5, #-16777216
	b	.L7557
.L7579:
	ldrd	r10, [sp, #24]
	ldr	r3, [r4, #136]
	ldr	r2, [sp, #44]
	adds	r10, r10, r0
	adc	fp, fp, r0, asr #31
	rsb	r3, r0, r3
	rsb	r2, r0, r2
	cmp	r8, r0
	str	r3, [r4, #136]
	strd	r10, [sp, #24]
	str	r2, [sp, #44]
	bne	.L7619
.L7628:
	ldr	r3, [sp, #76]
	ldr	r3, [r3, #3548]
	cmp	r3, #0
	bne	.L7619
	ldr	r3, [sp, #76]
	ldr	r3, [r3, #3544]
	cmp	r3, #0
	bne	.L7620
	ldr	r3, [r4, #68]
	ldr	r2, [r3, #4]
	cmp	r2, #2
	beq	.L7619
	ldr	r2, [r3, #36]
	cmp	r2, #2
	beq	.L7619
	ldr	r2, [r3, #68]
	cmp	r2, #2
	beq	.L7619
	ldr	r2, [r3, #100]
	ldr	r3, [sp, #40]
	cmp	r2, #2
	clz	r3, r3
	mov	r3, r3, lsr #5
	moveq	r3, #0
	cmp	r3, #0
	beq	.L7619
	ldr	r2, [sp, #76]
	mov	r3, #1
	mov	r0, r4
	str	r3, [r2, #3548]
	bl	send_status(PLT)
	b	.L7619
.L7594:
	mov	r0, r3
	ldrd	r10, [sp, #24]
	b	.L7578
.L7626:
	ldr	r2, .L7629+16
	movw	r3, #805
	ldr	r0, [r4]
	ldr	r1, .L7629+20
.LPIC1766:
	add	r2, pc, r2
	add	r2, r2, #3408
	add	r0, r0, #32
.LPIC1765:
	add	r1, pc, r1
	add	r2, r2, #8
	bl	dev_err(PLT)
	ldr	r0, .L7629+24
	movw	r1, #550
.LPIC1767:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	mvn	r0, #4
	b	.L7617
.L7593:
	mvn	r0, #3
	b	.L7617
.L7623:
	ldr	r3, [r6, #40]
	mov	r2, #2048
	mvn	r0, #4
	ldrd	r4, [sp, #24]
	movt	r2, 4
	str	r2, [r6, #28]
	subs	r1, r3, #32
	mov	r2, r4, lsr r3
	rsb	r3, r3, #32
	orr	r2, r2, r5, asl r3
	movpl	r3, r5
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L7617
.L7630:
	.align	2
.L7629:
	.word	.LANCHOR4-(.LPIC1771+8)
	.word	.LANCHOR4-(.LPIC1770+8)
	.word	.LC433-(.LPIC1769+8)
	.word	.LC411-(.LPIC1768+8)
	.word	.LANCHOR3-(.LPIC1766+8)
	.word	.LC409-(.LPIC1765+8)
	.word	.LC410-(.LPIC1767+8)
	.fnend
	.size	do_write, .-do_write
	.align	2
	.type	rmnet_mux_sdio_complete_epin, %function
rmnet_mux_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0]
	.pad #20
	sub	sp, sp, #20
	ldr	r9, [r1, #32]
	ldr	r2, [r1, #44]
	ldr	r7, [r4, #364]
	ldr	r3, [r4, #84]
	cmp	r7, #0
	beq	.L7656
	cmn	r2, #104
	beq	.L7634
	cmp	r2, #0
	beq	.L7634
	cmn	r2, #108
	beq	.L7634
	ldr	r0, [r3]
	ldr	r1, .L7659
	add	r0, r0, #32
.LPIC1774:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L7634:
	add	r7, r4, #368
	add	r8, r4, #192
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	mov	r2, r8
	ldr	r1, [r4, #196]
	add	r0, r5, #36
	bl	__list_add(PLT)
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	mov	r0, r9
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #372]
	ldr	r2, [r4, #84]
	cmp	r3, #0
	str	r2, [sp, #8]
	bne	.L7657
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7657:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #192]
	str	r0, [sp, #12]
	cmp	r8, r3
	beq	.L7639
	ldr	r5, [r4, #200]
	add	r3, r4, #200
	str	r3, [sp, #4]
	cmp	r3, r5
	cmpne	r5, #0
	movne	r10, #0
	beq	.L7639
.L7640:
	ldr	r3, [r4, #208]
	sub	r3, r3, #1
	str	r3, [r4, #208]
	ldrd	r2, [r5]
	str	r10, [r5]
	str	r10, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r6, [r4, #192]
	str	r5, [r6, #-4]
	ldr	r3, [r5, #172]
	mov	r0, r6
	sub	fp, r6, #36
	str	r3, [r6, #-36]
	ldr	r3, [r5, #80]
	str	r3, [r6, #-32]
	bl	list_del(PLT)
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #92]
	mov	r1, fp
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	cmp	r9, #0
	bne	.L7658
	ldr	r3, [r4, #408]
	ldr	r2, [r4, #192]
	add	r3, r3, #1
	cmp	r8, r2
	str	r3, [r4, #408]
	beq	.L7639
	ldr	r5, [r4, #200]
	ldr	r3, [sp, #4]
	cmp	r3, r5
	cmpne	r5, #0
	bne	.L7640
.L7639:
	ldr	r1, [sp, #12]
	mov	r0, r7
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L7656:
	mov	r0, r9
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r7
	str	r7, [r5]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	bx	r3	@ indirect register sibling call
.L7658:
	ldr	r0, [r4, #372]
	mov	r3, r9
	mov	r9, fp
	mov	fp, r3
	cmp	r0, #0
	beq	.L7642
	ldr	r3, [sp, #8]
	mov	r2, fp
	ldr	r1, .L7659+4
	ldr	r0, [r3]
.LPIC1775:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r2, r8
	mov	r0, r6
	ldr	r1, [r4, #196]
	bl	__list_add(PLT)
	ldr	r2, [sp, #4]
	ldr	r3, [r4, #200]
	str	r2, [r5, #4]
	str	r3, [r5]
	str	r5, [r4, #200]
	str	r5, [r3, #4]
	ldr	r3, [r4, #208]
	add	r3, r3, #1
	str	r3, [r4, #208]
	b	.L7639
.L7642:
	str	r0, [r6, #-36]
	ldr	r4, [r4, #92]
	bl	kfree(PLT)
	mov	r1, r9
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any(PLT)
	b	.L7639
.L7660:
	.align	2
.L7659:
	.word	.LC395-(.LPIC1774+8)
	.word	.LC129-(.LPIC1775+8)
	.fnend
	.size	rmnet_mux_sdio_complete_epin, .-rmnet_mux_sdio_complete_epin
	.align	2
	.type	do_read, %function
do_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r3, [r0, #76]	@ zero_extendqisi2
	.pad #36
	sub	sp, sp, #36
	ldr	r7, [r0, #104]
	cmp	r3, #8
	beq	.L7711
	ldrb	r3, [r0, #79]	@ zero_extendqisi2
	ldrb	r1, [r0, #78]	@ zero_extendqisi2
	ldrb	r2, [r0, #77]	@ zero_extendqisi2
	ldrb	r10, [r0, #81]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	ldrb	r4, [r0, #80]	@ zero_extendqisi2
	orr	r3, r3, r1, asl #24
	tst	r2, #231
	mvnne	r0, #21
	orr	r3, r3, r10
	orr	r4, r3, r4, asl #8
	movne	r3, #9216
	movtne	r3, 5
	strne	r3, [r7, #28]
	bne	.L7706
.L7663:
	ldrd	r2, [r7, #16]
	mov	r9, #0
	cmp	r4, r2
	sbcs	r3, r9, r3
	movge	r3, #8448
	mvnge	r0, #21
	movtge	r3, 5
	strge	r3, [r7, #28]
	bge	.L7706
	ldr	r3, [r7, #40]
	ldr	r2, [r0, #128]
	sub	r1, r3, #32
	mov	r10, r4, asl r3
	mov	ip, r2
	str	r2, [sp, #12]
	mov	fp, r4, asl r1
	cmp	ip, #0
	rsb	r2, r3, #32
	orr	fp, fp, r4, lsr r2
	beq	.L7666
	ldr	r3, .L7716
	mov	r5, r0
	add	r4, r0, #44
.LPIC1779:
	add	r3, pc, r3
	str	r3, [sp, #20]
	mov	r3, sp
	bic	r3, r3, #8128
	str	r3, [sp, #16]
.L7681:
	ldrd	r2, [r7, #8]
	mov	r0, r4
	mov	r9, r3
	mov	r8, r2
	bl	_raw_spin_lock_irq(PLT)
	ldr	r6, [r5, #60]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L7698
	b	.L7671
.L7712:
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L7671
.L7698:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	bl	sleep_thread(PLT)
	subs	r3, r0, #0
	mov	r0, r4
	beq	.L7712
	mov	r0, r3
.L7706:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7671:
	ldr	r3, [sp, #12]
	subs	r8, r8, r10
	sbc	r9, r9, fp
	cmp	r3, #16384
	movcs	r3, #16384
	str	r3, [sp]
	mov	r3, #0
	str	r3, [sp, #4]
	ldrd	r2, [sp]
	cmp	r8, r2
	sbcs	r3, r9, r3
	blt	.L7713
.L7668:
	mov	r0, r4
	ldr	r8, [sp]
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [sp]
	cmp	r3, #0
	beq	.L7714
	mov	r2, r3
	add	r3, sp, #32
	strd	r10, [r3, #-8]!
	ldr	r1, [r6]
	ldr	r0, [r7]
	bl	vfs_read(PLT)
	ldr	r3, [sp, #16]
	mov	r9, r0
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r1, r3, #1
	bne	.L7685
	cmp	r0, #0
	blt	.L7673
	cmp	r8, r0
	bls	.L7674
	ldr	r2, [r7, #44]
	mov	r0, r4
	ldr	r3, [r5, #136]
	rsb	r2, r2, #0
	and	r9, r9, r2
	ldr	r2, [sp, #12]
	rsb	r3, r9, r3
	adds	r10, r10, r9
	adc	fp, fp, r9, asr #31
	str	r3, [r5, #136]
	rsb	r2, r9, r2
	str	r2, [sp, #12]
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r0, r4
	str	r9, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r8, r9
	bhi	.L7682
.L7675:
	ldr	r3, [sp, #12]
	cmp	r3, #0
	beq	.L7666
	ldr	r3, [r6, #16]
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfc	r2, #1, #1
	strb	r2, [r3, #26]
	ldr	r8, [r5, #8]
	cmp	r8, #0
	beq	.L7715
	ldr	r0, [r8, #88]
	ldr	r3, [r6, #16]
	ldr	r9, [r8, #100]
	add	r0, r0, #44
	str	r3, [sp]
	bl	_raw_spin_lock_irq(PLT)
	mov	r2, #1
	mov	r3, #2
	str	r2, [r6, #20]
	str	r3, [r6, #4]
	ldr	r0, [r8, #88]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r9, #8]
	mov	r0, r9
	mov	r2, #208
	ldr	r1, [sp]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L7683
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r6, #20]
	str	r2, [r6, #4]
	beq	.L7683
	cmn	r3, #95
	bne	.L7679
	ldr	r2, [sp]
	ldr	r2, [r2, #4]
	cmp	r2, #0
	beq	.L7683
.L7679:
	ldr	r0, [r8, #84]
	ldr	r1, [sp, #20]
	ldr	r2, [r9, #4]
	add	r0, r0, #32
	bl	dev_warn(PLT)
.L7683:
	ldr	r3, [r6, #8]
	str	r3, [r5, #60]
	b	.L7681
.L7713:
	strd	r8, [sp]
	b	.L7668
.L7711:
	ldrb	r10, [r0, #79]	@ zero_extendqisi2
	ldrb	r3, [r0, #77]	@ zero_extendqisi2
	ldrb	r4, [r0, #78]	@ zero_extendqisi2
	orr	r10, r10, #134217728
	orr	r3, r10, r3, asl #16
	orr	r4, r3, r4, asl #8
	bic	r4, r4, #-16777216
	b	.L7663
.L7674:
	ldr	r3, [r5, #136]
	mov	r0, r4
	adds	r10, r10, r9
	ldr	r2, [sp, #12]
	adc	fp, fp, r9, asr #31
	rsb	r3, r9, r3
	rsb	r2, r9, r2
	str	r3, [r5, #136]
	str	r2, [sp, #12]
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [r6, #16]
	mov	r3, #1
	mov	r0, r4
	str	r9, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq(PLT)
	b	.L7675
.L7673:
	mov	r0, r4
	str	r1, [sp]
	bl	_raw_spin_lock_irq(PLT)
	ldr	r1, [sp]
	mov	r3, #1
	mov	r0, r4
	ldr	r2, [r6, #16]
	str	r1, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq(PLT)
.L7682:
	ldr	r3, [r7, #40]
	mov	r2, #4352
	mvn	r0, #4
	movt	r2, 3
	str	r2, [r7, #28]
	mov	r2, r10, lsr r3
	subs	r1, r3, #32
	rsb	r3, r3, #32
	orr	r2, r2, fp, asl r3
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	orrpl	r2, r2, fp, asr r1
	orr	r3, r3, #64
	str	r2, [r7, #32]
	strb	r3, [r7, #24]
	b	.L7706
.L7666:
	mvn	r0, #4
	b	.L7706
.L7685:
	mvn	r0, #3
	b	.L7706
.L7715:
	ldr	r2, .L7716+4
	mov	r3, #796
	ldr	r0, [r5]
	ldr	r1, .L7716+8
.LPIC1777:
	add	r2, pc, r2
	add	r2, r2, #3392
	add	r0, r0, #32
.LPIC1776:
	add	r1, pc, r1
	add	r2, r2, #4
	bl	dev_err(PLT)
	ldr	r0, .L7716+12
	movw	r1, #550
.LPIC1778:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	mvn	r0, #4
	b	.L7706
.L7714:
	ldr	r3, [r7, #40]
	mov	r2, #8448
	mov	r0, r4
	movt	r2, 5
	str	r2, [r7, #28]
	mov	r2, r10, lsr r3
	subs	r1, r3, #32
	rsb	r3, r3, #32
	orr	r2, r2, fp, asl r3
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	orrpl	r2, r2, fp, asr r1
	orr	r3, r3, #64
	str	r2, [r7, #32]
	strb	r3, [r7, #24]
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [r6, #16]
	mov	r1, #0
	mov	r3, #1
	mov	r0, r4
	str	r1, [r2, #4]
	str	r3, [r6, #4]
	bl	_raw_spin_unlock_irq(PLT)
	mvn	r0, #4
	b	.L7706
.L7717:
	.align	2
.L7716:
	.word	.LC411-(.LPIC1779+8)
	.word	.LANCHOR3-(.LPIC1777+8)
	.word	.LC409-(.LPIC1776+8)
	.word	.LC410-(.LPIC1778+8)
	.fnend
	.size	do_read, .-do_read
	.align	2
	.type	android_usb_unbind, %function
android_usb_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L7743
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC1780:
	add	r2, pc, r2
	ldr	r3, [r2, #16]!
	cmp	r3, r2
	sub	r4, r3, #520
	bne	.L7722
	b	.L7719
.L7741:
	ldr	r3, [r4, #520]
	cmp	r3, r2
	sub	r4, r3, #520
	beq	.L7719
.L7722:
	ldr	r3, [r3, #-512]
	cmp	r0, r3
	bne	.L7741
.L7719:
	ldr	r1, .L7743+4
	ldr	r0, .L7743+8
	ldr	r7, .L7743+12
.LPIC1784:
	add	r1, pc, r1
	add	r1, r1, #3424
.LPIC1783:
	add	r0, pc, r0
	add	r1, r1, #12
.LPIC1788:
	add	r7, pc, r7
	bl	printk(PLT)
	ldr	r3, .L7743+16
	mov	r1, #0
	mov	ip, #48
	ldr	r2, .L7743+20
	add	r0, r4, #180
.LPIC1785:
	add	r3, pc, r3
.LPIC1787:
	add	r2, pc, r2
	strb	r1, [r3, #-928]
	strb	r1, [r3, #-1184]
	strb	ip, [r2, #28]
	bl	cancel_work_sync(PLT)
	ldr	r6, [r4, #4]
	sub	r6, r6, #4
.L7723:
	ldr	r5, [r6, #4]!
	cmp	r5, #0
	beq	.L7742
.L7728:
	ldr	r3, [r5, #8]
	cmp	r3, #0
	beq	.L7723
	ldr	r1, [r3, #288]
	ldr	r0, [r7, #3552]
	bl	device_destroy(PLT)
	ldr	r0, [r5, #12]
	bl	kfree(PLT)
	ldr	r3, [r5, #28]
	cmp	r3, #0
	beq	.L7725
	mov	r0, r5
	blx	r3
.L7725:
	ldr	r4, [r5, #16]
	cmp	r4, #0
	beq	.L7723
	ldr	r1, [r4]
	add	r4, r4, #4
	cmp	r1, #0
	beq	.L7723
.L7727:
	ldr	r0, [r5, #8]
	bl	device_remove_file(PLT)
	ldr	r1, [r4], #4
	cmp	r1, #0
	bne	.L7727
	ldr	r5, [r6, #4]!
	cmp	r5, #0
	bne	.L7728
.L7742:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L7744:
	.align	2
.L7743:
	.word	.LANCHOR1-(.LPIC1780+8)
	.word	.LANCHOR3-(.LPIC1784+8)
	.word	.LC396-(.LPIC1783+8)
	.word	.LANCHOR4-(.LPIC1788+8)
	.word	.LANCHOR4-(.LPIC1785+8)
	.word	.LANCHOR1-(.LPIC1787+8)
	.fnend
	.size	android_usb_unbind, .-android_usb_unbind
	.align	2
	.type	ffs_func_set_alt, %function
ffs_func_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmn	r2, #1
	mov	r3, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r9, [r0, #-28]
	str	r2, [sp, #4]
	str	r0, [sp]
	beq	.L7746
	ldrh	r0, [r9, #178]
	ldr	lr, [r3, #-4]
	cmp	r0, #0
	beq	.L7770
	uxtb	r1, r1
	mov	r2, lr
.L7749:
	mov	ip, r2
	ldrh	r3, [r2], #2
	sxth	r3, r3
	cmp	r3, #0
	blt	.L7748
	cmp	r3, r1
	beq	.L7794
.L7748:
	subs	r0, r0, #1
	bne	.L7749
.L7770:
	mvn	r0, #32
.L7779:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7794:
	rsb	r0, lr, ip
	movs	r0, r0, asr #1
	bmi	.L7779
.L7746:
	ldr	r8, [r9, #132]
	cmp	r8, #0
	beq	.L7750
	ldr	r3, [r8, #8]
	mov	r7, #1
	mov	r5, #0
	ldr	r4, [r8, #12]
	add	r0, r3, #24
	ldr	r6, [r3, #208]
	ldrh	r10, [r3, #180]
	add	r4, r4, #28
	bl	_raw_spin_lock_irqsave(PLT)
	mov	fp, r0
.L7752:
	str	r7, [r6, #32]
	ldr	r3, [r4, #-28]
	subs	r0, r3, #0
	beq	.L7751
	ldr	r3, [r3, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #-28]
	str	r5, [r3]
.L7751:
	subs	r10, r10, #1
	str	r5, [r6, #40]
	add	r4, r4, #28
	add	r6, r6, #56
	bne	.L7752
	ldr	r0, [r8, #8]
	mov	r1, fp
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore(PLT)
	str	r10, [r9, #132]
.L7750:
	ldr	r6, [r9, #92]
	cmp	r6, #2
	bne	.L7771
	ldr	r3, [sp, #4]
	cmn	r3, #1
	beq	.L7795
	ldr	r2, [sp]
	sub	r3, r2, #36
	str	r3, [r9, #132]
	ldr	r10, [r2, #-28]
	ldr	r5, [r2, #-24]
	ldr	r6, [r10, #208]
	add	r0, r10, #24
	ldrh	r8, [r10, #180]
	add	r5, r5, #28
	bl	_raw_spin_lock_irqsave(PLT)
	str	r0, [sp, #4]
	add	r6, r6, #20
	b	.L7761
.L7797:
	str	fp, [r6, #20]
	ldrb	ip, [r7, #2]	@ zero_extendqisi2
	add	r6, r6, #56
	mov	ip, ip, lsr #7
	strb	ip, [r6, #-23]
	ldrb	ip, [r7, #3]	@ zero_extendqisi2
	and	ip, ip, r1
	rsb	ip, r2, ip
	clz	ip, ip
	mov	ip, ip, lsr #5
	strb	ip, [r6, #-22]
	bl	__wake_up(PLT)
	subs	r8, r8, #1
	beq	.L7796
.L7761:
	ldr	r3, [r10]
	sub	fp, r5, #28
	ldr	r3, [r3, #16]
	cmp	r3, #5
	subne	r3, r3, #3
	clzne	r3, r3
	moveq	r3, #2
	movne	r3, r3, lsr #5
	add	r3, r3, #2
	ldr	r7, [fp, r3, asl #2]
	cmp	r7, #0
	beq	.L7759
	ldr	r3, [r5, #-28]
	add	r5, r5, #28
	str	fp, [r3]
	ldr	r3, [r5, #-56]
	str	r7, [r3, #28]
	ldr	r0, [r5, #-56]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r4, r0, #0
	mov	r1, #3
	mov	r2, #1
	mov	r0, r6
	mov	r3, r4
	beq	.L7797
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r4, #0
	movlt	r0, r4
	blt	.L7779
.L7768:
	add	r5, r9, #116
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r9, #96]
	mov	r6, r0
	add	lr, r9, #100
	ldrh	ip, [r9, #104]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r9, #96]
	cmp	ip, #0
	beq	.L7775
	add	ip, lr, ip
	mov	r3, lr
	mov	r1, lr
.L7766:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	sub	r0, r2, #5
	cmp	r0, #1
	bhi	.L7769
	strb	r2, [r1]
	add	r1, r1, #1
.L7769:
	cmp	r3, ip
	bne	.L7766
	rsb	r1, lr, r1
	add	r2, r1, #1
	uxth	r3, r1
	uxth	r2, r2
.L7764:
	add	r3, r9, r3
	strh	r2, [r9, #104]	@ movhi
	mov	ip, #2
	mov	r0, r5
	mov	r1, #3
	mov	r2, #1
	strb	ip, [r3, #100]
	bl	__wake_up_locked(PLT)
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
	b	.L7779
.L7795:
	mov	r3, #0
	add	r4, r9, #116
	mov	r0, r4
	str	r3, [r9, #132]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r9, #96]
	mov	r5, r0
	add	lr, r9, #100
	ldrh	r1, [r9, #104]
	cmp	r3, #1
	streq	r6, [r9, #96]
	cmp	r1, #0
	beq	.L7772
	add	r1, lr, r1
	mov	r3, lr
	mov	r2, lr
.L7757:
	ldrb	r0, [r3], #1	@ zero_extendqisi2
	sub	ip, r0, #5
	cmp	ip, #1
	bhi	.L7767
	strb	r0, [r2]
	add	r2, r2, #1
.L7767:
	cmp	r3, r1
	bne	.L7757
	rsb	r2, lr, r2
	add	r3, r2, #1
	uxth	r2, r2
	uxth	r3, r3
.L7755:
	mov	ip, #3
	strh	r3, [r9, #104]	@ movhi
	add	r2, r9, r2
	mov	r1, ip
	mov	r0, r4
	strb	ip, [r2, #100]
	mov	r2, #1
	bl	__wake_up_locked(PLT)
	mov	r0, r4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L7779
.L7759:
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #21
	b	.L7779
.L7796:
	ldr	r3, [sp]
	ldr	r1, [sp, #4]
	ldr	r0, [r3, #-28]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L7768
.L7771:
	mvn	r0, #18
	b	.L7779
.L7775:
	mov	r3, ip
	mov	r2, #1
	b	.L7764
.L7772:
	mov	r2, r1
	mov	r3, #1
	b	.L7755
	.fnend
	.size	ffs_func_set_alt, .-ffs_func_set_alt
	.align	2
	.type	ccid_function_disable, %function
ccid_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	str	lr, [sp, #28]
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	ldr	r0, [r0, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r5, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r4, [r5, #112]
	ldr	r6, [r5, #100]
	cmp	r4, #0
	beq	.L7799
	ldr	r0, [r4]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L7799:
	ldr	r3, [r5, #156]
	cmp	r3, #0
	beq	.L7813
.L7800:
	add	r9, r5, #192
	add	r6, r5, #92
.L7801:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #192]
	mov	r7, r0
	cmp	r4, r9
	mov	r0, r4
	sub	r8, r4, #36
	beq	.L7802
	bl	list_del(PLT)
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r8, #0
	beq	.L7804
	ldr	r7, [r5, #104]
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	mov	r1, r8
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7801
.L7802:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7804:
	mov	r4, #0
	add	r0, r5, #172
	mov	r3, r4
	mov	r1, #3
	str	r4, [r5, #200]
	mov	r2, #1
	str	r4, [r5, #96]
	bl	__wake_up(PLT)
	mov	r3, r4
	add	r0, r5, #160
	mov	r1, #3
	mov	r2, #1
	bl	__wake_up(PLT)
	ldrd	r6, [sp, #8]
	mov	r3, r4
	add	r0, r5, #128
	ldrd	r8, [sp, #16]
	mov	r1, #3
	mov	r2, #1
	ldrd	r4, [sp]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up(PLT)
.L7813:
	ldr	r4, [r5, #184]
	ldr	r6, [r5, #108]
	cmp	r4, #0
	beq	.L7800
	ldr	r0, [r4]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L7800
	.fnend
	.size	ccid_function_disable, .-ccid_function_disable
	.align	2
	.type	rmnet_smd_connect_work, %function
rmnet_smd_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L7837
	sub	r1, r0, #132
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr	r3, .L7837+4
	strd	r6, [sp, #8]
	mov	r2, r1
	strd	r8, [sp, #16]
	mov	r4, r0
	str	r10, [sp, #24]
.LPIC1789:
	add	ip, pc, ip
	str	lr, [sp, #28]
	.pad #24
	sub	sp, sp, #24
	ldr	r7, [r0, #-308]
.LPIC1790:
	add	r3, pc, r3
	ldr	r0, [ip, #792]
	bl	smd_open(PLT)
	subs	r2, r0, #0
	bne	.L7831
	ldr	r3, [r4, #-88]
	ands	r3, r3, #1
	bne	.L7818
	ldr	r2, .L7837+8
	mov	r1, sp
	str	r3, [sp, #4]
	bic	r1, r1, #8128
	add	r3, sp, #16
	bic	r1, r1, #63
	sub	r6, r4, #80
	ldr	r1, [r1, #12]
	add	r5, sp, #4
	str	r3, [sp, #16]
.LPIC1799:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L7820
.L7832:
	bl	schedule(PLT)
.L7820:
	mov	r0, r6
	mov	r1, r5
	mov	r2, #2
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #-88]
	tst	r3, #1
	beq	.L7832
	mov	r0, r6
	mov	r1, r5
	bl	finish_wait(PLT)
.L7818:
	ldr	r0, .L7837+12
	sub	r1, r4, #68
	ldr	r3, .L7837+16
	mov	r2, r1
.LPIC1794:
	add	r0, pc, r0
.LPIC1795:
	add	r3, pc, r3
	ldr	r0, [r0, #796]
	bl	smd_open(PLT)
	cmp	r0, #0
	bne	.L7833
	ldr	r3, [r4, #-24]
	ands	r3, r3, #1
	beq	.L7834
.L7822:
	mov	r3, #1
	sub	r6, r4, #228
	ldr	r10, [r4, #-308]
	mov	r0, r6
	sub	r9, r4, #244
	str	r3, [r4, #-224]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	b	.L7825
.L7827:
	bl	list_del(PLT)
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #-304]
	mov	r1, r8
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r8, #0
	mov	r7, r0
	bne	.L7835
.L7825:
	ldr	r5, [r4, #-244]
	cmp	r9, r5
	mov	r0, r5
	sub	r8, r5, #36
	bne	.L7827
.L7826:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
.L7814:
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7834:
	ldr	r2, .L7837+20
	mov	r1, sp
	str	r3, [sp, #4]
	bic	r1, r1, #8128
	add	r3, sp, #16
	bic	r1, r1, #63
	sub	r6, r4, #16
	ldr	r1, [r1, #12]
	add	r5, sp, #4
	str	r3, [sp, #16]
.LPIC1798:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L7824
.L7836:
	bl	schedule(PLT)
.L7824:
	mov	r0, r6
	mov	r1, r5
	mov	r2, #2
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #-24]
	tst	r3, #1
	beq	.L7836
	mov	r0, r6
	mov	r1, r5
	bl	finish_wait(PLT)
	b	.L7822
.L7831:
	ldr	r0, [r7]
	ldr	r1, .L7837+24
	add	r0, r0, #32
.LPIC1791:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldrb	r3, [r4, #-136]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L7814
	sub	r0, r4, #216
	bl	platform_driver_register(PLT)
	subs	r3, r0, #0
	moveq	r3, #1
	streqb	r3, [r4, #-136]
	beq	.L7814
	ldr	r0, [r7]
	ldr	r1, .L7837+28
	ldr	r2, [r4, #-196]
	add	r0, r0, #32
.LPIC1792:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L7814
.L7835:
	ldr	r0, [r10]
	mov	r2, r8
	ldr	r1, .L7837+32
	add	r0, r0, #32
.LPIC1797:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r5
	ldr	r1, [r4, #-240]
	mov	r2, r9
	bl	__list_add(PLT)
	b	.L7826
.L7833:
	ldr	r0, [r7]
	ldr	r1, .L7837+36
	add	r0, r0, #32
.LPIC1796:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldr	r0, [r4, #-132]
	bl	smd_close(PLT)
	b	.L7814
.L7838:
	.align	2
.L7837:
	.word	.LANCHOR0-(.LPIC1789+8)
	.word	rmnet_smd_event_notify-(.LPIC1790+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1799+8))
	.word	.LANCHOR0-(.LPIC1794+8)
	.word	rmnet_smd_event_notify-(.LPIC1795+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1798+8))
	.word	.LC434-(.LPIC1791+8)
	.word	.LC435-(.LPIC1792+8)
	.word	.LC126-(.LPIC1797+8)
	.word	.LC421-(.LPIC1796+8)
	.fnend
	.size	rmnet_smd_connect_work, .-rmnet_smd_connect_work
	.align	2
	.type	fsg_common_release, %function
fsg_common_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #-224]
	cmp	r3, #7
	beq	.L7840
	sub	r4, r0, #292
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r7, #-224]
	mov	r5, r0
	cmp	r3, #6
	bgt	.L7842
	ldr	r2, [r7, #-168]
	mov	r1, #6
	ldr	r3, [r7, #-280]
	str	r1, [r7, #-224]
	cmp	r2, #0
	str	r3, [r7, #-220]
	beq	.L7842
	mov	r0, #10
	mov	r1, #2
	bl	send_sig_info(PLT)
.L7842:
	mov	r0, r4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	sub	r0, r7, #184
	bl	wait_for_completion(PLT)
.L7840:
	ldr	r4, [r7, #-236]
	cmp	r4, #0
	beq	.L7844
	ldr	r5, [r7, #-244]
	cmp	r5, #0
	beq	.L7850
	ldr	r6, .L7867
	add	r4, r4, #48
.LPIC1800:
	add	r6, pc, r6
	add	r9, r6, #800
	add	r8, r6, #816
.L7847:
	mov	r0, r4
	mov	r1, r9
	bl	device_remove_file(PLT)
	mov	r0, r4
	mov	r1, r8
	bl	device_remove_file(PLT)
	mov	r0, r4
	add	r1, r6, #832
	bl	device_remove_file(PLT)
	mov	r0, r4
	add	r1, r6, #848
	bl	device_remove_file(PLT)
	ldr	r3, [r4, #-48]
	subs	r0, r3, #0
	beq	.L7846
	bl	fput(PLT)
	mov	r3, #0
	str	r3, [r4, #-48]
.L7846:
	mov	r0, r4
	add	r4, r4, #392
	bl	device_unregister(PLT)
	subs	r5, r5, #1
	bne	.L7847
	ldr	r0, [r7, #-236]
.L7845:
	bl	kfree(PLT)
.L7844:
	ldr	r5, [r7, #-268]
	add	r4, r5, #32
	add	r5, r5, #160
.L7848:
	ldr	r0, [r4, #-32]
	add	r4, r4, #32
	bl	kfree(PLT)
	cmp	r4, r5
	bne	.L7848
	ldr	r0, [r7, #-268]
	bl	kfree(PLT)
	ldrb	r3, [r7, #-192]	@ zero_extendqisi2
	tst	r3, #2
	bne	.L7866
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L7866:
	sub	r0, r7, #336
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree(PLT)
.L7850:
	mov	r0, r4
	b	.L7845
.L7868:
	.align	2
.L7867:
	.word	.LANCHOR0-(.LPIC1800+8)
	.fnend
	.size	fsg_common_release, .-fsg_common_release
	.align	2
	.type	mass_storage_function_init, %function
mass_storage_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	ldr	r7, .L8003
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
.LPIC1877:
	ldr	r7, [pc, r7]		@ tls_load_dot_plus_eight
	ldr	r0, [r7, #28]
	cmp	r0, #0
	beq	.L7922
	movw	r1, #32976
	mov	r2, #100
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L7990
.L7870:
	mov	r2, #1
	mov	r1, #0
	ldr	r3, .L8003+4
	str	r2, [r4]
	strb	r2, [r4, #10]
	strb	r2, [r4, #9]
.LPIC1826:
	add	r3, pc, r3
	strb	r1, [r4, #8]
	ldr	r0, [r7, #36]
	ldr	fp, [r8]
	str	r3, [sp, #36]
	cmp	r0, r1
	beq	.L7924
	movw	r1, #32976
	mov	r2, #340
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L7875
.L7872:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	mov	r0, #128
	movw	r1, #32976
	orr	r3, r3, #2
	strb	r3, [r5, #144]
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r5, #68]
	beq	.L7991
	ldr	r3, [r4, #76]
	mov	r0, #392
	movw	r1, #32976
	str	r3, [r5, #172]
	ldr	r3, [r4, #80]
	str	fp, [r5]
	str	r3, [r5, #176]
	ldr	r3, [fp, #4]
	str	r3, [r5, #48]
	ldr	r3, [r8, #4]
	str	r8, [r5, #4]
	str	r3, [r5, #52]
	bl	__kmalloc(PLT)
	subs	r8, r0, #0
	beq	.L7888
	ldr	r2, .L8003+8
	add	r10, r5, #28
	str	r8, [r5, #100]
	ldr	r1, .L8003+12
	mov	r0, r10
	mov	r9, r8
.LPIC1828:
	add	r2, pc, r2
	add	r2, r2, #3552
.LPIC1827:
	add	r1, pc, r1
	add	r2, r2, #4
	bl	__init_rwsem(PLT)
	ldrb	r3, [r4, #10]	@ zero_extendqisi2
	add	r0, fp, #32
	mov	r1, r10
	ldrb	r2, [r8, #24]	@ zero_extendqisi2
	ldr	ip, .L8003+16
	adds	r3, r3, #0
	movne	r3, #1
	bfi	r2, r3, #3, #1
.LPIC1829:
	add	ip, pc, ip
	strb	r2, [r8, #24]
	ldrb	r2, [r4, #8]	@ zero_extendqisi2
	ldrb	r3, [r8, #24]	@ zero_extendqisi2
	and	r2, r2, #1
	bfi	r3, r2, #1, #1
	bfi	r3, r2, #0, #1
	mov	r2, r3
	strb	r3, [r8, #24]
	ldrb	r3, [r4, #9]	@ zero_extendqisi2
	bfi	r2, r3, #2, #1
	mov	r3, r2
	strb	r2, [r8, #24]
	ldrb	r2, [r4, #11]	@ zero_extendqisi2
	str	ip, [r8, #380]
	bfi	r3, r2, #7, #1
	strb	r3, [r8, #24]
	str	r0, [r9, #48]!
	mov	r0, r9
	bl	dev_set_drvdata(PLT)
	ldr	r1, [r4, #68]
	cmp	r1, #0
	beq	.L7992
.L7878:
	mov	r2, #0
	mov	r0, r9
	bl	dev_set_name(PLT)
	mov	r0, r9
	bl	device_register(PLT)
	cmp	r0, #0
	bne	.L7993
	ldr	r10, .L8003+20
	mov	r0, r9
.LPIC1831:
	add	r10, pc, r10
	add	r1, r10, #832
	bl	device_create_file(PLT)
	cmp	r0, #0
	bne	.L7880
	mov	r0, r9
	add	r1, r10, #848
	bl	device_create_file(PLT)
	cmp	r0, #0
	bne	.L7880
	mov	r0, r9
	add	r1, r10, #816
	bl	device_create_file(PLT)
	cmp	r0, #0
	bne	.L7880
	mov	r0, r9
	add	r1, r10, #800
	bl	device_create_file(PLT)
	cmp	r0, #0
	bne	.L7880
	ldr	r1, [r4, #4]
	cmp	r1, #0
	beq	.L7885
	mov	r0, r8
	bl	fsg_lun_open(PLT)
	cmp	r0, #0
	bne	.L7880
.L7886:
	ldr	r8, [r5, #68]
	mov	r3, #1
	str	r3, [r5, #92]
	add	r10, r8, #96
	mov	r9, r8
.L7887:
	mov	r0, #16384
	mov	r1, #208
	mov	r2, #2
	bl	kmalloc_order_trace(PLT)
	cmp	r0, #0
	str	r0, [r9]
	beq	.L7888
	cmp	r9, r10
	add	r9, r9, #32
	beq	.L7994
	str	r9, [r9, #-24]
	b	.L7887
.L7885:
	ldrb	r2, [r8, #24]	@ zero_extendqisi2
	ands	r2, r2, #12
	bne	.L7886
	ldr	r0, [r5]
	mvn	r7, #21
	ldr	r1, .L8003+24
	mov	r10, r7
	add	r0, r0, #32
.LPIC1835:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L7882
.L7992:
	ldr	r1, .L8003+28
.LPIC1804:
	add	r1, pc, r1
	b	.L7878
.L7880:
	mov	r10, r0
	mov	r7, r0
.L7882:
	mov	r3, #1
	str	r3, [r5, #92]
.L7877:
	mov	r3, #7
	add	r0, r5, #336
	str	r3, [r5, #112]
	bl	fsg_common_release(PLT)
.L7901:
	cmn	r7, #4096
	bhi	.L7914
	ldr	r3, [r4]
	cmp	r3, #0
	movne	r5, #0
	addne	r7, sp, #36
	movne	r9, r5
	bne	.L7915
	b	.L7918
.L7916:
	ldr	r3, [r4]
	add	r9, r9, #1
	cmp	r9, r3
	bcs	.L7918
.L7915:
	ldr	r1, [r10, #100]
	ldr	r0, [r6, #8]
	ldr	r2, [r7, r9, asl #2]
	add	r1, r1, r5
	add	r5, r5, #392
	add	r1, r1, #56
	add	r0, r0, #8
	bl	sysfs_create_link(PLT)
	cmp	r0, #0
	beq	.L7916
	cmp	r9, #0
	mov	r8, r0
	addne	r7, r7, r9, asl #2
	beq	.L7920
.L7919:
	ldr	r0, [r6, #8]
	sub	r9, r9, #1
	ldr	r1, [r7, #-4]!
	add	r0, r0, #8
	bl	sysfs_remove_link(PLT)
	cmp	r9, #0
	bne	.L7919
.L7920:
	add	r0, r10, #336
	bl	fsg_common_release(PLT)
.L7987:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r8
.L7984:
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L7918:
	str	r10, [r4, #96]
	mov	r0, #0
	str	r4, [r6, #4]
	b	.L7984
.L7922:
	mov	r4, #16
	b	.L7870
.L7924:
	mov	r5, #16
	b	.L7872
.L7991:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L7875
	mov	r0, r5
	bl	kfree(PLT)
.L7875:
	mvn	r8, #11
	b	.L7987
.L7994:
	ldr	r2, [r5, #68]
	movw	r3, #65535
	str	r2, [r8, #104]
	ldrh	r2, [r4, #92]
	cmp	r2, r3
	beq	.L7995
.L7891:
	ldr	r3, [r4, #84]
	add	r0, r5, #180
	cmp	r3, #0
	beq	.L7996
.L7894:
	ldr	r1, [r4, #88]
	cmp	r1, #0
	beq	.L7997
.L7895:
	stmia	sp, {r1, r2}
	ldr	r2, .L8003+32
	mov	r1, #29
.LPIC1863:
	add	r2, pc, r2
	bl	snprintf(PLT)
	ldr	r2, .L8003+36
	mov	r1, #0
	ldr	r3, .L8003+40
	strb	r1, [r5, #234]
.LPIC1864:
	add	r2, pc, r2
.LPIC1865:
	add	r3, pc, r3
	ldrd	r0, [r2]
	ldrd	r8, [r3]
	ldrd	r2, [r3, #8]
	str	r0, [r5, #209]	@ unaligned
	str	r1, [r5, #213]	@ unaligned
	str	r8, [r5, #218]	@ unaligned
	str	r9, [r5, #222]	@ unaligned
	str	r2, [r5, #226]	@ unaligned
	str	r3, [r5, #230]	@ unaligned
	ldrb	r0, [r4, #94]	@ zero_extendqisi2
	cmp	r0, #0
	bne	.L7998
.L7896:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	mov	r1, #0
	mov	r2, #1
	str	r1, [r5, #44]
	str	r2, [r5, #336]
	bfi	r3, r0, #0, #1
	strb	r3, [r5, #144]
	ldr	r3, [r4, #72]
	cmp	r3, r1
	beq	.L7999
.L7897:
	ldr	r0, .L8003+44
	mov	r1, r5
	mvn	r2, #0
.LPIC1867:
	add	r0, pc, r0
	bl	kthread_create_on_node(PLT)
	cmn	r0, #4096
	str	r0, [r5, #168]
	movhi	r10, r0
	movhi	r7, r10
	bhi	.L7877
	ldr	r8, .L8003+48
	mov	r3, #0
	add	r0, r5, #156
	ldr	r1, .L8003+52
	str	r3, [r5, #152]
.LPIC1869:
	add	r8, pc, r8
	add	r8, r8, #3552
.LPIC1868:
	add	r1, pc, r1
	add	r8, r8, #4
	mov	r2, r8
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L8003+56
	mov	r2, r8
	add	r0, r5, #16
.LPIC1870:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r0, [r5]
	ldr	r1, .L8003+60
	add	r0, r0, #32
.LPIC1872:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	ldr	r0, [r5]
	ldr	r1, .L8003+64
	ldr	r2, [r5, #92]
	add	r0, r0, #32
.LPIC1873:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	ldr	r0, [r7, #48]
	cmp	r0, #0
	beq	.L7899
	mov	r1, #208
	mov	r2, #4096
	bl	kmem_cache_alloc_trace(PLT)
	ldr	r8, [r5, #92]
	mov	r9, r0
	ldr	r3, [r5, #100]
	cmp	r8, #0
	ble	.L7908
	cmp	r0, #0
	beq	.L8000
.L7902:
	ldr	r2, .L8003+68
	add	fp, r3, #48
	str	r4, [sp, #20]
	ldr	r1, .L8003+72
	mov	r4, fp
	str	r6, [sp, #28]
	ldr	r3, .L8003+76
	mov	r7, #0
	str	r5, [sp, #24]
.LPIC1817:
	add	r2, pc, r2
.LPIC1821:
	add	r1, pc, r1
	str	r2, [sp, #16]
	ldr	r2, .L8003+80
.LPIC1818:
	add	r3, pc, r3
	str	r1, [sp, #12]
	ldr	r1, .L8003+84
	mov	r10, r3
.LPIC1819:
	add	r2, pc, r2
.LPIC1822:
	add	r1, pc, r1
	str	r2, [sp, #8]
	ldr	r2, .L8003+88
	mov	fp, r1
.LPIC1820:
	add	r2, pc, r2
	mov	r6, r2
	b	.L7913
.L8002:
	ldr	r1, .L8003+92
.LPIC1824:
	add	r1, pc, r1
.L7912:
	str	r1, [sp]
	ldr	r1, .L8003+96
	add	r7, r7, #1
	str	r0, [sp, #4]
	mov	r0, r4
	add	r4, r4, #392
.LPIC1875:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	cmp	r8, r7
	beq	.L8001
.L7913:
	ldr	r0, [r4, #-48]
	sub	r5, r4, #48
	cmp	r0, #0
	beq	.L7961
	mov	r2, #4096
	add	r0, r0, #8
	mov	r1, r9
	bl	d_path(PLT)
	mov	r2, #61440
	movt	r2, 65535
	cmp	r0, r2
	movhi	r0, r10
.L7909:
	ldrb	r1, [r5, #24]	@ zero_extendqisi2
	tst	r1, #4
	movne	r2, r6
	ldreq	r2, [sp, #8]
	tst	r1, #2
	movne	r3, fp
	ldreq	r3, [sp, #12]
	tst	r1, #8
	beq	.L8002
	ldr	r1, .L8003+100
.LPIC1823:
	add	r1, pc, r1
	b	.L7912
.L7993:
	ldr	ip, [r5]
	mov	r3, r0
	mov	r2, #0
	ldr	r1, .L8003+104
	mov	r10, r0
	mov	r7, r0
	add	r0, ip, #32
.LPIC1830:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	mov	r3, #0
	mov	r0, r9
	str	r3, [r5, #92]
	bl	put_device(PLT)
	b	.L7877
.L8000:
	ldr	r1, .L8003+108
	add	r7, r3, #48
	strd	r4, [sp, #12]
	ldr	r3, .L8003+112
	str	r6, [sp, #24]
	ldr	r2, .L8003+116
	str	r9, [sp, #20]
	ldr	r0, .L8003+120
.LPIC1812:
	add	r1, pc, r1
	ldr	fp, .L8003+124
.LPIC1809:
	add	r3, pc, r3
	str	r1, [sp, #8]
	ldr	r1, .L8003+128
.LPIC1811:
	add	r2, pc, r2
.LPIC1814:
	add	r0, pc, r0
	mov	r4, r3
.LPIC1810:
	add	fp, pc, fp
	mov	r5, r2
	mov	r10, r0
.LPIC1813:
	add	r1, pc, r1
	mov	r6, r1
.L7907:
	ldr	r0, [r7, #-48]
	mov	r2, r5
	mov	r3, r6
	ldrb	r1, [r7, #-24]	@ zero_extendqisi2
	cmp	r0, #0
	ldr	r0, .L8003+132
	movne	lr, fp
	moveq	lr, r4
	tst	r1, #4
	ldrne	r2, [sp, #8]
	tst	r1, #2
	movne	r3, r10
	tst	r1, #8
.LPIC1816:
	add	r0, pc, r0
	bne	.L7906
	ldr	r0, .L8003+136
.LPIC1815:
	add	r0, pc, r0
.L7906:
	ldr	r1, .L8003+140
	stmia	sp, {r0, lr}
	add	r9, r9, #1
	mov	r0, r7
	add	r7, r7, #392
.LPIC1874:
	add	r1, pc, r1
	bl	_dev_info(PLT)
	cmp	r8, r9
	bne	.L7907
	ldrd	r4, [sp, #12]
	ldr	r9, [sp, #20]
	ldr	r6, [sp, #24]
.L7908:
	mov	r0, r9
	mov	r7, r5
	bl	kfree(PLT)
	ldr	r0, [r5, #168]
	mov	r10, r5
	bl	wake_up_process(PLT)
	b	.L7901
.L7998:
	ldr	r3, [r5]
	ldr	r0, .L8003+144
	ldr	r1, [r3, #28]
.LPIC1866:
	add	r0, pc, r0
	bl	strcmp(PLT)
	adds	r0, r0, #0
	movne	r0, #1
	b	.L7896
.L7888:
	mvn	r7, #11
	mov	r10, r7
	b	.L7877
.L7899:
	ldr	r8, [r5, #92]
	mov	r9, #16
	ldr	r3, [r5, #100]
	cmp	r8, #0
	bgt	.L7902
	b	.L7908
.L7995:
	ldr	r8, [fp, #28]
	ldr	r0, .L8003+148
	mov	r1, r8
.LPIC1836:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #769
	beq	.L7891
	ldr	r0, .L8003+152
	mov	r1, r8
.LPIC1837:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #770
	beq	.L7891
	ldr	r0, .L8003+156
	mov	r1, r8
.LPIC1838:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #771
	beq	.L7891
	ldr	r0, .L8003+160
	mov	r1, r8
.LPIC1839:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #774
	beq	.L7891
	ldr	r0, .L8003+164
	mov	r1, r8
.LPIC1840:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #776
	beq	.L7891
	ldr	r0, .L8003+168
	mov	r1, r8
.LPIC1841:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #785
	beq	.L7891
	ldr	r0, .L8003+172
	mov	r1, r8
.LPIC1842:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #786
	beq	.L7891
	ldr	r0, .L8003+176
	mov	r1, r8
.LPIC1843:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #787
	beq	.L7891
	ldr	r0, .L8003+180
	mov	r1, r8
.LPIC1844:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #788
	beq	.L7891
	ldr	r0, .L8003+184
	mov	r1, r8
.LPIC1845:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #790
	beq	.L7891
	ldr	r0, .L8003+188
	mov	r1, r8
.LPIC1846:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #792
	beq	.L7891
	ldr	r0, .L8003+192
	mov	r1, r8
.LPIC1847:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #793
	beq	.L7891
	ldr	r0, .L8003+196
	mov	r1, r8
.LPIC1848:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #800
	beq	.L7891
	ldr	r0, .L8003+200
	mov	r1, r8
.LPIC1849:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #801
	beq	.L7891
	ldr	r0, .L8003+204
	mov	r1, r8
.LPIC1850:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #802
	beq	.L7891
	ldr	r0, .L8003+208
	mov	r1, r8
.LPIC1851:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #803
	beq	.L7891
	ldr	r0, .L8003+212
	mov	r1, r8
.LPIC1852:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #804
	beq	.L7891
	ldr	r0, .L8003+216
	mov	r1, r8
.LPIC1853:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #805
	beq	.L7891
	ldr	r0, .L8003+220
	mov	r1, r8
.LPIC1854:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #806
	beq	.L7891
	ldr	r0, .L8003+224
	mov	r1, r8
.LPIC1855:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #807
	beq	.L7891
	ldr	r0, .L8003+228
	mov	r1, r8
.LPIC1856:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #808
	beq	.L7891
	ldr	r0, .L8003+232
	mov	r1, r8
.LPIC1857:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #809
	beq	.L7891
	ldr	r0, .L8003+236
	mov	r1, r8
.LPIC1858:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #816
	beq	.L7891
	ldr	r0, .L8003+240
	mov	r1, r8
.LPIC1859:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #817
	beq	.L7891
	ldr	r0, .L8003+244
	mov	r1, r8
.LPIC1860:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #818
	beq	.L7891
	ldr	r0, .L8003+248
	mov	r1, r8
.LPIC1861:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movweq	r2, #819
	beq	.L7891
	ldr	r0, .L8003+252
	mov	r1, r8
.LPIC1862:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	moveq	r2, #820
	beq	.L7891
	ldr	r0, [r5]
	mov	r2, r8
	ldr	r1, .L8003+256
	add	r0, r0, #32
.LPIC1876:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	movw	r2, #921
	b	.L7891
.L7961:
	ldr	r0, [sp, #16]
	b	.L7909
.L8001:
	ldrd	r4, [sp, #20]
	ldr	r6, [sp, #28]
	b	.L7908
.L7990:
	mvn	r0, #11
	b	.L7984
.L7999:
	ldr	r3, .L8003+260
.LPIC1808:
	add	r3, pc, r3
	b	.L7897
.L7997:
	ldr	r1, [r5, #100]
	ldrb	r1, [r1, #24]	@ zero_extendqisi2
	tst	r1, #8
	bne	.L7954
	ldr	r1, .L8003+264
.LPIC1806:
	add	r1, pc, r1
	b	.L7895
.L7996:
	ldr	r3, .L8003+268
.LPIC1805:
	add	r3, pc, r3
	b	.L7894
.L7954:
	ldr	r1, .L8003+272
.LPIC1807:
	add	r1, pc, r1
	b	.L7895
.L7914:
	mov	r8, r10
	b	.L7987
.L8004:
	.align	2
.L8003:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1877+8))
	.word	.LC446-(.LPIC1826+8)
	.word	.LANCHOR4-(.LPIC1828+8)
	.word	.LC447-(.LPIC1827+8)
	.word	fsg_lun_release-(.LPIC1829+8)
	.word	.LANCHOR0-(.LPIC1831+8)
	.word	.LC449-(.LPIC1835+8)
	.word	.LC436-(.LPIC1804+8)
	.word	.LC475-(.LPIC1863+8)
	.word	.LC476-(.LPIC1864+8)
	.word	.LC439-(.LPIC1865+8)
	.word	fsg_main_thread-(.LPIC1867+8)
	.word	.LANCHOR4-(.LPIC1869+8)
	.word	.LC477-(.LPIC1868+8)
	.word	.LC478-(.LPIC1870+8)
	.word	.LC479-(.LPIC1872+8)
	.word	.LC480-(.LPIC1873+8)
	.word	.LC441-(.LPIC1817+8)
	.word	.LC342-(.LPIC1821+8)
	.word	.LC442-(.LPIC1818+8)
	.word	.LC342-(.LPIC1819+8)
	.word	.LC444-(.LPIC1822+8)
	.word	.LC443-(.LPIC1820+8)
	.word	.LC342-(.LPIC1824+8)
	.word	.LC481-(.LPIC1875+8)
	.word	.LC445-(.LPIC1823+8)
	.word	.LC448-(.LPIC1830+8)
	.word	.LC443-(.LPIC1812+8)
	.word	.LC441-(.LPIC1809+8)
	.word	.LC342-(.LPIC1811+8)
	.word	.LC444-(.LPIC1814+8)
	.word	.LC442-(.LPIC1810+8)
	.word	.LC342-(.LPIC1813+8)
	.word	.LC445-(.LPIC1816+8)
	.word	.LC342-(.LPIC1815+8)
	.word	.LC481-(.LPIC1874+8)
	.word	.LC456-(.LPIC1866+8)
	.word	.LC450-(.LPIC1836+8)
	.word	.LC451-(.LPIC1837+8)
	.word	.LC309-(.LPIC1838+8)
	.word	.LC452-(.LPIC1839+8)
	.word	.LC453-(.LPIC1840+8)
	.word	.LC454-(.LPIC1841+8)
	.word	.LC455-(.LPIC1842+8)
	.word	.LC456-(.LPIC1843+8)
	.word	.LC457-(.LPIC1844+8)
	.word	.LC458-(.LPIC1845+8)
	.word	.LC459-(.LPIC1846+8)
	.word	.LC460-(.LPIC1847+8)
	.word	.LC461-(.LPIC1848+8)
	.word	.LC462-(.LPIC1849+8)
	.word	.LC463-(.LPIC1850+8)
	.word	.LC464-(.LPIC1851+8)
	.word	.LC465-(.LPIC1852+8)
	.word	.LC466-(.LPIC1853+8)
	.word	.LC467-(.LPIC1854+8)
	.word	.LC468-(.LPIC1855+8)
	.word	.LC469-(.LPIC1856+8)
	.word	.LC470-(.LPIC1857+8)
	.word	.LC471-(.LPIC1858+8)
	.word	.LC472-(.LPIC1859+8)
	.word	.LC367-(.LPIC1860+8)
	.word	.LC473-(.LPIC1861+8)
	.word	.LC474-(.LPIC1862+8)
	.word	.LC482-(.LPIC1876+8)
	.word	.LC440-(.LPIC1808+8)
	.word	.LC438-(.LPIC1806+8)
	.word	.LC437-(.LPIC1805+8)
	.word	.LC439-(.LPIC1807+8)
	.fnend
	.size	mass_storage_function_init, .-mass_storage_function_init
	.align	2
	.type	accessory_function_ctrlrequest, %function
accessory_function_ctrlrequest:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	ldr	r3, .L8094
	strd	r6, [sp, #8]
	ldr	r6, .L8094+4
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldrb	r1, [r2]	@ zero_extendqisi2
.LPIC1878:
	add	r3, pc, r3
	.pad #4
	sub	sp, sp, #4
	ldrb	r0, [r2, #1]	@ zero_extendqisi2
.LPIC1879:
	add	r6, pc, r6
	ldrh	r8, [r2, #4]	@ unaligned
	ldrh	r7, [r2, #2]	@ unaligned
	cmp	r1, #64
	ldrh	r9, [r2, #6]	@ unaligned
	ldr	r4, [r3, #2496]
	beq	.L8085
	cmp	r1, #192
	cmpeq	r0, #51
	beq	.L8086
.L8058:
	mvn	r4, #94
.L8064:
	mov	r0, r4
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8085:
	cmp	r0, #53
	beq	.L8087
	cmp	r0, #52
	beq	.L8088
	cmp	r8, #0
	cmpeq	r0, #58
	bne	.L8010
	cmp	r9, #0
	streq	r7, [r4, #1648]
	beq	.L8008
.L8011:
	cmp	r0, #57
	bne	.L8058
	add	r8, r4, #88
	add	r4, r4, #1760
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r6, [r4, #8]
	add	r4, r4, #8
	mov	r1, r0
	cmp	r4, r6
	beq	.L8049
	ldr	r3, [r6, #16]
	cmp	r7, r3
	bne	.L8052
	b	.L8050
.L8054:
	ldr	r0, [r6, #16]
	cmp	r7, r0
	beq	.L8050
.L8052:
	ldr	r6, [r6]
	cmp	r4, r6
	bne	.L8054
.L8049:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
.L8084:
	mvn	r4, #21
	b	.L8064
.L8088:
	str	r8, [r4, #1640]
	ldr	r2, [r5]
	ldr	r3, .L8094+8
	ldr	r2, [r2, #4]
.LPIC1880:
	add	r3, pc, r3
	str	r4, [r2]
	ldr	r2, [r5, #4]
	str	r3, [r2, #28]
.L8008:
	ldr	r3, [r5, #4]
	mov	r2, #32
	ldrb	r6, [r3, #26]	@ zero_extendqisi2
	bfc	r6, #1, #1
	strb	r6, [r3, #26]
	ldr	r3, [r5, #4]
	str	r9, [r3, #4]
	ldr	r3, [r5]
	ldr	r1, [r5, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L8064
	ldr	r2, .L8094+12
	ldr	r0, [r5]
	ldr	r1, .L8094+16
.LPIC1884:
	add	r2, pc, r2
	add	r2, r2, #3456
	add	r0, r0, #32
.LPIC1883:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L8064
.L8010:
	cmp	r0, #54
	beq	.L8089
	cmp	r0, #55
	beq	.L8090
	cmp	r0, #56
	bne	.L8011
	add	r10, r4, #88
	add	r4, r4, #1776
	mov	r0, r10
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r6, [r4]
	mov	r1, r0
	cmp	r4, r6
	beq	.L8041
	ldr	r3, [r6, #16]
	cmp	r7, r3
	bne	.L8044
	b	.L8042
.L8047:
	ldr	r0, [r6, #16]
	cmp	r7, r0
	beq	.L8042
.L8044:
	ldr	r6, [r6]
	cmp	r4, r6
	bne	.L8047
.L8041:
	mov	r0, r10
	mvn	r4, #21
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L8064
.L8086:
	ldr	r3, [r5, #4]
	mov	r9, #2
	add	r0, r4, #101
	mov	r1, #256
	ldr	r3, [r3]
	strh	r9, [r3]	@ movhi
	bl	__memzero(PLT)
	add	r0, r4, #356
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero(PLT)
	add	r0, r4, #612
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero(PLT)
	add	r0, r4, #868
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero(PLT)
	add	r0, r4, #1120
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero(PLT)
	add	r0, r4, #1376
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero(PLT)
	mov	r3, #0
	str	r3, [r4, #1644]
	str	r3, [r4, #1648]
	b	.L8008
.L8087:
	mov	r3, #1
	mov	r0, #200
	mov	r9, #0
	str	r3, [r4, #1644]
	bl	msecs_to_jiffies(PLT)
	ldr	r1, .L8094+20
	mov	r3, r0
	add	r2, r4, #1696
	mov	r0, #4
	add	r2, r2, r0
	ldr	r1, [r6, r1]
	ldr	r1, [r1]
	bl	queue_delayed_work_on(PLT)
	b	.L8008
.L8089:
	cmp	r8, #0
	beq	.L8084
	add	r9, r4, #88
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1768]
	add	r1, r4, #1760
	mov	r10, r0
	add	r1, r1, #8
	cmp	r1, r3
	mov	fp, r3
	bne	.L8019
	b	.L8014
.L8017:
	ldr	r3, [r3]
	cmp	r1, r3
	mov	fp, r3
	beq	.L8014
.L8019:
	ldr	r2, [r3, #16]
	cmp	r7, r2
	bne	.L8017
	cmp	r3, #0
	beq	.L8014
.L8018:
	mov	r0, fp
	bl	__list_del_entry(PLT)
	add	r1, r4, #1776
	mov	r0, fp
	ldr	r2, [r4, #1784]
	add	r1, r1, #8
	bl	__list_add(PLT)
.L8020:
	ldr	r3, .L8094+24
	ldr	r3, [r6, r3]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L8025
	movw	r1, #32800
	mov	r2, #32
	bl	kmem_cache_alloc_trace(PLT)
	subs	fp, r0, #0
	beq	.L8026
.L8055:
	mov	r0, r8
	movw	r1, #32800
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [fp, #20]
	beq	.L8091
	str	r4, [fp, #12]
	mov	r0, fp
	add	r1, r4, #1776
	str	r7, [fp, #16]
	str	r8, [fp, #24]
	ldr	r2, [r4, #1776]
	bl	__list_add(PLT)
	mov	r0, r9
.L8083:
	mov	r1, r10
	mov	r9, #0
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L8094+20
	add	r2, r4, #1744
	mov	r0, #4
	add	r2, r2, #8
	ldr	r3, [r6, r3]
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	b	.L8008
.L8090:
	add	r8, r4, #88
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #1768]
	add	r1, r4, #1760
	mov	r10, r0
	add	r1, r1, #8
	cmp	r1, r3
	mov	r9, r3
	bne	.L8035
	b	.L8030
.L8033:
	ldr	r3, [r3]
	cmp	r1, r3
	mov	r9, r3
	beq	.L8030
.L8035:
	ldr	r2, [r3, #16]
	cmp	r7, r2
	bne	.L8033
	cmp	r3, #0
	beq	.L8030
.L8034:
	mov	r0, r9
	bl	__list_del_entry(PLT)
	add	r1, r4, #1776
	mov	r0, r9
	ldr	r2, [r4, #1784]
	add	r1, r1, #8
	bl	__list_add(PLT)
	mov	r0, r8
	b	.L8083
.L8014:
	ldr	r2, [r4, #1776]
	add	r1, r4, #1776
	cmp	r1, r2
	bne	.L8024
	b	.L8020
.L8092:
	ldr	r2, [r2]
	cmp	r1, r2
	beq	.L8020
.L8024:
	ldr	r3, [r2, #16]
	cmp	r7, r3
	bne	.L8092
	cmp	r2, #0
	beq	.L8020
	mov	fp, r2
	b	.L8018
.L8030:
	ldr	r3, [r4, #1776]
	add	r1, r4, #1776
	cmp	r1, r3
	mov	r9, r3
	bne	.L8040
	b	.L8036
.L8093:
	ldr	r3, [r3]
	cmp	r1, r3
	mov	r9, r3
	beq	.L8036
.L8040:
	ldr	r2, [r3, #16]
	cmp	r7, r2
	bne	.L8093
	cmp	r3, #0
	bne	.L8034
.L8036:
	mov	r0, r8
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r4, #21
	b	.L8064
.L8042:
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	beq	.L8084
	ldr	r3, [r6, #28]
	cmp	r8, r3
	bne	.L8084
	ldr	r3, [r6, #24]
	add	r8, r8, r9
	cmp	r8, r3
	bgt	.L8084
	ldr	r2, [r5, #4]
	ldr	r3, .L8094+28
	str	r6, [r2, #32]
	ldr	r2, [r5, #4]
.LPIC1881:
	add	r3, pc, r3
	str	r3, [r2, #28]
	b	.L8008
.L8050:
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r6, #0
	beq	.L8084
	ldr	r2, [r5, #4]
	ldr	r3, .L8094+32
	str	r6, [r2, #32]
	ldr	r2, [r5, #4]
.LPIC1882:
	add	r3, pc, r3
	str	r3, [r2, #28]
	b	.L8008
.L8046:
.L8025:
	mov	fp, #16
	b	.L8055
.L8091:
	mov	r0, fp
	bl	kfree(PLT)
.L8026:
	mov	r0, r9
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r4, #11
	b	.L8064
.L8095:
	.align	2
.L8094:
	.word	.LANCHOR1-(.LPIC1878+8)
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC1879+8)
	.word	acc_complete_set_string-(.LPIC1880+8)
	.word	.LANCHOR3-(.LPIC1884+8)
	.word	.LC483-(.LPIC1883+8)
	.word	system_wq(GOT)
	.word	kmalloc_caches(GOT)
	.word	acc_complete_set_hid_report_desc-(.LPIC1881+8)
	.word	acc_complete_send_hid_event-(.LPIC1882+8)
	.fnend
	.size	accessory_function_ctrlrequest, .-accessory_function_ctrlrequest
	.align	2
	.type	rmnet_data_rx_tlet, %function
rmnet_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #164
	add	r7, r4, #148
	strd	r8, [sp, #16]
	add	r9, r0, #156
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r10, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #156]
	mov	r8, r0
	cmp	r9, r5
	bne	.L8102
	b	.L8101
.L8099:
	bl	list_del(PLT)
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r2, [r5, #12]
	ldr	r1, [r5, #-36]
	ldr	r0, [r4, #324]
	bl	smd_write(PLT)
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #12]
	mov	r8, r0
	mov	r2, r7
	mov	r0, r5
	cmp	fp, r3
	bne	.L8109
	ldr	r3, [r4, #436]
	ldr	r1, [r4, #152]
	add	r3, r3, #1
	str	r3, [r4, #436]
	bl	__list_add(PLT)
	ldr	r5, [r4, #156]
	cmp	r5, r9
	beq	.L8101
.L8102:
	ldr	r0, [r4, #324]
	bl	smd_write_avail(PLT)
	ldr	r3, [r5, #12]
	cmp	r0, r3
	mov	r0, r5
	bcs	.L8099
	str	r3, [r4, #372]
.L8098:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	ldr	r10, [r4, #84]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	b	.L8103
.L8105:
	bl	list_del(PLT)
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #88]
	mov	r1, r9
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r9, #0
	mov	r8, r0
	bne	.L8110
.L8103:
	ldr	r5, [r4, #148]
	cmp	r7, r5
	mov	r0, r5
	sub	r9, r5, #36
	bne	.L8105
.L8104:
	mov	r0, r6
	mov	r1, r8
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L8110:
	ldr	r0, [r10]
	mov	r2, r9
	ldr	r1, .L8111
	add	r0, r0, #32
.LPIC1886:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r5
	ldr	r1, [r4, #152]
	mov	r2, r7
	bl	__list_add(PLT)
	b	.L8104
.L8101:
	mov	r3, #0
	str	r3, [r4, #372]
	b	.L8098
.L8109:
	ldr	r0, [r10]
	ldr	r1, .L8111+4
	add	r0, r0, #32
.LPIC1885:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L8098
.L8112:
	.align	2
.L8111:
	.word	.LC126-(.LPIC1886+8)
	.word	.LC484-(.LPIC1885+8)
	.fnend
	.size	rmnet_data_rx_tlet, .-rmnet_data_rx_tlet
	.align	2
	.type	rmnet_mux_smd_data_rx_tlet, %function
rmnet_mux_smd_data_rx_tlet:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #368
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r10, [r0, #84]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #372]
	mov	r8, r0
	cmp	r3, #0
	addeq	r7, r4, #112
	beq	.L8115
	ldr	r5, [r4, #120]
	add	r9, r4, #120
	add	r7, r4, #112
	cmp	r9, r5
	bne	.L8118
	b	.L8117
.L8119:
	bl	list_del(PLT)
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r2, [r5, #12]
	ldr	r1, [r5, #-36]
	ldr	r0, [r4, #128]
	bl	smd_write(PLT)
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #12]
	mov	r8, r0
	mov	r2, r7
	mov	r0, r5
	cmp	fp, r3
	bne	.L8129
	ldr	r3, [r4, #400]
	ldr	r1, [r4, #116]
	add	r3, r3, #1
	str	r3, [r4, #400]
	bl	__list_add(PLT)
	ldr	r3, [r4, #372]
	cmp	r3, #0
	beq	.L8115
	ldr	r5, [r4, #120]
	cmp	r5, r9
	beq	.L8117
.L8118:
	ldr	r0, [r4, #128]
	bl	smd_write_avail(PLT)
	ldr	r3, [r5, #12]
	cmp	r0, r3
	mov	r0, r5
	bcs	.L8119
	str	r3, [r4, #176]
.L8115:
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	ldr	r10, [r4, #84]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	b	.L8122
.L8124:
	bl	list_del(PLT)
	mov	r1, r8
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #88]
	mov	r1, r9
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r9, #0
	mov	r8, r0
	bne	.L8130
.L8122:
	ldr	r5, [r4, #112]
	cmp	r5, r7
	mov	r0, r5
	sub	r9, r5, #36
	bne	.L8124
.L8123:
	mov	r0, r6
	mov	r1, r8
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L8130:
	ldr	r0, [r10]
	mov	r2, r9
	ldr	r1, .L8131
	add	r0, r0, #32
.LPIC1888:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r5
	ldr	r1, [r4, #116]
	mov	r2, r7
	bl	__list_add(PLT)
	b	.L8123
.L8117:
	mov	r3, #0
	str	r3, [r4, #176]
	b	.L8115
.L8129:
	ldr	r0, [r10]
	ldr	r1, .L8131+4
	add	r0, r0, #32
.LPIC1887:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L8115
.L8132:
	.align	2
.L8131:
	.word	.LC126-(.LPIC1888+8)
	.word	.LC485-(.LPIC1887+8)
	.fnend
	.size	rmnet_mux_smd_data_rx_tlet, .-rmnet_mux_smd_data_rx_tlet
	.align	2
	.type	rmnet_mux_smd_complete_epout, %function
rmnet_mux_smd_complete_epout:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r2, [r4, #364]
	ldr	r7, [r4, #84]
	cmp	r2, #0
	beq	.L8156
	cmn	r3, #104
	beq	.L8136
	cmp	r3, #0
	beq	.L8137
	cmn	r3, #108
	beq	.L8136
	ldr	lr, [r1, #48]
	ldr	ip, [r1, #4]
	ldr	r0, [r7]
	add	r7, r4, #368
	ldr	r1, .L8159
	ldr	r2, [r6, #4]
	str	lr, [sp]
	str	ip, [sp, #4]
	add	r0, r0, #32
.LPIC1889:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	add	r0, r5, #36
	ldr	r1, [r4, #116]
	add	r2, r4, #112
	bl	__list_add(PLT)
	mov	r0, r7
.L8155:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock(PLT)
.L8137:
	add	r6, r4, #368
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #176]
	cmp	r3, #0
	beq	.L8157
.L8138:
	ldr	r1, [r4, #124]
	add	r0, r5, #36
	add	r2, r4, #120
.L8154:
	bl	__list_add(PLT)
	mov	r0, r6
	b	.L8155
.L8136:
	add	r6, r4, #368
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	add	r0, r5, #36
	ldr	r1, [r4, #116]
	add	r2, r4, #112
	b	.L8154
.L8156:
	ldr	r0, [r1]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L8157:
	ldr	r0, [r4, #128]
	bl	smd_write_avail(PLT)
	ldr	r3, [r5, #48]
	cmp	r0, r3
	strcc	r3, [r4, #176]
	bcc	.L8138
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #128]
	ldr	r1, [r5]
	ldr	r2, [r5, #48]
	bl	smd_write(PLT)
	ldr	r3, [r5, #48]
	cmp	r0, r3
	beq	.L8140
	ldr	r0, [r7]
	ldr	r1, .L8159+4
	add	r0, r0, #32
.LPIC1890:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L8140:
	ldr	r3, [r4, #400]
	mov	r0, r6
	add	r9, r4, #112
	add	r3, r3, #1
	str	r3, [r4, #400]
	bl	_raw_spin_lock(PLT)
	mov	r2, r9
	ldr	r1, [r4, #116]
	add	r0, r5, #36
	bl	__list_add(PLT)
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	mov	r0, r6
	ldr	r10, [r4, #84]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	b	.L8141
.L8143:
	bl	list_del(PLT)
	mov	r1, r7
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #88]
	mov	r1, r8
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r8, #0
	mov	r7, r0
	bne	.L8158
.L8141:
	ldr	r5, [r4, #112]
	cmp	r9, r5
	mov	r0, r5
	sub	r8, r5, #36
	bne	.L8143
.L8142:
	mov	r0, r6
	mov	r1, r7
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L8158:
	ldr	r0, [r10]
	mov	r2, r8
	ldr	r1, .L8159+8
	add	r0, r0, #32
.LPIC1891:
	add	r1, pc, r1
	bl	dev_err(PLT)
	mov	r0, r5
	ldr	r1, [r4, #116]
	mov	r2, r9
	bl	__list_add(PLT)
	b	.L8142
.L8160:
	.align	2
.L8159:
	.word	.LC412-(.LPIC1889+8)
	.word	.LC486-(.LPIC1890+8)
	.word	.LC126-(.LPIC1891+8)
	.fnend
	.size	rmnet_mux_smd_complete_epout, .-rmnet_mux_smd_complete_epout
	.align	2
	.type	fmbim_cmd_complete, %function
fmbim_cmd_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r1, #32]
	ldr	r6, [r1, #48]
	cmp	r5, #0
	beq	.L8169
	ldr	r2, [r1, #44]
	cmp	r2, #0
	blt	.L8170
	ldr	r3, .L8173
	mov	r4, r1
.LPIC1897:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L8167
	movw	r1, #32800
	mov	r2, #16
	bl	kmem_cache_alloc_trace(PLT)
	subs	r7, r0, #0
	beq	.L8171
.L8164:
	mov	r0, r6
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r7]
	movne	r8, r7
	strne	r6, [r7, #4]
	beq	.L8172
.L8165:
	ldr	r1, [r4]
	mov	r2, r6
	add	r4, r5, #204
	bl	memcpy(PLT)
	mov	r0, r4
	bl	_raw_spin_lock(PLT)
	ldr	r1, [r5, #212]
	add	r2, r5, #208
	add	r0, r8, #8
	bl	__list_add(PLT)
	mov	r0, r4
	bl	_raw_spin_unlock(PLT)
	ldrd	r6, [sp, #8]
	add	r0, r5, #108
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up(PLT)
.L8167:
	mov	r7, #16
	b	.L8164
.L8171:
	mvn	r3, #0
	mvn	r8, #11
	ldr	r0, [r3, #-11]
	b	.L8165
.L8172:
	mov	r0, r7
	mvn	r8, #11
	bl	kfree(PLT)
	mvn	r3, #0
	ldr	r0, [r3, #-11]
	b	.L8165
.L8170:
	ldr	r1, .L8173+4
	ldr	r0, .L8173+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC1895:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC1894:
	add	r0, pc, r0
	add	r1, r1, #3472
	add	sp, sp, #24
	b	printk(PLT)
.L8169:
	ldr	r1, .L8173+12
	ldr	r0, .L8173+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC1893:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC1892:
	add	r0, pc, r0
	add	r1, r1, #3472
	add	sp, sp, #24
	b	printk(PLT)
.L8174:
	.align	2
.L8173:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1897+8))
	.word	.LANCHOR3-(.LPIC1895+8)
	.word	.LC488-(.LPIC1894+8)
	.word	.LANCHOR3-(.LPIC1893+8)
	.word	.LC487-(.LPIC1892+8)
	.fnend
	.size	fmbim_cmd_complete, .-fmbim_cmd_complete
	.align	2
	.type	grmnet_ctrl_qti_send_cpkt_tomodem, %function
grmnet_ctrl_qti_send_cpkt_tomodem:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8196
	cmp	r2, #2048
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC1898:
	add	r3, pc, r3
	ldr	r5, [r3, #-672]
	bhi	.L8194
	ldr	r3, .L8196+4
	mov	r7, r1
.LPIC1904:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r6, [r3, #24]
	cmp	r6, #0
	beq	.L8178
	mov	r0, r6
	movw	r1, #32800
	mov	r2, #16
	bl	kmem_cache_alloc_trace(PLT)
	subs	r6, r0, #0
	beq	.L8183
	mov	r0, r4
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L8184
	cmn	r6, #4096
	str	r4, [r6, #4]
	bhi	.L8183
.L8181:
	mov	r1, r7
	mov	r2, r4
	add	r7, r5, #52
	bl	memcpy(PLT)
	str	r4, [r6, #4]
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldrb	r4, [r5, #4]	@ zero_extendqisi2
	mov	r8, r0
	cmp	r4, #0
	beq	.L8195
	add	r2, r5, #44
	add	r0, r6, #8
	ldr	r1, [r5, #48]
	bl	__list_add(PLT)
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r0, r5, #32
	mov	r1, #3
	mov	r2, #1
	mov	r3, #0
	bl	__wake_up(PLT)
	mov	r0, #0
.L8190:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8178:
	mov	r0, r2
	mov	r1, #32
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r6, #16]
	strne	r4, [r6, #20]
	movne	r6, #16
	bne	.L8181
	mov	r6, #16
.L8184:
	mov	r0, r6
	bl	kfree(PLT)
.L8183:
	ldr	r1, .L8196+8
	ldr	r0, .L8196+12
.LPIC1902:
	add	r1, pc, r1
	add	r1, r1, #3488
.LPIC1901:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #11
	b	.L8190
.L8194:
	ldr	r0, .L8196+16
	mov	r1, r2
	mov	r2, #2048
.LPIC1899:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #21
	b	.L8190
.L8195:
	ldr	r0, .L8196+20
	mov	r1, r5
.LPIC1903:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r1, r8
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r6]
	bl	kfree(PLT)
	mov	r0, r6
	bl	kfree(PLT)
	mov	r0, r4
	b	.L8190
.L8197:
	.align	2
.L8196:
	.word	.LANCHOR4-(.LPIC1898+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1904+8))
	.word	.LANCHOR3-(.LPIC1902+8)
	.word	.LC355-(.LPIC1901+8)
	.word	.LC489-(.LPIC1899+8)
	.word	.LC490-(.LPIC1903+8)
	.fnend
	.size	grmnet_ctrl_qti_send_cpkt_tomodem, .-grmnet_ctrl_qti_send_cpkt_tomodem
	.align	2
	.type	rmnet_mux_command_complete, %function
rmnet_mux_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r1, #44]
	ldr	r4, [r1, #32]
	ldr	r7, [r1, #48]
	cmp	r2, #0
	ldr	r8, [r4, #84]
	blt	.L8210
	ldr	r3, .L8213
	mov	r5, r1
.LPIC1912:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L8205
	movw	r1, #32800
	mov	r2, #16
	bl	kmem_cache_alloc_trace(PLT)
	subs	r6, r0, #0
	beq	.L8201
.L8200:
	mov	r0, r7
	movw	r1, #32800
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L8211
	add	r8, r4, #368
	str	r7, [r6, #4]
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #356]
	cmp	r3, #0
	bne	.L8203
	mov	r0, r8
	ldr	r5, .L8213+4
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r6]
	bl	kfree(PLT)
	mov	r0, r6
.LPIC1908:
	add	r5, pc, r5
	bl	kfree(PLT)
	ldr	r3, [r4, #424]
	add	r5, r5, #3520
	ldr	r0, .L8213+8
	add	r5, r5, #8
	mov	r1, r5
	add	r3, r3, #1
.LPIC1907:
	add	r0, pc, r0
	add	r0, r0, #596
	str	r3, [r4, #424]
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L8212
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8203:
	ldr	r0, [r6], #8
	mov	r2, r7
	ldr	r1, [r5]
	bl	memcpy(PLT)
	ldr	r1, [r4, #320]
	add	r2, r4, #316
	mov	r0, r6
	bl	__list_add(PLT)
	ldr	r3, [r4, #336]
	mov	r0, r8
	add	r3, r3, #1
	str	r3, [r4, #336]
	bl	_raw_spin_unlock(PLT)
	ldrd	r6, [sp, #8]
	add	r0, r4, #324
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	__wake_up(PLT)
.L8205:
	mov	r6, #16
	b	.L8200
.L8210:
	ldr	r0, [r8]
	ldr	r1, .L8213+12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
.LPIC1905:
	add	r1, pc, r1
	add	sp, sp, #24
	b	dev_err(PLT)
.L8211:
	mov	r0, r6
	bl	kfree(PLT)
.L8201:
	ldr	r0, [r8]
	ldr	r1, .L8213+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	r0, r0, #32
	ldr	lr, [sp, #20]
.LPIC1911:
	add	r1, pc, r1
	add	sp, sp, #24
	b	dev_err(PLT)
.L8212:
	ldr	r0, .L8213+20
	mov	r1, r5
	ldr	r2, [r4, #424]
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
.LPIC1909:
	add	r0, pc, r0
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	printk(PLT)
.L8214:
	.align	2
.L8213:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1912+8))
	.word	.LANCHOR3-(.LPIC1908+8)
	.word	.LANCHOR2-(.LPIC1907+8)
	.word	.LC491-(.LPIC1905+8)
	.word	.LC493-(.LPIC1911+8)
	.word	.LC492-(.LPIC1909+8)
	.fnend
	.size	rmnet_mux_command_complete, .-rmnet_mux_command_complete
	.align	2
	.type	ccid_bulk_read, %function
ccid_bulk_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r2
	movw	r2, #522
	cmp	r7, r2
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r4, [r0, #124]
	bhi	.L8245
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L8246
	mov	r3, sp
	mov	r9, r1
	bic	r8, r3, #8128
	add	r5, r4, #92
	bic	r8, r8, #63
.L8226:
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L8231
	ldr	r6, [r4, #184]
	mov	r3, #0
	mov	r1, r0
	mov	r0, r5
	str	r7, [r6, #4]
	str	r3, [r4, #188]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #108]
	mov	r1, r6
	mov	r2, #208
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L8247
	ldr	r3, [r4, #188]
	cmp	r3, #0
	bne	.L8220
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L8220
	ldr	r2, [r4, #96]
	cmp	r2, #0
	beq	.L8220
	ldr	r2, .L8251
	add	r10, sp, #4
	add	fp, r4, #160
	ldr	r1, [r8, #12]
	str	r3, [sp, #4]
	add	r3, sp, #16
	str	r3, [sp, #16]
.LPIC1920:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L8223
.L8248:
	bl	schedule(PLT)
.L8223:
	mov	r0, fp
	mov	r1, r10
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #188]
	cmp	r3, #0
	bne	.L8221
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L8221
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L8221
	ldr	r3, [r8, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L8248
	mov	r0, fp
	mov	r1, r10
	bl	finish_wait(PLT)
	ldr	r0, [r4, #108]
	mov	r3, #1
	mov	r1, r6
	str	r3, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	mov	r0, #65024
	movt	r0, 65535
.L8243:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8221:
	mov	r0, fp
	mov	r1, r10
	bl	finish_wait(PLT)
.L8220:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	bne	.L8232
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #96]
	mov	r1, r0
	cmp	r3, #0
	beq	.L8249
	ldr	r2, [r6, #48]
	cmp	r2, #0
	bne	.L8225
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L8226
.L8231:
	mvn	r0, #18
	b	.L8243
.L8232:
	mvn	r0, #4
	b	.L8243
.L8249:
	mov	r0, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #18
	b	.L8243
.L8225:
	mov	r3, #1
	cmp	r2, r7
	mov	r0, r5
	movcc	r10, r2
	str	r3, [r4, #156]
	movcs	r10, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r3, sp
	ldr	r1, [r6]
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 448 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r2, r9, r10; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L8250
.L8227:
	cmp	r10, #0
	mov	r0, r5
	mvnne	r7, #13
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #96]
	mov	r2, #0
	mov	r6, r0
	str	r2, [r4, #156]
	cmp	r3, r2
	bne	.L8229
	ldr	r7, [r4, #184]
	ldr	r4, [r4, #108]
	cmp	r7, r2
	beq	.L8230
	ldr	r0, [r7]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r7
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
.L8230:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #18
	b	.L8243
.L8229:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	b	.L8243
.L8250:
	mov	r2, r10
	mov	r0, r9
	bl	__copy_to_user(PLT)
	mov	r10, r0
	b	.L8227
.L8247:
	ldr	r1, .L8251+4
	ldr	r0, .L8251+8
.LPIC1918:
	add	r1, pc, r1
	add	r1, r1, #3552
.LPIC1917:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mov	r3, #1
	mvn	r0, #4
	str	r3, [r4, #148]
	b	.L8243
.L8246:
	ldr	r1, .L8251+12
	ldr	r0, .L8251+16
.LPIC1916:
	add	r1, pc, r1
	add	r1, r1, #3552
.LPIC1915:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #4
	b	.L8243
.L8245:
	ldr	r1, .L8251+20
	mov	r3, r7
	ldr	r0, .L8251+24
.LPIC1914:
	add	r1, pc, r1
	add	r1, r1, #3552
.LPIC1913:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #11
	b	.L8243
.L8252:
	.align	2
.L8251:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1920+8))
	.word	.LANCHOR3-(.LPIC1918+8)
	.word	.LC495-(.LPIC1917+8)
	.word	.LANCHOR3-(.LPIC1916+8)
	.word	.LC494-(.LPIC1915+8)
	.word	.LANCHOR3-(.LPIC1914+8)
	.word	.LC431-(.LPIC1913+8)
	.fnend
	.size	ccid_bulk_read, .-ccid_bulk_read
	.align	2
	.type	check_command_size_in_blocks.constprop.148, %function
check_command_size_in_blocks.constprop.148:
	.fnstart
	@ args = 4, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r3
	mov	r4, r0
	strd	r6, [sp, #8]
	ldr	r6, .L8302
	mov	r7, r1
	str	r8, [sp, #16]
	mov	r8, r2
	str	lr, [sp, #20]
	ldr	r1, [r0, #104]
	.pad #24
	sub	sp, sp, #24
.LPIC1924:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	cmp	r1, #0
	ldr	r3, [r6]
	str	r3, [sp, #20]
	beq	.L8254
	ldr	r2, [r1, #40]
	ldr	r3, [r0, #128]
	mov	r3, r3, asl r2
	str	r3, [r0, #128]
.L8254:
	ldr	ip, [r4, #120]
	mov	r3, #0
	strb	r3, [sp]
	cmp	ip, r3
	bne	.L8298
.L8255:
	ldr	r2, [r4, #128]
	ldr	r3, [r4, #124]
	cmp	r2, #0
	beq	.L8256
	cmp	r2, r3
	bls	.L8257
	ldrb	r2, [r4, #144]	@ zero_extendqisi2
	cmp	r8, ip
	str	r3, [r4, #128]
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	orr	r2, r2, #4
	strb	r2, [r4, #144]
	beq	.L8258
	cmp	r3, #0
	bne	.L8261
.L8258:
	ldr	r0, [r4, #72]
	cmp	r7, r0
	beq	.L8260
	bgt	.L8261
.L8260:
	ldr	ip, [r4, #104]
	cmp	ip, #0
	beq	.L8262
	ldrb	r3, [r4, #76]	@ zero_extendqisi2
	cmp	r3, #3
	beq	.L8263
	ldrb	r2, [ip, #24]	@ zero_extendqisi2
	mov	r3, #0
	ldr	r1, [ip, #36]
	str	r3, [ip, #28]
	str	r3, [ip, #32]
	bfi	r2, r3, #6, #1
	cmp	r1, r3
	strb	r2, [ip, #24]
	bne	.L8264
.L8263:
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	cmp	r0, #1
	and	r3, r3, #31
	strb	r3, [r4, #77]
	ble	.L8269
.L8271:
	mov	r3, #1
	add	r2, r4, #76
	mov	lr, r3
.L8268:
	ldrb	r1, [r2, #1]!	@ zero_extendqisi2
	cmp	r1, #0
	beq	.L8266
	ands	r1, r5, lr, asl r3
	beq	.L8299
.L8266:
	add	r3, r3, #1
	cmp	r0, r3
	bgt	.L8268
	cmp	ip, #0
	beq	.L8270
.L8269:
	ldr	r3, [ip]
	cmp	r3, #0
	beq	.L8300
.L8270:
	mov	r0, #0
.L8259:
	ldr	r2, [sp, #20]
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L8301
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8256:
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	b	.L8258
.L8264:
	ldrb	r2, [r4, #76]	@ zero_extendqisi2
	cmp	r2, #18
	cmpne	r2, #3
	mvnne	r0, #21
	strne	r1, [ip, #28]
	strne	r3, [ip, #36]
	beq	.L8263
	b	.L8259
.L8299:
	cmp	ip, #0
	beq	.L8267
	mov	r3, #9216
	mvn	r0, #21
	movt	r3, 5
	str	r3, [ip, #28]
	b	.L8259
.L8298:
	ldr	r2, .L8302+4
	mov	r0, sp
	ldr	r1, .L8302+8
	ldr	r3, [r4, #124]
.LPIC1923:
	add	r2, pc, r2
	add	ip, r2, ip
.LPIC1922:
	add	r1, pc, r1
	ldrb	r2, [ip, #564]	@ zero_extendqisi2
	bl	sprintf(PLT)
	ldr	ip, [r4, #120]
	b	.L8255
.L8300:
	mov	r3, #14848
	mvn	r0, #21
	movt	r3, 2
	str	r3, [ip, #28]
	b	.L8259
.L8262:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	ldrb	r2, [r4, #76]	@ zero_extendqisi2
	bfi	r3, ip, #4, #1
	cmp	r2, #3
	cmpne	r2, #18
	strb	r3, [r4, #144]
	bne	.L8267
	ldrb	r3, [r4, #77]	@ zero_extendqisi2
	cmp	r0, #1
	and	r3, r3, #31
	strb	r3, [r4, #77]
	bgt	.L8271
	b	.L8270
.L8257:
	cmp	r8, ip
	str	r3, [r4, #136]
	str	r3, [r4, #140]
	beq	.L8258
.L8261:
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	mvn	r0, #21
	orr	r3, r3, #4
	strb	r3, [r4, #144]
	b	.L8259
.L8267:
	mvn	r0, #21
	b	.L8259
.L8301:
	bl	__stack_chk_fail(PLT)
.L8303:
	.align	2
.L8302:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC1924+8))
	.word	.LANCHOR3-(.LPIC1923+8)
	.word	.LC79-(.LPIC1922+8)
	.fnend
	.size	check_command_size_in_blocks.constprop.148, .-check_command_size_in_blocks.constprop.148
	.align	2
	.type	ffs_epfile_write, %function
ffs_epfile_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	fp, [r0, #124]
	.pad #12
	sub	sp, sp, #12
	ldr	r4, [fp, #32]
	ldr	r6, [fp, #36]
	cmp	r4, #0
	bne	.L8328
.L8306:
	mov	r8, r2
	ldr	r2, [r6, #92]
	str	r1, [sp, #4]
	mov	r7, r0
	cmp	r2, #2
	bne	.L8307
	ldr	r10, [fp, #40]
	cmp	r10, #0
	beq	.L8349
.L8324:
	ldrb	r5, [fp, #53]	@ zero_extendqisi2
	clz	r5, r5
	mov	r5, r5, lsr #5
	cmp	r5, #0
	bne	.L8350
	cmp	r4, #0
	bne	.L8313
	mov	r0, r8
	movw	r1, #32976
	bl	__kmalloc(PLT)
	subs	r4, r0, #0
	beq	.L8351
	ldr	r1, [sp, #4]
	mov	r2, r8
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	bne	.L8333
.L8313:
	ldr	r2, [r7, #32]
	mov	r0, fp
	tst	r2, #2048
	beq	.L8314
	bl	mutex_trylock(PLT)
	cmp	r0, #0
	beq	.L8334
.L8317:
	ldr	r0, [fp, #36]
	add	r0, r0, #24
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [fp, #40]
	cmp	r2, r10
	bne	.L8315
	cmp	r5, #0
	bne	.L8352
	ldr	r0, .L8357
	mov	r2, #32
	ldr	r7, [r10, #4]
.LPIC1927:
	add	r0, pc, r0
	str	r4, [r7]
	mov	r1, r7
	str	r8, [r7, #4]
	str	r0, [r7, #28]
	str	r5, [r6, #52]!
	str	r6, [r7, #32]
	ldr	r0, [r10]
	ldr	ip, [r0, #8]
	ldr	ip, [ip, #16]
	blx	ip
	mov	r5, r0
	ldr	r0, [fp, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r5, #0
	blt	.L8335
	mov	r0, r6
	bl	wait_for_completion_interruptible(PLT)
	cmp	r0, #0
	ldr	r0, [fp, #36]
	add	r0, r0, #24
	bne	.L8353
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [fp, #40]
	ldr	r0, [fp, #36]
	cmp	r2, r10
	beq	.L8354
	add	r0, r0, #24
	mvn	r9, #18
	bl	_raw_spin_unlock_irq(PLT)
.L8320:
	mov	r0, fp
	bl	mutex_unlock(PLT)
.L8311:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r9
.L8342:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8350:
	ldrb	r2, [fp, #54]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L8313
	mvn	r9, #21
	b	.L8311
.L8314:
	bl	mutex_lock_interruptible(PLT)
	subs	r9, r0, #0
	beq	.L8317
	b	.L8311
.L8349:
	mov	r4, r10
.L8308:
	ldr	r3, [r7, #32]
	tst	r3, #2048
	mvnne	r9, #10
	mvneq	r9, #18
	b	.L8311
.L8307:
	ldr	r0, .L8357+4
	movw	r1, #786
	mvn	r9, #18
.LPIC1925:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L8311
.L8315:
	ldr	r0, [fp, #36]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, fp
	bl	mutex_unlock(PLT)
	ldr	r2, [fp, #36]
	ldr	r2, [r2, #92]
	cmp	r2, #2
	bne	.L8307
	ldr	r10, [fp, #40]
	cmp	r10, #0
	bne	.L8324
	b	.L8308
.L8354:
	add	r0, r0, #24
	ldr	r9, [r10, #24]
	bl	_raw_spin_unlock_irq(PLT)
	b	.L8320
.L8351:
	mvn	r0, #11
	b	.L8342
.L8333:
	mvn	r9, #13
	b	.L8311
.L8352:
	ldr	r0, [r10]
	cmp	r0, #0
	beq	.L8355
	ldr	r2, [r0, #8]
	mov	r1, #1
	ldr	r2, [r2, #24]
	blx	r2
.L8325:
	ldr	r0, [fp, #36]
	mvn	r9, #73
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq(PLT)
	b	.L8320
.L8335:
	mvn	r9, #4
	b	.L8320
.L8353:
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [fp, #40]
	cmp	r2, r10
	beq	.L8356
.L8322:
	ldr	r0, [fp, #36]
	mvn	r9, #3
	add	r0, r0, #24
	bl	_raw_spin_unlock_irq(PLT)
	b	.L8320
.L8328:
	mvn	r0, #18
	b	.L8342
.L8334:
	mvn	r9, #10
	b	.L8311
.L8355:
	ldr	r0, .L8357+8
	movw	r1, #861
.LPIC1926:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L8325
.L8356:
	ldr	r0, [r10]
	mov	r1, r7
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #20]
	blx	r2
	b	.L8322
.L8358:
	.align	2
.L8357:
	.word	ffs_epfile_io_complete-(.LPIC1927+8)
	.word	.LC185-(.LPIC1925+8)
	.word	.LC185-(.LPIC1926+8)
	.fnend
	.size	ffs_epfile_write, .-ffs_epfile_write
	.align	2
	.type	do_set_interface, %function
do_set_interface:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	clz	r3, r1
	mov	r3, r3, lsr #5
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	ldr	r9, .L8391
	mov	r4, r0
	strd	r6, [sp, #8]
	ldr	r8, .L8391+4
	mov	r6, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
.LPIC1930:
	add	r9, pc, r9
	str	r3, [sp, #8]
	ldr	r3, .L8391+8
.LPIC1931:
	add	r8, pc, r8
.LPIC1928:
	add	r3, pc, r3
	str	r3, [sp, #16]
	mov	r3, #0
	str	r3, [sp, #4]
	ldr	r3, .L8391+12
.LPIC1929:
	add	r3, pc, r3
	str	r3, [sp, #20]
.L8360:
	add	r3, r4, #16
	mov	r7, #0
	str	r3, [sp, #12]
.L8367:
	ldr	r10, [r4, #8]
	cmp	r10, #0
	beq	.L8361
	mov	fp, #0
.L8364:
	ldr	r5, [r4, #68]
	add	r5, r5, fp
	add	fp, fp, #32
	ldr	r1, [r5, #16]
	cmp	r1, #0
	beq	.L8362
	ldr	r0, [r10, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	r7, [r5, #16]
.L8362:
	ldr	r1, [r5, #24]
	cmp	r1, #0
	beq	.L8363
	ldr	r0, [r10, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	str	r7, [r5, #24]
.L8363:
	cmp	fp, #128
	bne	.L8364
	str	r7, [r4, #8]
	ldr	r0, [sp, #12]
	mov	r1, #3
	mov	r2, #1
	mov	r3, #0
	bl	__wake_up(PLT)
.L8361:
	ldmib	sp, {r3, fp}
	ldrb	r5, [r4, #144]	@ zero_extendqisi2
	cmp	r3, #0
	orrne	fp, fp, #1
	bfc	r5, #5, #1
	cmp	fp, #0
	strb	r5, [r4, #144]
	bne	.L8377
	str	r6, [r4, #8]
.L8371:
	ldr	r10, [r6, #100]
	mov	r1, #32
	ldr	r5, [r4, #68]
	ldr	r3, [r10, #8]
	mov	r0, r10
	add	r5, r5, fp
	add	fp, fp, r1
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r1, #32
	str	r0, [r5, #16]
	beq	.L8390
	ldr	r10, [r6, #104]
	ldr	r3, [r10, #8]
	mov	r0, r10
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r5, #24]
	beq	.L8370
	ldr	r2, [r5, #16]
	cmp	fp, #128
	ldr	r3, [r5]
	str	r3, [r0]
	str	r3, [r2]
	ldr	r3, [r5, #16]
	ldr	r2, [r5, #24]
	str	r5, [r2, #32]
	str	r5, [r3, #32]
	ldr	r3, [r5, #16]
	str	r9, [r3, #28]
	ldr	r3, [r5, #24]
	str	r8, [r3, #28]
	bne	.L8371
	ldr	r2, [r4, #92]
	ldrb	r3, [r4, #144]	@ zero_extendqisi2
	cmp	r2, #0
	orr	r3, r3, #32
	movne	r2, #0
	movne	r0, #10496
	movne	r1, r2
	strb	r3, [r4, #144]
	movtne	r0, 6
	beq	.L8369
.L8368:
	ldr	r3, [r4, #100]
	add	r1, r1, #1
	add	r3, r3, r2
	add	r2, r2, #392
	str	r0, [r3, #36]
	ldr	r3, [r4, #92]
	cmp	r1, r3
	bcc	.L8368
.L8369:
	mov	r3, #0
	str	r3, [sp, #4]
.L8377:
	ldr	r0, [sp, #4]
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8390:
	ldr	r0, [r4]
	mvn	r3, #11
	ldr	r1, [sp, #16]
	ldr	r2, [r10, #4]
	str	r3, [sp, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L8367
.L8370:
	ldr	r0, [r4]
	mvn	r3, #11
	ldr	r1, [sp, #20]
	ldr	r2, [r10, #4]
	str	r3, [sp, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L8360
.L8392:
	.align	2
.L8391:
	.word	bulk_in_complete-(.LPIC1930+8)
	.word	bulk_out_complete-(.LPIC1931+8)
	.word	.LC496-(.LPIC1928+8)
	.word	.LC496-(.LPIC1929+8)
	.fnend
	.size	do_set_interface, .-do_set_interface
	.align	2
	.type	rx_fill, %function
rx_fill:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L8446
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	add	r2, r0, #28
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, r2
	strd	r8, [sp, #16]
	add	r9, r0, #16
	strd	r10, [sp, #24]
	mov	r0, r9
	mov	r10, r1
.LPIC1933:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r3, [sp, #12]
	str	r2, [sp, #4]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r6, #28]
	mov	r4, r0
	cmp	r7, r5
	beq	.L8394
	ldr	r3, .L8446+4
	mov	r8, #0
.LPIC1932:
	add	r3, pc, r3
	str	r3, [sp, #8]
	b	.L8410
.L8442:
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L8417
	ldr	r3, [sp, #8]
	ldr	r3, [r3, #324]
	mov	r3, r3, asl #1
	cmp	r8, r3
	bgt	.L8394
.L8443:
	mov	r0, r5
	bl	__list_del_entry(PLT)
	mov	r1, r4
	mov	r0, r9
	str	r5, [r5]
	str	r5, [r5, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L8396
	ldr	fp, [r3, #92]
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	fp, #0
	beq	.L8406
	ldrd	r2, [r6, #4]
	ldrh	r0, [fp, #20]
	ldr	r1, [r6, #72]
	ldr	lr, [r2, #100]
	ldr	r3, [r3, #356]
	cmp	r1, #0
	add	r3, r3, lr
	add	r3, r3, #33
	add	r3, r3, r0
	udiv	lr, r3, r0
	mls	r0, r0, lr, r3
	rsb	r4, r0, r3
	ldrb	r3, [r2, #104]	@ zero_extendqisi2
	mulne	r4, r1, r4
	cmp	r3, #0
	beq	.L8399
	ldr	r3, [r2, #108]
	cmp	r4, r3
	movcc	r4, r3
.L8399:
	add	r0, r4, #2
	mov	r1, r10
	mov	r2, #0
	mvn	r3, #0
	bl	__alloc_skb(PLT)
	subs	r7, r0, #0
	beq	.L8400
	ldr	r3, [r7, #172]
	mov	r0, fp
	sub	r1, r5, #36
	ldr	lr, [r7, #160]
	mov	r2, r10
	add	r3, r3, #2
	add	lr, lr, #2
	str	r3, [r7, #172]
	str	lr, [r7, #160]
	str	r4, [r5, #-32]
	str	r3, [r5, #-36]
	str	r7, [r5, #-4]
	ldr	r3, [fp, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmn	r0, #12
	mov	r4, r0
	beq	.L8440
	cmp	r0, #0
	bne	.L8441
.L8405:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp, #4]
	mov	r4, r0
	ldr	r5, [r6, #28]
	cmp	r5, r3
	beq	.L8394
.L8410:
	ldr	r3, [r6, #12]
	add	r8, r8, #1
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bhi	.L8442
.L8417:
	mov	r3, #2
	cmp	r8, r3
	ble	.L8443
.L8394:
	mov	r0, r9
	mov	r1, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L8440:
.L8402:
	add	r4, r6, #120
	mov	r0, #0
	mov	r1, r4
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	beq	.L8444
.L8413:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
.L8411:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	ldr	r2, [r6, #28]
	mov	r0, r5
	ldr	r1, [sp, #4]
	bl	__list_add(PLT)
	mov	r0, r9
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r1, r4
	mov	r0, #0
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	beq	.L8445
.L8393:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8441:
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	cmp	r4, #0
	bge	.L8405
.L8406:
	add	r4, r6, #120
	b	.L8411
.L8396:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r4, r6, #120
	b	.L8411
.L8444:
	ldr	r1, [sp, #12]
	mov	r0, #4
	add	r2, r6, #88
	ldr	r3, .L8446+8
	ldr	r3, [r1, r3]
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	cmp	r0, #0
	bne	.L8413
	mov	r2, r0
	ldr	r0, .L8446+12
	ldr	r1, [r6, #8]
.LPIC1936:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L8413
.L8400:
	add	r4, r6, #120
	mov	r1, r4
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	bne	.L8411
	ldr	r1, [sp, #12]
	mov	r0, #4
	add	r2, r6, #88
	ldr	r3, .L8446+8
	ldr	r3, [r1, r3]
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	cmp	r0, #0
	bne	.L8411
	mov	r2, r0
	ldr	r0, .L8446+16
	ldr	r1, [r6, #8]
.LPIC1935:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L8411
.L8445:
	ldr	r1, [sp, #12]
	add	r2, r6, #88
	mov	r0, #4
	ldr	r3, .L8446+8
	ldr	r3, [r1, r3]
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	subs	r2, r0, #0
	bne	.L8393
	ldr	r0, .L8446+20
	ldr	r1, [r6, #8]
.LPIC1934:
	add	r0, pc, r0
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk(PLT)
.L8447:
	.align	2
.L8446:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC1933+8)
	.word	.LANCHOR2-(.LPIC1932+8)
	.word	system_wq(GOT)
	.word	.LC387-(.LPIC1936+8)
	.word	.LC387-(.LPIC1935+8)
	.word	.LC387-(.LPIC1934+8)
	.fnend
	.size	rx_fill, .-rx_fill
	.align	2
	.type	eth_work, %function
eth_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r0, #0
	add	r1, r4, #32
	str	r6, [sp, #8]
	sub	r5, r4, #88
	str	lr, [sp, #12]
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	beq	.L8448
	ldr	r3, [r4, #-80]
	ldr	r3, [r3, #164]
	tst	r3, #1
	bne	.L8457
.L8448:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8457:
	mov	r0, r5
	ldr	r6, [sp, #8]
	mov	r1, #208
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rx_fill(PLT)
	.fnend
	.size	eth_work, .-eth_work
	.align	2
	.type	process_rx_w, %function
process_rx_w:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-100]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r3, .L8482
	mov	r5, r0
	strd	r8, [sp, #16]
	ldr	r9, .L8482+4
	ldr	r8, .L8482+8
	strd	r10, [sp, #24]
	ldr	r10, .L8482+12
	strd	r6, [sp, #8]
	sub	r7, r0, #52
	str	lr, [sp, #32]
.LPIC1941:
	add	r3, pc, r3
	.pad #12
	sub	sp, sp, #12
.LPIC1942:
	add	r9, pc, r9
	mov	r6, #0
.LPIC1938:
	add	r8, pc, r8
	add	r9, r9, #3568
	str	r3, [sp, #4]
	add	r8, r8, #3568
.LPIC1944:
	add	r10, pc, r10
	add	r9, r9, #4
	add	r8, r8, #4
	b	.L8460
.L8480:
	ldr	fp, [r4, #80]
	movw	r3, #1500
	sub	r1, fp, #14
	cmp	r1, r3
	bls	.L8464
	ldr	r3, [r5, #-100]
	ldr	r1, .L8482+16
	ldr	r0, [r3]
.LPIC1943:
	add	r1, pc, r1
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L8467
	cmp	fp, #13
	bls	.L8465
	ldr	r3, [r5, #-96]
	ldr	r3, [r3, #356]
	add	r3, r3, #14
	cmp	fp, r3
	bhi	.L8465
	ldr	r1, .L8482+20
	mov	r2, fp
	ldr	r0, .L8482+24
.LPIC1940:
	add	r1, pc, r1
	add	r1, r1, #3568
.LPIC1939:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
.L8464:
	ldr	r1, [r5, #-96]
	mov	r0, r4
	bl	eth_type_trans(PLT)
	strh	r0, [r4, #102]	@ movhi
	ldr	r2, [r5, #-96]
	mov	r0, r4
	ldr	r3, [r2, #232]
	add	r3, r3, #1
	str	r3, [r2, #232]
	ldr	r2, [r5, #-96]
	ldr	r1, [r4, #80]
	ldr	r3, [r2, #240]
	add	r3, r3, r1
	str	r3, [r2, #240]
	bl	netif_rx_ni(PLT)
	mov	r6, r0
.L8460:
	mov	r0, r7
	bl	skb_dequeue(PLT)
	subs	r4, r0, #0
	beq	.L8479
	cmp	r6, #0
	bge	.L8480
	ldr	r3, [r5, #-100]
	mov	r1, r10
	ldr	r0, [r3]
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L8467
	ldr	fp, [r4, #80]
.L8465:
	ldr	r0, .L8482+28
	mov	r2, fp
	mov	r1, r8
.LPIC1937:
	add	r0, pc, r0
	bl	printk(PLT)
.L8467:
	ldr	r2, [r5, #-96]
	mov	r1, r9
	ldr	r0, [sp, #4]
	ldr	r3, [r2, #248]
	add	r3, r3, #1
	str	r3, [r2, #248]
	ldr	r2, [r5, #-96]
	ldr	r3, [r2, #272]
	add	r3, r3, #1
	str	r3, [r2, #272]
	ldr	r2, [r4, #80]
	bl	printk(PLT)
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	b	.L8460
.L8479:
	ldr	r3, [r5, #-96]
	ldr	r3, [r3, #164]
	tst	r3, #1
	bne	.L8481
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8481:
	sub	r0, r5, #104
	mov	r1, #208
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	rx_fill(PLT)
.L8483:
	.align	2
.L8482:
	.word	.LC499-(.LPIC1941+8)
	.word	.LANCHOR3-(.LPIC1942+8)
	.word	.LANCHOR3-(.LPIC1938+8)
	.word	.LC500-(.LPIC1944+8)
	.word	.LC500-(.LPIC1943+8)
	.word	.LANCHOR3-(.LPIC1940+8)
	.word	.LC498-(.LPIC1939+8)
	.word	.LC497-(.LPIC1937+8)
	.fnend
	.size	process_rx_w, .-process_rx_w
	.align	2
	.type	eth_open, %function
eth_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	add	r5, r0, #1152
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #1160]
	ldr	r3, [r3, #164]
	tst	r3, #4
	beq	.L8499
.L8486:
	mov	r0, r5
	bl	_raw_spin_lock_irq(PLT)
	ldr	r0, [r4, #1156]
	cmp	r0, #0
	beq	.L8488
	ldr	r3, [r0, #136]
	cmp	r3, #0
	beq	.L8488
	blx	r3
.L8488:
	mov	r0, r5
	bl	_raw_spin_unlock_irq(PLT)
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L8499:
	mov	r1, #208
	mov	r0, r5
	bl	rx_fill(PLT)
	ldr	r2, [r4, #1160]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4, #1188]
	ldr	r6, [r2, #576]
	add	r1, r6, #80
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	beq	.L8486
	ldr	r0, [r6, #4]
	bl	__netif_schedule(PLT)
	b	.L8486
	.fnend
	.size	eth_open, .-eth_open
	.align	2
	.type	f_midi_complete, %function
f_midi_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r0]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r1, #44]
	ldr	r2, [r0, #20]
	cmn	r3, #103
	ldr	r6, [r2, #24]
	bgt	.L8502
	cmn	r3, #104
	bge	.L8503
	cmn	r3, #108
	bne	.L8501
.L8503:
	ldr	r8, [r0, #92]
	cmp	r8, r4
	beq	.L8541
.L8540:
	ldr	r0, [r5]
.L8511:
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r3, [r3, #12]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3	@ indirect register sibling call
.L8502:
	cmp	r3, #0
	bne	.L8501
	ldr	r8, [r0, #92]
	cmp	r8, r4
	beq	.L8542
	ldr	r3, [r0, #88]
	cmp	r3, r4
	beq	.L8543
.L8501:
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L8544
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8544:
	ldr	ip, [r6]
	str	r0, [sp]
	ldr	r1, .L8545
	ldr	r3, [r5, #4]
	ldr	r2, [r4, #4]
	add	r0, ip, #32
.LPIC1947:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, #1
	ldr	r3, [r3, #24]
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	bx	r3
.L8543:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	f_midi_transmit(PLT)
.L8541:
	ldr	r1, [r5, #48]
	ldr	r0, [r5]
	cmp	r1, #3
	bls	.L8511
	ldr	r9, .L8545+4
	add	r6, r0, #1
	rsb	r7, r0, #6
.LPIC1946:
	add	r9, pc, r9
	b	.L8513
.L8512:
	add	r3, r7, r6
	add	r6, r6, #4
	cmp	r3, r1
	bcs	.L8540
.L8513:
	ldrb	r3, [r6, #-1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L8512
	ldr	lr, [r8]
	mov	ip, r3, lsr #4
	and	r3, r3, #15
	add	r3, r9, r3
	add	r0, ip, #42
	ldrb	r2, [r3, #3588]	@ zero_extendqisi2
	ldr	r0, [lr, r0, asl #2]
	cmp	r0, #0
	beq	.L8512
	ldr	r3, [lr, #296]
	mov	r3, r3, lsr ip
	tst	r3, #1
	beq	.L8512
	mov	r1, r6
	bl	snd_rawmidi_receive(PLT)
	ldr	r1, [r5, #48]
	b	.L8512
.L8542:
	ldr	r1, [r1, #48]
	ldr	r9, [r5]
	cmp	r1, #3
	bls	.L8501
	ldr	r10, .L8545+8
	add	r7, r9, #1
	rsb	r9, r9, #6
.LPIC1945:
	add	r10, pc, r10
	b	.L8508
.L8507:
	add	r3, r9, r7
	add	r7, r7, #4
	cmp	r3, r1
	bcs	.L8501
.L8508:
	ldrb	r3, [r7, #-1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L8507
	ldr	lr, [r8]
	mov	ip, r3, lsr #4
	and	r3, r3, #15
	add	r3, r10, r3
	add	r0, ip, #42
	ldrb	r2, [r3, #3588]	@ zero_extendqisi2
	ldr	r0, [lr, r0, asl #2]
	cmp	r0, #0
	beq	.L8507
	ldr	r3, [lr, #296]
	mov	r3, r3, lsr ip
	tst	r3, #1
	beq	.L8507
	mov	r1, r7
	bl	snd_rawmidi_receive(PLT)
	ldr	r1, [r5, #48]
	b	.L8507
.L8546:
	.align	2
.L8545:
	.word	.LC501-(.LPIC1947+8)
	.word	.LANCHOR3-(.LPIC1946+8)
	.word	.LANCHOR3-(.LPIC1945+8)
	.fnend
	.size	f_midi_complete, .-f_midi_complete
	.align	2
	.type	mtp_ioctl, %function
mtp_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r10, [sp, #24]
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	r10, [r0, #124]
	.pad #60
	sub	sp, sp, #60
	add	fp, r10, #112
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r0, [fp]
	add	r0, r0, #1
	strex	lr, r0, [fp]
	teq	lr, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r0, #1
	beq	.L8548
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [fp]
	sub	r2, r2, #1
	strex	r1, r2, [fp]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L8605:
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8548:
	mov	r5, r2
	movw	r2, #19713
	movt	r2, 16416
	mov	r4, r1
	cmp	r1, r2
	bhi	.L8583
	mov	r2, #19712
	movt	r2, 16416
	cmp	r1, r2
	bcs	.L8550
	movw	r2, #19715
	movt	r2, 16392
	cmp	r1, r2
	bne	.L8581
	mov	r3, sp
	bic	r2, r3, #8128
	bic	r2, r2, #63
	ldr	r2, [r2, #8]
#APP
@ 439 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r1, r5, #8; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	cmp	r2, #0
	bne	.L8563
	mov	r1, r5
	add	r0, sp, #16
	mov	r2, #8
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	bne	.L8614
	ldr	r5, [sp, #16]
	cmp	r5, #28
	bhi	.L8589
	ldr	r2, [r10, #104]
	cmp	r2, #0
	beq	.L8590
	mov	r0, #1000
	add	r6, r10, #88
	bl	msecs_to_jiffies(PLT)
	mov	r8, r0
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r10, #124]
	add	r7, r10, #124
	mov	r9, r0
	cmp	r7, r4
	beq	.L8566
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del(PLT)
	mov	r0, r6
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r4, #0
	beq	.L8584
.L8567:
	mov	r3, sp
	ldr	r1, [sp, #20]
	bic	r2, r3, #8128
	ldr	r0, [r4]
	bic	r2, r2, #63
	ldr	r2, [r2, #8]
#APP
@ 439 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds lr, r1, r5; sbcccs lr, lr, r2; movcc r2, #0
@ 0 "" 2
	cmp	r2, #0
	beq	.L8615
	cmp	r5, #0
	bne	.L8616
.L8580:
	str	r5, [r4, #4]
	ldr	r0, [r10, #100]
	mov	r1, r4
	mov	r2, #208
	ldr	lr, [r0, #8]
	ldr	r5, [lr, #16]
	blx	r5
	subs	r5, r0, #0
	beq	.L8561
	mov	r0, r6
.L8610:
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	ldr	r1, [r10, #128]
	add	r0, r4, #36
	mov	r2, r7
	bl	__list_add(PLT)
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L8561
.L8583:
	movw	r2, #19716
	movt	r2, 16416
	cmp	r1, r2
	beq	.L8550
.L8581:
	add	r6, r10, #88
	mvn	r5, #21
.L8560:
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [r10, #104]
	cmp	r2, #3
	mvneq	r5, #124
	beq	.L8582
	cmp	r2, #0
	movne	r2, #1
	strne	r2, [r10, #104]
.L8582:
	mov	r0, r6
	bl	_raw_spin_unlock_irq(PLT)
.L8561:
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [fp]
	sub	r2, r2, #1
	strex	r1, r2, [fp]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	mov	r0, r5
	b	.L8605
.L8550:
	add	r6, r10, #88
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
	ldr	r2, [r10, #104]
	cmp	r2, #3
	beq	.L8617
	cmp	r2, #0
	beq	.L8618
	mov	r2, #2
	mov	r0, r6
	str	r2, [r10, #104]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r3, sp
	bic	r2, r3, #8128
	bic	r2, r2, #63
	ldr	r2, [r2, #8]
#APP
@ 439 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r1, r5, #32; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	cmp	r2, #0
	bne	.L8554
	mov	r1, r5
	add	r0, sp, #24
	mov	r2, #32
	bl	__copy_from_user(PLT)
	subs	r7, r0, #0
	bne	.L8619
	ldr	r0, [sp, #24]
	bl	fget(PLT)
	subs	r5, r0, #0
	mvneq	r5, #8
	beq	.L8560
	str	r5, [r10, #216]
	ldrd	r0, [sp, #32]
	strd	r0, [r10, #224]
	ldrd	r0, [sp, #40]
	strd	r0, [r10, #232]
#APP
@ 1028 "/root/lol//drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	movw	r2, #19716
	movt	r2, 16416
	cmp	r4, r2
	beq	.L8620
	mov	r2, #19712
	movt	r2, 16416
	cmp	r4, r2
	addeq	r2, r10, #184
	addne	r2, r10, #200
	streq	r7, [r10, #240]
.L8558:
	ldr	r1, [r10, #180]
	mov	r0, #4
	bl	queue_work_on(PLT)
	ldr	r0, [r10, #180]
	bl	flush_workqueue(PLT)
	mov	r0, r5
	bl	fput(PLT)
#APP
@ 1052 "/root/lol//drivers/usb/gadget/f_mtp.c" 1
	dmb
@ 0 "" 2
	ldr	r5, [r10, #252]
	b	.L8560
.L8563:
	add	r0, sp, #16
	mov	r1, #8
	bl	__memzero(PLT)
	mvn	r5, #13
	b	.L8561
.L8618:
	mov	r0, r6
	mvn	r5, #18
	bl	_raw_spin_unlock_irq(PLT)
	b	.L8561
.L8554:
	add	r0, sp, #24
	mov	r1, #32
	bl	__memzero(PLT)
	mvn	r5, #13
	b	.L8560
.L8614:
	mvn	r5, #13
	b	.L8561
.L8617:
	mov	r2, #1
	mov	r0, r6
	mvn	r5, #124
	str	r2, [r10, #104]
	bl	_raw_spin_unlock_irq(PLT)
	b	.L8561
.L8619:
	mvn	r5, #13
	b	.L8560
.L8615:
	mov	r2, r5
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	beq	.L8580
.L8579:
	mov	r0, r6
	mvn	r5, #13
	b	.L8610
.L8616:
	mov	r1, r5
	bl	__memzero(PLT)
	b	.L8579
.L8566:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
.L8584:
	ldr	r1, .L8622
	mov	r3, sp
	mov	r2, #0
	bic	r9, r3, #8128
	add	r3, r10, #156
	bic	r9, r9, #63
	ldr	r0, [r9, #12]
	str	r3, [sp, #4]
	add	r3, sp, #24
.LPIC1949:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	str	r2, [sp, #24]
	add	r2, sp, #36
	str	r3, [sp, #8]
	str	r2, [sp, #36]
	str	r2, [sp, #40]
	strd	r0, [sp, #28]
.L8572:
	ldrd	r0, [sp, #4]
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r10, #124]
	mov	r1, r0
	cmp	r7, r2
	mov	r0, r2
	sub	r4, r2, #36
	beq	.L8568
	str	r1, [sp, #12]
	bl	list_del(PLT)
	ldr	r1, [sp, #12]
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r4, #0
	bne	.L8569
.L8585:
	ldr	r2, [r9, #12]
	mov	r0, r8
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	bne	.L8571
	bl	schedule_timeout(PLT)
	subs	r8, r0, #0
	bne	.L8572
.L8575:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r10, #124]
	mov	r8, r0
	cmp	r7, r4
	beq	.L8621
	mov	r0, r4
	sub	r4, r4, #36
	bl	list_del(PLT)
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r4, #0
	beq	.L8571
.L8576:
	ldrd	r0, [sp, #4]
	bl	finish_wait(PLT)
	b	.L8567
.L8620:
	mov	r1, #1
	add	r2, r10, #184
	str	r1, [r10, #240]
	ldrh	r1, [sp, #48]
	strh	r1, [r10, #244]	@ movhi
	ldr	r1, [sp, #52]
	str	r1, [r10, #248]
	b	.L8558
.L8590:
	mvn	r5, #18
	b	.L8561
.L8589:
	mvn	r5, #21
	b	.L8561
.L8621:
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
.L8571:
	ldrd	r0, [sp, #4]
	mvn	r5, #61
	bl	finish_wait(PLT)
	b	.L8561
.L8568:
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L8585
.L8569:
	cmp	r8, #0
	bne	.L8576
	b	.L8575
.L8623:
	.align	2
.L8622:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1949+8))
	.fnend
	.size	mtp_ioctl, .-mtp_ioctl
	.align	2
	.type	rmnet_sdio_complete_epin, %function
rmnet_sdio_complete_epin:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r1, #44]
	.pad #20
	sub	sp, sp, #20
	ldr	r4, [r0]
	ldr	r7, [r1, #32]
	cmn	r2, #104
	ldr	r3, [r4, #84]
	beq	.L8626
	cmp	r2, #0
	beq	.L8626
	cmn	r2, #108
	beq	.L8626
	ldr	r0, [r3]
	ldr	r1, .L8656
	add	r0, r0, #32
.LPIC1950:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L8626:
	add	r6, r4, #188
	add	r8, r4, #132
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	mov	r2, r8
	ldr	r1, [r4, #136]
	add	r0, r5, #36
	bl	__list_add(PLT)
	ldr	r3, [r4, #140]
	mov	r0, r6
	add	r3, r3, #1
	str	r3, [r4, #140]
	bl	_raw_spin_unlock(PLT)
	mov	r0, r7
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #192]
	ldr	r2, [r4, #84]
	cmp	r3, #0
	str	r2, [sp, #4]
	beq	.L8624
	ldr	r3, [r4, #320]
	tst	r3, #2
	bne	.L8654
.L8624:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8654:
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #132]
	str	r0, [sp, #12]
	cmp	r8, r3
	beq	.L8631
	ldr	r5, [r4, #144]
	add	r3, r4, #144
	str	r3, [sp, #8]
	cmp	r3, r5
	cmpne	r5, #0
	movne	r10, #0
	beq	.L8631
.L8632:
	ldr	r3, [r4, #152]
	sub	r3, r3, #1
	str	r3, [r4, #152]
	ldrd	r2, [r5]
	str	r10, [r5]
	str	r10, [r5, #4]
	str	r3, [r2, #4]
	str	r2, [r3]
	ldr	r7, [r4, #132]
	str	r5, [r7, #-4]
	ldr	r3, [r5, #172]
	mov	r0, r7
	sub	r9, r7, #36
	str	r3, [r7, #-36]
	ldr	r3, [r5, #80]
	str	r3, [r7, #-32]
	bl	list_del(PLT)
	ldr	r3, [r4, #140]
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r4, #140]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r4, #92]
	mov	r1, r9
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	cmp	fp, #0
	bne	.L8655
	ldr	r3, [r4, #356]
	ldr	r2, [r4, #132]
	add	r3, r3, #1
	cmp	r8, r2
	str	r3, [r4, #356]
	beq	.L8631
	ldr	r5, [r4, #144]
	ldr	r3, [sp, #8]
	cmp	r3, r5
	cmpne	r5, #0
	bne	.L8632
.L8631:
	ldr	r1, [sp, #12]
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L8655:
	ldr	r0, [r4, #192]
	cmp	r0, #0
	beq	.L8634
	ldr	r3, [sp, #4]
	mov	r2, fp
	ldr	r1, .L8656+4
	ldr	r0, [r3]
.LPIC1951:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r2, r8
	mov	r0, r7
	ldr	r1, [r4, #136]
	bl	__list_add(PLT)
	ldr	r3, [r4, #140]
	ldr	r2, [r4, #144]
	add	r3, r3, #1
	str	r3, [r4, #140]
	ldr	r3, [sp, #8]
	str	r2, [r5]
	str	r3, [r5, #4]
	str	r5, [r4, #144]
	str	r5, [r2, #4]
	ldr	r3, [r4, #152]
	add	r3, r3, #1
	str	r3, [r4, #152]
	b	.L8631
.L8634:
	str	r0, [r7, #-36]
	ldr	r4, [r4, #92]
	bl	kfree(PLT)
	mov	r1, r9
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	dev_kfree_skb_any(PLT)
	b	.L8631
.L8657:
	.align	2
.L8656:
	.word	.LC128-(.LPIC1950+8)
	.word	.LC129-(.LPIC1951+8)
	.fnend
	.size	rmnet_sdio_complete_epin, .-rmnet_sdio_complete_epin
	.align	2
	.type	ffs_ep0_read, %function
ffs_ep0_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 1, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	.setfp fp, sp, #32
	add	fp, sp, #32
	strd	r6, [sp, #8]
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r10, [r0, #124]
	add	r8, r10, #96
#APP
@ 193 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	mov	r5, #0
.L8659:
#APP
@ 170 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r4, [r8]
	mov	r6, #0
	teq	r4, #2
	strexeq r6, r5, [r8]

@ 0 "" 2
	cmp	r6, #0
	bne	.L8659
#APP
@ 195 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r4, #2
	beq	.L8691
	mov	r4, r2
	ldr	r2, [r0, #32]
	add	r5, r10, #4
	mov	r7, r0
	str	r1, [fp, #-64]
	mov	r0, r5
	tst	r2, #2048
	bne	.L8721
	bl	mutex_lock_interruptible(PLT)
	cmp	r0, #0
	blt	.L8706
.L8664:
	ldr	r2, [r10, #92]
	cmp	r2, #2
	mvnne	r9, #76
	movne	r7, #0
	beq	.L8722
.L8662:
	mov	r0, r5
	bl	mutex_unlock(PLT)
	mov	r0, r7
	bl	kfree(PLT)
	mov	r0, r9
.L8706:
	sub	sp, fp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8721:
	bl	mutex_trylock(PLT)
	cmp	r0, #0
	bne	.L8664
	mvn	r0, #10
	b	.L8706
.L8722:
	add	r6, r10, #116
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
#APP
@ 193 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	mov	ip, #0
.L8665:
#APP
@ 170 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r9, [r8]
	mov	r2, #0
	teq	r9, #2
	strexeq r2, ip, [r8]

@ 0 "" 2
	cmp	r2, #0
	bne	.L8665
#APP
@ 195 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r9, #1
	beq	.L8667
	bcc	.L8668
	cmp	r9, #2
	mov	r7, r2
	mvneq	r9, #42
	mvnne	r9, #76
.L8669:
	mov	r0, r6
	bl	_raw_spin_unlock_irq(PLT)
	b	.L8662
.L8667:
	ldrsb	r1, [r10, #108]
	cmp	r1, #0
	blt	.L8723
	ldrh	r2, [r10, #114]
	mov	r0, r6
	cmp	r4, r2
	movcs	r4, r2
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r4, #0
	beq	.L8699
	mov	r0, r4
	mov	r1, #208
	bl	__kmalloc(PLT)
	subs	r7, r0, #0
	beq	.L8724
.L8686:
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
#APP
@ 193 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	mov	r2, #0
.L8687:
#APP
@ 170 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r0, [r8]
	mov	r1, #0
	teq	r0, #2
	strexeq r1, r2, [r8]

@ 0 "" 2
	cmp	r1, #0
	bne	.L8687
#APP
@ 195 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r0, #2
	beq	.L8701
	ldr	r8, [r10, #28]
	mov	r0, r6
	ldrh	r2, [r10, #114]
	ldrb	r1, [r8, #26]	@ zero_extendqisi2
	cmp	r4, r2
	movcs	r2, #0
	movcc	r2, #1
	bfi	r1, r2, #1, #1
	strb	r1, [r8, #26]
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r7, #0
	str	r7, [r8]
	str	r4, [r8, #4]
	beq	.L8725
.L8688:
	ldr	r0, [r10]
	mov	ip, #0
	mov	r1, r8
	mov	r2, #32
	str	ip, [r10, #32]
	ldr	r0, [r0, #4]
	ldr	ip, [r0, #8]
	ldr	ip, [ip, #16]
	blx	ip
	subs	r9, r0, #0
	blt	.L8662
	add	r0, r10, #32
	bl	wait_for_completion_interruptible(PLT)
	cmp	r0, #0
	bne	.L8726
	ldr	r9, [r10, #48]
	str	r0, [r10, #96]
	cmp	r9, #0
	ble	.L8662
	ldr	r0, [fp, #-64]
	mov	r2, r4
	mov	r1, r7
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	mvnne	r9, #13
	b	.L8662
.L8668:
	movw	r2, #43691
	movt	r2, 43690
	umull	r3, r2, r2, r4
	movs	r3, r2, lsr #3
	str	r3, [fp, #-68]
	beq	.L8695
	ldr	r2, [r7, #32]
	ldrh	r7, [r10, #104]
	tst	r2, #2048
	bne	.L8727
	cmp	r7, #0
	bne	.L8671
	ldr	r0, .L8735
	mov	r3, sp
	str	r7, [fp, #-56]
	bic	r1, r3, #8128
	str	r7, [fp, #-52]
	sub	r8, fp, #44
	bic	r1, r1, #63
	str	r7, [fp, #-48]
	mov	lr, #1
	str	r7, [fp, #-44]
	mov	r4, r1
	mov	r2, r8
	str	r7, [fp, #-40]
.LPIC1953:
	ldr	r0, [pc, r0]		@ tls_load_dot_plus_eight
	add	r9, r10, #120
	ldr	r1, [r1, #12]
	str	lr, [fp, #-56]
	str	r8, [fp, #-44]
	str	r8, [fp, #-40]
	str	r0, [fp, #-48]
	str	r1, [fp, #-52]
	b	.L8675
.L8728:
	bl	_raw_spin_unlock_irq(PLT)
	bl	schedule(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
	ldrh	r2, [r10, #104]
	cmp	r2, #0
	bne	.L8674
	ldr	r2, [fp, #-44]
.L8675:
	cmp	r2, r8
	mov	r0, r8
	mov	r2, r9
	bne	.L8672
	ldr	r1, [r10, #124]
	bl	__list_add(PLT)
.L8672:
	ldr	r2, [r4, #12]
	mov	r3, #1
	str	r3, [r2]
#APP
@ 636 "/root/lol//drivers/usb/gadget/f_fs.c" 1
	dmb
@ 0 "" 2
	ldr	r2, [r4, #12]
	mov	r0, r6
	ldr	r2, [r2, #4]
	ldr	r7, [r2]
	ands	r7, r7, r3
	beq	.L8728
	mov	r0, r8
	mvn	r9, #3
	bl	list_del(PLT)
	mov	r3, sp
	mov	r2, #0
	bic	r3, r3, #8128
	mov	r7, r2
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	str	r2, [r3]
	b	.L8669
.L8727:
	cmp	r7, #0
	bne	.L8671
	mvn	r9, #10
	b	.L8669
.L8723:
	mov	r0, r6
	str	r2, [fp, #-64]
	bl	_raw_spin_unlock_irq(PLT)
	ldrh	r7, [r10, #106]
	ldr	r2, [fp, #-64]
	cmp	r7, #0
	mvneq	r9, #2
	beq	.L8662
	ldr	r0, [r10]
	mov	r1, r9
	mov	r7, r2
	mvn	r9, #50
	ldr	r0, [r0, #4]
	ldr	ip, [r0, #8]
	ldr	ip, [ip, #24]
	blx	ip
	ldr	r2, [fp, #-64]
	str	r2, [r10, #96]
	b	.L8662
.L8691:
	mvn	r0, #42
	b	.L8706
.L8701:
	mvn	r9, #42
	b	.L8669
.L8674:
	mov	r0, r8
	bl	list_del(PLT)
	mov	r3, sp
	bic	r2, r3, #8128
	bic	r2, r2, #63
	ldr	r2, [r2, #12]
	str	r7, [r2]
	ldrh	r7, [r10, #104]
.L8671:
	ldr	r3, [fp, #-68]
	mov	r8, sp
	cmp	r7, r3
	movcs	r7, r3
	mov	r9, r7, asl #4
	sub	r9, r9, r7, asl #2
	add	r2, r9, #7
	cmp	r9, #0
	bic	r2, r2, #7
	sub	sp, sp, r2
	mov	r4, sp
	bne	.L8729
.L8676:
	ldrb	r2, [r10, #100]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r4, #8]
	beq	.L8730
.L8677:
	cmp	r7, #1
	bls	.L8678
	ldrb	r2, [r10, #101]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r4, #20]
	beq	.L8731
.L8679:
	cmp	r7, #2
	beq	.L8678
	ldrb	r2, [r10, #102]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r4, #32]
	beq	.L8732
.L8680:
	cmp	r7, #3
	beq	.L8678
	ldrb	r2, [r10, #103]	@ zero_extendqisi2
	cmp	r2, #4
	strb	r2, [r4, #44]
	beq	.L8733
.L8678:
	ldrh	r2, [r10, #104]
	cmp	r7, r2
	movcs	r2, #0
	strcsh	r2, [r10, #104]	@ movhi
	bcc	.L8734
.L8683:
	mov	r0, r6
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	bl	mutex_unlock(PLT)
	ldr	r0, [fp, #-64]
	mov	r1, r4
	mov	r2, r9
	bl	__copy_to_user(PLT)
	cmp	r0, #0
	mov	sp, r8
	moveq	r0, r9
	mvnne	r0, #13
	b	.L8706
.L8695:
	mov	r7, r3
	mvn	r9, #21
	b	.L8669
.L8729:
	mov	r0, sp
	mov	r1, r9
	bl	__memzero(PLT)
	b	.L8676
.L8733:
	ldrd	r0, [r10, #108]
	mov	r2, #1
	str	r0, [r4, #36]	@ unaligned
	str	r1, [r4, #40]	@ unaligned
	str	r2, [r10, #96]
	b	.L8678
.L8730:
	ldrd	r0, [r10, #108]
	mov	r2, #1
	str	r0, [r4]	@ unaligned
	str	r1, [r4, #4]	@ unaligned
	str	r2, [r10, #96]
	b	.L8677
.L8732:
	ldrd	r0, [r10, #108]
	mov	r2, #1
	str	r0, [r4, #24]	@ unaligned
	str	r1, [r4, #28]	@ unaligned
	str	r2, [r10, #96]
	b	.L8680
.L8731:
	ldrd	r0, [r10, #108]
	mov	r2, #1
	str	r0, [r4, #12]	@ unaligned
	str	r1, [r4, #16]	@ unaligned
	str	r2, [r10, #96]
	b	.L8679
.L8724:
	mvn	r9, #11
	b	.L8662
.L8734:
	rsb	r2, r7, r2
	add	r1, r10, r7
	uxth	ip, r2
	add	r1, r1, #100
	add	r0, r10, #100
	mov	r2, ip
	strh	ip, [r10, #104]	@ movhi
	bl	memmove(PLT)
	b	.L8683
.L8699:
	mov	r7, r4
	b	.L8686
.L8725:
	movw	r2, #47806
	movt	r2, 57005
	str	r2, [r8]
	b	.L8688
.L8726:
	ldr	r3, [r10]
	mov	r1, r8
	mvn	r9, #3
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L8662
.L8736:
	.align	2
.L8735:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC1953+8))
	.fnend
	.size	ffs_ep0_read, .-ffs_ep0_read
	.align	2
	.type	mbim_write, %function
mbim_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #4
	sub	sp, sp, #4
	cmp	r4, #0
	beq	.L8770
	cmp	r2, #0
	mov	r6, r2
	beq	.L8771
	cmp	r2, #4096
	bhi	.L8772
	add	r5, r4, #104
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r5]
	add	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L8742
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L8783
	ldr	r0, .L8783+4
.LPIC1961:
	add	r1, pc, r1
	add	r1, r1, #3600
.LPIC1960:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #15
.L8763:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8742:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L8773
	ldr	r3, .L8783+8
	mov	r7, r1
.LPIC1979:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L8759
	movw	r1, #32976
	mov	r2, #16
	bl	kmem_cache_alloc_trace(PLT)
	subs	r9, r0, #0
	beq	.L8774
.L8743:
	mov	r0, r6
	mov	r1, #208
	bl	__kmalloc(PLT)
	cmp	r0, #0
	str	r0, [r9]
	movne	r8, r9
	strne	r6, [r9, #4]
	beq	.L8775
.L8744:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #8]
#APP
@ 439 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r2, r7, r6; sbcccs r2, r2, r3; movcc r3, #0
@ 0 "" 2
	cmp	r3, #0
	beq	.L8776
	mov	r1, r6
	mov	r10, r6
	bl	__memzero(PLT)
.L8747:
	cmp	r10, #0
	bne	.L8777
	ldr	r3, [r4, #88]
	cmp	r3, #0
	beq	.L8778
	ldrb	r3, [r4, #164]	@ zero_extendqisi2
	cmp	r3, #3
	bne	.L8779
	add	r7, r4, #204
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r9, r0
	add	r2, r4, #216
	ldr	r1, [r4, #220]
	add	r0, r8, #8
	bl	__list_add(PLT)
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r7
	ldr	r8, [r4, #160]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #88]
	mov	fp, r0
	cmp	r3, #0
	beq	.L8780
	cmp	r8, #0
	beq	.L8781
	ldr	r3, [r8]
	cmp	r3, #0
	beq	.L8782
	add	r9, r4, #168
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r9]
	add	r2, r2, #1
	strex	r3, r2, [r9]
	teq	r3, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #1
	beq	.L8754
	mov	r0, r7
	mov	r1, fp
	ldr	r3, [r4, #168]
	bl	_raw_spin_unlock_irqrestore(PLT)
.L8749:
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, r6
	b	.L8763
.L8759:
	mov	r9, #16
	b	.L8743
.L8754:
	ldr	r3, [r8]
	mov	lr, #8
	mvn	ip, #94
	mov	r0, r7
	mov	r1, fp
	str	lr, [r8, #4]
	strb	ip, [r3]
	strb	r2, [r3, #1]
	strb	r10, [r3, #2]
	strb	r10, [r3, #3]
	ldrb	r2, [r4, #196]	@ zero_extendqisi2
	strb	r10, [r3, #6]
	strb	r10, [r3, #7]
	strh	r2, [r3, #4]	@ unaligned
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #156]
	mov	r1, r8
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L8749
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r9]
	sub	r3, r3, #1
	strex	r2, r3, [r9]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L8783+12
	mov	r2, r0
	ldr	r0, .L8783+16
.LPIC1976:
	add	r1, pc, r1
	add	r1, r1, #3632
.LPIC1975:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L8749
.L8776:
	mov	r1, r7
	mov	r2, r6
	bl	__copy_from_user(PLT)
	mov	r10, r0
	b	.L8747
.L8774:
	mvn	r3, #0
	mvn	r8, #11
	ldr	r0, [r3, #-11]
	b	.L8744
.L8775:
	mov	r0, r9
	mvn	r8, #11
	bl	kfree(PLT)
	mvn	r3, #0
	ldr	r0, [r3, #-11]
	b	.L8744
.L8772:
	ldr	r1, .L8783+20
	mov	r3, #4096
	ldr	r0, .L8783+24
.LPIC1959:
	add	r1, pc, r1
	add	r1, r1, #3600
.LPIC1958:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #11
	b	.L8763
.L8771:
	ldr	r1, .L8783+28
	ldr	r0, .L8783+32
.LPIC1957:
	add	r1, pc, r1
	add	r1, r1, #3600
.LPIC1956:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L8763
.L8770:
	ldr	r1, .L8783+36
	ldr	r0, .L8783+40
.LPIC1955:
	add	r1, pc, r1
	add	r1, r1, #3600
.LPIC1954:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L8763
.L8777:
	ldr	r1, .L8783+44
	mov	r2, r10
	ldr	r0, .L8783+48
.LPIC1978:
	add	r1, pc, r1
	add	r1, r1, #3600
.LPIC1977:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, [r8]
	bl	kfree(PLT)
	mov	r0, r8
	bl	kfree(PLT)
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, #0
	b	.L8763
.L8773:
	ldr	r1, .L8783+52
	ldr	r0, .L8783+56
.LPIC1963:
	add	r1, pc, r1
	add	r1, r1, #3600
.LPIC1962:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #31
	b	.L8763
.L8779:
	ldr	r1, .L8783+60
	mov	r2, r4
	ldr	r0, .L8783+64
.LPIC1968:
	add	r1, pc, r1
	add	r1, r1, #3616
.LPIC1967:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r8]
	bl	kfree(PLT)
	mov	r0, r8
	bl	kfree(PLT)
	b	.L8749
.L8778:
	ldr	r1, .L8783+68
	mov	r2, r4
	ldr	r0, .L8783+72
.LPIC1966:
	add	r1, pc, r1
	add	r1, r1, #3616
.LPIC1965:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r8]
	bl	kfree(PLT)
	mov	r0, r8
	bl	kfree(PLT)
	b	.L8749
.L8782:
	ldr	r1, .L8783+76
	mov	r2, r4
	ldr	r0, .L8783+80
.LPIC1974:
	add	r1, pc, r1
.LPIC1973:
	add	r0, pc, r0
.L8767:
	add	r1, r1, #3632
	add	r1, r1, #12
	bl	printk(PLT)
	mov	r0, r7
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L8749
.L8781:
	ldr	r1, .L8783+84
	mov	r2, r4
	ldr	r0, .L8783+88
.LPIC1972:
	add	r1, pc, r1
.LPIC1971:
	add	r0, pc, r0
	b	.L8767
.L8780:
	ldr	r1, .L8783+92
	mov	r2, r4
	ldr	r0, .L8783+96
.LPIC1970:
	add	r1, pc, r1
.LPIC1969:
	add	r0, pc, r0
	b	.L8767
.L8784:
	.align	2
.L8783:
	.word	.LANCHOR3-(.LPIC1961+8)
	.word	.LC503-(.LPIC1960+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC1979+8))
	.word	.LANCHOR3-(.LPIC1976+8)
	.word	.LC509-(.LPIC1975+8)
	.word	.LANCHOR3-(.LPIC1959+8)
	.word	.LC502-(.LPIC1958+8)
	.word	.LANCHOR3-(.LPIC1957+8)
	.word	.LC170-(.LPIC1956+8)
	.word	.LANCHOR3-(.LPIC1955+8)
	.word	.LC402-(.LPIC1954+8)
	.word	.LANCHOR3-(.LPIC1978+8)
	.word	.LC172-(.LPIC1977+8)
	.word	.LANCHOR3-(.LPIC1963+8)
	.word	.LC321-(.LPIC1962+8)
	.word	.LANCHOR3-(.LPIC1968+8)
	.word	.LC505-(.LPIC1967+8)
	.word	.LANCHOR3-(.LPIC1966+8)
	.word	.LC504-(.LPIC1965+8)
	.word	.LANCHOR3-(.LPIC1974+8)
	.word	.LC508-(.LPIC1973+8)
	.word	.LANCHOR3-(.LPIC1972+8)
	.word	.LC507-(.LPIC1971+8)
	.word	.LANCHOR3-(.LPIC1970+8)
	.word	.LC506-(.LPIC1969+8)
	.fnend
	.size	mbim_write, .-mbim_write
	.align	2
	.type	rmnet_close_sdio_work, %function
rmnet_close_sdio_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #-112]
	cmp	r3, #0
	bxeq	lr
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r0, #-208]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L8788
	blx	r3
.L8788:
	sub	r5, r4, #116
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #-204]
	mov	r2, #0
	mvn	ip, #94
	mov	r1, r0
	mov	r0, r5
	ldr	r3, [r3]
	strb	r2, [r3, #1]
	strb	r2, [r3, #2]
	strb	r2, [r3, #3]
	strb	ip, [r3]
	ldrb	ip, [r4, #-200]	@ zero_extendqisi2
	strb	r2, [r3, #6]
	strb	r2, [r3, #7]
	strh	ip, [r3, #4]	@ unaligned
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #-208]
	mov	r2, #208
	ldr	r1, [r4, #-204]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L8831
.L8789:
	ldr	r0, [r4, #-216]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L8791
	blx	r3
.L8791:
	ldr	r0, [r4, #-212]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L8792
	blx	r3
.L8792:
	sub	r0, r4, #68
	bl	cancel_work_sync(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #-112]
	mov	r6, r0
	cmp	r3, #0
	bne	.L8832
.L8809:
	mov	r0, r5
	mov	r1, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L8831:
	ldr	r3, [r4, #-112]
	cmp	r3, #0
	bne	.L8833
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L8832:
	ldr	r7, [r4, #-172]
	sub	r8, r4, #172
	cmp	r7, r8
	movne	r9, #0
	beq	.L8798
.L8797:
	mov	r0, r7
	sub	r10, r7, #36
	bl	list_del(PLT)
	ldr	r3, [r4, #-164]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #-164]
	str	r9, [r7, #-36]
	ldr	r7, [r4, #-216]
	bl	kfree(PLT)
	mov	r1, r10
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r7, [r4, #-172]
	cmp	r7, r8
	bne	.L8797
.L8798:
	ldr	r7, [r4, #-144]
	sub	r8, r4, #144
	cmp	r7, r8
	movne	r9, #0
	beq	.L8796
.L8801:
	mov	r0, r7
	sub	r10, r7, #36
	bl	list_del(PLT)
	ldr	r3, [r4, #-136]
	mov	r0, #0
	sub	r3, r3, #1
	str	r3, [r4, #-136]
	str	r9, [r7, #-36]
	ldr	r7, [r4, #-212]
	bl	kfree(PLT)
	mov	r1, r10
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r7, [r4, #-144]
	cmp	r7, r8
	bne	.L8801
.L8796:
	ldr	r7, [r4, #-196]
	sub	r8, r4, #196
	cmp	r7, r8
	beq	.L8800
.L8804:
	mov	r0, r7
	sub	r9, r7, #8
	bl	list_del(PLT)
	ldr	r3, [r4, #-188]
	sub	r3, r3, #1
	str	r3, [r4, #-188]
	ldr	r0, [r7, #-8]
	bl	kfree(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	ldr	r7, [r4, #-196]
	cmp	r8, r7
	bne	.L8804
.L8800:
	ldr	r7, [r4, #-184]
	sub	r8, r4, #184
	cmp	r7, r8
	beq	.L8803
.L8806:
	mov	r0, r7
	sub	r9, r7, #8
	bl	list_del(PLT)
	ldr	r3, [r4, #-176]
	sub	r3, r3, #1
	str	r3, [r4, #-176]
	ldr	r0, [r7, #-8]
	bl	kfree(PLT)
	mov	r0, r9
	bl	kfree(PLT)
	ldr	r7, [r4, #-184]
	cmp	r7, r8
	bne	.L8806
.L8803:
	ldr	r1, .L8835
	mov	r3, #0
	sub	r9, r4, #160
	ldr	r0, .L8835+4
	mov	r8, r3
	str	r3, [r4, #-108]
.LPIC1983:
	add	r1, pc, r1
	add	r1, r1, #3664
.LPIC1982:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
.L8805:
	ldr	r3, [r4, #-160]
	cmp	r3, r9
	cmpne	r3, #0
	mov	r0, r3
	movne	r7, #1
	moveq	r7, #0
	beq	.L8834
	ldr	r2, [r4, #-152]
	sub	r2, r2, #1
	str	r2, [r4, #-152]
	ldmia	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	b	.L8805
.L8833:
	ldr	r1, .L8835+8
	mov	r2, r0
	ldr	r0, .L8835+12
.LPIC1981:
	add	r1, pc, r1
	add	r1, r1, #3664
.LPIC1980:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L8789
.L8834:
	sub	r8, r4, #132
.L8807:
	ldr	r3, [r4, #-132]
	cmp	r3, r8
	cmpne	r3, #0
	mov	r0, r3
	beq	.L8809
	ldr	r2, [r4, #-124]
	sub	r2, r2, #1
	str	r2, [r4, #-124]
	ldmia	r3, {r1, r2}
	str	r7, [r3]
	str	r7, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	b	.L8807
.L8836:
	.align	2
.L8835:
	.word	.LANCHOR3-(.LPIC1983+8)
	.word	.LC510-(.LPIC1982+8)
	.word	.LANCHOR3-(.LPIC1981+8)
	.word	.LC317-(.LPIC1980+8)
	.fnend
	.size	rmnet_close_sdio_work, .-rmnet_close_sdio_work
	.align	2
	.global	usb_gadget_get_string
	.type	usb_gadget_get_string, %function
usb_gadget_get_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	mov	r3, r0
	bne	.L8838
	mov	r1, #4
	mov	ip, #3
	mov	r0, r1
	strb	r1, [r2]
	strb	ip, [r2, #1]
	ldrh	r1, [r3]
	strb	r1, [r2, #2]
	ldrh	r3, [r3]
	mov	r3, r3, lsr #8
	strb	r3, [r2, #3]
	bx	lr
.L8838:
	ldr	r3, [r0, #4]
	cmp	r3, #0
	beq	.L8860
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	b	.L8858
.L8861:
	ldrb	r0, [r3]	@ zero_extendqisi2
	cmp	r1, r0
	beq	.L8842
	adds	r3, r3, #8
	beq	.L8841
.L8858:
	ldr	r4, [r3, #4]
	cmp	r4, #0
	bne	.L8861
.L8841:
	mvn	r0, #21
.L8853:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L8842:
	mov	r0, r4
	mov	r5, r2
	bl	strlen(PLT)
	mov	r3, #126
	cmp	r0, #126
	movcc	r1, r0
	movcs	r1, r3
	str	r3, [sp]
	mov	r2, #1
	mov	r0, r4
	add	r3, r5, #2
	bl	utf8s_to_utf16s(PLT)
	cmp	r0, #0
	blt	.L8841
	add	r3, r0, #1
	mov	r2, #3
	mov	r3, r3, asl #1
	strb	r2, [r5, #1]
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r5]
	b	.L8853
.L8860:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_gadget_get_string, .-usb_gadget_get_string
	.align	2
	.global	usb_find_descriptor_fillbuf
	.type	usb_find_descriptor_fillbuf, %function
usb_find_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	beq	.L8869
	ldr	ip, [r2]
	cmp	ip, #0
	beq	.L8874
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	cmp	lr, r3
	beq	.L8866
.L8865:
	ldr	ip, [r2, #4]!
	cmp	ip, #0
	beq	.L8875
	ldrb	lr, [ip, #1]	@ zero_extendqisi2
	cmp	lr, r3
	bne	.L8865
.L8866:
	ldrb	r4, [ip]	@ zero_extendqisi2
	cmp	r4, r1
	bhi	.L8870
	mov	r1, ip
	mov	r2, r4
	bl	memcpy(PLT)
	mov	r0, r4
.L8863:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L8875:
	mvn	r0, #1
	b	.L8863
.L8870:
	mvn	r0, #21
	b	.L8863
.L8874:
	mvn	r0, #1
	bx	lr
.L8869:
	mvn	r0, #21
	bx	lr
	.fnend
	.size	usb_find_descriptor_fillbuf, .-usb_find_descriptor_fillbuf
	.align	2
	.global	usb_descriptor_fillbuf
	.type	usb_descriptor_fillbuf, %function
usb_descriptor_fillbuf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	subs	r6, r2, #0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L8880
	mov	r5, r1
	ldr	r1, [r6]
	cmp	r1, #0
	beq	.L8884
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r5, r4
	bcc	.L8880
	mov	r7, r0
	mov	r3, r0
	b	.L8882
.L8883:
	ldrb	r4, [r1]	@ zero_extendqisi2
	cmp	r4, r5
	bhi	.L8880
.L8882:
	mov	r0, r3
	mov	r2, r4
	bl	memcpy(PLT)
	ldr	r1, [r6, #4]!
	rsb	r5, r4, r5
	add	r3, r0, r4
	cmp	r1, #0
	bne	.L8883
	rsb	r0, r7, r3
.L8878:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L8880:
	mvn	r0, #21
	b	.L8878
.L8884:
	mov	r0, r1
	b	.L8878
	.fnend
	.size	usb_descriptor_fillbuf, .-usb_descriptor_fillbuf
	.align	2
	.type	composite_setup, %function
composite_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	add	r0, r0, #32
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #68
	sub	sp, sp, #68
	bl	dev_get_drvdata(PLT)
	ldrh	r10, [r8, #4]	@ unaligned
	mov	r9, r0
	ldrh	fp, [r8, #6]	@ unaligned
	ldr	r4, [r0, #4]
	ldrh	r7, [r8, #2]	@ unaligned
	uxth	r6, r10
	cmp	fp, #4096
	uxtb	r2, r6
	bls	.L8887
	ldrsb	r3, [r8]
	cmp	r3, #0
	movlt	r3, #4096
	movlt	fp, r3
	strlth	r3, [r8, #6]	@ movhi
	bge	.L9156
.L8887:
	ldrb	r1, [r4, #26]	@ zero_extendqisi2
	mov	r0, #0
	ldr	r3, .L9357
	str	r0, [r4, #4]
	bfc	r1, #1, #1
.LPIC1985:
	add	r3, pc, r3
	strb	r1, [r4, #26]
	str	r3, [r4, #28]
	ldr	r3, [r5, #4]
	str	r9, [r3]
	ldrb	ip, [r8, #1]	@ zero_extendqisi2
	cmp	ip, #11
	addls	pc, pc, ip, asl #2
	b	.L8890
.L8892:
	b	.L8891
	b	.L8893
	b	.L8890
	b	.L8893
	b	.L8890
	b	.L8890
	b	.L8894
	b	.L8890
	b	.L8895
	b	.L8896
	b	.L8897
	b	.L8898
	.p2align 1
.L8890:
	ldrb	r3, [r8]	@ zero_extendqisi2
.L8899:
	and	r3, r3, #31
	cmp	r3, #1
	beq	.L9088
	cmp	r3, #2
	bne	.L9334
	ldr	r0, [r9, #12]
	and	r3, r6, #128
	and	r6, r6, #15
	orr	r6, r6, r3, lsr #3
	mov	r1, r0
	ldr	r3, [r1, #36]!
	cmp	r1, r3
	sub	r2, r3, #72
	beq	.L9090
	ldr	ip, [r3, #8]
	sxtb	r3, r6
	mov	ip, ip, lsr r3
	tst	ip, #1
	bne	.L9093
	mov	ip, #1
	mov	ip, ip, asl r3
	b	.L9094
.L9095:
	ldr	r3, [r3, #8]
	tst	ip, r3
	bne	.L9093
.L9094:
	ldr	r3, [r2, #72]
	cmp	r1, r3
	sub	r2, r3, #72
	bne	.L9095
.L9090:
	cmp	r0, #0
	beq	.L9156
.L9113:
	ldr	r3, [r0, #16]
	cmp	r3, #0
	beq	.L9156
	mov	r1, r8
	blx	r3
	mov	r6, r0
.L9096:
	movw	r3, #32767
	cmp	r6, r3
	bne	.L9191
	ldr	r3, [r9, #56]
	add	r3, r3, #1
	str	r3, [r9, #56]
.L9191:
	mov	r0, r6
	add	sp, sp, #68
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L8906:
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bls	.L9156
	ldr	r3, [r5, #16]
	cmp	r3, #4
	bls	.L8903
.L9156:
.L8889:
	mvn	r6, #94
	b	.L9191
.L9334:
	ldr	r0, [r9, #12]
	b	.L9090
.L9088:
	ldr	r0, [r9, #12]
	clz	r3, r0
	mov	r3, r3, lsr #5
	cmp	r2, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L9090
	add	r2, r2, #12
	ldr	r2, [r0, r2, asl #2]
	cmp	r2, #0
	beq	.L9113
	ldr	r3, [r2, #52]
	cmp	r3, #0
	beq	.L9113
.L9114:
	mov	r0, r2
	mov	r1, r8
	blx	r3
	mov	r6, r0
	b	.L9096
.L8891:
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L8890
	ldrb	r3, [r8]	@ zero_extendqisi2
	cmp	r3, #129
	bne	.L8899
	ldr	r3, [r4]
	mov	r1, #0
	strb	r1, [r3]
	strb	r1, [r3, #1]
	ldr	r6, [r9, #12]
	clz	r3, r6
	mov	r3, r3, lsr #5
	cmp	r2, #15
	orrhi	r3, r3, #1
	cmp	r3, r1
	bne	.L9322
	add	r2, r2, #12
	ldr	r0, [r6, r2, asl #2]
	cmp	r0, #0
	beq	.L9322
	ldr	r3, [r0, #64]
	cmp	r3, #0
	beq	.L9152
	blx	r3
	cmp	r0, #0
	uxtbge	ip, r0
	ubfxge	r3, r0, #8, #8
	blt	.L9322
.L9082:
	ldr	r2, [r4]
	cmp	fp, #2
	mov	r10, #2
	movle	r6, #0
	movgt	r6, #1
	strb	ip, [r2]
	strb	r3, [r2, #1]
	b	.L8924
.L8893:
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bls	.L8890
	ldrb	r3, [r8]	@ zero_extendqisi2
	cmp	r3, #1
	bne	.L8899
	cmp	r7, #0
	bne	.L9156
	ldr	r8, [r9, #12]
	clz	r3, r8
	mov	r3, r3, lsr #5
	cmp	r2, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L9156
	add	r2, r2, #12
	ldr	r0, [r8, r2, asl #2]
	cmp	r0, #0
	beq	.L9156
	ldr	r3, [r0, #68]
	cmp	r3, #0
	beq	.L9320
	mov	r1, r6, lsr #8
	blx	r3
	subs	r6, r0, #0
	blt	.L9335
.L9070:
	movw	r3, #32767
	subs	r2, r6, r3
	movne	r2, #1
	cmp	r6, #0
	movlt	r2, #0
	cmp	r2, #0
	rsbeq	r3, r3, r6
	clzeq	r3, r3
	moveq	r3, r3, lsr #5
	bne	.L9109
.L9077:
	cmp	fp, #0
	moveq	r3, #0
	andne	r3, r3, #1
	cmp	r3, #0
	beq	.L9191
	cmp	r9, #0
	movweq	r6, #32767
	beq	.L9191
	ldr	r3, .L9357+4
	movw	r1, #1510
	movw	r6, #32767
	ldr	r0, .L9357+8
	ldr	r2, .L9357+12
.LPIC2013:
	add	r3, pc, r3
	add	r3, r3, #3712
.LPIC2011:
	add	r0, pc, r0
.LPIC2012:
	add	r2, pc, r2
	add	r3, r3, #12
	bl	warn_slowpath_fmt(PLT)
	b	.L9191
.L8894:
	ldrb	r3, [r8]	@ zero_extendqisi2
	cmp	r3, #128
	bne	.L8899
	mov	r1, r7, lsr #8
	sub	r3, r1, #1
	cmp	r3, #14
	addls	pc, pc, r3, asl #2
	b	.L9156
.L8902:
	b	.L8901
	b	.L8903
	b	.L8904
	b	.L9156
	b	.L9156
	b	.L8905
	b	.L8906
	b	.L9156
	b	.L9156
	b	.L9156
	b	.L9156
	b	.L9156
	b	.L9156
	b	.L9156
	b	.L8907
	.p2align 1
.L8895:
	ldrb	r3, [r8]	@ zero_extendqisi2
	cmp	r3, #128
	bne	.L8899
	ldr	r3, [r9, #12]
	cmp	r3, #0
	beq	.L9071
	ldr	r6, [r4]
	bl	get_config_number(PLT)
	add	r0, r0, #1
	strb	r0, [r6]
.L9072:
	adds	r10, fp, #0
	movne	r10, #1
	cmp	r10, fp
	movge	r6, #0
	movlt	r6, #1
	b	.L8924
.L8896:
	ldrb	r3, [r8]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L8899
	add	r3, r9, #60
	mov	r0, r3
	str	r3, [sp, #12]
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r9, #12]
	ldr	r10, [r9]
	cmp	r3, #0
	mov	r6, r10
	beq	.L9030
	ldrb	r3, [r3, #20]	@ zero_extendqisi2
	cmp	r7, r3
	beq	.L9336
	cmp	r7, #0
	beq	.L9337
.L9100:
	mov	r3, r9
	str	r10, [sp, #16]
	mov	r10, r5
	ldr	r8, [r3, #36]!
	mov	r5, r4
	sub	r8, r8, #28
	mov	r4, r3
.L9033:
	add	r2, r8, #28
	mov	r0, r7
	cmp	r2, r4
	beq	.L9338
	ldrb	r2, [r8, #20]	@ zero_extendqisi2
	cmp	r7, r2
	beq	.L9317
	bl	check_config(PLT)
	cmp	r0, #0
	bne	.L9317
	ldr	r8, [r8, #28]
	sub	r8, r8, #28
	b	.L9033
.L8897:
	ldrb	r3, [r8]	@ zero_extendqisi2
	cmp	r3, #129
	bne	.L8899
	ldr	r7, [r9, #12]
	clz	r3, r7
	mov	r3, r3, lsr #5
	cmp	r2, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L9156
	add	r2, r2, #12
	ldr	r0, [r7, r2, asl #2]
	cmp	r0, #0
	beq	.L9156
	ldr	r3, [r0, #44]
	cmp	r3, #0
	beq	.L9078
	mov	r1, r6
	blx	r3
	subs	r6, r0, #0
	blt	.L9191
	uxtb	r3, r6
.L9078:
	ldr	r2, [r4]
	adds	r10, fp, #0
	movne	r10, #1
	cmp	r10, fp
	movge	r6, #0
	movlt	r6, #1
	strb	r3, [r2]
	b	.L8924
.L8898:
	ldrb	r3, [r8]	@ zero_extendqisi2
	cmp	r3, #1
	bne	.L8899
	ldr	r8, [r9, #12]
	clz	r3, r8
	mov	r3, r3, lsr #5
	cmp	r2, #15
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L9156
	add	r2, r2, #12
	ldr	r0, [r8, r2, asl #2]
	cmp	r0, #0
	beq	.L9156
	cmp	r7, #0
	beq	.L9073
	ldr	r3, [r0, #40]
	cmp	r3, #0
	beq	.L9156
.L9074:
	mov	r1, r6
	mov	r2, r7
	blx	r3
	movw	r3, #32767
	mov	r6, r0
	cmp	r0, r3
	beq	.L9339
	cmp	r0, #0
	blt	.L9191
.L9109:
	mov	r10, r6
.L9319:
	cmp	r10, fp
	movge	r6, #0
	movlt	r6, #1
.L8924:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r10, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfi	r3, r6, #1, #1
	strb	r3, [r4, #26]
	ldr	r0, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r6, r0, #0
	movlt	r3, #0
	strlt	r3, [r4, #44]
	b	.L9191
.L9093:
	cmp	r2, #0
	beq	.L9090
	ldr	r3, [r2, #52]
	cmp	r3, #0
	bne	.L9114
	b	.L9090
.L8903:
	mov	r0, fp
	str	r1, [sp, #12]
	bl	set_config_mode(PLT)
	ldr	r3, [r9]
	ldr	r1, [sp, #12]
	ldr	r8, [r3, #16]
	cmp	r8, #5
	streq	r8, [sp, #12]
	beq	.L8937
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L9125
	sub	r3, r8, #3
	clz	r3, r3
	mov	r3, r3, lsr #5
	cmp	r1, #7
	eoreq	r3, r3, #1
	cmp	r3, #0
	moveq	r3, #0
	movne	r3, #3
	str	r3, [sp, #12]
.L8937:
	uxtb	r0, r7
	str	r1, [sp, #16]
	bl	set_config_number(PLT)
	mov	r3, r9
	ldr	r1, [sp, #16]
	ldr	r7, [r3, #36]!
	cmp	r3, r7
	sub	r7, r7, #28
	beq	.L8994
	ldr	r2, [sp, #12]
	cmp	r2, #3
	beq	.L8958
	cmp	r2, #5
	bne	.L9255
.L9253:
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	tst	r2, #1
	beq	.L9245
	cmp	r0, #0
	sub	r0, r0, #1
	beq	.L9305
.L9245:
	ldr	r7, [r7, #28]
	cmp	r3, r7
	sub	r7, r7, #28
	bne	.L9253
.L8994:
	mvn	r6, #21
	b	.L9191
.L9255:
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	tst	r2, #4
	beq	.L9251
	cmp	r0, #0
	sub	r0, r0, #1
	beq	.L9305
.L9251:
	ldr	r7, [r7, #28]
	cmp	r3, r7
	sub	r7, r7, #28
	bne	.L9255
	b	.L8994
.L8958:
	ldrb	r2, [r7, #45]	@ zero_extendqisi2
	tst	r2, #2
	beq	.L8944
	cmp	r0, #0
	sub	r0, r0, #1
	beq	.L9305
.L8944:
	ldr	r7, [r7, #28]
	cmp	r3, r7
	sub	r7, r7, #28
	bne	.L8958
	b	.L8994
.L8901:
	ldr	r3, [r9]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L8908
	ldr	r2, [r3, #16]
	mov	r7, r9
	ldr	r6, [r7, #36]!
	cmp	r2, #3
	beq	.L8909
	cmp	r7, r6
	sub	r6, r6, #28
	beq	.L9118
	cmp	r2, #5
	beq	.L8911
.L9105:
	mov	r3, #0
.L8913:
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	mov	r0, r6
	add	r1, r3, #1
	tst	r2, #4
	beq	.L8912
	bl	count_multi_config(PLT)
	mov	r3, r0
.L8912:
	ldr	r6, [r6, #28]
	cmp	r7, r6
	sub	r6, r6, #28
	bne	.L8913
.L8914:
	uxtb	r6, r3
	ldr	r3, [r9]
.L8910:
	strb	r6, [r9, #34]
	ldr	r2, [r3, #4]
	mov	r3, #2
	ldrh	r2, [r2, #20]
	str	r3, [r9, #64]
	strb	r2, [r9, #24]
	ldr	r2, [r5, #20]
	cmp	r2, #4
	bls	.L8919
	ldr	r2, [r5, #16]
	cmp	r2, #4
	bls	.L8920
	mov	r0, #0
	mov	r1, #3
	mov	r2, #9
	mov	r3, #8
	strb	r0, [r9, #19]
	strb	r1, [r9, #20]
	strb	r2, [r9, #24]
	str	r3, [r9, #64]
.L8921:
	cmp	fp, #17
	movls	r10, fp
	movls	r6, #0
	bls	.L8923
	cmp	fp, #18
	mov	r10, #18
	movle	r6, #0
	movgt	r6, #1
.L8923:
	add	r1, r9, #17
	ldr	r0, [r4]
	mov	r2, r10
	bl	memcpy(PLT)
	ldr	r0, .L9357+16
.LPIC1986:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L8924
.L8907:
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bhi	.L9025
	ldrb	r3, [r5, #377]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9156
.L9025:
	ldr	r6, [r9, #4]
	mov	r3, #0
	mov	r1, #5
	mov	ip, #15
	mov	r8, #12
	mov	r2, #1
	mov	r7, #7
	mov	r0, #2
	mov	lr, #16
	ldr	r6, [r6]
	strb	r1, [r6, #2]
	strb	r3, [r6, #3]
	strb	r3, [r6, #4]
	strb	r1, [r6]
	strb	ip, [r6, #1]
	ldr	r1, [r9, #4]
	ldr	r1, [r1]
	strh	r8, [r6, #2]	@ movhi
	strb	r2, [r6, #4]
	strb	r3, [r1, #8]
	strb	r3, [r1, #9]
	strb	r3, [r1, #10]
	strb	r3, [r1, #11]
	strb	r7, [r1, #5]
	strb	r0, [r1, #7]
	strb	lr, [r1, #6]
	ldr	r1, [r9]
	ldr	r1, [r1, #20]
	cmp	r1, #4
	bls	.L9026
	ldr	r7, [r9, #4]
	mov	r10, #10
	ldrh	r1, [r6, #2]	@ unaligned
	ldrb	r0, [r6, #4]	@ zero_extendqisi2
	ldr	r8, [r7]
	add	r7, r1, r10
	add	r0, r0, r2
	strh	r7, [r6, #2]	@ movhi
	add	r7, r8, r1
	strb	r0, [r6, #4]
	strb	r10, [r8, r1]
	strb	r3, [r7, #3]
	strb	r3, [r7, #5]
	mov	r3, #3
	strb	lr, [r7, #1]
	strb	ip, [r7, #4]
	strb	r2, [r7, #6]
	strb	r3, [r7, #2]
	ldr	r3, [r9]
	ldr	r3, [r3]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L9027
	add	r0, sp, #56
	blx	r3
	ldrb	r2, [sp, #56]	@ zero_extendqisi2
	ldrh	r3, [sp, #58]
.L9028:
	strb	r2, [r7, #7]
	strh	r3, [r7, #8]	@ unaligned
.L9026:
	ldrh	r10, [r6, #2]	@ unaligned
.L9324:
	cmp	fp, r10
	bcs	.L9319
.L9318:
	mov	r10, fp
	mov	r6, #0
	b	.L8924
.L8905:
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bls	.L9156
	ldr	r3, [r5, #16]
	cmp	r3, #4
	bhi	.L9156
	ldr	r1, [r9, #4]
	mov	r2, #10
	mov	r3, #6
	ldr	r7, [r1]
	strb	r2, [r7]
	strb	r3, [r7, #1]
	ldrh	r3, [r9, #19]	@ unaligned
	strh	r3, [r7, #2]	@ unaligned
	ldrb	r3, [r9, #21]	@ zero_extendqisi2
	strb	r3, [r7, #4]
	ldrb	r3, [r9, #22]	@ zero_extendqisi2
	strb	r3, [r7, #5]
	ldrb	r3, [r9, #23]	@ zero_extendqisi2
	strb	r3, [r7, #6]
	ldr	r3, [r9]
	ldr	r3, [r3, #4]
	ldrh	r3, [r3, #20]
	strb	r3, [r7, #7]
	ldr	r3, [r9]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bls	.L8925
	ldr	r3, [r3, #16]
	cmp	r3, #3
	beq	.L8926
	ldr	r6, [r9, #36]!
	cmp	r9, r6
	sub	r6, r6, #28
	beq	.L9121
	cmp	r3, #5
	beq	.L8928
	mov	r8, #0
.L8934:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	mov	r0, r6
	add	r1, r8, #1
	tst	r3, #2
	beq	.L8933
	bl	count_multi_config(PLT)
	mov	r8, r0
.L8933:
	ldr	r6, [r6, #28]
	cmp	r9, r6
	sub	r6, r6, #28
	bne	.L8934
.L8927:
	cmp	fp, #10
	mov	r3, #0
	strb	r8, [r7, #8]
	movlt	r10, fp
	movge	r10, #10
	cmp	fp, r10
	strb	r3, [r7, #9]
	movle	r6, #0
	movgt	r6, #1
	b	.L8924
.L8904:
	mov	r0, fp
	bl	set_string_mode(PLT)
	ands	r3, r7, #255
	ldr	r7, [r4]
	str	r3, [sp, #12]
	beq	.L9340
	ldrb	r2, [r9, #49]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L9341
	ldrb	r2, [r9, #50]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L9342
	ldrb	r2, [r9, #51]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L9343
.L9000:
	ldr	r2, .L9357+20
.LPIC1995:
	add	r2, pc, r2
	ldr	r2, [r2, #24]
	ldr	r8, [r2, #16]
	cmp	r8, #0
	subne	r8, r8, #4
	beq	.L9008
.L9004:
	ldr	r0, [r8, #4]!
	cmp	r0, #0
	beq	.L9008
	ldrh	r3, [r0]
	cmp	r3, r6
	bne	.L9004
	ldr	r1, [sp, #12]
	mov	r2, r7
	bl	usb_gadget_get_string(PLT)
	cmp	r0, #0
	ble	.L9004
.L9316:
	mov	r2, r0
.L9001:
	uxth	r2, r2
	cmp	fp, r2
	bcc	.L9318
	cmp	r2, fp
	mov	r10, r2
	movge	r6, #0
	movlt	r6, #1
	b	.L8924
.L9322:
	cmp	fp, #2
	mov	r10, #2
	movle	r6, #0
	movgt	r6, #1
	b	.L8924
.L9071:
	ldr	r2, [r4]
	strb	r3, [r2]
	b	.L9072
.L9073:
	ldr	r3, [r0, #44]
	cmp	r3, #0
	beq	.L9320
	ldr	r3, [r0, #40]
	b	.L9074
.L9339:
	ldr	r2, [r9, #56]
	mov	r3, #1
	add	r2, r2, r3
	str	r2, [r9, #56]
	b	.L9077
.L8908:
	mov	r7, r9
	ldr	r6, [r7, #36]!
	cmp	r7, r6
	sub	r6, r6, #28
	bne	.L9105
.L9118:
	mov	r6, #0
	b	.L8910
.L9125:
	mov	r3, #0
	str	r3, [sp, #12]
	b	.L8937
.L8919:
	ldrb	r2, [r5, #377]	@ zero_extendqisi2
	cmp	r2, #0
	beq	.L8921
	mov	r2, #1
	strb	r3, [r9, #20]
	strb	r2, [r9, #19]
	b	.L8921
.L8911:
	mov	r3, #0
.L8918:
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	mov	r0, r6
	add	r1, r3, #1
	tst	r2, #1
	beq	.L8917
	bl	count_multi_config(PLT)
	mov	r3, r0
.L8917:
	ldr	r6, [r6, #28]
	cmp	r7, r6
	sub	r6, r6, #28
	bne	.L8918
	b	.L8914
.L9305:
	ldr	r2, [r9, #4]
	mov	r3, #9
	ldr	r9, [r2]
	strb	r1, [r9, #1]
	add	r10, r9, r3
	strb	r3, [r9]
	ldrb	r3, [r7, #44]	@ zero_extendqisi2
	strb	r3, [r9, #4]
	bl	get_config_number(PLT)
	add	r0, r0, #1
	strb	r0, [r9, #5]
	ldrb	r3, [r7, #21]	@ zero_extendqisi2
	strb	r3, [r9, #6]
	ldrb	r3, [r7, #22]	@ zero_extendqisi2
	mvn	r3, r3, asl #25
	mvn	r3, r3, lsr #25
	strb	r3, [r9, #7]
	ldrb	r3, [r7, #23]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L8947
	ldr	r2, [r7, #24]
	mov	r3, #500
	ldr	r2, [r2, #64]
	sdiv	r3, r3, r2
	uxtb	r3, r3
.L8947:
	strb	r3, [r9, #8]
	ldr	r2, [r7, #8]
	cmp	r2, #0
	beq	.L9128
	mov	r0, r10
	movw	r1, #4087
	bl	usb_descriptor_fillbuf(PLT)
	subs	r6, r0, #0
	blt	.L9191
	rsb	r3, r6, #4080
	add	r10, r10, r6
	add	r3, r3, #7
	str	r3, [sp, #16]
.L8948:
	mov	r3, r7
	ldr	ip, [r3, #36]!
	cmp	r3, ip
	sub	r8, ip, #72
	beq	.L8949
	mov	r6, r5
	mov	r5, r4
	mov	r4, r3
	b	.L8956
.L9346:
	ldr	r2, [r8, #12]
.L8954:
	cmp	r2, #0
	beq	.L8950
	mov	r0, r10
	ldr	r1, [sp, #16]
	bl	usb_descriptor_fillbuf(PLT)
	subs	ip, r0, #0
	blt	.L9308
	ldr	r3, [sp, #12]
	mov	r0, r8
	mov	r1, r10
	ldr	r2, [sp, #16]
	str	ip, [sp, #20]
	str	r3, [sp]
	mov	r3, r7
	bl	change_conf(PLT)
	cmp	r0, #0
	ldr	ip, [sp, #20]
	blt	.L9344
	ldr	r3, [sp, #16]
	add	r10, r10, ip
	rsb	r3, ip, r3
	str	r3, [sp, #16]
.L8950:
	ldr	r8, [r8, #72]
	cmp	r4, r8
	sub	r8, r8, #72
	beq	.L9345
.L8956:
	ldr	r0, [r8]
	bl	is_available_function(PLT)
	cmp	r0, #0
	beq	.L8950
	ldr	r3, [sp, #12]
	cmp	r3, #3
	beq	.L8952
	cmp	r3, #5
	beq	.L9346
	ldr	r2, [r8, #16]
	b	.L8954
.L8952:
	ldr	r2, [r8, #8]
	b	.L8954
.L9152:
	mov	r3, ip
	b	.L9082
.L9345:
	mov	r4, r5
	mov	r5, r6
.L8949:
	rsb	r6, r9, r10
	mov	r0, r7
	mov	r1, r9
	uxth	r10, r6
	bl	set_interface_count(PLT)
	cmp	r6, #0
	strh	r10, [r9, #2]	@ unaligned
	bge	.L9324
	b	.L9191
.L8920:
	mov	r2, #16
	strb	r3, [r9, #20]
	strb	r2, [r9, #19]
	b	.L8921
.L9340:
	mov	r1, #256
	mov	r0, r7
	bl	__memzero(PLT)
	ldr	r2, .L9357+24
	mov	r1, #3
	strb	r1, [r7, #1]
.LPIC1989:
	add	r2, pc, r2
	ldr	r2, [r2, #24]
	ldr	r6, [r2, #16]
	cmp	r6, #0
	beq	.L8964
	ldr	r2, [r6]
	add	lr, r7, #2
	cmp	r2, #0
	beq	.L8964
	add	ip, r7, #254
.L8970:
	ldrh	r3, [r7, #2]
	ldrh	r1, [r2]
	cmp	r3, #0
	beq	.L9130
	cmp	ip, lr
	bls	.L9130
	cmp	r1, r3
	beq	.L8966
	mov	r3, lr
	b	.L8968
.L9347:
	cmp	ip, r3
	bls	.L8965
	cmp	r1, r2
	beq	.L8966
.L8968:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L9347
.L8965:
	strh	r1, [r3]	@ movhi
.L8966:
	ldr	r2, [r6, #4]!
	cmp	r2, #0
	bne	.L8970
.L8964:
	mov	r3, r9
	ldr	r8, [r3, #36]!
	cmp	r3, r8
	str	r3, [sp, #12]
	sub	r3, r8, #28
	addne	r9, r7, #2
	addne	r10, r7, #254
	strne	r4, [sp, #16]
	movne	r8, r3
	beq	.L8963
.L8981:
	ldr	r0, [r8, #4]
	cmp	r0, #0
	beq	.L8974
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L8974
.L8980:
	ldrh	r2, [r7, #2]
	ldrh	r1, [r3]
	cmp	r2, #0
	beq	.L9132
	cmp	r10, r9
	bls	.L9132
	cmp	r1, r2
	beq	.L8976
	mov	r3, r9
	b	.L8978
.L9348:
	cmp	r10, r3
	bls	.L8975
	cmp	r1, r2
	beq	.L8976
.L8978:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L9348
.L8975:
	strh	r1, [r3]	@ movhi
.L8976:
	ldr	r3, [r0, #4]!
	cmp	r3, #0
	bne	.L8980
.L8974:
	mov	r6, r8
	ldr	ip, [r6, #36]!
	cmp	r6, ip
	sub	r4, ip, #72
	beq	.L8973
.L8983:
	ldr	r0, [r4]
	bl	is_available_function(PLT)
	cmp	r0, #0
	beq	.L8984
	ldr	r0, [r4, #4]
	cmp	r0, #0
	beq	.L8984
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L8984
.L8990:
	ldrh	r2, [r7, #2]
	ldrh	r1, [r3]
	cmp	r2, #0
	beq	.L9134
	cmp	r10, r9
	bls	.L9134
	cmp	r1, r2
	beq	.L8986
	mov	r3, r9
	b	.L8988
.L9349:
	cmp	r10, r3
	bls	.L8985
	cmp	r1, r2
	beq	.L8986
.L8988:
	ldrh	r2, [r3, #2]!
	cmp	r2, #0
	bne	.L9349
.L8985:
	strh	r1, [r3]	@ movhi
.L8986:
	ldr	r3, [r0, #4]!
	cmp	r3, #0
	bne	.L8990
.L8984:
	ldr	ip, [r4, #72]
	cmp	r6, ip
	sub	r4, ip, #72
	bne	.L8983
.L8973:
	ldr	r8, [r8, #28]
	ldr	r3, [sp, #12]
	cmp	r3, r8
	sub	r8, r8, #28
	bne	.L8981
	ldr	r4, [sp, #16]
.L8963:
	mov	r2, #0
.L8991:
	add	r3, r7, r2, asl #1
	ldrh	r3, [r3, #2]	@ unaligned
	cmp	r3, #0
	bne	.L8993
	cmp	r2, #0
	beq	.L8994
.L8992:
	add	r2, r2, #1
	mov	r1, r2, asl #1
	uxtb	r1, r1
	mov	r2, r1
	strb	r1, [r7]
	b	.L9001
.L9134:
	mov	r3, r9
	b	.L8985
.L9132:
	mov	r3, r9
	b	.L8975
.L8993:
	add	r2, r2, #1
	cmp	r2, #127
	bne	.L8991
	b	.L8992
.L9320:
	adds	r6, fp, #0
	mov	r10, r7
	movne	r6, #1
	b	.L8924
.L9008:
	mov	r3, r9
	ldr	r10, [r3, #36]!
	cmp	r3, r10
	str	r3, [sp, #20]
	sub	r3, r10, #28
	beq	.L8994
	ldr	r10, [sp, #12]
	mov	r9, r3
	str	r5, [sp, #12]
	mov	r5, r6
	str	r4, [sp, #16]
.L9017:
	ldr	r4, [r9, #4]
	cmp	r4, #0
	subne	r4, r4, #4
	beq	.L9016
.L9012:
	ldr	r0, [r4, #4]!
	cmp	r0, #0
	beq	.L9016
	ldrh	r3, [r0]
	cmp	r3, r5
	bne	.L9012
	mov	r1, r10
	mov	r2, r7
	bl	usb_gadget_get_string(PLT)
	cmp	r0, #0
	ble	.L9012
.L9138:
	ldr	r4, [sp, #16]
	ldr	r5, [sp, #12]
	b	.L9316
.L9016:
	mov	r4, r9
	ldr	r8, [r4, #36]!
	cmp	r4, r8
	sub	r8, r8, #72
	beq	.L9011
.L9020:
	ldr	r6, [r8, #4]
	cmp	r6, #0
	subne	r6, r6, #4
	beq	.L9018
.L9019:
	ldr	r0, [r6, #4]!
	cmp	r0, #0
	beq	.L9018
	ldrh	r3, [r0]
	cmp	r3, r5
	bne	.L9019
	mov	r1, r10
	mov	r2, r7
	bl	usb_gadget_get_string(PLT)
	cmp	r0, #0
	ble	.L9019
	b	.L9138
.L9358:
	.align	2
.L9357:
	.word	composite_setup_complete-(.LPIC1985+8)
	.word	.LANCHOR3-(.LPIC2013+8)
	.word	.LC84-(.LPIC2011+8)
	.word	.LC522-(.LPIC2012+8)
	.word	.LC511-(.LPIC1986+8)
	.word	.LANCHOR1-(.LPIC1995+8)
	.word	.LANCHOR1-(.LPIC1989+8)
	.word	.LC521-(.LPIC2010+8)
	.word	.LANCHOR4-(.LPIC1990+8)
	.word	.LANCHOR4-(.LPIC1994+8)
	.word	.LANCHOR4-(.LPIC1992+8)
	.word	.LANCHOR1-(.LPIC1993+8)
	.word	.LANCHOR3-(.LPIC1988+8)
	.word	.LC512-(.LPIC1987+8)
	.word	.LANCHOR1-(.LPIC1991+8)
	.word	.LC514-(.LPIC1997+8)
	.word	.LC513-(.LPIC1996+8)
	.word	.LANCHOR3-(.LPIC2001+8)
	.word	.LC516-(.LPIC2000+8)
	.word	.LC517-(.LPIC2015+8)
	.word	sec_qcom_usb_rdrv(GOT_PREL)+(.-(.LPIC2018+8))
	.word	.LANCHOR3-(.LPIC2008+8)
	.word	.LC519-(.LPIC2007+8)
	.word	.LC520-(.LPIC2009+8)
	.word	.LC517-(.LPIC2014+8)
	.word	.LC518-(.LPIC2005+8)
	.word	.LC513-(.LPIC2004+8)
	.word	.LC517-(.LPIC2003+8)
	.word	.LC517-(.LPIC2017+8)
	.word	.LC517-(.LPIC2016+8)
	.word	.LANCHOR3-(.LPIC1999+8)
	.word	.LC515-(.LPIC1998+8)
.L9018:
	ldr	r8, [r8, #72]
	cmp	r4, r8
	sub	r8, r8, #72
	bne	.L9020
.L9011:
	ldr	r9, [r9, #28]
	ldr	r3, [sp, #20]
	cmp	r3, r9
	sub	r9, r9, #28
	bne	.L9017
	b	.L8994
.L9335:
	ldr	r0, [r9]
	mov	r2, r6
	adds	r6, fp, #0
	ldr	r1, .L9357+28
	movne	r6, #1
	mov	r10, r7
	add	r0, r0, #32
.LPIC2010:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L8924
.L8928:
	mov	r8, #0
.L8936:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	mov	r0, r6
	add	r1, r8, #1
	tst	r3, #1
	beq	.L8935
	bl	count_multi_config(PLT)
	mov	r8, r0
.L8935:
	ldr	r6, [r6, #28]
	cmp	r9, r6
	sub	r6, r6, #28
	bne	.L8936
	b	.L8927
.L9341:
	ldr	r2, .L9357+32
.LPIC1990:
	add	r2, pc, r2
	ldr	r1, [r2, #3608]
	cmp	r1, #0
	beq	.L9350
.L9099:
	mvn	ip, #0
	add	r3, sp, #56
	str	r1, [sp, #60]
	mov	r2, r7
	add	r0, sp, #48
	strh	r10, [sp, #48]	@ movhi
	mov	r1, #255
	strb	ip, [sp, #56]
	str	r3, [sp, #52]
	bl	usb_gadget_get_string(PLT)
	subs	r6, r0, #0
	blt	.L9191
	mov	r2, r6
	b	.L9001
.L8909:
	cmp	r7, r6
	sub	r6, r6, #28
	movne	r3, #0
	beq	.L9118
.L8916:
	ldrb	r2, [r6, #45]	@ zero_extendqisi2
	mov	r0, r6
	add	r1, r3, #1
	tst	r2, #2
	beq	.L8915
	bl	count_multi_config(PLT)
	mov	r3, r0
.L8915:
	ldr	r6, [r6, #28]
	cmp	r7, r6
	sub	r6, r6, #28
	bne	.L8916
	b	.L8914
.L9308:
	mov	r6, ip
	b	.L9191
.L9343:
	ldr	r2, .L9357+36
.LPIC1994:
	add	r2, pc, r2
	ldr	r1, [r2, #3616]
.L8998:
	cmp	r1, #0
	bne	.L9099
	b	.L9000
.L9342:
	ldr	r2, .L9357+40
.LPIC1992:
	add	r2, pc, r2
	ldr	r1, [r2, #3612]
	cmp	r1, #0
	bne	.L9099
	ldr	r2, .L9357+44
.LPIC1993:
	add	r2, pc, r2
	ldr	r2, [r2, #24]
	ldr	r1, [r2, #4]
	b	.L8998
.L9128:
	movw	r3, #4087
	str	r3, [sp, #16]
	b	.L8948
.L9027:
	mov	r1, #500
	mov	r3, r1
	strh	r1, [sp, #58]	@ movhi
	b	.L9028
.L8925:
	ldr	r6, [r9, #36]!
	cmp	r9, r6
	sub	r6, r6, #28
	beq	.L9121
.L9107:
	mov	r8, #0
.L8931:
	ldrb	r3, [r6, #45]	@ zero_extendqisi2
	mov	r0, r6
	add	r1, r8, #1
	tst	r3, #4
	beq	.L8930
	bl	count_multi_config(PLT)
	mov	r8, r0
.L8930:
	ldr	r6, [r6, #28]
	cmp	r9, r6
	sub	r6, r6, #28
	bne	.L8931
	b	.L8927
.L9130:
	mov	r3, lr
	b	.L8965
.L9344:
	ldr	r1, .L9357+48
	mvn	r6, #21
	ldr	r0, .L9357+52
.LPIC1988:
	add	r1, pc, r1
	add	r1, r1, #3696
.LPIC1987:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L9191
.L8926:
	ldr	r8, [r9, #36]!
	cmp	r9, r8
	sub	r6, r8, #28
	bne	.L9107
.L9121:
	mov	r8, #0
	b	.L8927
.L9350:
	ldr	r1, .L9357+56
.LPIC1991:
	add	r1, pc, r1
	ldr	r1, [r1, #24]
	ldr	r1, [r1, #8]
	cmp	r1, #0
	addeq	r1, r2, #3552
	addeq	r1, r1, #4
	bne	.L9099
	b	.L8998
.L9317:
	ldr	r3, [r9, #12]
	mov	r4, r5
	mov	r5, r10
	ldr	r10, [sp, #16]
	cmp	r3, #0
	beq	.L9036
	mov	r0, r9
	bl	reset_config(PLT)
.L9036:
	ldr	r3, [r9]
	ldr	r0, [r10, #16]
	add	r3, r3, #32
	str	r3, [sp, #16]
	bl	usb_speed_string(PLT)
	cmp	r8, #0
	mov	r2, r0
	ldr	r3, [sp, #16]
	beq	.L9065
	ldr	r6, .L9357+60
	mov	lr, #0
	mov	r0, r3
	ldr	ip, [r8]
	mov	r3, r7
	ldr	r1, .L9357+64
	str	lr, [sp, #16]
.LPIC1997:
	add	r6, pc, r6
	str	ip, [sp]
	str	r6, [sp, #28]
	mov	r6, lr
	add	lr, r8, #44
.LPIC1996:
	add	r1, pc, r1
	str	lr, [sp, #24]
	bl	_dev_info(PLT)
	add	r3, sp, #56
	ldr	r2, .L9357+68
	mov	r0, r6
	mov	r6, r5
	str	r8, [r9, #12]
	str	r3, [sp, #32]
	ldr	r3, .L9357+72
	str	r4, [sp, #20]
.LPIC2001:
	add	r2, pc, r2
.LPIC2000:
	add	r3, pc, r3
	str	r3, [sp, #36]
	add	r3, r2, #3712
	str	r3, [sp, #40]
.L9058:
	ldr	r3, [sp, #24]
	ldr	r4, [r3, #4]!
	cmp	r4, #0
	str	r3, [sp, #24]
	beq	.L9042
	ldr	r2, [r10, #16]
	cmp	r2, #3
	beq	.L9044
	cmp	r2, #5
	bne	.L9296
	ldr	r0, [sp, #28]
	str	r2, [sp, #44]
	bl	power_supply_get_by_name(PLT)
	ldr	r5, [r4, #12]
	ldr	r2, [sp, #44]
	cmp	r5, #0
	beq	.L9351
	cmp	r0, #0
	beq	.L9352
	str	r2, [sp, #56]
	mov	r1, #4
	ldr	ip, [r0, #40]
	ldr	r2, [sp, #32]
	blx	ip
.L9050:
	ldr	r1, [r5]
	cmp	r1, #0
	beq	.L9056
	add	r2, r4, #80
	str	r10, [sp, #44]
	mov	r10, r6
	mov	r6, r4
	mov	r4, r2
	b	.L9055
.L9054:
	ldr	r1, [r5, #4]!
	cmp	r1, #0
	beq	.L9353
.L9055:
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	cmp	r3, #5
	bne	.L9054
	ldrb	r3, [r1, #2]	@ zero_extendqisi2
	mov	r1, r4
	bic	r0, r3, #127
	and	r3, r3, #15
	orr	r0, r3, r0, lsr #3
	bl	_set_bit(PLT)
	b	.L9054
.L9338:
	mov	r4, r5
	mov	r5, r10
	ldr	r10, [sp, #16]
	mvn	r6, #21
.L9040:
	ldr	r3, [r10]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L9047
	mov	r0, r10
	mov	r1, #100
	blx	r3
.L9047:
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, .L9357+76
.LPIC2015:
	add	r0, pc, r0
	bl	printk(PLT)
.L9063:
	ldr	r3, [r5, #16]
	cmp	r3, #5
	bne	.L9070
	bl	get_host_os_type(PLT)
	cmp	r0, #0
	bne	.L9070
.L9111:
	ldr	r7, .L9357+80
	mov	r1, #0
.LPIC2018:
	ldr	r7, [pc, r7]		@ tls_load_dot_plus_eight
	ldr	r0, [r7]
	bl	__gpio_set_value(PLT)
	ldr	r1, .L9357+84
	ldr	r0, .L9357+88
	ldr	r2, [r7]
.LPIC2008:
	add	r1, pc, r1
	add	r1, r1, #3712
.LPIC2007:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r0, .L9357+92
.LPIC2009:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9070
.L9336:
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, .L9357+96
.LPIC2014:
	add	r0, pc, r0
	bl	printk(PLT)
.L9062:
	cmp	r7, #0
	beq	.L9069
	sub	r0, r7, #1
	bl	set_config_number(PLT)
.L9069:
	ldr	r3, [r5, #16]
	cmp	r3, #5
	movne	r6, #0
	bne	.L9109
	bl	get_host_os_type(PLT)
	cmp	r0, #0
	mov	r6, #0
	bne	.L9109
	b	.L9111
.L9030:
	cmp	r7, #0
	bne	.L9100
.L9041:
	add	r3, r10, #32
	ldr	r0, [r6, #16]
	str	r3, [sp, #16]
	bl	usb_speed_string(PLT)
	ldr	r3, [sp, #16]
	mov	r2, r0
.L9065:
	ldr	ip, .L9357+100
	mov	r0, r3
	mov	r3, r7
	ldr	r1, .L9357+104
.LPIC2005:
	add	ip, pc, ip
.LPIC2004:
	add	r1, pc, r1
	str	ip, [sp]
	bl	_dev_info(PLT)
	ldr	r3, [r6]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L9354
	mov	r0, r6
	mov	r1, #100
	blx	r3
	ldr	r3, [r9, #56]
	cmp	r3, #0
	beq	.L9355
.L9102:
	movw	r6, #32767
	b	.L9047
.L9337:
	mov	r0, r9
	bl	reset_config(PLT)
	ldr	r10, [r9]
	b	.L9041
.L9353:
	mov	r4, r6
	mov	r6, r10
	ldr	r10, [sp, #44]
.L9056:
	ldr	r3, [r4, #40]
	mov	r0, r4
	mov	r2, #0
	ldr	r1, [sp, #16]
	blx	r3
	cmp	r0, #0
	blt	.L9356
	movw	r3, #32767
	cmp	r0, r3
	bne	.L9057
	ldr	r3, [r9, #56]
	add	r3, r3, #1
	str	r3, [r9, #56]
.L9057:
	ldr	r3, [sp, #16]
	add	r3, r3, #1
	cmp	r3, #16
	str	r3, [sp, #16]
	bne	.L9058
.L9042:
	ldrb	r1, [r8, #23]	@ zero_extendqisi2
	mov	r5, r6
	mov	r6, r0
	ldr	r4, [sp, #20]
	cmp	r1, #0
	ldrne	r3, [r9, #64]
	moveq	r1, #500
	mulne	r1, r3, r1
	ldr	r3, [r10]
	ldr	r3, [r3, #16]
	cmp	r3, #0
	beq	.L9110
	mov	r0, r10
	blx	r3
.L9110:
	ldr	r3, [r9, #56]
	cmp	r3, #0
	bne	.L9102
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, .L9357+108
.LPIC2003:
	add	r0, pc, r0
	bl	printk(PLT)
	cmp	r6, #0
	beq	.L9062
	b	.L9063
.L9356:
	mov	r5, r6
	mov	r6, r0
	ldr	r4, [sp, #20]
	mov	r0, r9
	bl	reset_config(PLT)
	b	.L9040
.L9355:
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, .L9357+112
.LPIC2017:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9062
.L9354:
	ldr	r3, [r9, #56]
	cmp	r3, #0
	bne	.L9102
	ldr	r0, [sp, #12]
	bl	_raw_spin_unlock(PLT)
	ldr	r0, .L9357+116
.LPIC2016:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9062
.L9352:
	ldrd	r0, [sp, #36]
	ldr	r2, [sp, #28]
	bl	printk(PLT)
	b	.L9050
.L9351:
	ldr	r1, .L9357+120
	mov	ip, r4
	mov	r5, r6
	ldr	r0, .L9357+124
	mvn	r6, #21
	ldr	r2, [ip]
	ldr	r4, [sp, #20]
.LPIC1999:
	add	r1, pc, r1
	add	r1, r1, #3712
.LPIC1998:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9047
.L9296:
	ldr	r5, [r4, #16]
	b	.L9050
.L9044:
	ldr	r5, [r4, #8]
	b	.L9050
	.fnend
	.size	composite_setup, .-composite_setup
	.align	2
	.global	usb_gadget_config_buf
	.type	usb_gadget_config_buf, %function
usb_gadget_config_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r3, #0
	cmpne	r2, #8
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	lr, [sp, #12]
	mov	lr, r2
	str	r6, [sp, #8]
	bls	.L9362
	ldr	r5, [r0]	@ unaligned
	mov	r2, r3
	mov	r4, r1
	ldr	r3, [r0, #4]	@ unaligned
	mov	ip, r0
	sub	r1, lr, #9
	add	r0, r4, #9
	str	r5, [r4]	@ unaligned
	str	r3, [r4, #4]	@ unaligned
	ldrb	r3, [ip, #8]	@ zero_extendqisi2
	strb	r3, [r4, #8]
	bl	usb_descriptor_fillbuf(PLT)
	cmp	r0, #0
	blt	.L9361
	add	r0, r0, #9
	cmp	r0, #65536
	bge	.L9362
	ldrb	r3, [r4, #7]	@ zero_extendqisi2
	mov	r1, #9
	mov	r2, #2
	strh	r0, [r4, #2]	@ unaligned
	strb	r1, [r4]
	strb	r2, [r4, #1]
	mvn	r3, r3, asl #25
	mvn	r3, r3, lsr #25
	strb	r3, [r4, #7]
.L9361:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9362:
	mvn	r0, #21
	b	.L9361
	.fnend
	.size	usb_gadget_config_buf, .-usb_gadget_config_buf
	.align	2
	.global	usb_copy_descriptors
	.type	usb_copy_descriptors, %function
usb_copy_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0]
	cmp	r2, #0
	beq	.L9371
	mov	r3, #0
	mov	r1, r0
	mov	r0, r3
.L9367:
	ldrb	ip, [r2]	@ zero_extendqisi2
	add	r3, r3, #1
	ldr	r2, [r1, #4]!
	add	r0, r0, ip
	cmp	r2, #0
	bne	.L9367
	add	r4, r3, #1
	mov	r4, r4, asl #2
	add	r0, r4, r0
.L9366:
	mov	r1, #208
	bl	__kmalloc(PLT)
	subs	r6, r0, #0
	beq	.L9368
	ldr	r1, [r5]
	add	r3, r6, r4
	mov	r4, r6
	cmp	r1, #0
	beq	.L9369
.L9370:
	ldrb	r2, [r1]	@ zero_extendqisi2
	mov	r0, r3
	bl	memcpy(PLT)
	str	r0, [r4], #4
	ldr	r2, [r5]
	ldr	r1, [r5, #4]!
	ldrb	r2, [r2]	@ zero_extendqisi2
	cmp	r1, #0
	add	r3, r0, r2
	bne	.L9370
.L9369:
	mov	r3, #0
	str	r3, [r4]
.L9368:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9371:
	mov	r0, #4
	mov	r4, r0
	b	.L9366
	.fnend
	.size	usb_copy_descriptors, .-usb_copy_descriptors
	.align	2
	.global	usb_free_all_descriptors
	.type	usb_free_all_descriptors, %function
usb_free_all_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #16]
	bl	kfree(PLT)
	ldr	r0, [r4, #8]
	bl	kfree(PLT)
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #12]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
	.fnend
	.size	usb_free_all_descriptors, .-usb_free_all_descriptors
	.align	2
	.global	usb_assign_descriptors
	.type	usb_assign_descriptors, %function
usb_assign_descriptors:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	subs	r0, r1, #0
	strd	r6, [sp, #8]
	mov	r6, r3
	mov	r7, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	ip, [r4, #20]
	ldr	r3, [ip, #24]
	ldr	r5, [r3]
	beq	.L9384
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L9388
.L9384:
	cmp	r7, #0
	beq	.L9383
	ldr	r3, [r5, #20]
	cmp	r3, #2
	bhi	.L9396
.L9383:
	cmp	r6, #0
	beq	.L9387
	ldr	r3, [r5, #20]
	cmp	r3, #4
	bhi	.L9397
.L9387:
	mov	r0, #0
.L9385:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9397:
	mov	r0, r6
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L9387
.L9388:
	mov	r0, r4
	bl	usb_free_all_descriptors(PLT)
	mvn	r0, #11
	b	.L9385
.L9396:
	mov	r0, r7
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #8]
	bne	.L9383
	b	.L9388
	.fnend
	.size	usb_assign_descriptors, .-usb_assign_descriptors
	.align	2
	.type	f_midi_unbind, %function
f_midi_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, [r1, #88]
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #96]
	mov	r3, #0
	str	r3, [r4, #96]
	cmp	r0, r3
	beq	.L9399
	bl	snd_card_free(PLT)
.L9399:
	ldr	r0, [r4, #332]
	bl	kfree(PLT)
	mov	r3, #0
	mov	r0, r4
	str	r3, [r4, #332]
	bl	usb_free_all_descriptors(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
	.fnend
	.size	f_midi_unbind, .-f_midi_unbind
	.align	2
	.type	ecm_unbind, %function
ecm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r0, r1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	usb_free_all_descriptors(PLT)
	ldr	r3, [r4, #168]
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, .L9406
	mov	r2, #0
	mov	r0, r4
.LPIC2019:
	add	r3, pc, r3
	str	r2, [r3, #876]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree(PLT)
.L9407:
	.align	2
.L9406:
	.word	.LANCHOR0-(.LPIC2019+8)
	.fnend
	.size	ecm_unbind, .-ecm_unbind
	.align	2
	.type	f_audio_unbind, %function
f_audio_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r0, r1
	mov	r4, r1
	str	lr, [sp, #4]
	bl	usb_free_all_descriptors(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
	.fnend
	.size	f_audio_unbind, .-f_audio_unbind
	.align	2
	.type	ncm_unbind, %function
ncm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r0, r1
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	usb_free_all_descriptors(PLT)
	ldr	r3, [r4, #168]
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, .L9412
	mov	r2, #0
	mov	r0, r4
.LPIC2020:
	add	r3, pc, r3
	str	r2, [r3, #916]
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	kfree(PLT)
.L9413:
	.align	2
.L9412:
	.word	.LANCHOR0-(.LPIC2020+8)
	.fnend
	.size	ncm_unbind, .-ncm_unbind
	.align	2
	.type	fsg_unbind, %function
fsg_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #88]
	.pad #24
	sub	sp, sp, #24
	ldr	r3, [r4, #8]
	cmp	r1, r3
	beq	.L9429
.L9416:
	add	r0, r4, #336
#APP
@ 99 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r0]
	sub	r3, r3, #1
	strex	r2, r3, [r0]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #0
	bne	.L9424
	bl	fsg_common_release(PLT)
.L9424:
	mov	r0, r5
	bl	usb_free_all_descriptors(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9429:
	mov	r3, #0
	str	r3, [r4, #12]
	ldr	r6, [r1, #88]
	add	r7, r6, #44
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r6, #112]
	mov	r8, r0
	cmp	r3, #4
	bgt	.L9418
	ldr	r2, [r6, #168]
	mov	r1, #4
	ldr	r3, [r6, #56]
	str	r1, [r6, #112]
	cmp	r2, #0
	str	r3, [r6, #116]
	beq	.L9418
	mov	r0, #10
	mov	r1, #2
	bl	send_sig_info(PLT)
.L9418:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #8]
	cmp	r5, r3
	bne	.L9416
	ldr	r2, .L9431
	mov	r3, sp
	mov	r0, #0
	bic	r3, r3, #8128
	add	r7, r4, #16
	bic	r3, r3, #63
	add	r6, sp, #4
	ldr	r1, [r3, #12]
	add	r3, sp, #16
	str	r0, [sp, #4]
.LPIC2023:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L9422
.L9430:
	bl	schedule(PLT)
.L9422:
	mov	r0, r7
	mov	r1, r6
	mov	r2, #2
	bl	prepare_to_wait(PLT)
	ldr	r3, [r4, #8]
	cmp	r5, r3
	beq	.L9430
	mov	r0, r7
	mov	r1, r6
	bl	finish_wait(PLT)
	b	.L9416
.L9432:
	.align	2
.L9431:
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC2023+8))
	.fnend
	.size	fsg_unbind, .-fsg_unbind
	.align	2
	.global	usb_ep_autoconfig_ss
	.type	usb_ep_autoconfig_ss, %function
usb_ep_autoconfig_ss:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	ldr	r0, .L9495
	strd	r8, [sp, #16]
	mov	r7, r1
	mov	r8, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r6, #28]
	.pad #4
	sub	sp, sp, #4
	ldrb	r4, [r1, #3]	@ zero_extendqisi2
.LPIC2024:
	add	r0, pc, r0
	mov	r1, r5
	and	r4, r4, #3
	bl	strcmp(PLT)
	cmp	r0, #0
	cmpeq	r4, #3
	sub	r9, r4, #3
	clz	r9, r9
	mov	r9, r9, lsr #5
	beq	.L9488
	ldr	r0, .L9495+4
	mov	r1, r5
.LPIC2027:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L9443
.L9450:
	mov	r5, r6
	ldr	r9, [r5, #8]!
	sub	r4, r9, #12
.L9442:
	cmp	r5, r9
	bne	.L9454
	b	.L9435
.L9455:
	ldr	r4, [r4, #12]
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L9435
.L9454:
	ldr	r3, [r4]
	cmp	r3, #0
	bne	.L9455
	mov	r0, r6
	mov	r1, r4
	mov	r2, r7
	mov	r3, r8
	bl	ep_matches.part.12(PLT)
	cmp	r0, #0
	beq	.L9455
.L9439:
	mov	r3, #0
	mov	r0, r4
	str	r3, [r4, #28]
	str	r3, [r4, #32]
	b	.L9446
.L9492:
	ldr	r4, [r6, #8]
	mov	r9, r4
	sub	r4, r4, #12
	cmp	r5, r9
	bne	.L9438
.L9435:
	mov	r0, #0
.L9446:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9443:
	cmp	r9, #0
	bne	.L9489
	cmp	r4, #2
	bne	.L9450
	ldrsb	r3, [r7, #2]
	cmp	r3, #0
	bge	.L9450
	mov	r5, r6
	ldr	r4, [r5, #8]!
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L9435
	ldr	r10, .L9495+8
	mov	r9, r4
.LPIC2029:
	add	r10, pc, r10
	b	.L9452
.L9490:
	ldr	r9, [r9, #12]
	cmp	r5, r9
	sub	r9, r9, #12
	beq	.L9454
.L9452:
	ldr	r0, [r9, #4]
	mov	r1, r10
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L9490
.L9451:
	cmp	r9, #0
	beq	.L9454
	ldr	r3, [r9]
	cmp	r3, #0
	bne	.L9454
	mov	r0, r6
	mov	r1, r9
	mov	r2, r7
	mov	r3, r8
	bl	ep_matches.part.12(PLT)
	cmp	r0, #0
	movne	r4, r9
	bne	.L9439
.L9482:
	ldr	r9, [r6, #8]
	sub	r4, r9, #12
	b	.L9442
.L9488:
	mov	r5, r6
	ldr	r4, [r5, #8]!
	mov	r9, r4
	sub	r4, r4, #12
	cmp	r9, r5
	beq	.L9435
	ldr	fp, .L9495+12
	mov	r10, r4
.LPIC2025:
	add	fp, pc, fp
	b	.L9437
.L9491:
	ldr	r10, [r10, #12]
	cmp	r5, r10
	sub	r10, r10, #12
	beq	.L9438
.L9437:
	ldr	r0, [r10, #4]
	mov	r1, fp
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L9491
	cmp	r10, #0
	beq	.L9438
	ldr	r3, [r10]
	cmp	r3, #0
	bne	.L9438
	mov	r0, r6
	mov	r1, r10
	mov	r2, r7
	mov	r3, r8
	bl	ep_matches.part.12(PLT)
	cmp	r0, #0
	beq	.L9492
.L9458:
	mov	r4, r10
	b	.L9439
.L9489:
	mov	r5, r6
	ldr	r4, [r5, #8]!
	cmp	r5, r4
	sub	r4, r4, #12
	beq	.L9435
	ldr	r10, .L9495+16
	mov	r9, r4
.LPIC2028:
	add	r10, pc, r10
	b	.L9448
.L9493:
	ldr	r9, [r9, #12]
	cmp	r5, r9
	sub	r9, r9, #12
	beq	.L9454
.L9448:
	ldr	r0, [r9, #4]
	mov	r1, r10
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L9493
	b	.L9451
.L9438:
	ldr	fp, .L9495+20
	mov	r10, r4
.LPIC2026:
	add	fp, pc, fp
	b	.L9441
.L9494:
	ldr	r10, [r10, #12]
	cmp	r5, r10
	sub	r10, r10, #12
	beq	.L9442
.L9441:
	ldr	r0, [r10, #4]
	mov	r1, fp
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L9494
	cmp	r10, #0
	beq	.L9442
	ldr	r3, [r10]
	cmp	r3, #0
	bne	.L9442
	mov	r0, r6
	mov	r1, r10
	mov	r2, r7
	mov	r3, r8
	bl	ep_matches.part.12(PLT)
	cmp	r0, #0
	bne	.L9458
	b	.L9482
.L9496:
	.align	2
.L9495:
	.word	.LC450-(.LPIC2024+8)
	.word	.LC452-(.LPIC2027+8)
	.word	.LC527-(.LPIC2029+8)
	.word	.LC524-(.LPIC2025+8)
	.word	.LC526-(.LPIC2028+8)
	.word	.LC525-(.LPIC2026+8)
	.fnend
	.size	usb_ep_autoconfig_ss, .-usb_ep_autoconfig_ss
	.align	2
	.global	usb_ep_autoconfig
	.type	usb_ep_autoconfig, %function
usb_ep_autoconfig:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r2, #0
	b	usb_ep_autoconfig_ss(PLT)
	.fnend
	.size	usb_ep_autoconfig, .-usb_ep_autoconfig
	.align	2
	.type	__ffs_func_bind_do_descs, %function
__ffs_func_bind_do_descs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	ldr	ip, [r3, #48]
	ldr	r0, [r3, #44]
	bne	.L9515
	cmp	ip, #0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	beq	.L9501
	mov	r4, #2
	str	r2, [ip, r1, asl #2]
.L9502:
	cmp	r2, #0
	beq	.L9504
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #5
	beq	.L9516
.L9504:
	mov	r0, #0
.L9500:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9516:
	ldrb	r6, [r2, #2]	@ zero_extendqisi2
	ldr	r8, [r3, #12]
	and	r6, r6, #15
	sub	r1, r6, #1
	mov	r5, r1, asl #5
	sub	r5, r5, r1, asl #2
	add	r7, r8, r5
	add	r4, r7, r4, asl #2
	ldr	r1, [r4, #8]
	cmp	r1, #0
	bne	.L9506
	str	r2, [r4, #8]
	ldr	r4, [r8, r5]
	cmp	r4, #0
	beq	.L9505
	ldr	r3, [r7, #8]
	ldrh	r0, [r2, #4]	@ unaligned
	ldrb	r3, [r3, #2]	@ zero_extendqisi2
	cmp	r0, #0
	strb	r3, [r2, #2]
	bne	.L9504
	ldr	r3, [r7, #8]
	ldrh	r3, [r3, #4]	@ unaligned
	strh	r3, [r2, #4]	@ unaligned
	b	.L9500
.L9515:
	mov	r0, #0
	bx	lr
.L9501:
	cmp	r0, #0
	beq	.L9503
	str	r2, [r0, r1, asl #2]
	mov	r4, #1
	b	.L9502
.L9506:
	mvn	r0, #21
	b	.L9500
.L9503:
	ldr	ip, [r3, #52]
	mov	r4, r0
	str	r2, [ip, r1, asl #2]
	b	.L9502
.L9505:
	ldr	r0, [r3, #4]
	mov	r1, r2
	mov	r9, r2
	mov	r10, r3
	bl	usb_ep_autoconfig(PLT)
	subs	fp, r0, #0
	beq	.L9507
	ldr	r3, [r10, #12]
	mov	r1, #208
	ldr	r2, [fp, #8]
	add	r3, r3, r5
	str	r3, [fp]
	ldr	r3, [r2, #8]
	blx	r3
	subs	r3, r0, #0
	beq	.L9508
	str	fp, [r8, r5]
	mov	r0, r4
	str	r3, [r7, #4]
	ldrb	r3, [r9, #2]	@ zero_extendqisi2
	and	r3, r3, #15
	add	r10, r10, r3
	strb	r6, [r10, #16]
	b	.L9500
.L9507:
	movw	r0, #65012
	movt	r0, 65535
	b	.L9500
.L9508:
	mvn	r0, #11
	b	.L9500
	.fnend
	.size	__ffs_func_bind_do_descs, .-__ffs_func_bind_do_descs
	.align	2
	.type	ffs_do_descs.constprop.152, %function
ffs_do_descs.constprop.152:
	.fnstart
	@ args = 4, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r3, r0, #0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	ip, r2
	strd	r8, [sp, #16]
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r8, [sp, #56]
	beq	.L9538
	mov	r6, #0
	mov	r4, r1
	mov	r5, r2
	mov	r9, r6
.L9536:
	ldr	r2, [r8, #48]
	ldr	r1, [r8, #44]
	cmp	r2, #0
	beq	.L9519
	mov	r1, #2
	str	r4, [r2, r6]
.L9520:
	cmp	r4, #0
	beq	.L9522
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	cmp	r2, #5
	beq	.L9561
.L9526:
	cmp	r5, #1
	bls	.L9539
	ldrb	r1, [r4]	@ zero_extendqisi2
	cmp	r5, r1
	bcc	.L9539
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	sub	r2, r2, #4
	cmp	r2, #44
	addls	pc, pc, r2, asl #2
	b	.L9539
.L9529:
	b	.L9533
	b	.L9530
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9531
	b	.L9539
	b	.L9532
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9533
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9539
	b	.L9534
	.p2align 1
.L9533:
	cmp	r1, #9
	bne	.L9539
.L9535:
	add	r9, r9, #1
	rsb	r5, r1, r5
	cmp	r9, r3
	add	r4, r4, r1
	add	r6, r6, #4
	bne	.L9536
.L9518:
	mov	r0, #0
	mov	r1, r3
	str	ip, [sp]
	mov	r3, r8
	mov	r2, r0
	bl	__ffs_func_bind_do_descs(PLT)
	cmp	r0, #0
	ldr	ip, [sp]
	blt	.L9556
.L9522:
	rsb	r0, r5, ip
	b	.L9556
.L9530:
	sub	r2, r1, #7
	tst	r2, #253
	bne	.L9539
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	tst	r2, #15
	bne	.L9535
.L9539:
	mvn	r0, #21
.L9556:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9531:
	cmp	r1, #5
	beq	.L9535
	b	.L9539
.L9534:
	cmp	r1, #6
	beq	.L9535
	b	.L9539
.L9532:
	cmp	r1, #8
	beq	.L9535
	b	.L9539
.L9561:
	ldrb	r10, [r4, #2]	@ zero_extendqisi2
	ldr	r2, [r8, #12]
	and	r10, r10, #15
	sub	r0, r10, #1
	mov	r7, r0, asl #5
	sub	r7, r7, r0, asl #2
	add	fp, r2, r7
	add	r1, fp, r1, asl #2
	ldr	r0, [r1, #8]
	cmp	r0, #0
	bne	.L9539
	str	r4, [r1, #8]
	ldr	r1, [r2, r7]
	cmp	r1, #0
	beq	.L9525
	ldr	r2, [fp, #8]
	ldrh	r1, [r4, #4]	@ unaligned
	ldrb	r2, [r2, #2]	@ zero_extendqisi2
	cmp	r1, #0
	strb	r2, [r4, #2]
	bne	.L9526
	ldr	r2, [fp, #8]
	ldrh	r2, [r2, #4]	@ unaligned
	strh	r2, [r4, #4]	@ unaligned
	b	.L9526
.L9519:
	cmp	r1, #0
	ldreq	r2, [r8, #52]
	strne	r4, [r1, r6]
	movne	r1, #1
	streq	r4, [r2, r6]
	b	.L9520
.L9525:
	ldr	r0, [r8, #4]
	mov	r1, r4
	stmia	sp, {r2, r3, ip}
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L9540
	ldr	lr, [r8, #12]
	mov	r1, #208
	str	r3, [sp, #12]
	ldr	r2, [r3, #8]
	add	lr, lr, r7
	str	lr, [r3]
	ldr	r2, [r2, #8]
	blx	r2
	cmp	r0, #0
	beq	.L9541
	ldr	r3, [sp, #12]
	ldr	r2, [sp]
	str	r3, [r2, r7]
	ldmib	sp, {r3, ip}
	str	r0, [fp, #4]
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
	and	r2, r2, #15
	add	r2, r8, r2
	strb	r10, [r2, #16]
	b	.L9526
.L9540:
	movw	r0, #65012
	movt	r0, 65535
	b	.L9556
.L9541:
	mvn	r0, #11
	b	.L9556
.L9538:
	mov	r5, r2
	b	.L9518
	.fnend
	.size	ffs_do_descs.constprop.152, .-ffs_do_descs.constprop.152
	.align	2
	.global	usb_ep_autoconfig_reset
	.type	usb_ep_autoconfig_reset, %function
usb_ep_autoconfig_reset:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #8]!
	cmp	r0, r3
	sub	r3, r3, #12
	movne	r1, #0
	beq	.L9565
.L9564:
	ldr	r2, [r3, #12]
	str	r1, [r3]
	cmp	r0, r2
	sub	r3, r2, #12
	bne	.L9564
.L9565:
	ldr	r3, .L9568
	mov	r2, #0
.LPIC2030:
	add	r3, pc, r3
	str	r2, [r3, #-640]
	bx	lr
.L9569:
	.align	2
.L9568:
	.word	.LANCHOR4-(.LPIC2030+8)
	.fnend
	.size	usb_ep_autoconfig_reset, .-usb_ep_autoconfig_reset
	.align	2
	.global	config_ep_by_speed
	.type	config_ep_by_speed, %function
config_ep_by_speed:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r2
	str	r6, [sp, #8]
	add	r0, r0, #32
	mov	r6, r1
	str	lr, [sp, #12]
	bl	dev_get_drvdata(PLT)
	cmp	r5, #0
	cmpne	r6, #0
	moveq	r3, #1
	movne	r3, #0
	cmp	r4, #0
	orreq	r3, r3, #1
	cmp	r3, #0
	bne	.L9582
	ldr	r3, [r4, #16]
	cmp	r3, #3
	beq	.L9574
	cmp	r3, #5
	beq	.L9620
.L9573:
	ldr	r1, [r6, #16]
	mov	ip, #0
.L9577:
	ldr	r3, [r1]
	cmp	r3, #0
	bne	.L9581
	b	.L9595
.L9621:
	ldr	r3, [r1, #4]!
	cmp	r3, #0
	beq	.L9595
.L9581:
	ldrb	r3, [r3, #1]	@ zero_extendqisi2
	cmp	r3, #5
	bne	.L9621
.L9586:
	cmp	r1, #0
	beq	.L9582
	ldr	r3, [r1]
	ldrb	r2, [r5, #25]	@ zero_extendqisi2
	ldrb	lr, [r3, #2]	@ zero_extendqisi2
	cmp	lr, r2
	beq	.L9622
	ldr	r3, [r1, #4]
	add	r1, r1, #4
	cmp	r3, #0
	beq	.L9582
.L9587:
	ldrb	r3, [r3, #1]	@ zero_extendqisi2
	cmp	r3, #5
	beq	.L9586
	ldr	r3, [r1, #4]!
	cmp	r3, #0
	bne	.L9587
.L9582:
	mvn	r0, #4
.L9572:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9595:
	mov	r1, r3
	b	.L9586
.L9620:
	ldr	r3, [r4, #20]
	cmp	r3, #4
	bhi	.L9623
.L9576:
	cmp	r3, #2
	bls	.L9573
	ldr	r1, [r6, #8]
	mov	ip, #0
	b	.L9577
.L9622:
	ldrb	r2, [r5, #24]	@ zero_extendqisi2
	mov	lr, #0
	cmp	ip, lr
	ldrh	ip, [r3, #4]	@ unaligned
	str	r3, [r5, #28]
	str	lr, [r5, #32]
	and	r2, r2, #131
	bfi	r2, lr, #0, #2
	strh	ip, [r5, #20]	@ movhi
	strb	r2, [r5, #24]
	beq	.L9590
	ldr	r2, [r1, #4]
	cmp	r2, #0
	beq	.L9582
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	cmp	r1, #48
	bne	.L9582
	str	r2, [r5, #32]
	ldr	r1, [r4, #16]
	cmp	r1, #5
	beq	.L9624
.L9590:
	mov	r0, #0
	b	.L9572
.L9574:
	ldr	r3, [r4, #20]
	b	.L9576
.L9623:
	ldr	r1, [r6, #12]
	mov	ip, #1
	b	.L9577
.L9624:
	ldrb	r3, [r3, #3]	@ zero_extendqisi2
	and	r3, r3, #3
	cmp	r3, #1
	beq	.L9592
	bcc	.L9625
.L9593:
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	mov	r0, #0
	ldrb	r2, [r5, #24]	@ zero_extendqisi2
	add	r3, r3, #1
	bfi	r2, r3, #2, #5
	strb	r2, [r5, #24]
	b	.L9572
.L9592:
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	ldrb	r1, [r2, #3]	@ zero_extendqisi2
	bfi	r3, r1, #0, #2
	strb	r3, [r5, #24]
	b	.L9593
.L9625:
	ldrb	r3, [r2, #2]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L9594
	ldr	r0, [r0]
	ldr	r1, .L9626
	add	r0, r0, #32
.LPIC2031:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L9594:
	ldrb	r3, [r5, #24]	@ zero_extendqisi2
	mov	r2, #1
	mov	r0, #0
	bfi	r3, r2, #2, #5
	strb	r3, [r5, #24]
	b	.L9572
.L9627:
	.align	2
.L9626:
	.word	.LC528-(.LPIC2031+8)
	.fnend
	.size	config_ep_by_speed, .-config_ep_by_speed
	.align	2
	.type	diag_function_set_alt, %function
diag_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #88]
	ldr	r5, [r3, #24]
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L9631
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #84]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L9631
	ldr	r3, [r4, #124]
	cmp	r3, #0
	beq	.L9634
	str	r4, [r3, #20]
	ldr	r3, [r4, #88]
	str	r4, [r3]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L9639
	ldr	r3, [r4, #84]
	str	r4, [r3]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L9640
	add	r6, r4, #108
	str	r5, [r4, #128]
	str	r5, [r4, #132]
	mov	r0, r6
	str	r5, [r4, #136]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, #1
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #112]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r2, [r4, #124]
	ldr	r3, [r2, #12]
	cmp	r3, #0
	beq	.L9630
	ldr	r0, [r2, #16]
	mov	r1, r5
	mov	r2, r5
	blx	r3
.L9630:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9640:
	ldr	r0, [r4, #116]
	mov	r3, r5
	ldr	r2, [r4, #84]
	ldr	r1, .L9641
	ldr	r0, [r0]
	ldr	r2, [r2, #4]
.LPIC2033:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9630
.L9639:
	ldr	r0, [r4, #116]
	mov	r3, r5
	ldr	r2, [r4, #88]
	ldr	r1, .L9641+4
	ldr	r0, [r0]
	ldr	r2, [r2, #4]
.LPIC2032:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	b	.L9630
.L9631:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #84]
	str	r3, [r2, #28]
	b	.L9630
.L9634:
	mvn	r5, #18
	b	.L9630
.L9642:
	.align	2
.L9641:
	.word	.LC529-(.LPIC2033+8)
	.word	.LC529-(.LPIC2032+8)
	.fnend
	.size	diag_function_set_alt, .-diag_function_set_alt
	.align	2
	.type	rmnet_smd_set_alt, %function
rmnet_smd_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #84]
	ldr	r2, [r0, #92]
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9654
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	ldr	r0, [r5]
	bne	.L9655
	mov	r1, r4
	ldr	r2, [r4, #88]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9656
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	ldr	r0, [r5]
	bne	.L9657
	mov	r1, r4
	ldr	r2, [r4, #96]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9658
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9659
	ldr	r1, [r4, #388]
	add	r2, r4, #392
	mov	r0, #4
	bl	queue_work_on(PLT)
	b	.L9645
.L9655:
	ldr	r2, [r4, #92]
	mov	r3, r6
	add	r0, r0, #32
	ldr	r1, .L9660
	ldr	r2, [r2, #4]
.LPIC2035:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L9645:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9654:
	ldr	r2, [r4, #92]
	mov	r0, #0
	mov	r6, r3
	ldr	r1, .L9660+4
	str	r0, [r2, #28]
	ldr	r0, [r5]
	ldr	r2, [r4, #92]
.LPIC2034:
	add	r1, pc, r1
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err(PLT)
	b	.L9645
.L9657:
	ldr	r1, .L9660+8
	mov	r3, r6
	ldr	r2, [r4, #88]
.LPIC2037:
	add	r1, pc, r1
.L9652:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9645
.L9656:
	ldr	r2, [r4, #88]
	ldr	r1, .L9660+12
	str	r6, [r2, #28]
	mov	r6, r3
	ldr	r0, [r5]
.LPIC2036:
	add	r1, pc, r1
	ldr	r2, [r4, #88]
	b	.L9652
.L9658:
	ldr	r2, [r4, #96]
	ldr	r1, .L9660+16
	str	r6, [r2, #28]
	ldr	r0, [r5]
	mov	r6, r3
	ldr	r2, [r4, #96]
.LPIC2038:
	add	r1, pc, r1
.L9653:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9645
.L9659:
	ldr	r1, .L9660+20
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r2, [r4, #96]
.LPIC2039:
	add	r1, pc, r1
	b	.L9653
.L9661:
	.align	2
.L9660:
	.word	.LC529-(.LPIC2035+8)
	.word	.LC530-(.LPIC2034+8)
	.word	.LC529-(.LPIC2037+8)
	.word	.LC530-(.LPIC2036+8)
	.word	.LC530-(.LPIC2038+8)
	.word	.LC529-(.LPIC2039+8)
	.fnend
	.size	rmnet_smd_set_alt, .-rmnet_smd_set_alt
	.align	2
	.type	rmnet_sdio_set_alt, %function
rmnet_sdio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r1, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #92]
	ldr	r5, [r0, #84]
	str	r0, [r3]
	ldr	r2, [r4, #92]
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9685
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9686
	ldr	r3, [r4, #88]
	mov	r1, r4
	str	r4, [r3]
	ldr	r0, [r5]
	ldr	r2, [r4, #88]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9687
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	ldr	r0, [r5]
	bne	.L9688
	mov	r1, r4
	ldr	r2, [r4, #96]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9689
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9690
	ldr	r6, [r4, #96]
	mov	r1, #32
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	beq	.L9670
	ldr	r3, .L9693
	mov	r2, #8
	str	r2, [r5, #4]
.LPIC2050:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L9671
	mov	r1, #32
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r5]
	beq	.L9691
.L9672:
	cmn	r5, #4096
	str	r5, [r4, #100]
	bhi	.L9692
	ldr	r3, .L9693+4
	mov	r1, #8
	mov	r2, #1
	mov	r0, r4
.LPIC2049:
	add	r3, pc, r3
	str	r3, [r5, #28]
	ldr	r3, [r4, #100]
	str	r4, [r3, #32]
	ldr	r3, [r4, #100]
	str	r1, [r3, #4]
	str	r2, [r4, #192]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	rmnet_sdio_start_io(PLT)
.L9686:
	ldr	r0, [r5]
	mov	r3, r6
	ldr	r2, [r4, #92]
	ldr	r1, .L9693+8
	add	r0, r0, #32
	ldr	r2, [r2, #4]
.LPIC2041:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L9679:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9685:
	ldr	r2, [r4, #92]
	mov	r0, #0
	mov	r6, r3
	ldr	r1, .L9693+12
	str	r0, [r2, #28]
	ldr	r0, [r5]
	ldr	r2, [r4, #92]
.LPIC2040:
	add	r1, pc, r1
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err(PLT)
	b	.L9679
.L9688:
	ldr	r1, .L9693+16
	mov	r3, r6
	ldr	r2, [r4, #88]
.LPIC2043:
	add	r1, pc, r1
.L9683:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9679
.L9687:
	ldr	r2, [r4, #88]
	ldr	r1, .L9693+20
	str	r6, [r2, #28]
	mov	r6, r3
	ldr	r0, [r5]
.LPIC2042:
	add	r1, pc, r1
	ldr	r2, [r4, #88]
	b	.L9683
.L9689:
	ldr	r2, [r4, #96]
	ldr	r1, .L9693+24
	str	r6, [r2, #28]
	ldr	r0, [r5]
	mov	r6, r3
	ldr	r2, [r4, #96]
.LPIC2044:
	add	r1, pc, r1
.L9682:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9679
.L9691:
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9670:
	mvn	r3, #11
	mov	r6, r3
	str	r3, [r4, #100]
.L9675:
	ldr	r1, .L9693+28
	ldr	r0, .L9693+32
.LPIC2048:
	add	r1, pc, r1
	add	r1, r1, #3728
.LPIC2047:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L9679
.L9690:
	ldr	r1, .L9693+36
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r2, [r4, #96]
.LPIC2045:
	add	r1, pc, r1
	b	.L9682
.L9671:
	mov	r3, #16
	str	r3, [r5]
	b	.L9672
.L9692:
	mov	r6, r5
	b	.L9675
.L9694:
	.align	2
.L9693:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2050+8))
	.word	rmnet_sdio_notify_complete-(.LPIC2049+8)
	.word	.LC529-(.LPIC2041+8)
	.word	.LC531-(.LPIC2040+8)
	.word	.LC529-(.LPIC2043+8)
	.word	.LC531-(.LPIC2042+8)
	.word	.LC531-(.LPIC2044+8)
	.word	.LANCHOR3-(.LPIC2048+8)
	.word	.LC532-(.LPIC2047+8)
	.word	.LC529-(.LPIC2045+8)
	.fnend
	.size	rmnet_sdio_set_alt, .-rmnet_sdio_set_alt
	.align	2
	.type	audio_set_alt, %function
audio_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L9706
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r0, [r0, #20]
	.pad #12
	sub	sp, sp, #12
.LPIC2051:
	add	r3, pc, r3
	ldrb	r3, [r3, #622]	@ zero_extendqisi2
	ldr	r6, [r0, #24]
	cmp	r3, r1
	beq	.L9704
.L9701:
	mov	r5, #0
.L9696:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L9704:
	cmp	r2, #0
	beq	.L9697
	ldrb	r7, [r4, #152]	@ zero_extendqisi2
	cmp	r7, #0
	bne	.L9701
	ldr	r0, [r6]
	mov	r1, r4
	ldr	r2, [r4, #104]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9705
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	moveq	r3, #1
	streqb	r3, [r4, #152]
	beq	.L9696
	ldr	r0, [r6]
	mov	r3, r5
	ldr	r2, [r4, #104]
	ldr	r1, .L9706+4
	add	r0, r0, #32
	ldr	r2, [r2, #4]
.LPIC2053:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9696
.L9697:
	ldrb	r5, [r4, #152]	@ zero_extendqisi2
	cmp	r5, #0
	beq	.L9696
	ldr	r0, [r4, #104]
	mov	r5, r2
	str	r2, [sp, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [sp, #4]
	strb	r2, [r4, #152]
	b	.L9696
.L9705:
	ldr	r2, [r4, #104]
	mov	r5, r3
	ldr	r1, .L9706+8
	str	r7, [r2, #28]
	ldr	r0, [r6]
	ldr	r2, [r4, #104]
.LPIC2052:
	add	r1, pc, r1
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err(PLT)
	b	.L9696
.L9707:
	.align	2
.L9706:
	.word	.LANCHOR2-(.LPIC2051+8)
	.word	.LC534-(.LPIC2053+8)
	.word	.LC533-(.LPIC2052+8)
	.fnend
	.size	audio_set_alt, .-audio_set_alt
	.align	2
	.type	eth_stop, %function
eth_stop:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r1, [r0, #576]
	cmp	r1, #0
	beq	.L9725
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit(PLT)
.L9710:
	add	r6, r5, #1152
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #1156]
	mov	r7, r0
	cmp	r4, #0
	beq	.L9712
	ldr	r3, [r4, #140]
	cmp	r3, #0
	beq	.L9713
	mov	r0, r4
	blx	r3
.L9713:
	ldr	r3, [r4, #88]
	ldr	r1, [r4, #92]
	ldr	r2, [r3, #8]
	mov	r0, r3
	ldr	r9, [r3, #28]
	ldr	r8, [r1, #28]
	ldr	r3, [r2, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #164]
	tst	r3, #4
	beq	.L9726
.L9712:
	mov	r0, r6
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
.L9716:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L9726:
	ldr	r0, [r5, #1164]
	mov	r1, r4
	ldr	r2, [r4, #88]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L9717
	ldr	r0, [r5, #1164]
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L9717
	ldr	r3, [r4, #88]
	str	r9, [r3, #28]
	ldr	r3, [r4, #92]
	str	r8, [r3, #28]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	b	.L9712
.L9725:
	ldr	r0, .L9727
	movw	r1, #1847
.LPIC2054:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r0, .L9727+4
.LPIC2055:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9710
.L9717:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L9716
.L9728:
	.align	2
.L9727:
	.word	.LC85-(.LPIC2054+8)
	.word	.LC86-(.LPIC2055+8)
	.fnend
	.size	eth_stop, .-eth_stop
	.align	2
	.type	acc_function_set_alt, %function
acc_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #92]
	ldr	r5, [r3, #24]
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9737
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	ldr	r0, [r5]
	bne	.L9738
	mov	r1, r4
	ldr	r2, [r4, #96]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9739
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9740
	ldrb	ip, [r4, #100]	@ zero_extendqisi2
	mov	r2, #1
	add	r0, r4, #1664
	mov	r1, #3
	mov	r3, r6
	orr	ip, ip, r2
	strb	ip, [r4, #100]
	bl	__wake_up(PLT)
	b	.L9731
.L9738:
	ldr	r2, [r4, #92]
	mov	r3, r6
	add	r0, r0, #32
	ldr	r1, .L9741
	ldr	r2, [r2, #4]
.LPIC2057:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L9731:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9737:
	ldr	r2, [r4, #92]
	mov	r0, #0
	mov	r6, r3
	ldr	r1, .L9741+4
	str	r0, [r2, #28]
	ldr	r0, [r5]
	ldr	r2, [r4, #92]
.LPIC2056:
	add	r1, pc, r1
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err(PLT)
	b	.L9731
.L9740:
	ldr	r1, .L9741+8
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r2, [r4, #96]
.LPIC2059:
	add	r1, pc, r1
.L9736:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9731
.L9739:
	ldr	r2, [r4, #96]
	ldr	r1, .L9741+12
	str	r6, [r2, #28]
	mov	r6, r3
	ldr	r0, [r5]
.LPIC2058:
	add	r1, pc, r1
	ldr	r2, [r4, #96]
	b	.L9736
.L9742:
	.align	2
.L9741:
	.word	.LC535-(.LPIC2057+8)
	.word	.LC531-(.LPIC2056+8)
	.word	.LC535-(.LPIC2059+8)
	.word	.LC531-(.LPIC2058+8)
	.fnend
	.size	acc_function_set_alt, .-acc_function_set_alt
	.align	2
	.type	fsg_set_alt, %function
fsg_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r6, [r0, #88]
	ldr	r2, [r0, #100]
	ldr	r0, [r6]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	beq	.L9754
.L9744:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9754:
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	cmp	r0, #0
	bne	.L9744
	ldr	r3, [r4, #100]
	mov	r1, r4
	str	r6, [r3]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	ldr	r2, [r4, #104]
	orr	r3, r3, #1
	strb	r3, [r4, #94]
	ldr	r0, [r6]
	bl	config_ep_by_speed(PLT)
	subs	r5, r0, #0
	bne	.L9745
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	beq	.L9755
.L9745:
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	mov	r0, r5
	bfc	r3, #0, #1
	strb	r3, [r4, #94]
	b	.L9744
.L9755:
	ldr	r3, [r4, #104]
	add	r1, r4, #96
	str	r6, [r3]
	ldrb	r3, [r4, #94]	@ zero_extendqisi2
	ldr	r2, [r4, #104]
	orr	r3, r3, #2
	strb	r3, [r4, #94]
	ldr	r3, [r2, #28]
	ldrh	r3, [r3, #4]	@ unaligned
	str	r3, [r6, #108]
	bl	_clear_bit(PLT)
	ldr	r2, [r4, #88]
	ldr	r3, .L9756
	str	r4, [r2, #12]
	ldr	r4, [r4, #88]
.LPIC2060:
	add	r3, pc, r3
	str	r5, [r3, #3548]
	str	r5, [r3, #3544]
	add	r5, r4, #44
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #112]
	mov	r6, r0
	cmp	r3, #4
	bgt	.L9747
	ldr	r2, [r4, #168]
	mov	r1, #4
	ldr	r3, [r4, #56]
	str	r1, [r4, #112]
	cmp	r2, #0
	str	r3, [r4, #116]
	beq	.L9747
	mov	r0, #10
	mov	r1, #2
	bl	send_sig_info(PLT)
.L9747:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	movw	r0, #32767
	b	.L9744
.L9757:
	.align	2
.L9756:
	.word	.LANCHOR4-(.LPIC2060+8)
	.fnend
	.size	fsg_set_alt, .-fsg_set_alt
	.align	2
	.type	mtp_function_set_alt, %function
mtp_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #92]
	ldr	r5, [r3, #24]
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9767
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	ldr	r0, [r5]
	bne	.L9768
	mov	r1, r4
	ldr	r2, [r4, #96]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9769
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9770
	ldr	r3, .L9772
	ldr	r2, [r4, #100]
.LPIC2066:
	add	r3, pc, r3
	add	r3, r3, #632
	str	r3, [r2, #28]
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9771
	mov	r3, #1
	add	r0, r4, #132
	mov	r2, r3
	mov	r1, #3
	str	r3, [r4, #104]
	mov	r3, r6
	bl	__wake_up(PLT)
	b	.L9760
.L9768:
	ldr	r2, [r4, #92]
	mov	r3, r6
	add	r0, r0, #32
	ldr	r1, .L9772+4
	ldr	r2, [r2, #4]
.LPIC2063:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L9760:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9767:
	ldr	r2, [r4, #92]
	mov	r0, #0
	mov	r6, r3
	ldr	r1, .L9772+8
	str	r0, [r2, #28]
	ldr	r0, [r5]
	ldr	r2, [r4, #92]
.LPIC2062:
	add	r1, pc, r1
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err(PLT)
	b	.L9760
.L9770:
	ldr	r1, .L9772+12
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r2, [r4, #96]
.LPIC2065:
	add	r1, pc, r1
.L9766:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9760
.L9769:
	ldr	r2, [r4, #96]
	ldr	r1, .L9772+16
	str	r6, [r2, #28]
	mov	r6, r3
	ldr	r0, [r5]
.LPIC2064:
	add	r1, pc, r1
	ldr	r2, [r4, #96]
	b	.L9766
.L9771:
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9760
.L9773:
	.align	2
.L9772:
	.word	.LANCHOR2-(.LPIC2066+8)
	.word	.LC535-(.LPIC2063+8)
	.word	.LC531-(.LPIC2062+8)
	.word	.LC535-(.LPIC2065+8)
	.word	.LC531-(.LPIC2064+8)
	.fnend
	.size	mtp_function_set_alt, .-mtp_function_set_alt
	.align	2
	.type	ccid_function_set_alt, %function
ccid_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r7, [r0, #100]
	.pad #12
	sub	sp, sp, #12
	ldr	r8, [r0, #84]
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L9775
	ldr	r5, .L9841
	mov	r2, #4
	str	r2, [r6, #4]
.LPIC2089:
	ldr	r5, [pc, r5]		@ tls_load_dot_plus_eight
	ldr	r0, [r5, #24]
	cmp	r0, #0
	beq	.L9776
	mov	r1, #32
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L9830
.L9777:
	cmn	r6, #4096
	str	r6, [r4, #112]
	bhi	.L9778
	ldr	r3, .L9841+4
	mov	r1, #32
.LPIC2070:
	add	r3, pc, r3
	str	r3, [r6, #28]
	ldr	r3, [r4, #112]
	str	r4, [r3, #32]
	ldr	r6, [r4, #108]
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r7, r0, #0
	beq	.L9781
	movw	r2, #522
	str	r2, [r7, #4]
	ldr	r0, [r5, #40]
	cmp	r0, #0
	beq	.L9782
	mov	r1, #32
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r7]
	beq	.L9831
.L9783:
	cmn	r7, #4096
	bhi	.L9832
	ldr	r3, .L9841+8
	mov	r6, #4
	movw	r9, #523
	ldr	r2, .L9841+12
	str	r4, [r7, #32]
.LPIC2073:
	add	r3, pc, r3
.LPIC2076:
	add	r2, pc, r2
	str	r3, [r7, #28]
	str	r2, [sp, #4]
	str	r7, [r4, #184]
.L9793:
	ldr	r7, [r4, #104]
	mov	r1, #32
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	fp, r0, #0
	mov	r1, #32
	movw	r2, #523
	beq	.L9787
	str	r9, [fp, #4]
	ldr	ip, [r5, #40]
	subs	r0, ip, #0
	beq	.L9788
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [fp]
	beq	.L9833
.L9789:
	add	r3, r4, #192
	cmn	fp, #4096
	add	r7, r4, #92
	str	r3, [sp]
	mov	r0, r7
	bhi	.L9834
	ldr	r3, [sp, #4]
	str	r4, [fp, #32]
	str	r3, [fp, #28]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r10, r0
	ldr	r1, [r4, #196]
	add	r0, fp, #36
	ldr	r2, [sp]
	bl	__list_add(PLT)
	mov	r0, r7
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	subs	r6, r6, #1
	bne	.L9793
	ldr	r0, [r8]
	mov	r1, r4
	ldr	r2, [r4, #100]
	bl	config_ep_by_speed(PLT)
	subs	r9, r0, #0
	bne	.L9835
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r9, r0, #0
	bne	.L9836
	ldr	r3, [r4, #100]
	mov	r1, r4
	str	r4, [r3]
	ldr	r0, [r8]
	ldr	r2, [r4, #104]
	bl	config_ep_by_speed(PLT)
	subs	r9, r0, #0
	bne	.L9837
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r9, r0, #0
	bne	.L9838
	ldr	r0, [r8]
	mov	r1, r4
	ldr	r2, [r4, #108]
	bl	config_ep_by_speed(PLT)
	subs	r9, r0, #0
	bne	.L9839
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r9, r0, #0
	moveq	r3, #1
	moveq	r0, r6
	streq	r3, [r4, #200]
	streq	r3, [r4, #96]
	bne	.L9840
.L9824:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L9782:
	mov	r3, #16
	str	r3, [r7]
	b	.L9783
.L9830:
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L9775:
	mvn	r3, #11
	str	r3, [r4, #112]
.L9778:
	ldr	r1, .L9841+16
	ldr	r0, .L9841+20
.LPIC2069:
	add	r1, pc, r1
.LPIC2068:
	add	r0, pc, r0
	add	r1, r1, #3760
	bl	printk(PLT)
	ldr	r0, [r4, #112]
	b	.L9824
.L9776:
	mov	r3, #16
	str	r3, [r6]
	b	.L9777
.L9833:
	ldr	r2, [r7, #8]
	mov	r1, fp
	mov	r0, r7
	ldr	r3, [r2, #12]
	blx	r3
.L9787:
	mvn	r9, #11
.L9807:
	ldr	r1, .L9841+24
	ldr	r0, .L9841+28
.LPIC2075:
	add	r1, pc, r1
.LPIC2074:
	add	r0, pc, r0
	add	r1, r1, #3760
	bl	printk(PLT)
.L9792:
	ldr	r5, [r4, #184]
	ldr	r6, [r4, #108]
	cmp	r5, #0
	beq	.L9786
	ldr	r0, [r5]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9786:
	ldr	r5, [r4, #112]
	ldr	r4, [r4, #100]
	cmp	r5, #0
	moveq	r0, r9
	beq	.L9824
	ldr	r0, [r5]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r0, r4
	mov	r1, r5
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r9
	b	.L9824
.L9788:
	mov	r2, #16
	str	r2, [fp]
	b	.L9789
.L9831:
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L9781:
	mvn	r9, #11
.L9806:
	ldr	r1, .L9841+32
	ldr	r0, .L9841+36
.LPIC2072:
	add	r1, pc, r1
	add	r1, r1, #3760
.LPIC2071:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9786
.L9840:
	ldr	r1, .L9841+40
	mov	r3, r9
	ldr	r2, [r4, #108]
	ldr	r0, .L9841+44
.LPIC2088:
	add	r1, pc, r1
	add	r1, r1, #3760
	ldr	r2, [r2, #4]
.LPIC2087:
	add	r0, pc, r0
	bl	printk(PLT)
.L9801:
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L9798:
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #100]
	mov	r2, #0
	str	r2, [r3]
.L9795:
.L9803:
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp]
	mov	r6, r0
	ldr	r5, [r4, #192]
	cmp	r3, r5
	mov	r0, r5
	sub	r8, r5, #36
	beq	.L9804
	bl	list_del(PLT)
	mov	r0, r7
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r8, #0
	beq	.L9792
	ldr	r6, [r4, #104]
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	mov	r1, r8
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L9803
.L9804:
	mov	r0, r7
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L9792
.L9839:
	ldr	r2, [r4, #108]
	mov	r3, r9
	ldr	r1, .L9841+48
	ldr	r0, .L9841+52
	str	r6, [r2, #28]
	ldr	r2, [r4, #108]
.LPIC2086:
	add	r1, pc, r1
	add	r1, r1, #3760
.LPIC2085:
	add	r0, pc, r0
	ldr	r2, [r2, #4]
	bl	printk(PLT)
	b	.L9801
.L9838:
	ldr	r1, .L9841+56
	mov	r3, r9
	ldr	r2, [r4, #104]
	ldr	r0, .L9841+60
.LPIC2084:
	add	r1, pc, r1
	add	r1, r1, #3760
	ldr	r2, [r2, #4]
.LPIC2083:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9798
.L9837:
	ldr	r2, [r4, #104]
	mov	r3, r9
	ldr	r1, .L9841+64
	ldr	r0, .L9841+68
	str	r6, [r2, #28]
	ldr	r2, [r4, #104]
.LPIC2082:
	add	r1, pc, r1
	add	r1, r1, #3760
.LPIC2081:
	add	r0, pc, r0
	ldr	r2, [r2, #4]
	bl	printk(PLT)
	b	.L9798
.L9836:
	ldr	r1, .L9841+72
	mov	r3, r9
	ldr	r2, [r4, #100]
	ldr	r0, .L9841+76
.LPIC2080:
	add	r1, pc, r1
	add	r1, r1, #3760
	ldr	r2, [r2, #4]
.LPIC2079:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9803
.L9835:
	ldr	r2, [r4, #100]
	mov	r3, r9
	ldr	r1, .L9841+80
	ldr	r0, .L9841+84
	str	r6, [r2, #28]
	ldr	r2, [r4, #100]
.LPIC2078:
	add	r1, pc, r1
	add	r1, r1, #3760
.LPIC2077:
	add	r0, pc, r0
	ldr	r2, [r2, #4]
	bl	printk(PLT)
	b	.L9803
.L9832:
	mov	r9, r7
	b	.L9806
.L9834:
	mov	r9, fp
	b	.L9807
.L9842:
	.align	2
.L9841:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2089+8))
	.word	ccid_notify_complete-(.LPIC2070+8)
	.word	ccid_bulk_complete_out-(.LPIC2073+8)
	.word	ccid_bulk_complete_in-(.LPIC2076+8)
	.word	.LANCHOR3-(.LPIC2069+8)
	.word	.LC536-(.LPIC2068+8)
	.word	.LANCHOR3-(.LPIC2075+8)
	.word	.LC538-(.LPIC2074+8)
	.word	.LANCHOR3-(.LPIC2072+8)
	.word	.LC537-(.LPIC2071+8)
	.word	.LANCHOR3-(.LPIC2088+8)
	.word	.LC540-(.LPIC2087+8)
	.word	.LANCHOR3-(.LPIC2086+8)
	.word	.LC539-(.LPIC2085+8)
	.word	.LANCHOR3-(.LPIC2084+8)
	.word	.LC540-(.LPIC2083+8)
	.word	.LANCHOR3-(.LPIC2082+8)
	.word	.LC539-(.LPIC2081+8)
	.word	.LANCHOR3-(.LPIC2080+8)
	.word	.LC540-(.LPIC2079+8)
	.word	.LANCHOR3-(.LPIC2078+8)
	.word	.LC539-(.LPIC2077+8)
	.fnend
	.size	ccid_function_set_alt, .-ccid_function_set_alt
	.align	2
	.type	adb_function_set_alt, %function
adb_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, r0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r2, [r0, #92]
	ldr	r5, [r3, #24]
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9851
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	ldr	r0, [r5]
	bne	.L9852
	mov	r1, r4
	ldr	r2, [r4, #96]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9853
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9854
	mov	r3, #1
	add	r0, r4, #128
	mov	r2, r3
	mov	r1, #3
	str	r3, [r4, #100]
	mov	r3, r6
	bl	__wake_up(PLT)
	b	.L9845
.L9852:
	ldr	r2, [r4, #92]
	mov	r3, r6
	add	r0, r0, #32
	ldr	r1, .L9855
	ldr	r2, [r2, #4]
.LPIC2091:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L9845:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9851:
	ldr	r2, [r4, #92]
	mov	r0, #0
	mov	r6, r3
	ldr	r1, .L9855+4
	str	r0, [r2, #28]
	ldr	r0, [r5]
	ldr	r2, [r4, #92]
.LPIC2090:
	add	r1, pc, r1
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err(PLT)
	b	.L9845
.L9854:
	ldr	r1, .L9855+8
	mov	r3, r6
	ldr	r0, [r5]
	ldr	r2, [r4, #96]
.LPIC2093:
	add	r1, pc, r1
.L9850:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9845
.L9853:
	ldr	r2, [r4, #96]
	ldr	r1, .L9855+12
	str	r6, [r2, #28]
	mov	r6, r3
	ldr	r0, [r5]
.LPIC2092:
	add	r1, pc, r1
	ldr	r2, [r4, #96]
	b	.L9850
.L9856:
	.align	2
.L9855:
	.word	.LC535-(.LPIC2091+8)
	.word	.LC531-(.LPIC2090+8)
	.word	.LC535-(.LPIC2093+8)
	.word	.LC531-(.LPIC2092+8)
	.fnend
	.size	adb_function_set_alt, .-adb_function_set_alt
	.align	2
	.type	qdss_set_alt, %function
qdss_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	cmp	r2, #0
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r3, [r3, #24]
	ldr	r5, [r3]
	bne	.L9870
	ldr	r3, [r5, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L9883
	ldrb	r3, [r0, #89]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L9884
	ldrb	r3, [r0, #88]	@ zero_extendqisi2
	cmp	r3, r1
	beq	.L9885
.L9863:
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	and	r3, r3, #7
	cmp	r3, #7
	moveq	r3, #1
	streq	r3, [r4, #92]
	beq	.L9866
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L9866
.L9882:
	mov	r0, #0
.L9862:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L9866:
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L9882
	ldr	r1, [r4, #196]
	add	r2, r4, #156
	mov	r0, #4
	bl	queue_work_on(PLT)
	b	.L9882
.L9884:
	mov	r0, r5
	mov	r1, r4
	ldr	r2, [r4, #108]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L9864
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9858
	ldr	r3, [r4, #108]
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r4, #192]
	b	.L9863
.L9885:
	mov	r0, r5
	mov	r1, r4
	ldr	r2, [r4, #104]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L9864
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9858
	ldr	r3, [r4, #104]
	mov	r0, r5
	mov	r1, r4
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	ldr	r2, [r4, #100]
	orr	r3, r3, #2
	strb	r3, [r4, #192]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L9864
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9858
	ldr	r3, [r4, #100]
	str	r4, [r3]
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	orr	r3, r3, #4
	strb	r3, [r4, #192]
	b	.L9863
.L9864:
	mvn	r0, #21
	b	.L9862
.L9870:
	mov	r6, #0
.L9858:
	ldr	r0, .L9886
.LPIC2095:
	add	r0, pc, r0
	bl	printk(PLT)
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	tst	r3, #2
	beq	.L9868
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfc	r2, #1, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
.L9868:
	tst	r3, #4
	beq	.L9869
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r2, [r4, #192]	@ zero_extendqisi2
	bfc	r2, #2, #1
	uxtb	r3, r2
	strb	r2, [r4, #192]
.L9869:
	tst	r3, #1
	moveq	r0, r6
	beq	.L9862
	ldr	r0, [r4, #108]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldrb	r3, [r4, #192]	@ zero_extendqisi2
	mov	r0, r6
	bfc	r3, #0, #1
	strb	r3, [r4, #192]
	b	.L9862
.L9883:
	ldr	r0, .L9886+4
	mvn	r6, #21
.LPIC2094:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L9858
.L9887:
	.align	2
.L9886:
	.word	.LC542-(.LPIC2095+8)
	.word	.LC541-(.LPIC2094+8)
	.fnend
	.size	qdss_set_alt, .-qdss_set_alt
	.align	2
	.type	rmnet_mux_set_alt, %function
rmnet_mux_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0, #96]
	ldr	r7, [r0, #84]
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	bne	.L9910
.L9889:
	mvn	r3, #11
	mov	r5, r3
	str	r3, [r4, #100]
.L9906:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9910:
	ldr	r3, .L9918
	mov	r2, #8
	str	r2, [r5, #4]
.LPIC2104:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L9890
	mov	r1, #32
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r5]
	beq	.L9911
.L9891:
	cmn	r5, #4096
	str	r5, [r4, #100]
	bhi	.L9906
	ldr	r3, .L9918+4
	mov	r2, #8
	mov	r1, r4
.LPIC2097:
	add	r3, pc, r3
	str	r3, [r5, #28]
	ldr	r3, [r4, #100]
	str	r4, [r3, #32]
	ldr	r3, [r4, #100]
	str	r2, [r3, #4]
	ldr	r3, [r4, #92]
	str	r4, [r3]
	ldr	r0, [r7]
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9912
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L9913
	ldr	r3, [r4, #88]
	mov	r1, r4
	str	r4, [r3]
	ldr	r0, [r7]
	ldr	r2, [r4, #88]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9914
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	ldr	r0, [r7]
	bne	.L9915
	mov	r1, r4
	ldr	r2, [r4, #96]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9916
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L9917
	mov	r3, #1
	str	r5, [r4, #408]
	str	r5, [r4, #416]
	str	r5, [r4, #420]
	str	r5, [r4, #404]
	str	r5, [r4, #400]
	str	r5, [r4, #412]
	str	r5, [r4, #424]
	str	r5, [r4, #312]
	str	r3, [r4, #372]
	b	.L9906
.L9912:
	ldr	r2, [r4, #92]
	mov	r0, #0
	mov	r5, r3
	ldr	r1, .L9918+8
	str	r0, [r2, #28]
	ldr	r0, [r7]
	ldr	r2, [r4, #92]
.LPIC2098:
	add	r1, pc, r1
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err(PLT)
	b	.L9906
.L9890:
	mov	r3, #16
	str	r3, [r5]
	b	.L9891
.L9914:
	ldr	r2, [r4, #88]
	ldr	r1, .L9918+12
	str	r5, [r2, #28]
	ldr	r0, [r7]
	mov	r5, r3
	ldr	r2, [r4, #88]
.LPIC2100:
	add	r1, pc, r1
.L9909:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9906
.L9913:
	ldr	r0, [r7]
	mov	r3, r5
	ldr	r2, [r4, #92]
	ldr	r1, .L9918+16
	add	r0, r0, #32
	ldr	r2, [r2, #4]
.LPIC2099:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9906
.L9915:
	ldr	r1, .L9918+20
	mov	r3, r5
	ldr	r2, [r4, #88]
.LPIC2101:
	add	r1, pc, r1
	b	.L9909
.L9916:
	ldr	r2, [r4, #96]
	ldr	r1, .L9918+24
	str	r5, [r2, #28]
	ldr	r0, [r7]
	mov	r5, r3
	ldr	r2, [r4, #96]
.LPIC2102:
	add	r1, pc, r1
.L9908:
	ldr	r2, [r2, #4]
	add	r0, r0, #32
	bl	dev_err(PLT)
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L9906
.L9911:
	ldr	r3, [r6, #8]
	mov	r1, r5
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L9889
.L9917:
	ldr	r1, .L9918+28
	mov	r3, r5
	ldr	r0, [r7]
	ldr	r2, [r4, #96]
.LPIC2103:
	add	r1, pc, r1
	b	.L9908
.L9919:
	.align	2
.L9918:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2104+8))
	.word	rmnet_mux_notify_complete-(.LPIC2097+8)
	.word	.LC531-(.LPIC2098+8)
	.word	.LC531-(.LPIC2100+8)
	.word	.LC529-(.LPIC2099+8)
	.word	.LC529-(.LPIC2101+8)
	.word	.LC531-(.LPIC2102+8)
	.word	.LC529-(.LPIC2103+8)
	.fnend
	.size	rmnet_mux_set_alt, .-rmnet_mux_set_alt
	.align	2
	.type	f_midi_set_alt, %function
f_midi_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #88]
	ldr	r2, [r0, #20]
	ldr	r3, [r5]
	ldr	r7, [r2, #24]
	cmp	r3, #0
	beq	.L9921
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #4]
	blx	r3
.L9921:
	ldr	r0, [r4, #84]
	mov	r1, r4
	mov	r2, r5
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9949
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9950
	str	r4, [r5]
	ldr	r5, [r4, #92]
	ldr	r2, [r4, #20]
	ldr	r3, [r5]
	ldr	r8, [r2, #24]
	cmp	r3, #0
	beq	.L9925
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #4]
	blx	r3
.L9925:
	ldr	r0, [r4, #84]
	mov	r1, r4
	mov	r2, r5
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9951
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r1, [r5, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9952
	str	r4, [r5]
	ldr	r2, [r4, #92]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L9929
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #92]
.L9929:
	ldr	r0, [r4, #84]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L9953
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L9954
	ldr	r3, [r4, #92]
	str	r4, [r3]
	ldr	r3, [r4, #340]
	cmp	r3, #0
	beq	.L9931
	ldr	r7, .L9956
	mov	r5, r6
.LPIC2111:
	add	r7, pc, r7
.L9933:
	ldr	r1, [r4, #336]
	add	r5, r5, #1
	ldr	r0, [r4, #92]
	bl	midi_alloc_ep_req(PLT)
	cmp	r0, #0
	mov	r2, #32
	mov	r1, r0
	beq	.L9937
	str	r7, [r0, #28]
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	bne	.L9955
	ldr	r3, [r4, #340]
	cmp	r3, r5
	bhi	.L9933
	b	.L9931
.L9949:
	ldr	r0, [r7]
	mov	r6, r3
	ldr	r1, .L9956+4
	ldr	r2, [r5, #4]
	add	r0, r0, #32
.LPIC2105:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L9931:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9950:
	ldr	r0, [r7]
	mov	r3, r6
	ldr	r1, .L9956+8
	ldr	r2, [r5, #4]
	add	r0, r0, #32
.LPIC2106:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9931
.L9953:
	ldr	r0, [r7]
	mov	r6, r3
	ldr	r2, [r4, #92]
	ldr	r1, .L9956+12
	add	r0, r0, #32
	ldr	r2, [r2, #4]
.LPIC2109:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9931
.L9955:
	ldr	r0, [r4, #84]
	ldr	r2, [r4, #92]
	ldr	r1, .L9956+16
	add	r0, r0, #32
	ldr	r2, [r2, #4]
.LPIC2112:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9931
.L9951:
	ldr	r0, [r8]
	mov	r6, r3
	ldr	r1, .L9956+20
	ldr	r2, [r5, #4]
	add	r0, r0, #32
.LPIC2107:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9931
.L9952:
	ldr	r0, [r8]
	mov	r3, r6
	ldr	r1, .L9956+24
	ldr	r2, [r5, #4]
	add	r0, r0, #32
.LPIC2108:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9931
.L9937:
	mvn	r6, #11
	b	.L9931
.L9954:
	ldr	r0, [r7]
	mov	r3, r6
	ldr	r2, [r4, #92]
	ldr	r1, .L9956+28
	add	r0, r0, #32
	ldr	r2, [r2, #4]
.LPIC2110:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L9931
.L9957:
	.align	2
.L9956:
	.word	f_midi_complete-(.LPIC2111+8)
	.word	.LC543-(.LPIC2105+8)
	.word	.LC544-(.LPIC2106+8)
	.word	.LC543-(.LPIC2109+8)
	.word	.LC545-(.LPIC2112+8)
	.word	.LC543-(.LPIC2107+8)
	.word	.LC544-(.LPIC2108+8)
	.word	.LC544-(.LPIC2110+8)
	.fnend
	.size	f_midi_set_alt, .-f_midi_set_alt
	.align	2
	.global	usb_add_function
	.type	usb_add_function, %function
usb_add_function:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r1, #40]
	cmp	r3, #0
	beq	.L9964
	ldr	r3, [r1, #48]
	cmp	r3, #0
	beq	.L9964
	mov	r4, r1
	add	r7, r1, #72
	add	r2, r0, #36
	mov	r5, r0
	str	r0, [r4, #20]
	ldr	r1, [r0, #40]
	mov	r0, r7
	bl	__list_add(PLT)
	ldr	r2, [r4, #32]
	cmp	r2, #0
	moveq	r6, r2
	beq	.L9960
	mov	r0, r5
	mov	r1, r4
	blx	r2
	subs	r6, r0, #0
	blt	.L9976
.L9960:
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	tst	r3, #4
	bne	.L9961
	ldr	r2, [r4, #16]
	cmp	r2, #0
	beq	.L9961
	orr	r2, r3, #4
	mov	r3, r2
	strb	r2, [r5, #45]
.L9961:
	tst	r3, #2
	beq	.L9977
.L9962:
	tst	r3, #1
	bne	.L9959
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L9959
	ldrb	r3, [r5, #45]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r5, #45]
.L9959:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L9977:
	ldr	r2, [r4, #8]
	cmp	r2, #0
	beq	.L9962
	ldrb	r2, [r5, #45]	@ zero_extendqisi2
	orr	r2, r2, #2
	mov	r3, r2
	strb	r2, [r5, #45]
	b	.L9962
.L9976:
	mov	r0, r7
	bl	list_del(PLT)
	mov	r3, #0
	str	r3, [r4, #20]
	b	.L9960
.L9964:
	mvn	r6, #21
	b	.L9959
	.fnend
	.size	usb_add_function, .-usb_add_function
	.align	2
	.type	conn_gadget_function_bind_config, %function
conn_gadget_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L9980
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	ldr	r0, .L9980+4
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	ldr	r6, .L9980+8
	str	r8, [sp, #16]
.LPIC2114:
	add	r3, pc, r3
	add	r1, r3, #3776
.LPIC2113:
	add	r0, pc, r0
	add	r1, r1, #8
.LPIC2117:
	add	r6, pc, r6
	bl	printk(PLT)
	ldr	r3, .L9980+12
	ldr	r0, .L9980+16
.LPIC2115:
	add	r3, pc, r3
.LPIC2116:
	add	r0, pc, r0
	ldr	r4, [r3, #2492]
	bl	printk(PLT)
	ldr	r2, [r5, #24]
	mov	r0, r5
	ldr	r3, .L9980+20
	ldr	r5, .L9980+24
	str	r6, [r4]
	mov	r1, r4
	ldr	lr, .L9980+28
	str	r2, [r4, #84]
	ldr	ip, .L9980+32
	ldr	r2, .L9980+36
.LPIC2118:
	add	r3, pc, r3
	add	r8, r3, #944
	add	r7, r3, #960
.LPIC2121:
	add	r5, pc, r5
.LPIC2122:
	add	lr, pc, lr
.LPIC2123:
	add	ip, pc, ip
	add	r3, r3, #976
	str	r8, [r4, #16]
.LPIC2124:
	add	r2, pc, r2
	str	r7, [r4, #8]
	str	r3, [r4, #12]
	str	r5, [r4, #32]
	str	lr, [r4, #36]
	str	ip, [r4, #40]
	str	r2, [r4, #48]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	usb_add_function(PLT)
.L9981:
	.align	2
.L9980:
	.word	.LANCHOR3-(.LPIC2114+8)
	.word	.LC546-(.LPIC2113+8)
	.word	.LC548-(.LPIC2117+8)
	.word	.LANCHOR1-(.LPIC2115+8)
	.word	.LC547-(.LPIC2116+8)
	.word	.LANCHOR0-(.LPIC2118+8)
	.word	conn_gadget_function_bind-(.LPIC2121+8)
	.word	conn_gadget_function_unbind-(.LPIC2122+8)
	.word	conn_gadget_function_set_alt-(.LPIC2123+8)
	.word	conn_gadget_function_disable-(.LPIC2124+8)
	.fnend
	.size	conn_gadget_function_bind_config, .-conn_gadget_function_bind_config
	.align	2
	.type	ccid_function_bind_config, %function
ccid_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L9984
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r0, r1
	ldr	r2, .L9984+4
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	ldr	r7, .L9984+8
	ldr	r6, .L9984+12
	str	r8, [sp, #16]
	ldr	r5, .L9984+16
.LPIC2125:
	add	r3, pc, r3
	ldr	r4, .L9984+20
.LPIC2127:
	add	r2, pc, r2
	ldr	lr, .L9984+24
	add	r8, r2, #1000
.LPIC2126:
	add	r7, pc, r7
	ldr	ip, .L9984+28
.LPIC2129:
	add	r6, pc, r6
	add	r2, r2, #1024
	ldr	r1, [r1, #24]
.LPIC2130:
	add	r5, pc, r5
	ldr	r3, [r3, #2396]
.LPIC2131:
	add	r4, pc, r4
.LPIC2132:
	add	lr, pc, lr
.LPIC2133:
	add	ip, pc, ip
	str	r1, [r3, #84]
	mov	r1, r3
	str	r7, [r3]
	str	r8, [r3, #16]
	str	r2, [r3, #8]
	str	r6, [r3, #32]
	str	r5, [r3, #36]
	str	r4, [r3, #40]
	str	lr, [r3, #52]
	str	ip, [r3, #48]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	usb_add_function(PLT)
.L9985:
	.align	2
.L9984:
	.word	.LANCHOR1-(.LPIC2125+8)
	.word	.LANCHOR0-(.LPIC2127+8)
	.word	.LC549-(.LPIC2126+8)
	.word	ccid_function_bind-(.LPIC2129+8)
	.word	ccid_function_unbind-(.LPIC2130+8)
	.word	ccid_function_set_alt-(.LPIC2131+8)
	.word	ccid_function_setup-(.LPIC2132+8)
	.word	ccid_function_disable-(.LPIC2133+8)
	.fnend
	.size	ccid_function_bind_config, .-ccid_function_bind_config
	.align	2
	.type	adb_function_bind_config, %function
adb_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L9989
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	ldr	r0, .L9989+4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC2134:
	add	r3, pc, r3
.LPIC2135:
	add	r0, pc, r0
	ldr	r4, [r3, #-1472]
	bl	printk(PLT)
	ldr	r3, .L9989+8
	ldr	r0, .L9989+12
	ldr	ip, [r5, #24]
.LPIC2137:
	add	r3, pc, r3
	add	r1, r3, #1040
	add	r2, r3, #1056
	add	r2, r2, #8
.LPIC2136:
	add	r0, pc, r0
	str	ip, [r4, #84]
	add	r1, r1, #8
	str	r0, [r4]
	str	r1, [r4, #16]
	str	r2, [r4, #8]
	ldr	r2, [r5, #24]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L9987
	add	r3, r3, #1072
	add	r3, r3, #8
	str	r3, [r4, #12]
.L9987:
	ldr	lr, .L9989+16
	mov	r0, r5
	mov	r1, r4
	ldr	ip, .L9989+20
	ldr	r2, .L9989+24
	ldr	r3, .L9989+28
.LPIC2140:
	add	lr, pc, lr
.LPIC2141:
	add	ip, pc, ip
.LPIC2142:
	add	r2, pc, r2
	str	lr, [r4, #32]
.LPIC2143:
	add	r3, pc, r3
	str	ip, [r4, #36]
	str	r2, [r4, #40]
	str	r3, [r4, #48]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_add_function(PLT)
.L9990:
	.align	2
.L9989:
	.word	.LANCHOR4-(.LPIC2134+8)
	.word	.LC550-(.LPIC2135+8)
	.word	.LANCHOR0-(.LPIC2137+8)
	.word	.LC551-(.LPIC2136+8)
	.word	adb_function_bind-(.LPIC2140+8)
	.word	adb_function_unbind-(.LPIC2141+8)
	.word	adb_function_set_alt-(.LPIC2142+8)
	.word	adb_function_disable-(.LPIC2143+8)
	.fnend
	.size	adb_function_bind_config, .-adb_function_bind_config
	.align	2
	.type	rmnet_smd_sdio_bind_config, %function
rmnet_smd_sdio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L9994
.LPIC2144:
	add	r3, pc, r3
	ldr	r3, [r3, #2488]
	cmp	r3, #0
	beq	.L9992
	ldr	ip, .L9994+4
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r0, r1
	ldr	r2, .L9994+8
	strd	r6, [sp, #8]
	mov	r1, r3
	strd	r8, [sp, #16]
	ldr	r7, .L9994+12
	str	lr, [sp, #24]
	ldr	r6, .L9994+16
.LPIC2145:
	add	ip, pc, ip
	ldr	r5, .L9994+20
	ldr	r4, .L9994+24
.LPIC2146:
	add	r2, pc, r2
	str	ip, [r3]
	ldr	lr, .L9994+28
	add	r9, r2, #1104
	ldr	ip, .L9994+32
.LPIC2149:
	add	r7, pc, r7
.LPIC2150:
	add	r6, pc, r6
.LPIC2151:
	add	r5, pc, r5
	add	r8, r2, #1120
.LPIC2152:
	add	r4, pc, r4
	add	r9, r9, #8
	str	r7, [r3, #32]
.LPIC2153:
	add	lr, pc, lr
	add	r8, r8, #12
	str	r6, [r3, #36]
.LPIC2154:
	add	ip, pc, ip
	add	r2, r2, #1104
	str	r9, [r3, #16]
	str	r5, [r3, #52]
	str	r4, [r3, #40]
	str	lr, [r3, #48]
	str	ip, [r3, #56]
	stmib	r3, {r2, r8}
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	usb_add_function(PLT)
.L9992:
	mvn	r0, #18
	bx	lr
.L9995:
	.align	2
.L9994:
	.word	.LANCHOR1-(.LPIC2144+8)
	.word	.LC552-(.LPIC2145+8)
	.word	.LANCHOR0-(.LPIC2146+8)
	.word	rmnet_mux_bind-(.LPIC2149+8)
	.word	rmnet_mux_unbind-(.LPIC2150+8)
	.word	rmnet_mux_setup-(.LPIC2151+8)
	.word	rmnet_mux_set_alt-(.LPIC2152+8)
	.word	rmnet_mux_disable-(.LPIC2153+8)
	.word	rmnet_mux_suspend-(.LPIC2154+8)
	.fnend
	.size	rmnet_smd_sdio_bind_config, .-rmnet_smd_sdio_bind_config
	.align	2
	.global	usb_function_deactivate
	.type	usb_function_deactivate, %function
usb_function_deactivate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r1, [r4, #52]
	mov	r7, r0
	cmp	r1, #0
	bne	.L9997
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	mvneq	r6, #94
	beq	.L9998
	blx	r3
	subs	r6, r0, #0
	beq	.L10001
.L9998:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10001:
	ldr	r1, [r4, #52]
.L9997:
	add	r1, r1, #1
	mov	r6, #0
	str	r1, [r4, #52]
	b	.L9998
	.fnend
	.size	usb_function_deactivate, .-usb_function_deactivate
	.align	2
	.global	usb_function_activate
	.type	usb_function_activate, %function
usb_function_activate:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #20]
	ldr	r4, [r3, #24]
	add	r5, r4, #60
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #52]
	cmp	r3, #0
	beq	.L10009
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r4, #52]
	bne	.L10010
	ldr	r0, [r4]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	mvneq	r4, #94
	beq	.L10004
	mov	r1, #1
	blx	r3
	mov	r4, r0
.L10004:
	mov	r0, r5
	bl	_raw_spin_unlock(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10010:
	mov	r4, #0
	b	.L10004
.L10009:
	ldr	r0, .L10011
	movw	r1, #315
	mvn	r4, #21
.LPIC2155:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L10004
.L10012:
	.align	2
.L10011:
	.word	.LC84-(.LPIC2155+8)
	.fnend
	.size	usb_function_activate, .-usb_function_activate
	.align	2
	.global	usb_interface_id
	.type	usb_interface_id, %function
usb_interface_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #44]	@ zero_extendqisi2
	cmp	r3, #15
	bhi	.L10015
	add	ip, r3, #12
	add	r2, r3, #1
	str	r1, [r0, ip, asl #2]
	strb	r2, [r0, #44]
.L10014:
	mov	r0, r3
	bx	lr
.L10015:
	mvn	r3, #18
	b	.L10014
	.fnend
	.size	usb_interface_id, .-usb_interface_id
	.align	2
	.type	diag_function_bind, %function
diag_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L10073
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	lr, [sp, #20]
	str	r8, [sp, #16]
	ldr	r6, [r0, #24]
.LPIC2156:
	add	r4, pc, r4
	bl	usb_interface_id(PLT)
	strb	r0, [r4, #646]
	add	r1, r4, #656
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10017
	str	r0, [r5, #88]
	add	r1, r4, #668
	str	r5, [r0]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10017
	ldr	r6, .L10073+4
	str	r0, [r5, #84]
	str	r5, [r0]
.LPIC2159:
	add	r6, pc, r6
	add	r0, r6, #1152
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r5, #16]
	beq	.L10034
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10069
.L10019:
	ldr	ip, [r5, #120]
	ldr	r0, [r5, #116]
	cmp	ip, #0
	beq	.L10070
	ldr	r3, .L10073+8
.LPIC2170:
	add	r3, pc, r3
	ldrb	r3, [r3, #646]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L10066
	ldrb	r4, [r0, #33]	@ zero_extendqisi2
	cmp	r4, #0
	beq	.L10071
	ldr	r3, [r0, #44]
	ldr	r3, [r3, #16]
	ldr	r3, [r3]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L10066
	ldr	r1, [r3, #4]
	cmp	r1, #0
	bne	.L10029
	b	.L10066
.L10028:
	adds	r3, r3, #8
	beq	.L10066
	ldr	r1, [r3, #4]
	cmp	r1, #0
	beq	.L10072
.L10029:
	ldrb	r2, [r3]	@ zero_extendqisi2
	cmp	r2, r4
	bne	.L10028
	ldrh	r0, [r0, #27]	@ unaligned
	blx	ip
.L10066:
	mov	r0, #0
	b	.L10063
.L10017:
	mvn	r4, #18
.L10018:
	ldr	r0, [r5, #12]
	cmp	r0, #0
	beq	.L10024
.L10033:
	bl	kfree(PLT)
.L10024:
	ldr	r0, [r5, #8]
	cmp	r0, #0
	beq	.L10030
	bl	kfree(PLT)
.L10030:
	ldr	r0, [r5, #16]
	cmp	r0, #0
	beq	.L10031
	bl	kfree(PLT)
.L10031:
	ldr	r3, [r5, #84]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #88]
	cmp	r3, #0
	moveq	r0, r4
	beq	.L10063
	mov	r2, #0
	mov	r0, r4
	str	r2, [r3]
.L10063:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10069:
	ldrb	r2, [r4, #658]	@ zero_extendqisi2
	add	r0, r6, #1168
	ldrb	r3, [r4, #670]	@ zero_extendqisi2
	strb	r2, [r4, #682]
	strb	r3, [r4, #694]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r5, #8]
	beq	.L10020
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L10019
	ldrb	r2, [r4, #658]	@ zero_extendqisi2
	add	r0, r6, #1184
	ldrb	r3, [r4, #670]	@ zero_extendqisi2
	strb	r2, [r4, #706]
	strb	r3, [r4, #718]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r5, #12]
	bne	.L10019
	mvn	r4, #11
	b	.L10024
.L10034:
	mvn	r4, #11
	b	.L10018
.L10072:
	mov	r0, r1
	b	.L10063
.L10071:
	ldrh	r0, [r0, #27]	@ unaligned
	mov	r1, r4
	blx	ip
	mov	r0, r4
	b	.L10063
.L10070:
	mov	r0, ip
	b	.L10063
.L10020:
	ldr	r0, [r5, #12]
	mvn	r4, #11
	cmp	r0, #0
	bne	.L10033
	b	.L10030
.L10074:
	.align	2
.L10073:
	.word	.LANCHOR2-(.LPIC2156+8)
	.word	.LANCHOR0-(.LPIC2159+8)
	.word	.LANCHOR2-(.LPIC2170+8)
	.fnend
	.size	diag_function_bind, .-diag_function_bind
	.align	2
	.type	rmnet_smd_bind, %function
rmnet_smd_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #24]
	str	r4, [r1, #84]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L10139
	ldr	r6, .L10157
	uxtb	r0, r0
	strb	r0, [r5, #104]
.LPIC2171:
	add	r6, pc, r6
	add	r1, r6, #740
	strb	r0, [r6, #730]
	ldr	r0, [r4]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10078
	str	r4, [r0]
	add	r1, r6, #752
	str	r0, [r5, #92]
	ldr	r0, [r4]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10078
	str	r4, [r0]
	add	r1, r6, #764
	str	r0, [r5, #88]
	ldr	r0, [r4]
	bl	usb_ep_autoconfig(PLT)
	subs	r8, r0, #0
	beq	.L10078
	str	r4, [r8]
	str	r8, [r5, #96]
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10151
.L10079:
	ldr	r3, [r8, #8]
	mov	r0, r8
	mov	r1, #208
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L10080
	ldr	r7, .L10157+4
	mov	r2, #8
	str	r2, [r4, #4]
.LPIC2185:
	ldr	r7, [pc, r7]		@ tls_load_dot_plus_eight
	ldr	r0, [r7, #24]
	cmp	r0, #0
	beq	.L10081
	mov	r1, #208
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L10152
.L10082:
	cmn	r4, #4096
	str	r4, [r5, #100]
	bhi	.L10147
	ldr	r3, .L10157+8
	mov	r2, #8
	mov	r6, #4
	mov	r8, #16
.LPIC2182:
	add	r3, pc, r3
	str	r3, [r4, #28]
	ldr	r3, [r5, #100]
	str	r5, [r3, #32]
	ldr	r3, [r5, #100]
	str	r2, [r3, #4]
.L10090:
	ldr	r3, [r7, #24]
	mov	r1, #208
	mov	r2, #16
	subs	r0, r3, #0
	beq	.L10118
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L10102
.L10085:
	ldr	r3, [r7, #44]
	mov	r1, #208
	mov	r2, #2048
	subs	r0, r3, #0
	beq	.L10153
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L10148
.L10087:
	cmn	r4, #4096
	add	r0, r4, #8
	add	r2, r5, #108
	bhi	.L10099
	ldr	r1, [r5, #112]
	bl	__list_add(PLT)
	subs	r6, r6, #1
	bne	.L10090
	mov	r6, #8
	mov	r8, #16
.L10095:
	ldr	r3, [r7, #24]
	mov	r1, #208
	mov	r2, #16
	subs	r0, r3, #0
	beq	.L10119
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L10102
.L10091:
	ldr	r3, [r7, #44]
	mov	r1, #208
	mov	r2, #2048
	subs	r0, r3, #0
	beq	.L10154
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L10148
.L10093:
	cmn	r4, #4096
	add	r0, r4, #8
	add	r2, r5, #116
	bhi	.L10099
	ldr	r1, [r5, #120]
	bl	__list_add(PLT)
	subs	r6, r6, #1
	bne	.L10095
	ldr	r10, .L10157+12
	mov	r8, #8
	mov	r9, #2048
.LPIC2183:
	add	r10, pc, r10
.L10101:
	ldr	r6, [r5, #88]
	mov	r1, #208
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	mov	r1, #208
	mov	r2, #2048
	beq	.L10102
	str	r9, [r4, #4]
	ldr	r3, [r7, #44]
	subs	r0, r3, #0
	beq	.L10097
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L10155
.L10098:
	cmn	r4, #4096
	add	r0, r4, #36
	add	r2, r5, #148
	bhi	.L10099
	str	r9, [r4, #4]
	str	r5, [r4, #32]
	str	r10, [r4, #28]
	ldr	r1, [r5, #152]
	bl	__list_add(PLT)
	subs	r8, r8, #1
	bne	.L10101
	ldr	r10, .L10157+16
	mov	r4, #8
	mov	r9, #2048
.LPIC2184:
	add	r10, pc, r10
.L10107:
	ldr	r8, [r5, #92]
	mov	r1, #208
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	mov	r1, #208
	mov	r2, #2048
	beq	.L10102
	str	r9, [r6, #4]
	ldr	r3, [r7, #44]
	subs	r0, r3, #0
	beq	.L10103
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L10156
.L10104:
	cmn	r6, #4096
	add	r0, r6, #36
	add	r2, r5, #140
	bhi	.L10089
	str	r5, [r6, #32]
	str	r10, [r6, #28]
	ldr	r1, [r5, #144]
	bl	__list_add(PLT)
	subs	r4, r4, #1
	bne	.L10107
.L10147:
	mov	r0, r4
.L10139:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10151:
	ldrb	r1, [r6, #742]	@ zero_extendqisi2
	ldrb	r2, [r6, #754]	@ zero_extendqisi2
	ldrb	r3, [r6, #766]	@ zero_extendqisi2
	strb	r1, [r6, #778]
	strb	r2, [r6, #790]
	strb	r3, [r6, #802]
	b	.L10079
.L10118:
	mov	r4, #16
	b	.L10085
.L10155:
	ldr	r3, [r6, #8]
	mov	r1, r4
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
.L10102:
	mvn	r6, #11
.L10089:
	mov	r0, r5
	bl	rmnet_smd_free_buf(PLT)
	mov	r3, #0
	mov	r0, r6
	str	r3, [r5, #96]
	str	r3, [r5, #92]
	str	r3, [r5, #88]
	b	.L10139
.L10081:
	mov	r3, #16
	str	r3, [r4]
	b	.L10082
.L10152:
	ldr	r3, [r8, #8]
	mov	r1, r4
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L10080:
	mvn	r3, #11
	mov	r0, r3
	str	r3, [r5, #100]
	b	.L10139
.L10119:
	mov	r4, #16
	b	.L10091
.L10148:
	mov	r0, r4
	bl	kfree(PLT)
	b	.L10102
.L10078:
	mvn	r0, #18
	b	.L10139
.L10097:
	mov	r3, #16
	str	r3, [r4]
	b	.L10098
.L10103:
	mov	r3, #16
	str	r3, [r6]
	b	.L10104
.L10156:
	ldr	r3, [r8, #8]
	mov	r1, r6
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10102
.L10153:
	str	r8, [r4]
	b	.L10087
.L10099:
	mov	r6, r4
	b	.L10089
.L10154:
	str	r8, [r4]
	b	.L10093
.L10158:
	.align	2
.L10157:
	.word	.LANCHOR2-(.LPIC2171+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2185+8))
	.word	rmnet_smd_notify_complete-(.LPIC2182+8)
	.word	rmnet_smd_complete_epout-(.LPIC2183+8)
	.word	rmnet_smd_complete_epin-(.LPIC2184+8)
	.fnend
	.size	rmnet_smd_bind, .-rmnet_smd_bind
	.align	2
	.type	rmnet_sdio_bind, %function
rmnet_sdio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #24]
	str	r5, [r1, #84]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L10160
	ldr	r6, .L10183
	uxtb	r0, r0
	strb	r0, [r4, #104]
.LPIC2186:
	add	r6, pc, r6
	add	r1, r6, #824
	strb	r0, [r6, #814]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10161
	str	r5, [r0]
	add	r1, r6, #836
	str	r0, [r4, #92]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10161
	str	r5, [r0]
	add	r1, r6, #848
	str	r0, [r4, #88]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10161
	str	r5, [r0]
	str	r0, [r4, #96]
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L10162
	ldrb	r1, [r6, #826]	@ zero_extendqisi2
	ldrb	r2, [r6, #838]	@ zero_extendqisi2
	ldrb	r3, [r6, #850]	@ zero_extendqisi2
	strb	r1, [r6, #862]
	strb	r2, [r6, #874]
	strb	r3, [r6, #886]
.L10162:
	mov	r0, #4
	ldr	r1, [r4, #200]
	add	r2, r4, #252
	mov	r3, #0
	bl	queue_delayed_work_on(PLT)
	mov	r0, #0
.L10160:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10161:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	mvnne	r0, #18
	mvneq	r0, #18
	strne	r2, [r3]
	b	.L10160
.L10184:
	.align	2
.L10183:
	.word	.LANCHOR2-(.LPIC2186+8)
	.fnend
	.size	rmnet_sdio_bind, .-rmnet_sdio_bind
	.align	2
	.type	audio_bind, %function
audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r4, .L10202
	movw	r2, #44100
	str	lr, [sp, #32]
	mov	lr, #0
	mov	r3, #2
	strd	r6, [sp, #8]
	mov	r5, r0
	mov	r6, r1
	strd	r8, [sp, #16]
.LPIC2196:
	add	r4, pc, r4
	strd	r10, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	add	ip, r4, #916
	ldr	r8, [r0, #24]
	strb	lr, [r4, #918]
	strh	r2, [ip]	@ movhi
	str	r2, [sp, #4]
	strb	r3, [r4, #903]
	strb	r3, [r4, #912]
	bl	usb_interface_id(PLT)
	subs	r7, r0, #0
	blt	.L10194
	mov	r0, r5
	mov	r1, r6
	strb	r7, [r4, #922]
	bl	usb_interface_id(PLT)
	subs	r7, r0, #0
	blt	.L10194
	uxtb	r7, r7
	add	r1, r4, #944
	strb	r7, [r4, #934]
	strb	r7, [r4, #622]
	ldr	r0, [r8]
	bl	usb_ep_autoconfig(PLT)
	subs	r8, r0, #0
	beq	.L10192
	str	r8, [r6, #104]
	str	r6, [r8]
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10199
.L10187:
	ldr	r9, .L10202+4
	mov	r7, #4
	mov	r10, #16
.LPIC2206:
	add	r9, pc, r9
	b	.L10191
.L10201:
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L10200
.L10190:
	mov	r3, #256
	add	r5, r6, #108
	str	r6, [r4, #32]
	str	r9, [r4, #28]
	mov	r0, r5
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	fp, r0
	ldr	r1, [r6, #100]
	add	r0, r4, #36
	add	r2, r6, #96
	bl	__list_add(PLT)
	mov	r0, r5
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	subs	r7, r7, #1
	beq	.L10194
.L10191:
	ldr	r3, [r8, #8]
	mov	r1, #208
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	ldr	r3, .L10202+8
	mov	r1, #208
	mov	r2, #256
	beq	.L10188
.LPIC2207:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r3, [r3, #32]
	subs	r0, r3, #0
	bne	.L10201
	str	r10, [r4]
	b	.L10190
.L10192:
	mvn	r7, #18
.L10194:
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10199:
	ldrb	r3, [r4, #946]	@ zero_extendqisi2
	strb	r3, [r4, #958]
	b	.L10187
.L10200:
	ldr	r3, [r8, #8]
	mov	r1, r4
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L10188:
.L10186:
	mvn	r7, #11
	b	.L10194
.L10203:
	.align	2
.L10202:
	.word	.LANCHOR2-(.LPIC2196+8)
	.word	audio_data_complete-(.LPIC2206+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2207+8))
	.fnend
	.size	audio_bind, .-audio_bind
	.align	2
	.type	ecm_qc_bind, %function
ecm_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	mov	r8, r0
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	bl	usb_interface_id(PLT)
	subs	r6, r0, #0
	blt	.L10205
	ldr	r5, .L10267
	uxtb	r6, r6
	mov	r0, r8
	mov	r1, r4
	strb	r6, [r4, #120]
.LPIC2208:
	add	r5, pc, r5
	strb	r6, [r5, #970]
	strb	r6, [r5, #983]
	bl	usb_interface_id(PLT)
	subs	r6, r0, #0
	blt	.L10205
	uxtb	r0, r6
	add	r1, r5, #1012
	strb	r0, [r4, #121]
	strb	r0, [r5, #990]
	strb	r0, [r5, #1002]
	strb	r0, [r5, #984]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10207
	str	r0, [r4, #88]
	add	r1, r5, #1024
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10207
	add	r1, r5, #1024
	str	r0, [r4, #92]
	add	r1, r1, #12
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L10207
	str	r3, [r4, #144]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4, #148]
	beq	.L10210
	ldr	r3, .L10267+4
.LPIC2237:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L10209
	mov	r1, #208
	mov	r2, #16
	bl	kmem_cache_alloc_trace(PLT)
.L10209:
	str	r0, [r5]
	ldr	r3, [r4, #148]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L10210
	str	r4, [r3, #32]
	ldr	r6, .L10267+8
	ldr	r3, .L10267+12
	ldr	r2, [r4, #148]
.LPIC2218:
	add	r6, pc, r6
.LPIC2217:
	add	r3, pc, r3
	add	r0, r6, #1200
	add	r0, r0, #8
	str	r3, [r2, #28]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L10210
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10266
.L10211:
	ldr	r2, .L10267+16
	mov	r0, #0
	ldr	r3, .L10267+20
.LPIC2226:
	add	r2, pc, r2
.LPIC2227:
	add	r3, pc, r3
	strd	r2, [r4, #112]
.L10264:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10266:
	ldr	r5, .L10267+24
	add	r0, r6, #1248
.LPIC2219:
	add	r5, pc, r5
	ldrb	r1, [r5, #1014]	@ zero_extendqisi2
	ldrb	r2, [r5, #1026]	@ zero_extendqisi2
	ldrb	r3, [r5, #1038]	@ zero_extendqisi2
	strb	r1, [r5, #1050]
	strb	r2, [r5, #1062]
	strb	r3, [r5, #1074]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L10212
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L10211
	ldrb	r3, [r5, #1038]	@ zero_extendqisi2
	add	r0, r6, #1280
	ldrb	r1, [r5, #1014]	@ zero_extendqisi2
	add	r0, r0, #8
	ldrb	r2, [r5, #1026]	@ zero_extendqisi2
	strb	r3, [r5, #1110]
	strb	r1, [r5, #1086]
	strb	r2, [r5, #1098]
	bl	usb_copy_descriptors(PLT)
	ldr	r3, [r4, #8]
	str	r0, [r4, #12]
	cmp	r3, #0
	bne	.L10211
.L10212:
	ldr	r0, [r4, #12]
	mvn	r6, #11
	cmp	r0, #0
	beq	.L10216
.L10222:
	bl	kfree(PLT)
.L10215:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L10216
	bl	kfree(PLT)
.L10216:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L10217
	bl	kfree(PLT)
.L10217:
	ldr	r3, [r4, #148]
	cmp	r3, #0
	beq	.L10218
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #144]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L10218:
	ldr	r3, [r4, #144]
	ldr	r1, .L10267+28
	ldr	r0, .L10267+32
	cmp	r3, #0
	movne	r2, #0
.LPIC2236:
	add	r1, pc, r1
	add	r1, r1, #3808
.LPIC2235:
	add	r0, pc, r0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	add	r1, r1, #12
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r6
	ldr	r2, [r4]
	bl	printk(PLT)
	mov	r0, r6
	b	.L10264
.L10207:
	mvn	r6, #18
.L10205:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	bne	.L10222
	b	.L10215
.L10210:
	mvn	r6, #11
	b	.L10205
.L10268:
	.align	2
.L10267:
	.word	.LANCHOR2-(.LPIC2208+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2237+8))
	.word	.LANCHOR0-(.LPIC2218+8)
	.word	ecm_qc_notify_complete-(.LPIC2217+8)
	.word	ecm_qc_open-(.LPIC2226+8)
	.word	ecm_qc_close-(.LPIC2227+8)
	.word	.LANCHOR2-(.LPIC2219+8)
	.word	.LANCHOR3-(.LPIC2236+8)
	.word	.LC553-(.LPIC2235+8)
	.fnend
	.size	ecm_qc_bind, .-ecm_qc_bind
	.align	2
	.type	mbim_bind, %function
mbim_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	ldr	r7, .L10330
	strd	r8, [sp, #16]
	mov	r8, r0
	str	lr, [sp, #24]
	ldr	r9, [r0, #24]
	.pad #20
	sub	sp, sp, #20
	ldr	r0, .L10330+4
.LPIC2241:
	add	r7, pc, r7
	add	r7, r7, #3824
	add	r7, r7, #8
	mov	r1, r7
.LPIC2240:
	add	r0, pc, r0
	bl	printk(PLT)
	str	r9, [r4, #84]
	mov	r0, r8
	mov	r1, r4
	bl	usb_interface_id(PLT)
	subs	r6, r0, #0
	blt	.L10270
	ldr	r5, .L10330+8
	uxtb	r3, r6
	mov	r0, r8
	mov	r1, r4
	strb	r3, [r4, #196]
.LPIC2242:
	add	r5, pc, r5
	strb	r3, [r5, #1122]
	strb	r3, [r5, #1130]
	strb	r3, [r5, #1143]
	bl	usb_interface_id(PLT)
	subs	r6, r0, #0
	blt	.L10270
	uxtb	r0, r6
	mov	r3, #0
	str	r9, [r4, #140]
	add	r1, r5, #1168
	str	r4, [r4, #144]
	strb	r3, [r4, #198]
	add	r1, r1, #4
	strb	r0, [r4, #197]
	strb	r0, [r5, #1150]
	strb	r0, [r5, #1162]
	strb	r0, [r5, #1144]
	ldr	r0, [r9]
	bl	usb_ep_autoconfig(PLT)
	subs	r6, r0, #0
	beq	.L10325
	ldr	r0, .L10330+12
	mov	r1, r7
.LPIC2251:
	add	r0, pc, r0
	bl	printk(PLT)
	str	r9, [r6]
	add	r1, r5, #1184
	str	r6, [r4, #148]
	ldr	r0, [r9]
	bl	usb_ep_autoconfig(PLT)
	subs	r6, r0, #0
	beq	.L10326
	ldr	r0, .L10330+16
	mov	r1, r7
.LPIC2256:
	add	r0, pc, r0
	bl	printk(PLT)
	add	r1, r5, #1184
	str	r9, [r6]
	add	r1, r1, #12
	str	r6, [r4, #152]
	ldr	r0, [r9]
	bl	usb_ep_autoconfig(PLT)
	subs	r5, r0, #0
	mov	r1, r7
	beq	.L10327
	ldr	r0, .L10330+20
.LPIC2261:
	add	r0, pc, r0
	bl	printk(PLT)
	str	r5, [r4, #156]
	ldr	r3, [r5, #8]
	mov	r0, r5
	str	r9, [r5]
	mov	r1, #208
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L10274
	ldr	r3, .L10330+24
.LPIC2290:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L10275
	mov	r1, #208
	mov	r2, #16
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L10328
.L10276:
	ldr	r1, .L10330+28
	mov	r3, #16
	ldr	r0, .L10330+32
	str	r3, [r6, #4]
	ldr	r5, .L10330+36
	str	r6, [r4, #160]
	ldr	r6, .L10330+40
.LPIC2265:
	add	r1, pc, r1
	add	r1, r1, #3824
.LPIC2264:
	add	r0, pc, r0
	add	r1, r1, #8
.LPIC2267:
	add	r5, pc, r5
	bl	printk(PLT)
	ldr	r1, [r4, #160]
.LPIC2268:
	add	r6, pc, r6
	add	r3, r5, #1200
	ldr	r2, .L10330+44
	add	r0, r6, #1328
	add	r0, r0, #12
	str	r4, [r1, #32]
	ldr	r1, [r4, #160]
.LPIC2266:
	add	r2, pc, r2
	str	r2, [r1, #28]
	ldr	r2, [r4, #132]
	cmp	r2, #7
	moveq	r2, #2048
	movne	r2, #4064
	strh	r2, [r3, #17]	@ unaligned
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L10281
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10329
.L10280:
	ldrb	r3, [r8, #20]	@ zero_extendqisi2
	sub	r2, r3, #2
	cmp	r2, #2
	bhi	.L10284
	ldr	r2, .L10330+48
	add	r3, r3, #48
.LPIC2283:
	add	r2, pc, r2
	strb	r3, [r2, #170]
.L10284:
	ldr	r3, [r8, #24]
	ldrb	r2, [r4, #136]	@ zero_extendqisi2
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10294
	ldr	r3, .L10330+52
.LPIC2239:
	add	r3, pc, r3
.L10285:
	ldr	r0, [r4, #148]
	ldr	lr, [r4, #152]
	ldr	ip, [r4, #156]
	ldr	r1, .L10330+56
	ldr	r4, [r0, #4]
	ldr	r0, .L10330+60
.LPIC2285:
	add	r1, pc, r1
	str	r4, [sp]
	ldr	lr, [lr, #4]
	add	r1, r1, #3824
.LPIC2284:
	add	r0, pc, r0
	add	r1, r1, #8
	str	lr, [sp, #4]
	ldr	ip, [ip, #4]
	str	ip, [sp, #8]
	bl	printk(PLT)
	mov	r0, #0
.L10323:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L10294:
	ldr	r3, .L10330+64
.LPIC2238:
	add	r3, pc, r3
	b	.L10285
.L10329:
	ldrb	r1, [r5, #1174]	@ zero_extendqisi2
	add	r0, r6, #1376
	ldrb	r2, [r5, #1186]	@ zero_extendqisi2
	add	r0, r0, #12
	ldrb	r3, [r5, #1198]	@ zero_extendqisi2
	strb	r1, [r5, #1222]
	strb	r2, [r5, #1234]
	strb	r3, [r5, #1246]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L10281
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L10280
	ldrb	r1, [r5, #1174]	@ zero_extendqisi2
	add	r0, r6, #1424
	ldrb	r2, [r5, #1186]	@ zero_extendqisi2
	add	r0, r0, #12
	ldrb	r3, [r5, #1198]	@ zero_extendqisi2
	strb	r1, [r5, #1258]
	strb	r2, [r5, #1270]
	strb	r3, [r5, #1282]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #12]
	bne	.L10280
.L10281:
	mvn	r6, #11
.L10270:
	ldr	r1, .L10330+68
	mov	r3, r6
	ldr	r0, .L10330+72
	ldr	r2, [r4]
.LPIC2287:
	add	r1, pc, r1
	add	r1, r1, #3824
.LPIC2286:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L10287
	bl	kfree(PLT)
.L10287:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L10288
	bl	kfree(PLT)
.L10288:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L10289
	bl	kfree(PLT)
.L10289:
	ldr	r3, [r4, #160]
	cmp	r3, #0
	beq	.L10290
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L10290:
	ldr	r3, [r4, #156]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #152]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #148]
	cmp	r3, #0
	movne	r2, #0
	movne	r0, r6
	moveq	r0, r6
	strne	r2, [r3]
	b	.L10323
.L10275:
	mov	r3, #16
	str	r3, [r6]
	b	.L10276
.L10328:
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L10274:
	ldr	r1, .L10330+76
	mov	r3, #0
	mvn	r6, #11
	ldr	r0, .L10330+80
	str	r3, [r4, #160]
.LPIC2289:
	add	r1, pc, r1
	add	r1, r1, #3824
.LPIC2288:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L10270
.L10326:
	ldr	r0, .L10330+84
	mov	r1, r7
	mvn	r6, #18
.LPIC2254:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10270
.L10325:
	ldr	r0, .L10330+88
	mov	r1, r7
	mvn	r6, #18
.LPIC2249:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10270
.L10327:
	ldr	r0, .L10330+92
	mvn	r6, #18
.LPIC2259:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10270
.L10331:
	.align	2
.L10330:
	.word	.LANCHOR3-(.LPIC2241+8)
	.word	.LC222-(.LPIC2240+8)
	.word	.LANCHOR2-(.LPIC2242+8)
	.word	.LC557-(.LPIC2251+8)
	.word	.LC559-(.LPIC2256+8)
	.word	.LC561-(.LPIC2261+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2290+8))
	.word	.LANCHOR3-(.LPIC2265+8)
	.word	.LC562-(.LPIC2264+8)
	.word	.LANCHOR2-(.LPIC2267+8)
	.word	.LANCHOR0-(.LPIC2268+8)
	.word	mbim_notify_complete-(.LPIC2266+8)
	.word	.LANCHOR2-(.LPIC2283+8)
	.word	.LC555-(.LPIC2239+8)
	.word	.LANCHOR3-(.LPIC2285+8)
	.word	.LC563-(.LPIC2284+8)
	.word	.LC554-(.LPIC2238+8)
	.word	.LANCHOR3-(.LPIC2287+8)
	.word	.LC564-(.LPIC2286+8)
	.word	.LANCHOR3-(.LPIC2289+8)
	.word	.LC565-(.LPIC2288+8)
	.word	.LC558-(.LPIC2254+8)
	.word	.LC556-(.LPIC2249+8)
	.word	.LC560-(.LPIC2259+8)
	.fnend
	.size	mbim_bind, .-mbim_bind
	.align	2
	.type	ecm_bind, %function
ecm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r7, [r0, #24]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L10333
	ldr	r6, .L10364
	uxtb	r5, r5
	mov	r0, r8
	mov	r1, r4
	strb	r5, [r4, #148]
.LPIC2291:
	add	r6, pc, r6
	strb	r5, [r6, #1294]
	strb	r5, [r6, #1302]
	strb	r5, [r6, #1315]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L10333
	uxtb	r5, r5
	add	r1, r6, #1344
	strb	r5, [r4, #149]
	strb	r5, [r6, #1322]
	strb	r5, [r6, #1334]
	strb	r5, [r6, #1316]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10362
	add	r1, r6, #1344
	str	r0, [r4, #88]
	add	r1, r1, #12
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10362
	add	r1, r6, #1360
	str	r0, [r4, #92]
	add	r1, r1, #8
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L10362
	str	r3, [r4, #164]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4, #168]
	beq	.L10346
	ldr	r3, .L10364+4
.LPIC2317:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L10340
	mov	r1, #208
	mov	r2, #16
	bl	kmem_cache_alloc_trace(PLT)
.L10340:
	str	r0, [r5]
	ldr	r3, [r4, #168]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L10348
	ldr	ip, .L10364+8
	str	r4, [r3, #32]
	mov	r0, r4
	ldr	r3, .L10364+12
	ldr	lr, .L10364+16
	ldr	r9, [r4, #168]
.LPIC2302:
	add	ip, pc, ip
	ldrb	r5, [ip, #1370]	@ zero_extendqisi2
.LPIC2311:
	add	r3, pc, r3
	ldrb	r8, [ip, #1346]	@ zero_extendqisi2
.LPIC2301:
	add	lr, pc, lr
	add	r1, r3, #1488
	ldrb	r6, [ip, #1358]	@ zero_extendqisi2
	add	r2, r3, #1536
	add	r1, r1, #8
	add	r2, r2, #4
	str	lr, [r9, #28]
	add	r3, r3, #1584
	strb	r5, [ip, #1406]
	strb	r5, [ip, #1442]
	strb	r8, [ip, #1382]
	strb	r8, [ip, #1418]
	strb	r6, [ip, #1394]
	strb	r6, [ip, #1430]
	bl	usb_assign_descriptors(PLT)
	subs	r5, r0, #0
	beq	.L10363
.L10333:
	ldr	r3, [r4, #168]
.L10335:
	cmp	r3, #0
	beq	.L10339
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L10339:
	ldr	r3, [r4, #164]
	ldr	r1, .L10364+20
	cmp	r3, #0
	movne	r2, #0
.LPIC2316:
	add	r1, pc, r1
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r5
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err(PLT)
.L10342:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10362:
	ldr	r3, [r4, #168]
	mvn	r5, #18
	b	.L10335
.L10363:
	ldr	r2, .L10364+24
	ldr	r3, .L10364+28
.LPIC2314:
	add	r2, pc, r2
.LPIC2315:
	add	r3, pc, r3
	strd	r2, [r4, #136]
	b	.L10342
.L10348:
	mvn	r5, #11
	b	.L10335
.L10346:
	mvn	r5, #11
	b	.L10339
.L10365:
	.align	2
.L10364:
	.word	.LANCHOR2-(.LPIC2291+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2317+8))
	.word	.LANCHOR2-(.LPIC2302+8)
	.word	.LANCHOR0-(.LPIC2311+8)
	.word	ecm_notify_complete-(.LPIC2301+8)
	.word	.LC566-(.LPIC2316+8)
	.word	ecm_open-(.LPIC2314+8)
	.word	ecm_close-(.LPIC2315+8)
	.fnend
	.size	ecm_bind, .-ecm_bind
	.align	2
	.type	f_audio_bind, %function
f_audio_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L10382
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L10382+4
	strd	r6, [sp, #8]
	movw	r6, #1460
	strd	r8, [sp, #16]
	mov	r7, r1
	mov	r9, r0
	strd	r10, [sp, #24]
	movw	r10, #1484
	str	lr, [sp, #32]
	ldr	r4, [r1, #140]
	.pad #12
	sub	sp, sp, #12
	ldr	r2, [r1, #168]
.LPIC2319:
	add	r5, pc, r5
	ldrb	lr, [r1, #136]	@ zero_extendqisi2
	ldrb	ip, [r1, #164]	@ zero_extendqisi2
.LPIC2355:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ubfx	fp, r4, #16, #8
	strh	r4, [r5, r6]	@ movhi
	ubfx	r8, r2, #16, #8
	strh	r2, [r5, r10]	@ movhi
	ldr	r6, [r0, #24]
	strb	fp, [r5, #1462]
	strb	r8, [r5, #1486]
	str	r2, [sp, #4]
	strb	lr, [r5, #1456]
	strb	lr, [r3, #7]
	strb	ip, [r5, #1471]
	strb	ip, [r5, #1480]
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L10377
	ldr	r3, .L10382+8
	mov	r0, r9
	mov	r1, r7
.LPIC2354:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	strb	r4, [r3, #2]
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L10378
	ldr	r8, .L10382+12
	uxtb	r3, r4
	mov	r4, #0
	mov	r0, r9
	strb	r4, [r7, #248]
	mov	r1, r7
	strb	r3, [r5, #1490]
.LPIC2353:
	ldr	r8, [pc, r8]		@ tls_load_dot_plus_eight
	strb	r3, [r5, #1502]
	strb	r3, [r8, #8]
	bl	usb_interface_id(PLT)
	subs	r9, r0, #0
	blt	.L10379
	uxtb	r3, r9
	add	r10, r5, #1536
	strb	r4, [r7, #249]
	mov	r1, r10
	strb	r3, [r5, #1514]
	strb	r3, [r5, #1526]
	strb	r3, [r8, #9]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10380
	add	r9, r5, #1536
	str	r0, [r7, #176]
	add	r9, r9, #12
	str	r10, [r0, #28]
	str	r6, [r0]
	mov	r1, r9
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	subs	r8, r0, #0
	beq	.L10381
	str	r8, [r7, #172]
	mov	r0, r7
	ldr	r1, .L10382+16
	str	r6, [r8]
	ldrb	r7, [r5, #1538]	@ zero_extendqisi2
	mov	r3, r4
	ldrb	r6, [r5, #1550]	@ zero_extendqisi2
	str	r9, [r8, #28]
	ldr	r5, .L10382+20
.LPIC2351:
	add	r1, pc, r1
	and	lr, r7, #127
	mov	r2, r1
	and	ip, r6, #127
.LPIC2347:
	add	r5, pc, r5
	strb	lr, [r5, #1652]
	strb	ip, [r5, #1684]
	bl	usb_assign_descriptors(PLT)
	cmp	r0, #0
	strne	r4, [r8]
.L10374:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10377:
	ldr	r1, .L10382+24
	ldr	r0, .L10382+28
.LPIC2325:
	add	r1, pc, r1
.LPIC2324:
	add	r0, pc, r0
.L10376:
	add	r1, r1, #3840
	add	r1, r1, #4
	mov	r2, r1
	bl	printk(PLT)
	mov	r0, r4
	b	.L10374
.L10381:
	ldr	r1, .L10382+32
	ldr	r0, .L10382+36
.LPIC2344:
	add	r1, pc, r1
	add	r1, r1, #3840
.LPIC2343:
	add	r0, pc, r0
	add	r1, r1, #4
	mov	r2, r1
	bl	printk(PLT)
	mvn	r0, #11
	b	.L10374
.L10380:
	ldr	r1, .L10382+40
	ldr	r0, .L10382+44
.LPIC2339:
	add	r1, pc, r1
	add	r1, r1, #3840
.LPIC2338:
	add	r0, pc, r0
	add	r1, r1, #4
	mov	r2, r1
	bl	printk(PLT)
	mvn	r0, #18
	b	.L10374
.L10379:
	ldr	r1, .L10382+48
	ldr	r0, .L10382+52
.LPIC2333:
	add	r1, pc, r1
	add	r1, r1, #3840
.LPIC2332:
	add	r0, pc, r0
	add	r1, r1, #4
	mov	r2, r1
	bl	printk(PLT)
	mov	r0, r9
	b	.L10374
.L10378:
	ldr	r1, .L10382+56
	ldr	r0, .L10382+60
.LPIC2328:
	add	r1, pc, r1
.LPIC2327:
	add	r0, pc, r0
	b	.L10376
.L10383:
	.align	2
.L10382:
	.word	speaker_input_terminal_desc(GOT_PREL)+(.-(.LPIC2355+8))
	.word	.LANCHOR2-(.LPIC2319+8)
	.word	uac1_ac_interface_desc(GOT_PREL)+(.-(.LPIC2354+8))
	.word	uac1_ac_header_desc(GOT_PREL)+(.-(.LPIC2353+8))
	.word	.LANCHOR7-(.LPIC2351+8)
	.word	.LANCHOR0-(.LPIC2347+8)
	.word	.LANCHOR3-(.LPIC2325+8)
	.word	.LC567-(.LPIC2324+8)
	.word	.LANCHOR3-(.LPIC2344+8)
	.word	.LC570-(.LPIC2343+8)
	.word	.LANCHOR3-(.LPIC2339+8)
	.word	.LC569-(.LPIC2338+8)
	.word	.LANCHOR3-(.LPIC2333+8)
	.word	.LC568-(.LPIC2332+8)
	.word	.LANCHOR3-(.LPIC2328+8)
	.word	.LC568-(.LPIC2327+8)
	.fnend
	.size	f_audio_bind, .-f_audio_bind
	.align	2
	.type	ncm_bind, %function
ncm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	mov	r8, r0
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L10385
	ldr	r5, .L10419
	uxtb	r4, r4
	mov	r0, r8
	mov	r1, r6
	strb	r4, [r6, #148]
.LPIC2356:
	add	r5, pc, r5
	strb	r4, [r5, #1562]
	strb	r4, [r5, #1570]
	strb	r4, [r5, #1583]
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L10385
	uxtb	r4, r4
	add	r1, r5, #1600
	add	r1, r1, #12
	strb	r4, [r6, #149]
	strb	r4, [r5, #1590]
	strb	r4, [r5, #1602]
	strb	r4, [r5, #1584]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10387
	add	r1, r5, #1616
	str	r0, [r6, #88]
	add	r1, r1, #8
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10387
	add	r1, r5, #1632
	str	r0, [r6, #92]
	add	r1, r1, #4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L10387
	str	r3, [r6, #164]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r4, r0
	str	r0, [r6, #168]
	beq	.L10390
	ldr	r3, .L10419+4
.LPIC2378:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L10389
	mov	r1, #208
	mov	r2, #16
	bl	kmem_cache_alloc_trace(PLT)
.L10389:
	str	r0, [r4]
	ldr	r3, [r6, #168]
	ldr	r2, [r3]
	cmp	r2, #0
	beq	.L10390
	ldr	ip, .L10419+8
	str	r6, [r3, #32]
	mov	r0, r6
	ldr	r2, .L10419+12
	mov	r3, #0
	ldr	lr, .L10419+16
	ldr	r7, [r6, #168]
.LPIC2367:
	add	ip, pc, ip
	ldrb	r8, [ip, #1614]	@ zero_extendqisi2
.LPIC2373:
	add	r2, pc, r2
	ldrb	r5, [ip, #1626]	@ zero_extendqisi2
.LPIC2366:
	add	lr, pc, lr
	add	r1, r2, #1696
	ldrb	r4, [ip, #1638]	@ zero_extendqisi2
	add	r2, r2, #1744
	add	r1, r1, #4
	add	r2, r2, #4
	str	lr, [r7, #28]
	strb	r8, [ip, #1650]
	strb	r5, [ip, #1662]
	strb	r4, [ip, #1674]
	bl	usb_assign_descriptors(PLT)
	ldr	r2, .L10419+20
	mov	r0, #0
	ldr	r3, .L10419+24
.LPIC2375:
	add	r2, pc, r2
.LPIC2376:
	add	r3, pc, r3
	strd	r2, [r6, #136]
	b	.L10391
.L10387:
	mvn	r4, #18
.L10385:
	mov	r0, r6
	bl	usb_free_all_descriptors(PLT)
	ldr	r3, [r6, #168]
	cmp	r3, #0
	beq	.L10392
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r6, #164]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L10392:
	ldr	r3, [r6, #164]
	ldr	r1, .L10419+28
	cmp	r3, #0
	movne	r2, #0
.LPIC2377:
	add	r1, pc, r1
	strne	r2, [r3]
	ldr	r3, [r6, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r6, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r4
	ldr	r2, [r6]
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r0, r4
.L10391:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10390:
	mvn	r4, #11
	b	.L10385
.L10420:
	.align	2
.L10419:
	.word	.LANCHOR2-(.LPIC2356+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2378+8))
	.word	.LANCHOR2-(.LPIC2367+8)
	.word	.LANCHOR0-(.LPIC2373+8)
	.word	ncm_notify_complete-(.LPIC2366+8)
	.word	ncm_open-(.LPIC2375+8)
	.word	ncm_close-(.LPIC2376+8)
	.word	.LC566-(.LPIC2377+8)
	.fnend
	.size	ncm_bind, .-ncm_bind
	.align	2
	.type	acc_function_bind, %function
acc_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L10472
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	ldr	r2, .L10472+4
	strd	r6, [sp, #8]
	mov	r1, #0
	strd	r8, [sp, #16]
	mov	r7, r0
	strd	r10, [sp, #24]
.LPIC2379:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.LPIC2380:
	add	r2, pc, r2
	add	r0, r3, #660
	bl	__hid_register_driver(PLT)
	cmp	r0, #0
	beq	.L10469
.L10464:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10469:
	str	r0, [r4, #1644]
	mov	r1, r4
	mov	r0, r7
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L10464
	ldr	r5, .L10472+8
	ldr	r6, [r4, #84]
.LPIC2381:
	add	r5, pc, r5
	add	r1, r5, #1696
	strb	r0, [r5, #1686]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10423
	add	r5, r5, #1696
	str	r4, [r0]
	add	r5, r5, #12
	str	r0, [r4, #92]
	ldr	r0, [r6]
	mov	r1, r5
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10423
	str	r4, [r0]
	mov	r1, r5
	str	r0, [r4, #96]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10423
	ldr	fp, .L10472+12
	add	r10, r4, #1648
	add	r9, r4, #88
	add	r10, r10, #8
	mov	r5, #4
	str	r4, [r0]
	str	r0, [r4, #96]
.LPIC2393:
	add	fp, pc, fp
.L10433:
	ldr	r8, [r4, #92]
	mov	r1, #208
	ldr	r3, [r8, #8]
	mov	r0, r8
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	mov	r1, #208
	mov	r2, #2
	mov	r0, #16384
	beq	.L10426
	bl	kmalloc_order_trace(PLT)
	mov	r3, r0
	mov	r0, r9
	cmp	r3, #0
	str	r3, [r6]
	beq	.L10470
	str	fp, [r6, #28]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	ldr	r1, [r4, #1660]
	add	r0, r6, #36
	mov	r2, r10
	bl	__list_add(PLT)
	mov	r0, r9
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	subs	r5, r5, #1
	bne	.L10433
	ldr	r8, .L10472+16
.LPIC2395:
	add	r8, pc, r8
.L10434:
	ldr	fp, [r4, #96]
	mov	r1, #208
	ldr	r3, [fp, #8]
	mov	r0, fp
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	mov	r1, #208
	mov	r2, #2
	mov	r0, #16384
	beq	.L10426
	bl	kmalloc_order_trace(PLT)
	cmp	r0, #0
	add	r3, r5, #420
	str	r0, [r6]
	add	r3, r3, #2
	beq	.L10471
	cmp	r5, #1
	str	r8, [r6, #28]
	str	r6, [r4, r3, asl #2]
	beq	.L10465
	mov	r5, #1
	b	.L10434
.L10465:
	ldr	r2, [r7, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L10467
	ldr	r3, .L10472+20
.LPIC2385:
	add	r3, pc, r3
	ldrb	r0, [r3, #1698]	@ zero_extendqisi2
	ldrb	r1, [r3, #1710]	@ zero_extendqisi2
	strb	r0, [r3, #1722]
	strb	r1, [r3, #1734]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L10467
	strb	r0, [r3, #1746]
	mov	r0, #0
	strb	r1, [r3, #1758]
	b	.L10464
.L10467:
	mov	r0, #0
	b	.L10464
.L10470:
	ldr	r3, [r8, #8]
	mov	r1, r6
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
.L10426:
	ldr	r0, .L10472+24
.LPIC2394:
	add	r0, pc, r0
	bl	printk(PLT)
.L10435:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #1656]
	mov	r6, r0
	cmp	r5, r10
	mov	r0, r5
	sub	r7, r5, #36
	beq	.L10428
	bl	list_del(PLT)
	mov	r0, r9
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r7, #0
	beq	.L10437
	ldr	r6, [r4, #92]
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	mov	r1, r7
	ldr	r3, [r6, #8]
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10435
.L10423:
	mvn	r0, #18
	b	.L10464
.L10471:
	ldr	r3, [fp, #8]
	mov	r1, r6
	mov	r0, fp
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10426
.L10428:
	mov	r0, r9
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
.L10437:
	mov	r5, #0
.L10431:
	add	r3, r5, #420
	ldr	r7, [r4, #96]
	add	r3, r3, #2
	ldr	r6, [r4, r3, asl #2]
	cmp	r6, #0
	beq	.L10430
	ldr	r0, [r6]
	bl	kfree(PLT)
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L10430:
	cmp	r5, #1
	mov	r5, #1
	bne	.L10431
	mvn	r0, #0
	b	.L10464
.L10473:
	.align	2
.L10472:
	.word	.LANCHOR0-(.LPIC2379+8)
	.word	.LC571-(.LPIC2380+8)
	.word	.LANCHOR2-(.LPIC2381+8)
	.word	acc_complete_in-(.LPIC2393+8)
	.word	acc_complete_out-(.LPIC2395+8)
	.word	.LANCHOR2-(.LPIC2385+8)
	.word	.LC572-(.LPIC2394+8)
	.fnend
	.size	acc_function_bind, .-acc_function_bind
	.align	2
	.type	fsg_bind, %function
fsg_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #24]
	ldr	r6, [r3]
	str	r6, [r1, #84]
	bl	usb_interface_id(PLT)
	subs	r3, r0, #0
	movlt	r0, r3
	blt	.L10475
	ldr	r4, .L10483
	strh	r3, [r5, #92]	@ movhi
	mov	r0, r6
.LPIC2396:
	add	r4, pc, r4
	add	r1, r4, #1776
	add	r1, r1, #4
	strb	r3, [r4, #1770]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L10477
	ldr	r2, [r5, #88]
	mov	r0, r6
	add	r1, r4, #1792
	str	r2, [r3]
	str	r3, [r5, #100]
	bl	usb_ep_autoconfig(PLT)
	subs	ip, r0, #0
	beq	.L10477
	ldr	r2, [r5, #88]
	mov	lr, #15
	mov	r0, r5
	ldr	r3, .L10483+4
	str	r2, [ip]
	ldrb	r7, [r4, #1782]	@ zero_extendqisi2
	ldrb	r6, [r4, #1794]	@ zero_extendqisi2
.LPIC2408:
	add	r3, pc, r3
	str	ip, [r5, #104]
	add	r1, r3, #1792
	add	r2, r3, #1808
	strb	lr, [r4, #1842]
	add	r3, r3, #1824
	add	r1, r1, #4
	strb	lr, [r4, #1862]
	add	r2, r2, #4
	add	r3, r3, #4
	strb	r7, [r4, #1806]
	strb	r7, [r4, #1830]
	strb	r6, [r4, #1818]
	strb	r6, [r4, #1850]
	bl	usb_assign_descriptors(PLT)
	cmp	r0, #0
	bne	.L10477
.L10475:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10477:
	ldr	r0, [r5, #84]
	ldr	r1, .L10483+8
	add	r0, r0, #32
.LPIC2398:
	add	r1, pc, r1
	bl	dev_err(PLT)
	movw	r0, #65012
	movt	r0, 65535
	b	.L10475
.L10484:
	.align	2
.L10483:
	.word	.LANCHOR2-(.LPIC2396+8)
	.word	.LANCHOR0-(.LPIC2408+8)
	.word	.LC573-(.LPIC2398+8)
	.fnend
	.size	fsg_bind, .-fsg_bind
	.align	2
	.type	mtp_function_bind, %function
mtp_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L10561
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
.LPIC2415:
	add	r3, pc, r3
	.pad #20
	sub	sp, sp, #20
	mov	r7, r3
	str	r3, [sp, #8]
	ldr	r3, [r0, #24]
	str	r0, [sp, #12]
	str	r3, [r1, #84]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L10550
	ldr	r5, .L10561+4
	ldr	r6, [r4, #84]
.LPIC2411:
	add	r5, pc, r5
	add	r1, r5, #1872
	strb	r0, [r5, #1870]
	add	r1, r1, #8
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10487
	add	r1, r5, #1888
	str	r4, [r0]
	add	r1, r1, #4
	str	r0, [r4, #92]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10487
	str	r4, [r0]
	add	r1, r5, #632
	str	r0, [r4, #96]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10487
.L10488:
	str	r4, [r0]
	ldr	r2, .L10561+8
	mov	r1, #4
	str	r0, [r4, #100]
	ldr	r0, .L10561+12
	ldr	r3, .L10561+16
.LPIC2425:
	add	r0, pc, r0
	str	r0, [sp]
	ldr	r6, [r7, r2]
	ldr	r5, [r7, r3]
	ldr	r10, [r6]
	cmp	r10, #16384
	strhi	r1, [r5]
	bhi	.L10490
.L10489:
	ldr	r3, [r5]
	cmp	r3, #0
	beq	.L10491
.L10490:
	mov	r8, #0
	add	r9, r4, #88
	b	.L10511
.L10557:
	ldr	r10, [r6]
.L10511:
	ldr	r7, [r4, #92]
	mov	r1, #208
	add	r8, r8, #1
	ldr	ip, [r7, #8]
	mov	r0, r7
	ldr	ip, [ip, #8]
	blx	ip
	subs	fp, r0, #0
	mov	r1, #208
	mov	r0, r10
	beq	.L10492
	bl	__kmalloc(PLT)
	mov	r2, r0
	mov	r0, r9
	cmp	r2, #0
	str	r2, [fp]
	beq	.L10556
	ldr	r3, [sp]
	str	r3, [fp, #28]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	ldr	r1, [r4, #120]
	add	r0, fp, #36
	add	r2, r4, #116
	bl	__list_add(PLT)
	mov	r0, r9
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5]
	cmp	r8, r3
	bcc	.L10557
.L10491:
	ldr	r3, .L10561+20
	ldr	r2, [sp, #8]
	ldr	r8, [r2, r3]
	ldr	fp, [r8]
	ubfx	r3, fp, #0, #10
	cmp	r3, #0
	bne	.L10558
.L10496:
	ldr	r9, .L10561+24
	ldr	r7, [r4, #96]
.LPIC2426:
	add	r9, pc, r9
.L10503:
	mov	r6, #0
.L10515:
	ldr	r3, [r7, #8]
	mov	r1, #208
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r5, r0, #0
	mov	r1, #208
	mov	r0, fp
	beq	.L10497
	bl	__kmalloc(PLT)
	cmp	r0, #0
	add	r3, r6, #42
	str	r0, [r5]
	beq	.L10559
	cmp	r6, #1
	str	r9, [r5, #28]
	mov	r6, #1
	str	r5, [r4, r3, asl #2]
	beq	.L10522
	ldr	fp, [r8]
	ldr	r7, [r4, #96]
	b	.L10515
.L10522:
	ldr	r7, .L10561+28
	mov	r6, #5
	mov	r8, #16
.LPIC2427:
	add	r7, pc, r7
.L10514:
	ldr	r5, [r4, #100]
	mov	r1, #208
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #8]
	blx	r3
	subs	r9, r0, #0
	ldr	r3, .L10561+32
	mov	r1, #208
	mov	r2, #28
	beq	.L10507
	ldr	r0, [sp, #8]
	ldr	r3, [r0, r3]
	ldr	r3, [r3, #24]
	subs	r0, r3, #0
	beq	.L10505
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r9]
	beq	.L10560
.L10506:
	add	r5, r4, #88
	str	r7, [r9, #28]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	fp, r0
	ldr	r1, [r4, #128]
	add	r0, r9, #36
	add	r2, r4, #124
	bl	__list_add(PLT)
	mov	r0, r5
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	subs	r6, r6, #1
	bne	.L10514
	ldr	r3, [sp, #12]
	ldr	r2, [r3, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L10554
	ldr	r3, .L10561+36
.LPIC2417:
	add	r3, pc, r3
	ldrb	r0, [r3, #1882]	@ zero_extendqisi2
	ldrb	r1, [r3, #1894]	@ zero_extendqisi2
	strb	r0, [r3, #1906]
	strb	r1, [r3, #1918]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L10554
	strb	r0, [r3, #1930]
	mov	r0, r6
	strb	r1, [r3, #1942]
.L10550:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10505:
	str	r8, [r9]
	b	.L10506
.L10558:
	mov	r3, #16384
	mov	fp, r3
	str	r3, [r8]
	b	.L10496
.L10554:
	mov	r0, r6
	b	.L10550
.L10556:
	ldr	r2, [r7, #8]
	mov	r1, fp
	mov	r0, r7
	ldr	r3, [r2, #12]
	blx	r3
.L10492:
	ldr	r3, [r6]
	cmp	r3, #16384
	bls	.L10507
	add	r3, r4, #116
	add	r8, r4, #88
	str	r3, [sp, #4]
.L10510:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [sp, #4]
	mov	fp, r0
	ldr	r10, [r4, #116]
	cmp	r10, r3
	mov	r0, r10
	sub	r9, r10, #36
	beq	.L10494
	bl	list_del(PLT)
	mov	r0, r8
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r9, #0
	beq	.L10512
	ldr	r7, [r4, #92]
	ldr	r0, [r10, #-36]
	bl	kfree(PLT)
	mov	r1, r9
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L10510
.L10494:
	mov	r0, r8
	mov	r1, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
.L10512:
	mov	r3, #16384
	mov	r1, #8
	mov	r10, r3
	str	r3, [r6]
	str	r1, [r5]
	b	.L10489
.L10559:
	ldr	r3, [r7, #8]
	mov	r1, r5
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L10497:
	ldr	r3, [r8]
	cmp	r3, #16384
	bls	.L10507
	cmp	r6, #0
	bne	.L10499
	ldr	r7, [r4, #96]
.L10500:
	mov	r3, #16384
	mov	fp, r3
	str	r3, [r8]
	b	.L10503
.L10499:
	add	r5, r6, #43
	ldr	r7, [r4, #96]
	add	r5, r4, r5, asl #2
.L10502:
	ldr	fp, [r5, #-4]!
	cmp	fp, #0
	beq	.L10501
	ldr	r0, [fp]
	bl	kfree(PLT)
	ldr	r3, [r7, #8]
	mov	r0, r7
	mov	r1, fp
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r7, [r4, #96]
.L10501:
	subs	r6, r6, #1
	bne	.L10502
	b	.L10500
.L10487:
	mvn	r0, #18
	b	.L10550
.L10560:
	ldr	r3, [r5, #8]
	mov	r1, r9
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L10507:
	ldr	r0, .L10561+40
.LPIC2416:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #0
	b	.L10550
.L10562:
	.align	2
.L10561:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC2415+8)
	.word	.LANCHOR2-(.LPIC2411+8)
	.word	mtp_tx_req_len(GOT)
	.word	mtp_complete_in-(.LPIC2425+8)
	.word	mtp_tx_reqs(GOT)
	.word	mtp_rx_req_len(GOT)
	.word	mtp_complete_out-(.LPIC2426+8)
	.word	mtp_complete_intr-(.LPIC2427+8)
	.word	kmalloc_caches(GOT)
	.word	.LANCHOR2-(.LPIC2417+8)
	.word	.LC574-(.LPIC2416+8)
	.fnend
	.size	mtp_function_bind, .-mtp_function_bind
	.align	2
	.type	ccid_function_bind, %function
ccid_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #24]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	str	r0, [r6, #88]
	blt	.L10579
	ldr	r5, .L10583
.LPIC2430:
	add	r5, pc, r5
	add	r1, r5, #1952
	strb	r0, [r5, #1954]
	add	r1, r1, #12
	ldr	r0, [r4]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10580
	add	r1, r5, #1968
	str	r0, [r6, #100]
	add	r1, r1, #8
	str	r4, [r0]
	ldr	r0, [r4]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10581
	add	r1, r5, #1984
	str	r0, [r6, #104]
	add	r1, r1, #4
	str	r4, [r0]
	ldr	r0, [r4]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10582
	ldr	r7, .L10583+4
	str	r0, [r6, #108]
	str	r4, [r0]
.LPIC2440:
	add	r7, pc, r7
	add	r0, r7, #1000
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r6, #16]
	beq	.L10570
	ldr	r3, [r4]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L10572
.L10574:
	mov	r0, #0
.L10565:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10572:
	ldrb	r1, [r5, #1978]	@ zero_extendqisi2
	add	r0, r7, #1024
	ldrb	r2, [r5, #1990]	@ zero_extendqisi2
	ldrb	r3, [r5, #1966]	@ zero_extendqisi2
	strb	r1, [r5, #2002]
	strb	r2, [r5, #2014]
	strb	r3, [r5, #2026]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r6, #8]
	bne	.L10574
.L10570:
	ldr	r2, [r6, #108]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r6, #108]
.L10568:
	ldr	r2, [r6, #104]
	mov	r3, #0
	mvn	r0, #18
	str	r3, [r2]
	str	r3, [r6, #104]
	b	.L10565
.L10582:
	ldr	r1, .L10583+8
	ldr	r0, .L10583+12
.LPIC2439:
	add	r1, pc, r1
	add	r1, r1, #3856
.LPIC2438:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L10570
.L10581:
	ldr	r1, .L10583+16
	ldr	r0, .L10583+20
.LPIC2436:
	add	r1, pc, r1
	add	r1, r1, #3856
.LPIC2435:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	b	.L10568
.L10580:
	ldr	r1, .L10583+24
	ldr	r0, .L10583+28
.LPIC2433:
	add	r1, pc, r1
	add	r1, r1, #3856
.LPIC2432:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L10565
.L10579:
	ldr	r1, .L10583+32
	mov	r2, r0
	ldr	r0, .L10583+36
.LPIC2429:
	add	r1, pc, r1
	add	r1, r1, #3856
.LPIC2428:
	add	r0, pc, r0
	add	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, [r6, #88]
	b	.L10565
.L10584:
	.align	2
.L10583:
	.word	.LANCHOR2-(.LPIC2430+8)
	.word	.LANCHOR0-(.LPIC2440+8)
	.word	.LANCHOR3-(.LPIC2439+8)
	.word	.LC558-(.LPIC2438+8)
	.word	.LANCHOR3-(.LPIC2436+8)
	.word	.LC556-(.LPIC2435+8)
	.word	.LANCHOR3-(.LPIC2433+8)
	.word	.LC576-(.LPIC2432+8)
	.word	.LANCHOR3-(.LPIC2429+8)
	.word	.LC575-(.LPIC2428+8)
	.fnend
	.size	ccid_function_bind, .-ccid_function_bind
	.align	2
	.type	qdss_bind, %function
qdss_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	str	r8, [sp, #16]
	mov	r8, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	ldr	r3, [r0, #24]
	ldr	r7, [r3]
	ldr	r3, [r7, #20]
	cmp	r3, #2
	bhi	.L10586
	ldr	r0, .L10628
	movw	r4, #65012
	movt	r4, 65535
.LPIC2448:
	add	r0, pc, r0
	bl	printk(PLT)
.L10587:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10586:
	mov	r5, r1
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L10625
	ldr	r6, .L10628+4
	uxtb	r4, r4
	mov	r0, r8
	mov	r1, r5
	strb	r4, [r5, #89]
.LPIC2450:
	add	r6, pc, r6
	strb	r4, [r6, #2038]
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L10626
	uxtb	r4, r4
	add	r1, r6, #2048
	add	r1, r1, #12
	add	r2, r1, #12
	mov	r0, r7
	strb	r4, [r5, #88]
	strb	r4, [r6, #2050]
	bl	usb_ep_autoconfig_ss(PLT)
	subs	r3, r0, #0
	beq	.L10592
	add	r1, r6, #2080
	str	r3, [r5, #108]
	mov	r0, r7
	str	r5, [r3]
	add	r2, r1, #12
	bl	usb_ep_autoconfig_ss(PLT)
	subs	r3, r0, #0
	beq	.L10592
	add	r1, r6, #2096
	str	r3, [r5, #104]
	mov	r0, r7
	str	r5, [r3]
	add	r1, r1, #4
	add	r2, r6, #2112
	bl	usb_ep_autoconfig_ss(PLT)
	cmp	r0, #0
	beq	.L10592
	ldr	r4, .L10628+8
	str	r0, [r5, #100]
	str	r5, [r0]
	ldrb	r1, [r6, #2062]	@ zero_extendqisi2
	ldrb	r2, [r6, #2082]	@ zero_extendqisi2
	ldrb	r3, [r6, #2102]	@ zero_extendqisi2
.LPIC2466:
	add	r4, pc, r4
	add	r0, r4, #1840
	strb	r1, [r6, #2122]
	add	r0, r0, #12
	strb	r2, [r6, #2134]
	strb	r3, [r6, #2146]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r5, #8]
	beq	.L10595
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bhi	.L10627
.L10594:
	ldr	r0, .L10628+12
	ldr	r1, [r7, #28]
.LPIC2469:
	add	r0, pc, r0
	bl	strcmp(PLT)
	subs	r4, r0, #0
	movne	r4, #0
	bne	.L10587
	ldr	r0, [r5, #108]
	mov	r1, #1
	bl	dwc3_tx_fifo_resize_request(PLT)
	b	.L10587
.L10627:
	add	r0, r4, #1872
	add	r0, r0, #4
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r5, #12]
	bne	.L10594
.L10595:
	ldr	r0, .L10628+16
.LPIC2467:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10591
.L10592:
	ldr	r0, .L10628+20
.LPIC2455:
	add	r0, pc, r0
	bl	printk(PLT)
.L10591:
	ldr	r3, [r5, #104]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #100]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r5, #108]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r7, #20]
	cmp	r3, #4
	bls	.L10599
	ldr	r0, [r5, #12]
	cmp	r0, #0
	beq	.L10599
	bl	kfree(PLT)
	ldr	r3, [r7, #20]
.L10599:
	cmp	r3, #2
	movwls	r4, #65012
	movtls	r4, 65535
	bls	.L10587
	ldr	r0, [r5, #8]
	movw	r4, #65012
	cmp	r0, #0
	movteq	r4, 65535
	beq	.L10587
	bl	kfree(PLT)
	movt	r4, 65535
	b	.L10587
.L10625:
	ldr	r0, .L10628+24
.LPIC2449:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10587
.L10626:
	ldr	r0, .L10628+28
.LPIC2451:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10587
.L10629:
	.align	2
.L10628:
	.word	.LC577-(.LPIC2448+8)
	.word	.LANCHOR2-(.LPIC2450+8)
	.word	.LANCHOR0-(.LPIC2466+8)
	.word	.LC367-(.LPIC2469+8)
	.word	.LC580-(.LPIC2467+8)
	.word	.LC579-(.LPIC2455+8)
	.word	.LC578-(.LPIC2449+8)
	.word	.LC578-(.LPIC2451+8)
	.fnend
	.size	qdss_bind, .-qdss_bind
	.align	2
	.type	rmnet_mux_bind, %function
rmnet_mux_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #24]
	str	r5, [r1, #84]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L10631
	ldr	r6, .L10654
	uxtb	r0, r0
	strb	r0, [r4, #360]
.LPIC2470:
	add	r6, pc, r6
	add	r1, r6, #2160
	strb	r0, [r6, #2158]
	add	r1, r1, #8
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10632
	add	r1, r6, #2176
	str	r5, [r0]
	add	r1, r1, #4
	str	r0, [r4, #92]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10632
	str	r5, [r0]
	add	r1, r6, #2192
	str	r0, [r4, #88]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L10632
	str	r5, [r0]
	str	r0, [r4, #96]
	ldr	r3, [r7, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L10633
	ldrb	r1, [r6, #2170]	@ zero_extendqisi2
	ldrb	r2, [r6, #2182]	@ zero_extendqisi2
	ldrb	r3, [r6, #2194]	@ zero_extendqisi2
	strb	r1, [r6, #2206]
	strb	r2, [r6, #2218]
	strb	r3, [r6, #2230]
.L10633:
	mov	r0, #4
	ldr	r1, [r4, #380]
	add	r2, r4, #256
	mov	r3, #0
	bl	queue_delayed_work_on(PLT)
	mov	r0, #0
.L10631:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10632:
	ldr	r3, [r4, #96]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	mvnne	r0, #18
	mvneq	r0, #18
	strne	r2, [r3]
	b	.L10631
.L10655:
	.align	2
.L10654:
	.word	.LANCHOR2-(.LPIC2470+8)
	.fnend
	.size	rmnet_mux_bind, .-rmnet_mux_bind
	.align	2
	.type	ffs_func_bind, %function
ffs_func_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	sub	r3, r1, #36
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	ldr	r5, [r1, #-28]
	str	r3, [sp, #8]
	ldr	r3, [r1, #-32]
	ldr	r6, [r5, #164]
	ldr	r7, [r3, #20]
	adds	r4, r6, #0
	movne	r4, #1
	cmp	r7, #2
	movls	r8, #0
	movls	r10, r8
	bls	.L10658
	ldr	r8, [r5, #168]
	adds	r8, r8, #0
	movne	r8, #1
	cmp	r7, #4
	movls	r10, #0
	bls	.L10658
	ldr	r10, [r5, #172]
	adds	r10, r10, #0
	movne	r10, #1
.L10658:
	ldrh	ip, [r5, #180]
	cmp	r4, #0
	ldr	r9, [r5, #148]
	mov	r3, ip, asl #5
	sub	r3, r3, ip, asl #2
	rsb	ip, ip, ip, asl #3
	str	r3, [sp, #12]
	addne	r3, r6, #1
	moveq	r3, r4
	add	r3, r3, ip
	cmp	r8, #0
	str	r3, [sp, #16]
	ldrne	r3, [r5, #168]
	moveq	r3, r8
	ldr	r2, [sp, #16]
	addne	r3, r3, #1
	cmp	r10, #0
	add	r3, r3, r2
	ldrne	r6, [r5, #172]
	moveq	r6, r10
	str	r3, [sp, #20]
	orr	r3, r8, r4
	ldr	r2, [sp, #20]
	addne	r6, r6, #1
	orrs	r3, r3, r10
	add	r6, r6, r2
	ldrh	r2, [r5, #178]
	mov	r3, r6, asl #2
	str	r2, [sp, #32]
	str	r3, [sp, #28]
	beq	.L10705
	add	r6, r2, r6, asl #1
	add	r0, r9, #3
	mov	r7, r1
	mov	r6, r6, asl #1
	mov	r1, #208
	add	r0, r0, r6
	bic	r0, r0, #3
	bl	__kmalloc(PLT)
	subs	fp, r0, #0
	mvneq	r0, #11
	beq	.L10720
	ldr	r3, [sp, #12]
	cmp	r3, #0
	bne	.L10741
.L10663:
	mov	r3, r6, lsr #1
	ldr	r1, [r5, #144]
	ldr	r2, [r5, #152]
	str	r3, [sp, #36]
	mov	r3, r3, asl #1
	add	r1, r1, #16
	add	r6, fp, r3
	mov	r0, r6
	str	r3, [sp, #24]
	bl	memcpy(PLT)
	ldr	r3, [r7, #-28]
	ldr	r3, [r3, #172]
	cmp	r3, #0
	bne	.L10742
.L10664:
	ldr	r3, [sp, #32]
	movs	r2, r3, asl #1
	ldr	r3, [sp, #28]
	add	r3, fp, r3
	bne	.L10743
.L10665:
	ldrh	r1, [r5, #180]
	cmp	r1, #0
	beq	.L10670
	mov	r2, r1, asl #5
	mvn	r0, #0
	sub	r2, r2, r1, asl #2
	add	r2, fp, r2
.L10669:
	subs	r1, r1, #1
	strb	r0, [r2, #20]
	sub	r2, r2, #28
	bne	.L10669
.L10670:
	cmp	r4, #0
	str	fp, [r7, #-24]
	str	r3, [r7, #-4]
	beq	.L10668
	ldr	r3, [sp, #12]
	mov	r1, r6
	mov	r2, r9
	ldr	ip, [sp, #8]
	add	r0, fp, r3
	ldr	r3, .L10747
	str	r0, [r7, #16]
	ldr	r0, [r5, #164]
	str	ip, [sp]
.LPIC2480:
	add	r3, pc, r3
	bl	ffs_do_descs.constprop.152(PLT)
	subs	r4, r0, #0
	blt	.L10707
.L10668:
	cmp	r8, #0
	beq	.L10708
	ldr	r3, [sp, #16]
	rsb	r2, r4, r9
	ldr	ip, [sp, #8]
	add	r0, fp, r3, asl #2
	ldr	r3, [sp, #24]
	str	r0, [r7, #8]
	ldr	r0, [r5, #168]
	add	r1, r3, r4
	ldr	r3, .L10747+4
	str	ip, [sp]
	add	r1, fp, r1
.LPIC2481:
	add	r3, pc, r3
	bl	ffs_do_descs.constprop.152(PLT)
	subs	r2, r0, #0
	blt	.L10744
.L10671:
	cmp	r10, #0
	beq	.L10672
	ldr	r3, [sp, #20]
	add	r10, r2, r4
	rsb	r4, r4, r9
	ldr	r1, [sp, #24]
	rsb	r2, r2, r4
	ldr	ip, [sp, #8]
	add	r0, fp, r3, asl #2
	ldr	r3, .L10747+8
	add	r1, r1, r10
	add	r1, fp, r1
	str	r0, [r7, #12]
	ldr	r0, [r5, #172]
.LPIC2482:
	add	r3, pc, r3
	str	ip, [sp]
	bl	ffs_do_descs.constprop.152(PLT)
	cmp	r0, #0
	blt	.L10720
	cmp	r8, #0
	ldr	r4, [r5, #164]
	bne	.L10697
.L10698:
	ldr	r10, [r5, #172]
.L10700:
	adds	r10, r4, r10
	beq	.L10674
	cmp	r9, #1
	bls	.L10711
	ldr	r3, [sp, #36]
	ldrb	fp, [fp, r3, asl #1]	@ zero_extendqisi2
	cmp	r9, fp
	bcc	.L10711
	mov	r4, r9
	mov	r8, #0
.L10677:
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	sub	r3, r3, #4
	cmp	r3, #44
	addls	pc, pc, r3, asl #2
	b	.L10711
.L10680:
	b	.L10679
	b	.L10681
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10682
	b	.L10711
	b	.L10683
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10684
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10711
	b	.L10685
	.p2align 1
.L10745:
	subs	r0, r9, r4
	bmi	.L10720
.L10674:
	add	r4, r5, #116
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #96]
	mov	r6, r0
	add	lr, r5, #100
	ldrh	ip, [r5, #104]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r5, #96]
	cmp	ip, #0
	beq	.L10713
	add	ip, lr, ip
	mov	r3, lr
	mov	r1, lr
.L10695:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	sub	r0, r2, #5
	cmp	r0, #1
	bhi	.L10696
	strb	r2, [r1]
	add	r1, r1, #1
.L10696:
	cmp	r3, ip
	bne	.L10695
	rsb	r1, lr, r1
	add	r2, r1, #1
	uxth	r3, r1
	uxth	r2, r2
.L10693:
	add	r3, r5, r3
	strh	r2, [r5, #104]	@ movhi
	mov	fp, #0
	mov	r0, r4
	mov	r1, #3
	mov	r2, #1
	strb	fp, [r3, #100]
	bl	__wake_up_locked(PLT)
	mov	r0, r4
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, fp
.L10720:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L10681:
	sub	r3, fp, #7
	tst	r3, #253
	bne	.L10711
	ldrb	r3, [r6, #2]	@ zero_extendqisi2
	tst	r3, #15
	bne	.L10688
.L10711:
	mvn	r0, #21
	b	.L10720
.L10683:
	cmp	fp, #8
	bne	.L10711
	ldrb	r3, [r6, #7]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L10688
	ldr	r2, [r7, #-28]
	sub	r3, r3, #-536870911
	ldr	r2, [r2, #188]
	ldr	r2, [r2]
	ldr	r2, [r2, #4]
	ldrb	r3, [r2, r3, asl #3]	@ zero_extendqisi2
	strb	r3, [r6, #7]
	b	.L10688
.L10682:
	cmp	fp, #5
	bne	.L10711
.L10688:
	adds	r6, r6, fp
	add	r8, r8, #1
	moveq	r3, #1
	movne	r3, #0
	cmp	r10, r8
	orreq	r3, r3, #1
	rsb	r4, fp, r4
	cmp	r3, #0
	bne	.L10745
	cmp	r4, #1
	bls	.L10711
	ldrb	fp, [r6]	@ zero_extendqisi2
	cmp	r4, fp
	bcs	.L10677
	b	.L10711
.L10685:
	cmp	fp, #6
	beq	.L10688
	b	.L10711
.L10679:
	cmp	fp, #9
	bne	.L10711
	ldrb	r3, [r6, #2]	@ zero_extendqisi2
	ldr	r2, [r7, #-4]
	mov	r3, r3, asl #1
	ldrh	r2, [r2, r3]
	tst	r2, #32768
	bne	.L10746
.L10686:
	ldrb	r3, [r6, #8]	@ zero_extendqisi2
	strb	r2, [r6, #2]
	cmp	r3, #0
	beq	.L10688
	ldr	r2, [r7, #-28]
	sub	r3, r3, #-536870911
	ldr	r2, [r2, #188]
	ldr	r2, [r2]
	ldr	r2, [r2, #4]
	ldrb	r3, [r2, r3, asl #3]	@ zero_extendqisi2
	strb	r3, [r6, #8]
	b	.L10688
.L10697:
	ldr	r3, [r5, #168]
	add	r4, r4, r3
	b	.L10698
.L10684:
	cmp	fp, #9
	beq	.L10688
	b	.L10711
.L10743:
	mov	r0, r3
	mov	r1, #255
	bl	memset(PLT)
	mov	r3, r0
	b	.L10665
.L10742:
	ldr	r0, [r5, #152]
	ldr	ip, [sp, #24]
	ldr	r1, [r5, #144]
	ldr	r3, [r5, #156]
	ldr	r2, [r5, #160]
	add	r0, ip, r0
	add	r0, fp, r0
	add	r1, r1, r3
	bl	memcpy(PLT)
	b	.L10664
.L10741:
	mov	r1, r3
	bl	__memzero(PLT)
	b	.L10663
.L10705:
	movw	r0, #65012
	movt	r0, 65535
	b	.L10720
.L10708:
	mov	r2, r8
	b	.L10671
.L10707:
	mov	r0, r4
	b	.L10720
.L10672:
	cmp	r8, #0
	ldr	r4, [r5, #164]
	moveq	r10, r8
	beq	.L10700
	ldr	r3, [r5, #168]
	add	r4, r4, r3
	b	.L10700
.L10744:
	mov	r0, r2
	b	.L10720
.L10713:
	mov	r3, ip
	mov	r2, #1
	b	.L10693
.L10746:
	ldr	r0, [r7, #-36]
	mov	r1, r7
	str	r3, [sp, #8]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L10720
	ldr	r2, [r7, #-4]
	ldr	r3, [sp, #8]
	strh	r0, [r2, r3]	@ movhi
	ldr	r2, [r7, #-4]
	ldrh	r2, [r2, r3]
	b	.L10686
.L10748:
	.align	2
.L10747:
	.word	__ffs_func_bind_do_descs-(.LPIC2480+8)
	.word	__ffs_func_bind_do_descs-(.LPIC2481+8)
	.word	__ffs_func_bind_do_descs-(.LPIC2482+8)
	.fnend
	.size	ffs_func_bind, .-ffs_func_bind
	.align	2
	.global	usb_add_config
	.type	usb_add_config, %function
usb_add_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	r4, [r1, #20]	@ zero_extendqisi2
	cmp	r4, #0
	cmpne	r2, #0
	beq	.L10756
	mov	lr, r0
	ldr	r5, [lr, #36]!
	cmp	lr, r5
	sub	ip, r5, #28
	beq	.L10751
	ldrb	r3, [r5, #-8]	@ zero_extendqisi2
	cmp	r3, r4
	bne	.L10753
	b	.L10758
.L10754:
	ldrb	r3, [r3, #-8]	@ zero_extendqisi2
	cmp	r3, r4
	beq	.L10758
.L10753:
	ldr	r3, [ip, #28]
	cmp	lr, r3
	sub	ip, r3, #28
	bne	.L10754
.L10751:
	mov	r4, r1
	add	r8, r1, #28
	mov	r6, r2
	mov	r5, r0
	str	r0, [r4, #24]
	mov	r2, lr
	ldr	r1, [r0, #40]
	mov	r0, r8
	mov	r7, #0
	bl	__list_add(PLT)
	add	r3, r4, #36
	add	r0, r4, #48
	strb	r7, [r4, #44]
	mov	r1, #64
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	bl	__memzero(PLT)
	mov	r0, r4
	blx	r6
	subs	r6, r0, #0
	blt	.L10760
.L10755:
	ldr	r0, [r5]
	bl	usb_ep_autoconfig_reset(PLT)
.L10750:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10758:
	mvn	r6, #15
	b	.L10750
.L10760:
	mov	r0, r8
	bl	list_del(PLT)
	str	r7, [r4, #24]
	b	.L10755
.L10756:
	mvn	r6, #21
	b	.L10750
	.fnend
	.size	usb_add_config, .-usb_add_config
	.align	2
	.global	usb_remove_config
	.type	usb_remove_config, %function
usb_remove_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L10789
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r3, r1
	strd	r6, [sp, #8]
	add	r7, r0, #60
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r5, r1
	str	lr, [sp, #28]
	str	r10, [sp, #24]
	ldr	r2, [r0, #12]
.LPIC2484:
	add	ip, pc, ip
	ldr	r0, .L10789+4
	add	r1, ip, #3872
	add	r1, r1, #8
.LPIC2483:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #24]
	mov	r8, r0
	cmp	r3, #0
	beq	.L10786
	ldr	r10, [r6, #12]
	cmp	r10, r5
	beq	.L10787
.L10765:
	add	r0, r5, #28
	bl	list_del(PLT)
.L10766:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	add	r6, r5, #36
	b	.L10771
.L10772:
	bl	list_del(PLT)
	ldr	r3, [r4, #-36]
	cmp	r3, #0
	bne	.L10788
.L10771:
	ldr	r4, [r5, #36]
	cmp	r4, r6
	mov	r0, r4
	sub	r7, r4, #72
	bne	.L10772
	ldr	r3, [r5, #12]
	cmp	r3, #0
	beq	.L10779
	mov	r0, r5
	blx	r3
.L10779:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10788:
	mov	r1, r7
	mov	r0, r5
	blx	r3
	b	.L10771
.L10786:
	ldr	r0, .L10789+8
	mov	r1, #896
.LPIC2485:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L10779
.L10787:
	mov	r3, r10
	ldr	r4, [r3, #36]!
	cmp	r4, r3
	sub	r4, r4, #72
	movne	r9, #0
	beq	.L10769
.L10768:
	ldr	r3, [r4, #48]
	mov	r0, r4
	cmp	r3, #0
	beq	.L10767
	blx	r3
.L10767:
	str	r9, [r4, #80]
	ldr	r3, [r6, #12]
	ldr	r4, [r4, #72]
	add	r3, r3, #36
	cmp	r4, r3
	sub	r4, r4, #72
	bne	.L10768
.L10769:
	mov	r3, #0
	str	r3, [r6, #12]
	str	r3, [r6, #56]
	ldr	r3, [r10, #24]
	cmp	r3, #0
	beq	.L10766
	b	.L10765
.L10790:
	.align	2
.L10789:
	.word	.LANCHOR3-(.LPIC2484+8)
	.word	.LC581-(.LPIC2483+8)
	.word	.LC84-(.LPIC2485+8)
	.fnend
	.size	usb_remove_config, .-usb_remove_config
	.align	2
	.type	ffs_function_enable, %function
ffs_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	ldr	r5, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, #0
	beq	.L10801
.L10791:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10801:
	ldr	r1, [r5, #20]
	ldr	r6, [r5, #8]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r5, #20]
	bne	.L10791
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L10794
	blx	r3
	ldr	r0, [r6]
.L10794:
	ldr	r0, [r0, #4]
	ldr	r1, [r6, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [r5, #508]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L10791
.L10795:
	mov	r1, r4
	mov	r0, r6
	bl	usb_remove_config(PLT)
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L10795
	b	.L10791
	.fnend
	.size	ffs_function_enable, .-ffs_function_enable
	.align	2
	.type	adb_android_function_enable, %function
adb_android_function_enable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r1, #1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #4]
	ldr	r5, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, #0
	beq	.L10812
.L10802:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10812:
	ldr	r1, [r5, #20]
	ldr	r6, [r5, #8]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r5, #20]
	bne	.L10802
	ldr	r0, [r6]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L10805
	blx	r3
	ldr	r0, [r6]
.L10805:
	ldr	r0, [r0, #4]
	ldr	r1, [r6, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [r5, #508]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L10802
.L10806:
	mov	r1, r4
	mov	r0, r6
	bl	usb_remove_config(PLT)
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L10806
	b	.L10802
	.fnend
	.size	adb_android_function_enable, .-adb_android_function_enable
	.align	2
	.type	adb_release, %function
adb_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L10845
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r0, .L10845+4
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC2487:
	add	r1, pc, r1
.LPIC2486:
	add	r0, pc, r0
	add	r1, r1, #3888
	add	r1, r1, #12
	add	r0, r0, #2240
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L10841
.L10814:
	ldr	r3, .L10845+8
.LPIC2489:
	add	r3, pc, r3
	ldr	r3, [r3, #-1472]
	ldrb	r2, [r3, #160]	@ zero_extendqisi2
	cmp	r2, #0
	bne	.L10842
.L10815:
	add	r2, r3, #116
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L10842:
	ldr	r3, .L10845+12
.LPIC2490:
	add	r3, pc, r3
	ldr	r5, [r3, #1932]
	ldr	r6, [r3, #1916]
	cmp	r5, #0
	beq	.L10843
.L10816:
	add	r8, r5, #24
	mov	r0, r8
	bl	mutex_lock(PLT)
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	mov	r2, #0
	strb	r2, [r6]
	cmp	r3, r2
	beq	.L10844
	ldr	r1, [r5, #20]
	ldr	r7, [r5, #8]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r5, #20]
	bne	.L10822
	ldr	r0, [r7]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L10821
	blx	r3
	ldr	r0, [r7]
.L10821:
	ldr	r0, [r0, #4]
	ldr	r1, [r7, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [r5, #508]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L10822
.L10823:
	mov	r1, r4
	mov	r0, r7
	bl	usb_remove_config(PLT)
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L10823
.L10822:
	mov	r3, #0
	str	r3, [r6, #4]
.L10820:
	mov	r0, r8
	bl	mutex_unlock(PLT)
.L10824:
	ldr	r3, .L10845+16
	mov	r2, #1
.LPIC2494:
	add	r3, pc, r3
	ldr	r3, [r3, #-1472]
	strb	r2, [r3, #161]
	b	.L10815
.L10843:
	ldr	r5, [r6, #4]
	cmp	r5, #0
	bne	.L10816
	ldr	r1, .L10845+20
	ldr	r0, .L10845+24
.LPIC2493:
	add	r1, pc, r1
	add	r1, r1, #3904
.LPIC2492:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r3, #0
	strb	r5, [r6]
	str	r3, [r6, #4]
	b	.L10824
.L10844:
	str	r3, [r6, #4]
	b	.L10820
.L10841:
	ldr	r0, .L10845+28
.LPIC2488:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10814
.L10846:
	.align	2
.L10845:
	.word	.LANCHOR3-(.LPIC2487+8)
	.word	.LANCHOR2-(.LPIC2486+8)
	.word	.LANCHOR4-(.LPIC2489+8)
	.word	.LANCHOR0-(.LPIC2490+8)
	.word	.LANCHOR4-(.LPIC2494+8)
	.word	.LANCHOR3-(.LPIC2493+8)
	.word	.LC583-(.LPIC2492+8)
	.word	.LC582-(.LPIC2488+8)
	.fnend
	.size	adb_release, .-adb_release
	.align	2
	.type	ffs_data_clear, %function
ffs_data_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r0, #0
	add	r1, r6, #128
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	bne	.L10887
.L10848:
	ldr	r7, [r6]
	cmp	r7, #0
	bne	.L10888
.L10857:
	ldr	r8, [r6, #208]
	cmp	r8, #0
	beq	.L10858
	ldrh	r5, [r6, #180]
	cmp	r5, #0
	beq	.L10865
	ldr	r3, [r8]
	cmp	r3, #1
	bne	.L10860
	ldr	r2, [r8, #24]
	add	r3, r8, #24
	cmp	r2, r3
	bne	.L10860
	mov	r4, r8
.L10862:
	ldr	r0, [r4, #44]
	cmp	r0, #0
	beq	.L10863
	bl	d_delete(PLT)
	ldr	r0, [r4, #44]
	bl	dput(PLT)
	str	r7, [r4, #44]
.L10863:
	subs	r5, r5, #1
	add	r4, r4, #56
	beq	.L10865
	ldr	r0, [r4]
	cmp	r0, #1
	bne	.L10860
	ldr	r2, [r4, #24]
	add	r3, r4, #24
	cmp	r2, r3
	beq	.L10862
.L10860:
#APP
@ 1539 "/root/lol//drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/root/lol//drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1540, 0
.popsection
@ 0 "" 2
.L10865:
	mov	r0, r8
	bl	kfree(PLT)
.L10858:
	ldr	r0, [r6, #144]
	bl	kfree(PLT)
	ldr	r0, [r6, #184]
	bl	kfree(PLT)
	ldrd	r4, [sp]
	ldr	r0, [r6, #188]
	ldrd	r8, [sp, #16]
	ldrd	r6, [sp, #8]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	kfree(PLT)
.L10887:
	ldr	r3, .L10891
.LPIC2495:
	add	r3, pc, r3
	ldr	r5, [r3, #1984]
	ldr	r7, [r3, #1968]
	cmp	r5, #0
	beq	.L10889
.L10849:
	add	r9, r5, #24
	mov	r0, r9
	bl	mutex_lock(PLT)
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L10890
	ldr	r1, [r5, #20]
	ldr	r8, [r5, #8]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r5, #20]
	bne	.L10855
	ldr	r0, [r8]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L10854
	blx	r3
	ldr	r0, [r8]
.L10854:
	ldr	r0, [r0, #4]
	ldr	r1, [r8, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r4, [r5, #508]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L10855
.L10856:
	mov	r1, r4
	mov	r0, r8
	bl	usb_remove_config(PLT)
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L10856
.L10855:
	mov	r3, #0
	mov	r0, r6
	str	r3, [r7, #8]
	strb	r3, [r7]
	str	r3, [r7, #4]
	bl	functionfs_unbind(PLT)
.L10853:
	mov	r0, r9
	bl	mutex_unlock(PLT)
	ldr	r7, [r6]
	cmp	r7, #0
	beq	.L10857
.L10888:
#APP
@ 1412 "/root/lol//drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/root/lol//drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1412, 0
.popsection
@ 0 "" 2
.L10890:
	str	r3, [r7, #8]
	mov	r0, r6
	strb	r3, [r7]
	str	r3, [r7, #4]
	bl	functionfs_unbind(PLT)
	b	.L10853
.L10889:
	ldr	r5, [r7, #8]
	cmp	r5, #0
	bne	.L10849
	ldr	r1, .L10891+4
	ldr	r0, .L10891+8
.LPIC2498:
	add	r1, pc, r1
	add	r1, r1, #3920
.LPIC2497:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L10850
	str	r3, [r7, #8]
	mov	r0, r6
	strb	r3, [r7]
	str	r3, [r7, #4]
	bl	functionfs_unbind(PLT)
	b	.L10848
.L10850:
	str	r5, [r7, #8]
	mov	r0, r6
	strb	r5, [r7]
	str	r5, [r7, #4]
	bl	functionfs_unbind(PLT)
	b	.L10848
.L10892:
	.align	2
.L10891:
	.word	.LANCHOR0-(.LPIC2495+8)
	.word	.LANCHOR3-(.LPIC2498+8)
	.word	.LC584-(.LPIC2497+8)
	.fnend
	.size	ffs_data_clear, .-ffs_data_clear
	.align	2
	.type	ffs_ep0_release, %function
ffs_ep0_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r1, #124]
	add	r3, r4, #88
#APP
@ 99 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r5, [r3]
	sub	r5, r5, #1
	strex	r2, r5, [r3]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r5, #0
	bne	.L10894
	mov	r3, #3
	mov	r0, r4
	str	r3, [r4, #92]
	bl	ffs_data_clear(PLT)
	str	r5, [r4, #208]
	str	r5, [r4, #144]
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	str	r5, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r5, [r4, #160]
	str	r5, [r4, #164]
	str	r5, [r4, #168]
	str	r5, [r4, #172]
	strh	r5, [r4, #176]	@ movhi
	strh	r5, [r4, #178]	@ movhi
	strh	r5, [r4, #180]	@ movhi
	strh	r5, [r4, #104]	@ movhi
	str	r5, [r4, #92]
	str	r5, [r4, #96]
	str	r5, [r4, #128]
.L10894:
	add	r3, r4, #84
#APP
@ 99 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	beq	.L10899
.L10895:
	ldrd	r4, [sp]
	mov	r0, #0
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10899:
	ldr	r1, .L10900
	ldr	r0, .L10900+4
.LPIC2500:
	add	r1, pc, r1
	add	r1, r1, #3952
.LPIC2499:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r4
	bl	ffs_data_clear(PLT)
	ldr	r2, [r4, #120]
	add	r3, r4, #120
	cmp	r2, r3
	bne	.L10896
	ldr	r2, [r4, #40]
	add	r3, r4, #40
	cmp	r2, r3
	bne	.L10896
	ldr	r0, [r4, #136]
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	b	.L10895
.L10896:
#APP
@ 1362 "/root/lol//drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/root/lol//drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1363, 0
.popsection
@ 0 "" 2
.L10901:
	.align	2
.L10900:
	.word	.LANCHOR3-(.LPIC2500+8)
	.word	.LC585-(.LPIC2499+8)
	.fnend
	.size	ffs_ep0_release, .-ffs_ep0_release
	.align	2
	.type	ffs_fs_kill_sb, %function
ffs_fs_kill_sb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	bl	kill_litter_super(PLT)
	ldr	r4, [r4, #616]
	cmp	r4, #0
	beq	.L10902
	add	r3, r4, #84
#APP
@ 99 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	beq	.L10909
.L10902:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L10909:
	ldr	r1, .L10910
	ldr	r0, .L10910+4
.LPIC2502:
	add	r1, pc, r1
	add	r1, r1, #3952
.LPIC2501:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r4
	bl	ffs_data_clear(PLT)
	ldr	r2, [r4, #120]
	add	r3, r4, #120
	cmp	r2, r3
	bne	.L10906
	ldr	r2, [r4, #40]
	add	r3, r4, #40
	cmp	r2, r3
	bne	.L10906
	ldr	r0, [r4, #136]
	bl	kfree(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
.L10906:
#APP
@ 1362 "/root/lol//drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/root/lol//drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1363, 0
.popsection
@ 0 "" 2
.L10911:
	.align	2
.L10910:
	.word	.LANCHOR3-(.LPIC2502+8)
	.word	.LC585-(.LPIC2501+8)
	.fnend
	.size	ffs_fs_kill_sb, .-ffs_fs_kill_sb
	.align	2
	.type	ffs_epfile_release, %function
ffs_epfile_release:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r2, #1
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
	ldr	r3, [r0, #328]
	ldr	r4, [r3, #36]
	str	r2, [r3, #32]
	add	r3, r4, #88
#APP
@ 99 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r5, [r3]
	sub	r5, r5, #1
	strex	r2, r5, [r3]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 111 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r5, #0
	bne	.L10913
	mov	r3, #3
	mov	r0, r4
	str	r3, [r4, #92]
	bl	ffs_data_clear(PLT)
	str	r5, [r4, #208]
	str	r5, [r4, #144]
	str	r5, [r4, #184]
	str	r5, [r4, #188]
	str	r5, [r4, #148]
	str	r5, [r4, #152]
	str	r5, [r4, #156]
	str	r5, [r4, #160]
	str	r5, [r4, #164]
	str	r5, [r4, #168]
	str	r5, [r4, #172]
	strh	r5, [r4, #176]	@ movhi
	strh	r5, [r4, #178]	@ movhi
	strh	r5, [r4, #180]	@ movhi
	strh	r5, [r4, #104]	@ movhi
	str	r5, [r4, #92]
	str	r5, [r4, #96]
	str	r5, [r4, #128]
.L10913:
	add	r3, r4, #84
#APP
@ 99 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	beq	.L10918
.L10914:
	mov	r3, #0
	mov	r0, r3
	str	r3, [r6, #124]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L10918:
	ldr	r1, .L10919
	ldr	r0, .L10919+4
.LPIC2504:
	add	r1, pc, r1
	add	r1, r1, #3952
.LPIC2503:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r4
	bl	ffs_data_clear(PLT)
	ldr	r2, [r4, #120]
	add	r3, r4, #120
	cmp	r2, r3
	bne	.L10915
	ldr	r2, [r4, #40]
	add	r3, r4, #40
	cmp	r2, r3
	bne	.L10915
	ldr	r0, [r4, #136]
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	b	.L10914
.L10915:
#APP
@ 1362 "/root/lol//drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/root/lol//drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1363, 0
.popsection
@ 0 "" 2
.L10920:
	.align	2
.L10919:
	.word	.LANCHOR3-(.LPIC2504+8)
	.word	.LC585-(.LPIC2503+8)
	.fnend
	.size	ffs_epfile_release, .-ffs_epfile_release
	.align	2
	.type	functionfs_unbind, %function
functionfs_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L10927
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r3, #4]
	ldr	r1, [r4, #28]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r2, #0
	mov	r3, r4
	str	r2, [r4, #28]
	str	r2, [r3], #84
#APP
@ 99 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	beq	.L10928
.L10923:
	add	r1, r4, #128
	ldr	lr, [sp, #4]
	mov	r0, #1
	ldr	r4, [sp]
	add	sp, sp, #8
	b	_clear_bit(PLT)
.L10927:
	ldr	r0, .L10929
	movw	r1, #1493
.LPIC2505:
	add	r0, pc, r0
	b	warn_slowpath_null(PLT)
.L10928:
	ldr	r1, .L10929+4
	ldr	r0, .L10929+8
.LPIC2507:
	add	r1, pc, r1
	add	r1, r1, #3952
.LPIC2506:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r4
	bl	ffs_data_clear(PLT)
	ldr	r2, [r4, #120]
	add	r3, r4, #120
	cmp	r2, r3
	bne	.L10924
	ldr	r2, [r4, #40]
	add	r3, r4, #40
	cmp	r2, r3
	bne	.L10924
	ldr	r0, [r4, #136]
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	b	.L10923
.L10924:
#APP
@ 1362 "/root/lol//drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/root/lol//drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1363, 0
.popsection
@ 0 "" 2
.L10930:
	.align	2
.L10929:
	.word	.LC185-(.LPIC2505+8)
	.word	.LANCHOR3-(.LPIC2507+8)
	.word	.LC585-(.LPIC2506+8)
	.fnend
	.size	functionfs_unbind, .-functionfs_unbind
	.align	2
	.type	ffs_func_unbind, %function
ffs_func_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	sub	r7, r1, #36
	mov	r6, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r8, [r1, #-28]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r8, #132]
	cmp	r3, r7
	beq	.L10959
.L10932:
	add	r4, r8, #116
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r8, #96]
	mov	r5, r0
	add	lr, r8, #100
	ldrh	ip, [r8, #104]
	cmp	r3, #1
	moveq	r3, #2
	streq	r3, [r8, #96]
	cmp	ip, #0
	beq	.L10945
	add	ip, lr, ip
	mov	r3, lr
	mov	r1, lr
.L10938:
	ldrb	r2, [r3], #1	@ zero_extendqisi2
	sub	r0, r2, #5
	cmp	r0, #1
	bhi	.L10944
	strb	r2, [r1]
	add	r1, r1, #1
.L10944:
	cmp	r3, ip
	bne	.L10938
	rsb	r1, lr, r1
	add	r3, r1, #1
	uxth	r1, r1
	uxth	r3, r3
.L10936:
	mov	ip, #1
	strh	r3, [r8, #104]	@ movhi
	add	r1, r8, r1
	mov	r2, ip
	mov	r0, r4
	mov	r8, #0
	strb	ip, [r1, #100]
	mov	r1, #3
	bl	__wake_up_locked(PLT)
	mov	r0, r4
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r6, #-28]
	ldr	r4, [r6, #-24]
	add	r0, r3, #24
	ldrh	r5, [r3, #180]
	bl	_raw_spin_lock_irqsave(PLT)
	add	r4, r4, #28
	mov	r9, r0
.L10940:
	ldr	r0, [r4, #-28]
	cmp	r0, #0
	beq	.L10939
	ldr	r1, [r4, #-24]
	cmp	r1, #0
	beq	.L10939
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L10939:
	subs	r5, r5, #1
	str	r8, [r4, #-24]
	add	r4, r4, #28
	str	r8, [r4, #-56]
	bne	.L10940
	ldr	r0, [r6, #-28]
	mov	r1, r9
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r4, [r6, #-28]
	add	r3, r4, #84
#APP
@ 99 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	beq	.L10960
.L10941:
	ldr	r0, [r6, #-24]
	bl	kfree(PLT)
	mov	r0, r7
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	kfree(PLT)
.L10959:
	ldr	r4, [r1, #-24]
	add	r0, r8, #24
	mov	r9, #1
	mov	r10, #0
	ldr	r5, [r8, #208]
	ldrh	fp, [r8, #180]
	bl	_raw_spin_lock_irqsave(PLT)
	add	r4, r4, #28
	str	r0, [sp, #4]
.L10934:
	str	r9, [r5, #32]
	ldr	r0, [r4, #-28]
	cmp	r0, #0
	beq	.L10933
	ldr	r2, [r0, #8]
	ldr	r2, [r2, #4]
	blx	r2
	ldr	r2, [r4, #-28]
	str	r10, [r2]
.L10933:
	subs	fp, fp, #1
	str	r10, [r5, #40]
	add	r4, r4, #28
	add	r5, r5, #56
	bne	.L10934
	ldr	r0, [r6, #-28]
	ldr	r1, [sp, #4]
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore(PLT)
	str	fp, [r8, #132]
	b	.L10932
.L10960:
	ldr	r1, .L10961
	ldr	r0, .L10961+4
.LPIC2509:
	add	r1, pc, r1
	add	r1, r1, #3952
.LPIC2508:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r4
	bl	ffs_data_clear(PLT)
	ldr	r2, [r4, #120]
	add	r3, r4, #120
	cmp	r2, r3
	bne	.L10942
	ldr	r2, [r4, #40]
	add	r3, r4, #40
	cmp	r2, r3
	bne	.L10942
	ldr	r0, [r4, #136]
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	b	.L10941
.L10945:
	mov	r1, ip
	mov	r3, #1
	b	.L10936
.L10942:
#APP
@ 1362 "/root/lol//drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/root/lol//drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1363, 0
.popsection
@ 0 "" 2
.L10962:
	.align	2
.L10961:
	.word	.LANCHOR3-(.LPIC2509+8)
	.word	.LC585-(.LPIC2508+8)
	.fnend
	.size	ffs_func_unbind, .-ffs_func_unbind
	.align	2
	.type	ffs_function_bind_config, %function
ffs_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L10986
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
.LPIC2521:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	lr, [sp, #28]
	ldr	r2, [r0, #4]
	ldr	r7, [r1, #24]
	ldr	r0, [r3, #28]
	ldr	r5, [r2, #4]
	cmp	r0, #0
	beq	.L10971
	movw	r1, #32976
	mov	r2, #120
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L10983
.L10964:
	ldr	r0, .L10986+4
	add	r3, r5, #84
	ldr	r1, .L10986+8
	ldr	r2, .L10986+12
	ldr	lr, .L10986+16
.LPIC2511:
	add	r0, pc, r0
	ldr	ip, .L10986+20
.LPIC2512:
	add	r1, pc, r1
.LPIC2513:
	add	r2, pc, r2
	str	r0, [r4, #36]
	ldr	r0, .L10986+24
	ldr	r8, [r5, #188]
	str	r1, [r4, #68]
.LPIC2514:
	add	lr, pc, lr
	str	r2, [r4, #72]
	ldr	r1, .L10986+28
.LPIC2515:
	add	ip, pc, ip
	ldr	r2, .L10986+32
	str	r6, [r4]
.LPIC2516:
	add	r0, pc, r0
	str	lr, [r4, #76]
	str	r8, [r4, #40]
.LPIC2517:
	add	r1, pc, r1
	str	ip, [r4, #84]
.LPIC2518:
	add	r2, pc, r2
	strd	r0, [r4, #88]
	str	r2, [r4, #96]
	ldr	r2, [r7]
	stmib	r4, {r2, r5}
#APP
@ 45 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	mov	r0, r6
	add	r1, r4, #36
	bl	usb_add_function(PLT)
	subs	r6, r0, #0
	moveq	r0, r6
	bne	.L10984
.L10965:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L10971:
	mov	r4, #16
	b	.L10964
.L10983:
	mvn	r0, #11
	b	.L10965
.L10984:
	ldr	r3, [r4, #8]
	mov	r8, #0
	ldr	r5, [r4, #12]
	add	r0, r3, #24
	ldrh	r7, [r3, #180]
	bl	_raw_spin_lock_irqsave(PLT)
	add	r5, r5, #28
	mov	r9, r0
.L10967:
	ldr	r0, [r5, #-28]
	cmp	r0, #0
	beq	.L10966
	ldr	r1, [r5, #-24]
	cmp	r1, #0
	beq	.L10966
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L10966:
	subs	r7, r7, #1
	str	r8, [r5, #-24]
	add	r5, r5, #28
	str	r8, [r5, #-56]
	bne	.L10967
	ldr	r0, [r4, #8]
	mov	r1, r9
	add	r0, r0, #24
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r5, [r4, #8]
	add	r3, r5, #84
#APP
@ 99 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	beq	.L10985
.L10968:
	ldr	r0, [r4, #12]
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r6
	b	.L10965
.L10985:
	ldr	r1, .L10986+36
	ldr	r0, .L10986+40
.LPIC2520:
	add	r1, pc, r1
	add	r1, r1, #3952
.LPIC2519:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r5
	bl	ffs_data_clear(PLT)
	ldr	r2, [r5, #120]
	add	r3, r5, #120
	cmp	r2, r3
	bne	.L10969
	ldr	r2, [r5, #40]
	add	r3, r5, #40
	cmp	r2, r3
	bne	.L10969
	ldr	r0, [r5, #136]
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	b	.L10968
.L10969:
	bl	ffs_data_put.part.72(PLT)
.L10987:
	.align	2
.L10986:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2521+8))
	.word	.LC586-(.LPIC2511+8)
	.word	ffs_func_bind-(.LPIC2512+8)
	.word	ffs_func_unbind-(.LPIC2513+8)
	.word	ffs_func_set_alt-(.LPIC2514+8)
	.word	ffs_func_disable-(.LPIC2515+8)
	.word	ffs_func_setup-(.LPIC2516+8)
	.word	ffs_func_suspend-(.LPIC2517+8)
	.word	ffs_func_resume-(.LPIC2518+8)
	.word	.LANCHOR3-(.LPIC2520+8)
	.word	.LC585-(.LPIC2519+8)
	.fnend
	.size	ffs_function_bind_config, .-ffs_function_bind_config
	.align	2
	.type	ffs_fs_mount, %function
ffs_fs_mount:
	.fnstart
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	ip, #33152
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	subs	r4, r3, #0
	str	lr, [sp, #32]
	mov	r3, #0
	movt	ip, 65535
	strd	r8, [sp, #16]
	movw	lr, #16704
	mov	r8, r0
	strd	r6, [sp, #8]
	mov	r9, r1
	mov	r7, r2
	strd	r10, [sp, #24]
	.pad #60
	sub	sp, sp, #60
	str	r3, [sp, #32]
	str	r3, [sp, #44]
	strh	ip, [sp, #32]	@ movhi
	str	r3, [sp, #36]
	str	r3, [sp, #40]
	str	r3, [sp, #48]
	str	r3, [sp, #52]
	strh	lr, [sp, #44]	@ movhi
	beq	.L10989
	ldrb	r3, [r4]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L10989
	ldr	r3, .L11040
.LPIC2526:
	add	r3, pc, r3
	str	r3, [sp, #4]
	ldr	r3, .L11040+4
.LPIC2524:
	add	r3, pc, r3
	str	r3, [sp, #8]
	ldr	r3, .L11040+8
.LPIC2525:
	add	r3, pc, r3
	str	r3, [sp, #16]
	ldr	r3, .L11040+12
.LPIC2527:
	add	r3, pc, r3
	str	r3, [sp, #12]
	ldr	r3, .L11040+16
.LPIC2528:
	add	r3, pc, r3
	str	r3, [sp, #20]
.L11002:
	mov	r1, #44
	mov	r0, r4
	bl	strchr(PLT)
	subs	r6, r0, #0
	mov	r1, #61
	movne	r3, #0
	mov	r0, r4
	strneb	r3, [r6]
	bl	strchr(PLT)
	subs	r5, r0, #0
	beq	.L11033
	mov	r3, #0
	mov	r10, r5
	mov	r2, r3
	add	r1, sp, #28
	strb	r3, [r10], #1
	mov	r0, r10
	bl	simple_strtoul(PLT)
	ldr	r3, [sp, #28]
	mov	fp, r0
	ldrb	r3, [r3]	@ zero_extendqisi2
	cmp	r3, #0
	cmpne	r3, #44
	bne	.L11034
	rsb	r5, r4, r5
	cmp	r5, #4
	beq	.L10995
	cmp	r5, #5
	beq	.L10996
	cmp	r5, #3
	beq	.L11035
.L10994:
	ldr	r0, .L11040+20
	mov	r1, r4
.LPIC2529:
	add	r0, pc, r0
	bl	printk(PLT)
.L10992:
	mvn	r0, #21
	b	.L11026
.L10989:
	ldr	r3, .L11040+24
.LPIC2546:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L11036
	movw	r1, #32976
	mov	r2, #212
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L11030
.L11004:
	ldr	r5, .L11040+28
	mov	r3, #1
	mov	r6, #0
	ldr	r1, .L11040+32
	add	r0, r4, #4
	add	fp, sp, #32
	str	r3, [r4, #84]
	ldr	r10, .L11040+36
	str	r6, [r4, #88]
.LPIC2531:
	add	r5, pc, r5
	str	r6, [r4, #92]
	add	ip, r5, #3616
.LPIC2530:
	add	r1, pc, r1
	str	r3, [sp, #8]
	add	ip, ip, #4
	add	r5, r5, #3552
	mov	r2, ip
.LPIC2534:
	add	r10, pc, r10
	str	ip, [sp, #4]
	add	r5, r5, #4
	bl	__mutex_init(PLT)
	ldr	ip, [sp, #4]
	add	r0, r4, #116
	str	r6, [r4, #24]
	ldr	r1, .L11040+40
	mov	r2, ip
.LPIC2532:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	mov	r2, r5
	mov	r1, r10
	str	r6, [r4, #32]
	add	r0, r4, #36
	bl	__init_waitqueue_head(PLT)
	mov	r2, r5
	mov	r1, r10
	str	r6, [r4, #68]
	add	r0, r4, #72
	bl	__init_waitqueue_head(PLT)
	mov	r2, r5
	mov	r1, r10
	str	r6, [r4, #52]
	add	r0, r4, #56
	bl	__init_waitqueue_head(PLT)
	ldr	r3, [sp, #8]
	mov	r0, r7
	mov	r1, #208
	ldr	ip, [fp, #8]
	strh	r3, [r4, #106]	@ movhi
	ldrd	r2, [sp, #32]
	str	ip, [r4, #204]
	strd	r2, [r4, #196]
	bl	kstrdup(PLT)
	cmp	r0, r6
	str	r0, [r4, #136]
	beq	.L11037
	ldr	r3, .L11040+44
	str	r6, [r4, #140]
	mov	r0, r8
	mov	r1, r9
	mov	r2, fp
	str	r4, [sp, #52]
.LPIC2542:
	add	r3, pc, r3
	bl	mount_nodev(PLT)
	cmn	r0, #4096
	mov	r4, r0
	bhi	.L11038
.L11012:
	mov	r0, r4
.L11026:
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11035:
	mov	r0, r4
	ldr	r1, [sp, #12]
	mov	r2, r5
	bl	memcmp(PLT)
	cmp	r0, #0
	streq	fp, [sp, #36]
	beq	.L10999
	mov	r2, r5
	mov	r0, r4
	ldr	r1, [sp, #20]
	bl	memcmp(PLT)
	cmp	r0, #0
	bne	.L10994
	str	fp, [sp, #40]
.L10999:
	cmp	r6, #0
	beq	.L10989
	add	r4, r6, #1
	b	.L11002
.L10996:
	mov	r0, r4
	ldr	r1, [sp, #8]
	mov	r2, r5
	bl	memcmp(PLT)
	cmp	r0, #0
	beq	.L11039
	mov	r2, r5
	mov	r0, r4
	ldr	r1, [sp, #16]
	bl	memcmp(PLT)
	cmp	r0, #0
	bne	.L10994
	movw	r3, #438
	and	r3, r3, fp
	mvn	r3, r3, asl #17
	mvn	r3, r3, lsr #17
	strh	r3, [sp, #32]	@ movhi
	b	.L10999
.L10995:
	mov	r2, r5
	mov	r0, r4
	ldr	r1, [sp, #4]
	bl	memcmp(PLT)
	cmp	r0, #0
	bne	.L10994
	uxth	fp, fp
	movw	r5, #438
	movw	r4, #365
	and	r5, r5, fp
	and	r4, r4, fp
	mvn	r3, r5, asl #17
	orr	r4, r4, #16384
	mvn	r3, r3, lsr #17
	strh	r4, [sp, #44]	@ movhi
	strh	r3, [sp, #32]	@ movhi
	b	.L10999
.L11036:
	mov	r4, #16
	b	.L11004
.L11039:
	movw	r3, #365
	and	r3, r3, fp
	orr	r3, r3, #16384
	strh	r3, [sp, #44]	@ movhi
	b	.L10999
.L11037:
	add	r3, r4, #84
#APP
@ 99 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, r6
	bne	.L11030
	ldr	r1, .L11040+48
	ldr	r0, .L11040+52
.LPIC2541:
	add	r1, pc, r1
	add	r1, r1, #3952
.LPIC2540:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r4
	bl	ffs_data_clear(PLT)
	ldr	r2, [r4, #120]
	add	r3, r4, #120
	cmp	r2, r3
	bne	.L11008
	ldr	r2, [r4, #40]
	add	r3, r4, #40
	cmp	r2, r3
	bne	.L11008
	ldr	r0, [r4, #136]
	bl	kfree(PLT)
	mov	r0, r4
	bl	kfree(PLT)
.L11030:
	mvn	r0, #11
	b	.L11026
.L11033:
	ldr	r0, .L11040+56
	mov	r1, r4
.LPIC2522:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10992
.L11034:
	ldr	r0, .L11040+60
	mov	r1, r4
	mov	r2, r10
.LPIC2523:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L10992
.L11038:
	ldr	r5, [sp, #52]
	cmp	r5, #0
	beq	.L11012
	add	r3, r5, #84
#APP
@ 99 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 101 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 111 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #0
	bne	.L11012
	ldr	r1, .L11040+64
	ldr	r0, .L11040+68
.LPIC2544:
	add	r1, pc, r1
	add	r1, r1, #3952
.LPIC2543:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r5
	bl	ffs_data_clear(PLT)
	ldr	r2, [r5, #120]
	add	r3, r5, #120
	cmp	r2, r3
	bne	.L11008
	ldr	r2, [r5, #40]
	add	r3, r5, #40
	cmp	r2, r3
	bne	.L11008
	ldr	r0, [r5, #136]
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	mov	r0, r4
	b	.L11026
.L11008:
	bl	ffs_data_put.part.72(PLT)
.L11041:
	.align	2
.L11040:
	.word	.LC591-(.LPIC2526+8)
	.word	.LC589-(.LPIC2524+8)
	.word	.LC590-(.LPIC2525+8)
	.word	.LC592-(.LPIC2527+8)
	.word	.LC593-(.LPIC2528+8)
	.word	.LC594-(.LPIC2529+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2546+8))
	.word	.LANCHOR4-(.LPIC2531+8)
	.word	.LC595-(.LPIC2530+8)
	.word	.LC477-(.LPIC2534+8)
	.word	.LC596-(.LPIC2532+8)
	.word	ffs_sb_fill-(.LPIC2542+8)
	.word	.LANCHOR3-(.LPIC2541+8)
	.word	.LC585-(.LPIC2540+8)
	.word	.LC587-(.LPIC2522+8)
	.word	.LC588-(.LPIC2523+8)
	.word	.LANCHOR3-(.LPIC2544+8)
	.word	.LC585-(.LPIC2543+8)
	.fnend
	.size	ffs_fs_mount, .-ffs_fs_mount
	.align	2
	.global	usb_string_id
	.type	usb_string_id, %function
usb_string_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	mov	r2, r0
	cmp	r3, #253
	bhi	.L11044
	add	r3, r3, #1
	uxtb	r3, r3
	mov	r0, r3
	strb	r3, [r2, #48]
.L11043:
	bx	lr
.L11044:
	mvn	r0, #18
	b	.L11043
	.fnend
	.size	usb_string_id, .-usb_string_id
	.section	.text.unlikely
	.align	2
	.type	override_id, %function
override_id:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	stmfd	sp!, {r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r4, r1
	ldrb	r3, [r1]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11046
	mov	r5, r0
	bl	usb_string_id(PLT)
	cmp	r0, #0
	strgeb	r0, [r4]
	bge	.L11046
	ldr	r0, [r5]
	ldr	r1, .L11049
	add	r0, r0, #32
.LPIC2547:
	add	r1, pc, r1
	bl	dev_warn(PLT)
.L11046:
	ldrb	r0, [r4]	@ zero_extendqisi2
	ldmfd	sp!, {r4, r5, r6, pc}
.L11050:
	.align	2
.L11049:
	.word	.LC597-(.LPIC2547+8)
	.fnend
	.size	override_id, .-override_id
	.text
	.align	2
	.type	composite_bind, %function
composite_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	ldr	r6, .L11100
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
.LPIC2577:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	ldr	r0, [r6, #28]
	cmp	r0, #0
	beq	.L11066
	movw	r1, #32976
	mov	r2, #68
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L11095
.L11052:
	mov	r3, #0
	add	r8, r5, #32
	str	r5, [r4]
	mov	r1, r4
	mov	r0, r8
	str	r3, [r4, #60]
	bl	dev_set_drvdata(PLT)
	add	r3, r4, #36
	mov	r1, #208
	str	r3, [r4, #36]
	str	r3, [r4, #40]
	ldr	r0, [r5, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #4]
	beq	.L11054
	ldr	r0, [r6, #48]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L11055
	movw	r1, #32976
	mov	r2, #4096
	bl	kmem_cache_alloc_trace(PLT)
.L11055:
	str	r0, [r7]
	ldr	r2, [r4, #4]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L11054
	ldr	r3, .L11100+4
	mov	r1, #4096
	ldr	r9, .L11100+8
	ldr	r7, .L11100+12
.LPIC2549:
	add	r3, pc, r3
.LPIC2550:
	add	r9, pc, r9
	str	r3, [r2, #28]
	ldr	r3, [r9, #24]
.LPIC2551:
	add	r7, pc, r7
	ldr	r2, [r5, #4]
	str	r4, [r2]
	ldr	r0, [r4]
	str	r3, [r4, #44]
	str	r1, [r4, #8]
	bl	usb_ep_autoconfig_reset(PLT)
	ldr	r3, [r7, #3620]
	mov	r0, r4
	blx	r3
	subs	r6, r0, #0
	bge	.L11096
.L11056:
	mov	r0, r5
	bl	composite_unbind(PLT)
	mov	r0, r6
.L11053:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L11054:
	mvn	r6, #11
	b	.L11056
.L11066:
	mov	r4, #16
	b	.L11052
.L11095:
	mvn	r0, #11
	b	.L11053
.L11096:
	ldr	r1, [r9, #24]
	movw	r2, #3624
	movw	r3, #3626
	ldrh	r2, [r7, r2]
	ldr	r7, .L11100+16
	ldr	r1, [r1, #12]
	cmp	r2, #0
.LPIC2560:
	add	r7, pc, r7
	ldr	r6, [r1]	@ unaligned
	ldr	lr, [r1, #4]	@ unaligned
	ldr	ip, [r1, #8]	@ unaligned
	ldr	r0, [r1, #12]	@ unaligned
	str	r6, [r4, #17]	@ unaligned
	ldr	r6, .L11100+20
	str	lr, [r4, #21]	@ unaligned
	str	ip, [r4, #25]	@ unaligned
	str	r0, [r4, #29]	@ unaligned
	ldrh	r1, [r1, #16]	@ unaligned
	ldr	r0, .L11100+24
	strneh	r2, [r4, #25]	@ unaligned
.LPIC2557:
	add	r6, pc, r6
	add	r6, r6, #3968
	add	r6, r6, #8
	strh	r1, [r4, #33]	@ unaligned
	ldr	r1, .L11100+28
.LPIC2555:
	add	r0, pc, r0
.LPIC2554:
	add	r1, pc, r1
	ldrh	r3, [r1, r3]
	movw	r1, #3628
	ldrh	r1, [r0, r1]
	ldr	r0, .L11100+32
	cmp	r3, #0
	strneh	r3, [r4, #27]	@ unaligned
	cmp	r1, #0
.LPIC2556:
	add	r0, pc, r0
	strneh	r1, [r4, #29]	@ unaligned
	mov	r1, r6
	bl	printk(PLT)
	ldr	r0, .L11100+36
	movw	r3, #3628
	mov	r1, r6
	ldrh	r2, [r7, r3]
.LPIC2558:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [r7, #3608]
	cmp	r3, #0
	beq	.L11097
.L11060:
	mov	r0, r4
	add	r1, r4, #31
	bl	override_id(PLT)
	strb	r0, [r4, #49]
.L11061:
	ldr	r1, .L11100+40
	ldr	r6, .L11100+44
	ldr	r0, .L11100+48
.LPIC2567:
	add	r1, pc, r1
.LPIC2568:
	add	r6, pc, r6
	add	r1, r1, #3968
	add	r2, r6, #3552
.LPIC2566:
	add	r0, pc, r0
	add	r1, r1, #8
	add	r2, r2, #4
	bl	printk(PLT)
	ldr	r3, [r6, #3612]
	cmp	r3, #0
	beq	.L11098
.L11062:
	mov	r0, r4
	add	r1, r4, #32
	bl	override_id(PLT)
	strb	r0, [r4, #50]
.L11063:
	ldr	r3, .L11100+52
.LPIC2571:
	add	r3, pc, r3
	ldr	r3, [r3, #3616]
	cmp	r3, #0
	beq	.L11064
	mov	r0, r4
	add	r1, r4, #33
	bl	override_id(PLT)
	strb	r0, [r4, #51]
.L11064:
	ldr	r3, .L11100+56
.LPIC2572:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	ldrb	r3, [r3, #24]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L11065
	ldrb	r3, [r4, #33]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11099
.L11065:
	ldr	r1, .L11100+60
	mov	r0, r8
.LPIC2574:
	add	r1, pc, r1
	add	r1, r1, #8
	bl	device_create_file(PLT)
	subs	r6, r0, #0
	bne	.L11056
	ldr	r3, .L11100+64
	ldr	r0, [r4]
	ldr	r1, .L11100+68
.LPIC2576:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	add	r0, r0, #32
.LPIC2575:
	add	r1, pc, r1
	ldr	r2, [r3]
	bl	_dev_info(PLT)
	mov	r0, r6
	b	.L11053
.L11098:
	ldrb	r3, [r4, #32]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11063
	ldr	r3, .L11100+72
.LPIC2570:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	bne	.L11062
	b	.L11063
.L11099:
	ldr	r0, [r4]
	ldr	r1, .L11100+76
	add	r0, r0, #32
.LPIC2573:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	b	.L11065
.L11097:
	ldrb	r3, [r4, #31]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11061
	ldr	r3, .L11100+80
.LPIC2562:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	ldr	r3, [r3, #8]
	cmp	r3, #0
	bne	.L11060
	ldrb	r3, [r7, #3556]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11060
	ldr	r3, .L11100+84
	add	r0, r7, #3552
	mov	r1, #50
	ldr	ip, [r5, #28]
	add	r0, r0, #4
	ldr	r2, .L11100+88
.LPIC2578:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	ip, [sp, #4]
.LPIC2565:
	add	r2, pc, r2
	add	ip, r3, #134
	add	r3, r3, #4
	str	ip, [sp]
	bl	scnprintf(PLT)
	b	.L11060
.L11101:
	.align	2
.L11100:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2577+8))
	.word	composite_setup_complete-(.LPIC2549+8)
	.word	.LANCHOR1-(.LPIC2550+8)
	.word	.LANCHOR4-(.LPIC2551+8)
	.word	.LANCHOR4-(.LPIC2560+8)
	.word	.LANCHOR3-(.LPIC2557+8)
	.word	.LANCHOR4-(.LPIC2555+8)
	.word	.LANCHOR4-(.LPIC2554+8)
	.word	.LC598-(.LPIC2556+8)
	.word	.LC599-(.LPIC2558+8)
	.word	.LANCHOR3-(.LPIC2567+8)
	.word	.LANCHOR4-(.LPIC2568+8)
	.word	.LC601-(.LPIC2566+8)
	.word	.LANCHOR4-(.LPIC2571+8)
	.word	.LANCHOR1-(.LPIC2572+8)
	.word	.LANCHOR0-(.LPIC2574+8)
	.word	.LANCHOR1-(.LPIC2576+8)
	.word	.LC603-(.LPIC2575+8)
	.word	.LANCHOR1-(.LPIC2570+8)
	.word	.LC602-(.LPIC2573+8)
	.word	.LANCHOR1-(.LPIC2562+8)
	.word	init_uts_ns(GOT_PREL)+(.-(.LPIC2578+8))
	.word	.LC600-(.LPIC2565+8)
	.fnend
	.size	composite_bind, .-composite_bind
	.align	2
	.type	f_midi_bind, %function
f_midi_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 504
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	ldr	r6, .L11135
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r3, [r0, #24]
	.pad #508
	sub	sp, sp, #508
.LPIC2603:
	add	r6, pc, r6
	str	r0, [sp, #12]
	str	r3, [sp, #8]
	ldrb	r3, [r6, #2016]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11103
	ldr	r0, [sp, #8]
	bl	usb_string_id(PLT)
	subs	r5, r0, #0
	blt	.L11104
	strb	r5, [r6, #2016]
.L11103:
	ldr	r7, [sp, #12]
	mov	r1, r4
	mov	r0, r7
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L11104
	ldr	r6, .L11135+4
	mov	r0, r7
	mov	r1, r4
.LPIC2605:
	add	r6, pc, r6
	strb	r5, [r6, #2266]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L11104
	uxtb	r5, r5
	add	r1, r6, #2288
	add	r1, r1, #12
	strb	r5, [r6, #2278]
	strb	r5, [r6, #2296]
	ldr	r5, [sp, #8]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	str	r0, [r4, #88]
	beq	.L11105
	add	r1, r6, #2304
	str	r5, [r0]
	ldr	r0, [r5]
	add	r1, r1, #8
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	str	r0, [r4, #92]
	beq	.L11117
	str	r5, [r0]
	movw	r1, #32976
	mov	r0, #292
	bl	__kmalloc(PLT)
	subs	r3, r0, #0
	mov	r0, r3
	str	r3, [sp, #20]
	beq	.L11118
	add	r2, r6, #2288
	add	r3, r6, #2256
	add	r1, r3, #20
	str	r2, [r0, #4]
	add	r2, r3, #68
	add	r3, r3, #8
	str	r1, [r0, #8]
	str	r3, [r0]
	ldr	r3, [r4, #324]
	ldr	r1, [r4, #320]
	str	r2, [r0, #12]
	ldr	r10, [r4, #320]
	add	r3, r3, r1
	rsb	r3, r3, r3, asl #4
	cmp	r10, #0
	add	r3, r3, #7
	strh	r3, [r2, #5]	@ unaligned
	beq	.L11119
	add	ip, r6, #2320
	mov	r1, #1
	mov	lr, #0
	add	ip, ip, #15
	mov	r6, r1
	mov	r9, lr
	add	r2, sp, #24
	add	r3, sp, #360
	str	ip, [sp]
	mov	r8, #36
	mov	r7, #2
.L11108:
	mov	ip, #9
	mov	r5, #6
	strb	r1, [r2, #4]
	strb	r8, [r2, #1]
	add	r1, r1, #2
	add	lr, lr, #1
	str	ip, [sp, #4]
	ldrb	ip, [sp, #4]	@ zero_extendqisi2
	sub	r10, r1, #1
	strb	r5, [r2]
	add	r0, r0, #8
	add	r5, r1, #3
	strb	r7, [r2, #2]
	strb	r7, [r2, #3]
	strb	r9, [r2, #5]
	str	r2, [r0, #8]
	ldrb	fp, [r2, #4]	@ zero_extendqisi2
	add	r2, r2, #6
	strb	ip, [r3]
	mov	ip, #3
	strb	r10, [r3, #4]
	str	ip, [sp, #4]
	ldrb	ip, [sp, #4]	@ zero_extendqisi2
	strb	r8, [r3, #1]
	strb	r6, [r3, #3]
	strb	r6, [r3, #5]
	strb	ip, [r3, #2]
	ldr	ip, [sp]
	strb	r6, [r3, #7]
	strb	r9, [r3, #8]
	strb	fp, [r3, #6]
	str	r3, [r0, #12]
	ldrb	r10, [r3, #4]	@ zero_extendqisi2
	add	r3, r3, #9
	strb	r10, [ip, #1]!
	ldr	r10, [r4, #320]
	str	ip, [sp]
	cmp	lr, r10
	bcc	.L11108
	mov	r3, r5, asl #2
	add	lr, r3, #4
	add	ip, r3, #8
.L11107:
	ldr	r2, [r4, #324]
	cmp	r2, #0
	beq	.L11120
	ldr	r3, [sp, #20]
	mov	ip, #0
	add	r2, sp, #120
	ldr	r6, .L11135+8
	mov	r9, ip
	mov	r8, #36
	mov	r7, #2
	mov	lr, #1
	add	r0, r3, r5, asl #2
	rsb	r3, r1, r5
.LPIC2616:
	add	r6, pc, r6
	add	r6, r6, #2352
	str	r3, [sp, #16]
	add	r3, sp, #216
	add	r6, r6, #3
.L11110:
	mov	r5, #6
	strb	r1, [r2, #4]
	add	r1, r1, #2
	strb	r8, [r2, #1]
	sub	r10, r1, #1
	add	ip, ip, #1
	strb	r5, [r2]
	ldr	r5, [sp, #16]
	add	r0, r0, #8
	strb	r7, [r2, #2]
	strb	lr, [r2, #3]
	strb	r9, [r2, #5]
	add	r5, r5, r1
	str	r2, [r0, #-8]
	ldrb	fp, [r2, #4]	@ zero_extendqisi2
	strb	r10, [r3, #4]
	add	r2, r2, #6
	str	r5, [sp]
	mov	r5, #9
	strb	r8, [r3, #1]
	str	r5, [sp, #4]
	ldrb	r5, [sp, #4]	@ zero_extendqisi2
	strb	fp, [r3, #6]
	strb	r7, [r3, #3]
	strb	lr, [r3, #5]
	strb	r5, [r3]
	mov	r5, #3
	strb	r9, [r3, #8]
	str	r5, [sp, #4]
	ldrb	r5, [sp, #4]	@ zero_extendqisi2
	strb	lr, [r3, #7]
	strb	r5, [r3, #2]
	str	r3, [r0, #-4]
	ldrb	r10, [r2, #-2]	@ zero_extendqisi2
	add	r3, r3, #9
	strb	r10, [r6, #1]!
	ldr	fp, [r4, #324]
	cmp	ip, fp
	bcc	.L11110
	ldr	r5, [sp]
	uxtb	r2, fp
	ldr	r10, [r4, #320]
	add	r1, r2, #4
	uxtb	r1, r1
	mov	r3, r5, asl #2
	add	lr, r3, #4
	add	ip, r3, #8
.L11109:
	ldr	r0, .L11135+12
	add	r6, r5, #3
	uxtb	fp, r10
	ldr	r5, [sp, #20]
	mov	r7, #0
.LPIC2617:
	add	r0, pc, r0
	add	r8, r5, r6, asl #2
	add	r5, fp, #4
	strb	r2, [r0, #2335]
	ldr	r2, [sp, #20]
	add	r10, r0, #2288
	strb	r5, [r0, #2352]
	add	r5, r0, #2304
	add	r9, r0, #2352
	strb	r1, [r0, #2332]
	add	r1, r0, #2320
	add	r5, r5, #8
	add	r1, r1, #12
	add	r10, r10, #12
	strb	fp, [r0, #2355]
	str	r5, [r2, r3]
	mov	r0, r2
	str	r9, [r2, lr]
	str	r10, [r2, ip]
	str	r1, [r2, r6, asl #2]
	str	r7, [r8, #4]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, r7
	str	r0, [r4, #16]
	beq	.L11111
	ldr	r3, [sp, #12]
	ldr	r3, [r3, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L11114
	mov	r3, #512
	ldr	r0, [sp, #20]
	strh	r3, [r10, #4]	@ movhi
	strh	r3, [r5, #4]	@ movhi
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L11111
.L11114:
	ldr	r0, [sp, #20]
	bl	kfree(PLT)
	mov	r0, #0
	b	.L11133
.L11118:
	mvn	r5, #11
.L11104:
	ldr	r3, [r4, #92]
	cmp	r3, #0
	beq	.L11106
.L11116:
	mov	r2, #0
	str	r2, [r3]
.L11106:
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
.L11115:
	ldr	r3, [sp, #8]
	ldr	r1, .L11135+16
	ldr	r2, [r4]
	ldr	r0, [r3]
	mov	r3, r5
.LPIC2627:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r0, r5
.L11133:
	add	sp, sp, #508
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11105:
	ldr	r3, [r4, #92]
	mvn	r5, #18
	cmp	r3, #0
	bne	.L11116
	b	.L11115
.L11117:
	mvn	r5, #18
	b	.L11106
.L11111:
	ldr	r0, [sp, #20]
	mvn	r5, #18
	bl	kfree(PLT)
	ldr	r0, [r4, #8]
	bl	kfree(PLT)
	b	.L11104
.L11120:
	mov	r1, #4
	b	.L11109
.L11119:
	mov	ip, #24
	mov	lr, #20
	mov	r3, #16
	mov	r5, #4
	mov	r1, #1
	b	.L11107
.L11136:
	.align	2
.L11135:
	.word	.LANCHOR0-(.LPIC2603+8)
	.word	.LANCHOR2-(.LPIC2605+8)
	.word	.LANCHOR2-(.LPIC2616+8)
	.word	.LANCHOR2-(.LPIC2617+8)
	.word	.LC566-(.LPIC2627+8)
	.fnend
	.size	f_midi_bind, .-f_midi_bind
	.align	2
	.type	android_bind, %function
android_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L11249
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	ldr	r1, .L11249+4
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC2628:
	add	r3, pc, r3
	str	lr, [sp, #32]
	ldr	r7, [r0]
	ldr	r4, [r3, #20]
.LPIC2630:
	add	r1, pc, r1
	.pad #20
	sub	sp, sp, #20
	ldr	r0, .L11249+8
	add	r1, r1, #3984
	add	r1, r1, #8
	str	r5, [r4, #-512]
.LPIC2629:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [r7]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L11138
	mov	r0, r7
	mov	r1, #0
	blx	r3
.L11138:
	ldr	r3, .L11249+12
.LPIC2631:
	add	r3, pc, r3
	ldr	r3, [r3, #-636]
	cmp	r3, #1
	beq	.L11139
.L11146:
	mov	r0, r5
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L11238
	ldr	r4, .L11249+16
	uxtb	r3, r0
	mov	r0, r5
	ldr	r6, .L11249+20
.LPIC2648:
	add	r4, pc, r4
.LPIC2649:
	add	r6, pc, r6
	strb	r3, [r4, #2032]
	strb	r3, [r6, #406]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L11238
	ldr	r9, .L11249+24
	uxtb	r3, r0
	mov	r2, #255
	ldr	r8, .L11249+28
	strb	r3, [r4, #2040]
.LPIC2652:
	add	r9, pc, r9
	strb	r3, [r6, #407]
.LPIC2653:
	add	r8, pc, r8
	sub	r0, r9, #928
	mov	r1, r8
	bl	strlcpy(PLT)
	mov	r1, r8
	mov	r2, #255
	sub	r0, r9, #1184
	bl	strlcpy(PLT)
	ldr	r0, .L11249+32
	mov	r2, #255
	ldr	r1, .L11249+36
.LPIC2656:
	add	r0, pc, r0
.LPIC2657:
	add	r1, pc, r1
	add	r0, r0, #28
	bl	strlcpy(PLT)
	mov	r0, r5
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L11238
	uxtb	r3, r0
	ldr	r5, [r7, #28]
	ldr	r0, .L11249+40
	strb	r3, [r4, #2048]
	mov	r1, r5
	strb	r3, [r6, #408]
.LPIC2660:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L11242
	movw	r2, #513
.L11167:
	ldr	r3, .L11249+44
.LPIC2688:
	add	r3, pc, r3
	add	r3, r3, #392
	strh	r2, [r3, #12]	@ movhi
.L11169:
	ldr	r3, .L11249+48
	mov	r2, #4
	mov	r0, #0
.LPIC2687:
	add	r3, pc, r3
	str	r2, [r3, #3632]
.L11238:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11139:
	ldr	r2, .L11249+52
	ldr	fp, [r4, #-516]
.LPIC2632:
	add	r2, pc, r2
	ldr	r3, [r2, #16]!
	cmp	r3, r2
	sub	r6, r3, #520
	bne	.L11145
	b	.L11142
.L11243:
	ldr	r3, [r6, #520]
	cmp	r3, r2
	sub	r6, r3, #520
	beq	.L11142
.L11145:
	ldr	r3, [r3, #-512]
	cmp	r5, r3
	bne	.L11243
.L11142:
	ldr	r10, [fp]
	cmp	r10, #0
	beq	.L11146
	ldr	r3, .L11249+56
	mov	r8, #1
.LPIC2635:
	add	r3, pc, r3
	str	r3, [sp, #8]
	ldr	r3, .L11249+60
.LPIC2636:
	add	r3, pc, r3
	str	r3, [sp, #12]
.L11159:
	mov	r0, #208
	ldr	r1, [sp, #8]
	mov	r9, #0
	ldr	r2, [r10]
	bl	kasprintf(PLT)
	cmp	r0, #0
	str	r0, [r10, #12]
	str	r9, [r10, #20]
	beq	.L11171
	ldr	r3, [sp, #12]
	mov	r2, r8
	ldr	r1, [r6, #12]
	ldr	lr, [r3, #3552]
	str	r0, [sp]
	mov	r3, r10
	mov	r0, lr
	bl	device_create(PLT)
	cmn	r0, #4096
	str	r0, [r10, #8]
	bhi	.L11244
	ldr	r3, [r10, #24]
	cmp	r3, #0
	beq	.L11150
	mov	r0, r10
	mov	r1, r5
	blx	r3
	subs	r4, r0, #0
	bne	.L11245
.L11150:
	ldr	r9, [r10, #16]
	cmp	r9, #0
	beq	.L11152
	ldr	r1, [r9]
	add	r9, r9, #4
	cmp	r1, #0
	bne	.L11154
	b	.L11152
.L11246:
	cmp	r0, #0
	bne	.L11157
.L11154:
	ldr	r0, [r10, #8]
	bl	device_create_file(PLT)
	ldr	r1, [r9], #4
	mov	r4, r0
	cmp	r1, #0
	bne	.L11246
	cmp	r0, #0
	bne	.L11157
.L11152:
	add	r8, r8, #1
	add	r3, fp, r8, asl #2
	ldr	r10, [r3, #-4]
	cmp	r10, #0
	bne	.L11159
	b	.L11146
.L11157:
	ldr	r1, .L11249+64
	sub	r8, r9, #8
	ldr	r0, .L11249+68
	ldr	r3, [r10]
.LPIC2644:
	add	r1, pc, r1
	add	r1, r1, #4000
.LPIC2643:
	add	r0, pc, r0
	add	r1, r1, #8
	mov	r2, r1
	bl	printk(PLT)
	ldr	r3, [r10, #16]
	ldr	r1, [r9, #-8]
	cmp	r8, r3
	beq	.L11156
.L11160:
	ldr	r0, [r10, #8]
	bl	device_remove_file(PLT)
	ldr	r1, [r8], #-4
	ldr	r3, [r10, #16]
	cmp	r8, r3
	bne	.L11160
.L11156:
	ldr	r3, [r10, #28]
	cmp	r3, #0
	beq	.L11151
	mov	r0, r10
	blx	r3
.L11151:
	ldr	r3, .L11249+72
	ldr	r2, [r10, #8]
.LPIC2646:
	add	r3, pc, r3
	ldr	r0, [r3, #3552]
	ldr	r1, [r2, #288]
	bl	device_destroy(PLT)
.L11149:
	mov	r3, #0
	ldr	r0, [r10, #12]
	str	r3, [r10, #8]
	bl	kfree(PLT)
.L11147:
	ldr	r9, [r6, #4]
	ldr	r10, .L11249+76
	sub	r9, r9, #4
.LPIC2647:
	add	r10, pc, r10
.L11161:
	ldr	r8, [r9, #4]!
	cmp	r8, #0
	beq	.L11247
.L11166:
	ldr	r3, [r8, #8]
	cmp	r3, #0
	beq	.L11161
	ldr	r1, [r3, #288]
	ldr	r0, [r10, #3552]
	bl	device_destroy(PLT)
	ldr	r0, [r8, #12]
	bl	kfree(PLT)
	ldr	r3, [r8, #28]
	cmp	r3, #0
	beq	.L11163
	mov	r0, r8
	blx	r3
.L11163:
	ldr	r6, [r8, #16]
	cmp	r6, #0
	beq	.L11161
	ldr	r1, [r6]
	add	r6, r6, #4
	cmp	r1, #0
	beq	.L11161
.L11165:
	ldr	r0, [r8, #8]
	bl	device_remove_file(PLT)
	ldr	r1, [r6], #4
	cmp	r1, #0
	bne	.L11165
	ldr	r8, [r9, #4]!
	cmp	r8, #0
	bne	.L11166
.L11247:
	cmp	r4, #0
	beq	.L11146
	mov	r0, r4
	b	.L11238
.L11242:
	ldr	r0, .L11249+80
	mov	r1, r5
.LPIC2661:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11177
	ldr	r0, .L11249+84
	mov	r1, r5
.LPIC2662:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11178
	ldr	r0, .L11249+88
	mov	r1, r5
.LPIC2663:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11179
	ldr	r0, .L11249+92
	mov	r1, r5
.LPIC2664:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11180
	ldr	r0, .L11249+96
	mov	r1, r5
.LPIC2665:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11181
	ldr	r0, .L11249+100
	mov	r1, r5
.LPIC2666:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11182
	ldr	r0, .L11249+104
	mov	r1, r5
.LPIC2667:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11183
	ldr	r0, .L11249+108
	mov	r1, r5
.LPIC2668:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11184
	ldr	r0, .L11249+112
	mov	r1, r5
.LPIC2669:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11185
	ldr	r0, .L11249+116
	mov	r1, r5
.LPIC2670:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11186
	ldr	r0, .L11249+120
	mov	r1, r5
.LPIC2671:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11187
	ldr	r0, .L11249+124
	mov	r1, r5
.LPIC2672:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11188
	ldr	r0, .L11249+128
	mov	r1, r5
.LPIC2673:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11189
	ldr	r0, .L11249+132
	mov	r1, r5
.LPIC2674:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11190
	ldr	r0, .L11249+136
	mov	r1, r5
.LPIC2675:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11191
	ldr	r0, .L11249+140
	mov	r1, r5
.LPIC2676:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11192
	ldr	r0, .L11249+144
	mov	r1, r5
.LPIC2677:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11193
	ldr	r0, .L11249+148
	mov	r1, r5
.LPIC2678:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11194
	ldr	r0, .L11249+152
	mov	r1, r5
.LPIC2679:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11195
	ldr	r0, .L11249+156
	mov	r1, r5
.LPIC2680:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11196
	ldr	r0, .L11249+160
	mov	r1, r5
.LPIC2681:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11197
	ldr	r0, .L11249+164
	mov	r1, r5
.LPIC2682:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11198
	ldr	r0, .L11249+168
	mov	r1, r5
.LPIC2683:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11199
	ldr	r0, .L11249+172
	mov	r1, r5
.LPIC2684:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11200
	ldr	r0, .L11249+176
	mov	r1, r5
.LPIC2685:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L11201
	ldr	r0, .L11249+180
	mov	r1, r5
.LPIC2686:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L11248
	mov	r2, #564
	b	.L11167
.L11177:
	movw	r2, #514
	b	.L11167
.L11244:
	ldr	r1, .L11249+184
	ldr	r0, .L11249+188
	ldr	r3, [r10, #12]
.LPIC2638:
	add	r1, pc, r1
	add	r1, r1, #4000
.LPIC2637:
	add	r0, pc, r0
	add	r1, r1, #8
	mov	r2, r1
	bl	printk(PLT)
	ldr	r4, [r10, #8]
	str	r9, [r10, #8]
	b	.L11149
.L11178:
	movw	r2, #515
	b	.L11167
.L11179:
	movw	r2, #518
	b	.L11167
.L11171:
	mvn	r4, #11
	b	.L11147
.L11180:
	mov	r2, #520
	b	.L11167
.L11181:
	movw	r2, #529
	b	.L11167
.L11182:
	movw	r2, #530
	b	.L11167
.L11184:
	mov	r2, #532
	b	.L11167
.L11183:
	movw	r2, #531
	b	.L11167
.L11245:
	ldr	r1, .L11249+192
	ldr	r0, .L11249+196
	ldr	r3, [r10]
.LPIC2641:
	add	r1, pc, r1
	add	r1, r1, #4000
.LPIC2640:
	add	r0, pc, r0
	add	r1, r1, #8
	mov	r2, r1
	bl	printk(PLT)
	b	.L11151
.L11248:
	ldr	r2, .L11249+200
	mov	r3, r5
	ldr	r0, .L11249+204
.LPIC2690:
	add	r2, pc, r2
	add	r1, r2, #3984
.LPIC2689:
	add	r0, pc, r0
	add	r2, r2, #4032
	add	r1, r1, #8
	bl	printk(PLT)
	ldr	r3, .L11249+208
	movw	r2, #39321
	movt	r2, 65535
.LPIC2692:
	add	r3, pc, r3
	add	r3, r3, #392
	strh	r2, [r3, #12]	@ movhi
	b	.L11169
.L11201:
	movw	r2, #563
	b	.L11167
.L11200:
	movw	r2, #562
	b	.L11167
.L11199:
	movw	r2, #561
	b	.L11167
.L11198:
	mov	r2, #560
	b	.L11167
.L11197:
	movw	r2, #553
	b	.L11167
.L11196:
	mov	r2, #552
	b	.L11167
.L11195:
	movw	r2, #551
	b	.L11167
.L11194:
	movw	r2, #550
	b	.L11167
.L11193:
	movw	r2, #549
	b	.L11167
.L11192:
	mov	r2, #548
	b	.L11167
.L11191:
	movw	r2, #547
	b	.L11167
.L11190:
	movw	r2, #546
	b	.L11167
.L11189:
	movw	r2, #545
	b	.L11167
.L11188:
	mov	r2, #544
	b	.L11167
.L11187:
	movw	r2, #537
	b	.L11167
.L11186:
	mov	r2, #536
	b	.L11167
.L11185:
	movw	r2, #534
	b	.L11167
.L11250:
	.align	2
.L11249:
	.word	.LANCHOR1-(.LPIC2628+8)
	.word	.LANCHOR3-(.LPIC2630+8)
	.word	.LC604-(.LPIC2629+8)
	.word	.LANCHOR4-(.LPIC2631+8)
	.word	.LANCHOR0-(.LPIC2648+8)
	.word	.LANCHOR2-(.LPIC2649+8)
	.word	.LANCHOR4-(.LPIC2652+8)
	.word	.LC609-(.LPIC2653+8)
	.word	.LANCHOR1-(.LPIC2656+8)
	.word	.LC610-(.LPIC2657+8)
	.word	.LC450-(.LPIC2660+8)
	.word	.LANCHOR2-(.LPIC2688+8)
	.word	.LANCHOR4-(.LPIC2687+8)
	.word	.LANCHOR1-(.LPIC2632+8)
	.word	.LC605-(.LPIC2635+8)
	.word	.LANCHOR4-(.LPIC2636+8)
	.word	.LANCHOR3-(.LPIC2644+8)
	.word	.LC608-(.LPIC2643+8)
	.word	.LANCHOR4-(.LPIC2646+8)
	.word	.LANCHOR4-(.LPIC2647+8)
	.word	.LC451-(.LPIC2661+8)
	.word	.LC309-(.LPIC2662+8)
	.word	.LC452-(.LPIC2663+8)
	.word	.LC453-(.LPIC2664+8)
	.word	.LC454-(.LPIC2665+8)
	.word	.LC455-(.LPIC2666+8)
	.word	.LC456-(.LPIC2667+8)
	.word	.LC457-(.LPIC2668+8)
	.word	.LC458-(.LPIC2669+8)
	.word	.LC459-(.LPIC2670+8)
	.word	.LC460-(.LPIC2671+8)
	.word	.LC461-(.LPIC2672+8)
	.word	.LC462-(.LPIC2673+8)
	.word	.LC463-(.LPIC2674+8)
	.word	.LC464-(.LPIC2675+8)
	.word	.LC465-(.LPIC2676+8)
	.word	.LC466-(.LPIC2677+8)
	.word	.LC467-(.LPIC2678+8)
	.word	.LC468-(.LPIC2679+8)
	.word	.LC469-(.LPIC2680+8)
	.word	.LC470-(.LPIC2681+8)
	.word	.LC471-(.LPIC2682+8)
	.word	.LC472-(.LPIC2683+8)
	.word	.LC367-(.LPIC2684+8)
	.word	.LC473-(.LPIC2685+8)
	.word	.LC474-(.LPIC2686+8)
	.word	.LANCHOR3-(.LPIC2638+8)
	.word	.LC606-(.LPIC2637+8)
	.word	.LANCHOR3-(.LPIC2641+8)
	.word	.LC607-(.LPIC2640+8)
	.word	.LANCHOR3-(.LPIC2690+8)
	.word	.LC611-(.LPIC2689+8)
	.word	.LANCHOR2-(.LPIC2692+8)
	.fnend
	.size	android_bind, .-android_bind
	.align	2
	.type	accessory_function_bind_config, %function
accessory_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r3, .L11257
	mov	r5, r1
	str	r6, [sp, #8]
	ldr	r0, .L11257+4
	ldr	r6, .L11257+8
	str	lr, [sp, #12]
.LPIC2693:
	add	r3, pc, r3
.LPIC2694:
	add	r0, pc, r0
	ldr	r4, [r3, #2496]
.LPIC2695:
	add	r6, pc, r6
	bl	printk(PLT)
	ldrb	r3, [r6, #2064]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11256
.L11252:
	ldr	r3, .L11257+12
	ldr	ip, [r5, #24]
	ldr	r0, .L11257+16
.LPIC2699:
	add	r3, pc, r3
	add	r1, r3, #2080
	add	r2, r3, #2096
	str	ip, [r4, #84]
	add	r2, r2, #8
.LPIC2698:
	add	r0, pc, r0
	add	r1, r1, #8
	add	ip, r3, #2080
	str	r0, [r4]
	str	r1, [r4, #16]
	str	r2, [r4, #8]
	str	ip, [r4, #4]
	ldr	r2, [r5, #24]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L11254
	add	r3, r3, #2112
	add	r3, r3, #8
	str	r3, [r4, #12]
.L11254:
	ldr	ip, .L11257+20
	mov	r0, r5
	mov	r1, r4
	ldr	r2, .L11257+24
	ldr	r3, .L11257+28
	ldr	r5, .L11257+32
.LPIC2703:
	add	ip, pc, ip
.LPIC2704:
	add	r2, pc, r2
.LPIC2705:
	add	r3, pc, r3
	str	ip, [r4, #32]
.LPIC2706:
	add	r5, pc, r5
	strd	r2, [r4, #36]
	str	r5, [r4, #48]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_add_function(PLT)
.L11256:
	ldr	r0, [r5, #24]
	bl	usb_string_id(PLT)
	subs	r3, r0, #0
	blt	.L11253
	ldr	r2, .L11257+36
	uxtb	r3, r3
	strb	r3, [r6, #2064]
.LPIC2697:
	add	r2, pc, r2
	strb	r3, [r2, #1692]
	b	.L11252
.L11253:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11258:
	.align	2
.L11257:
	.word	.LANCHOR1-(.LPIC2693+8)
	.word	.LC612-(.LPIC2694+8)
	.word	.LANCHOR0-(.LPIC2695+8)
	.word	.LANCHOR0-(.LPIC2699+8)
	.word	.LC613-(.LPIC2698+8)
	.word	acc_function_bind-(.LPIC2703+8)
	.word	acc_function_unbind-(.LPIC2704+8)
	.word	acc_function_set_alt-(.LPIC2705+8)
	.word	acc_function_disable-(.LPIC2706+8)
	.word	.LANCHOR2-(.LPIC2697+8)
	.fnend
	.size	accessory_function_bind_config, .-accessory_function_bind_config
	.align	2
	.type	mass_storage_function_bind_config, %function
mass_storage_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L11275
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r0, #4]
	ldr	r0, [r1, #24]
.LPIC2707:
	add	r4, pc, r4
	ldrb	r3, [r4, #2144]	@ zero_extendqisi2
	ldr	r6, [r2, #96]
	cmp	r3, #0
	beq	.L11271
.L11260:
	ldr	r3, .L11275+4
.LPIC2721:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L11265
	movw	r1, #32976
	mov	r2, #108
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L11272
.L11262:
	ldr	r2, .L11275+8
	str	r6, [r4, #88]
	mov	r0, r5
	ldr	r3, .L11275+12
	mov	r1, r4
	ldr	r6, .L11275+16
	ldr	r5, .L11275+20
.LPIC2711:
	add	r2, pc, r2
	ldr	lr, .L11275+24
	ldr	ip, .L11275+28
.LPIC2712:
	add	r3, pc, r3
	str	r2, [r4]
	ldr	r2, .L11275+32
	add	r3, r3, #2160
.LPIC2714:
	add	r5, pc, r5
.LPIC2713:
	add	r6, pc, r6
.LPIC2715:
	add	lr, pc, lr
	str	r3, [r4, #4]
.LPIC2716:
	add	ip, pc, ip
	str	r5, [r4, #36]
.LPIC2717:
	add	r2, pc, r2
	str	r6, [r4, #32]
	str	lr, [r4, #52]
	str	ip, [r4, #40]
	str	r2, [r4, #48]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	bne	.L11273
	ldr	r3, [r4, #88]
	add	r2, r3, #336
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r1, #1
	ble	.L11274
.L11268:
	mov	r0, r5
.L11261:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11265:
	mov	r4, #16
	b	.L11262
.L11271:
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L11261
	ldr	r3, .L11275+36
	uxtb	r0, r0
	strb	r0, [r4, #2144]
.LPIC2709:
	add	r3, pc, r3
	strb	r0, [r3, #1776]
	b	.L11260
.L11272:
	mvn	r0, #11
	b	.L11261
.L11273:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
	b	.L11261
.L11274:
	ldr	r4, .L11275+40
.LPIC2718:
	add	r4, pc, r4
	ldrb	r6, [r4]	@ zero_extendqisi2
	cmp	r6, #0
	bne	.L11268
	ldr	r0, .L11275+44
	mov	r1, #47
.LPIC2719:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	mov	r3, #1
	mov	r0, r6
	strb	r3, [r4]
	b	.L11261
.L11276:
	.align	2
.L11275:
	.word	.LANCHOR0-(.LPIC2707+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2721+8))
	.word	.LC614-(.LPIC2711+8)
	.word	.LANCHOR0-(.LPIC2712+8)
	.word	fsg_bind-(.LPIC2713+8)
	.word	fsg_unbind-(.LPIC2714+8)
	.word	fsg_setup-(.LPIC2715+8)
	.word	fsg_set_alt-(.LPIC2716+8)
	.word	fsg_disable-(.LPIC2717+8)
	.word	.LANCHOR2-(.LPIC2709+8)
	.word	.LANCHOR8-(.LPIC2718+8)
	.word	.LC523-(.LPIC2719+8)
	.fnend
	.size	mass_storage_function_bind_config, .-mass_storage_function_bind_config
	.align	2
	.type	ptp_function_bind_config, %function
ptp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r3, .L11283
	mov	r5, r1
	str	r6, [sp, #8]
	ldr	r0, .L11283+4
	ldr	r6, .L11283+8
	str	lr, [sp, #12]
.LPIC2722:
	add	r3, pc, r3
.LPIC2723:
	add	r0, pc, r0
	ldr	r4, [r3, #2504]
.LPIC2724:
	add	r6, pc, r6
	bl	printk(PLT)
	ldrb	r3, [r6, #2168]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11282
.L11278:
	ldr	r3, .L11283+12
	ldr	ip, [r5, #24]
	ldr	r0, .L11283+16
.LPIC2728:
	add	r3, pc, r3
	add	r1, r3, #2176
	add	r2, r3, #2208
	str	ip, [r4, #84]
	add	r2, r2, #4
.LPIC2727:
	add	r0, pc, r0
	add	r1, r1, #8
	add	ip, r3, #2192
	str	r2, [r4, #8]
	strd	r0, [r4]
	str	ip, [r4, #16]
	ldr	r2, [r5, #24]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L11280
	add	r3, r3, #2224
	add	r3, r3, #8
	str	r3, [r4, #12]
.L11280:
	ldr	ip, .L11283+20
	mov	r0, r5
	mov	r1, r4
	ldr	r2, .L11283+24
	ldr	r3, .L11283+28
	ldr	r5, .L11283+32
.LPIC2732:
	add	ip, pc, ip
.LPIC2733:
	add	r2, pc, r2
.LPIC2734:
	add	r3, pc, r3
	str	ip, [r4, #32]
.LPIC2735:
	add	r5, pc, r5
	strd	r2, [r4, #36]
	str	r5, [r4, #48]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_add_function(PLT)
.L11282:
	ldr	r0, [r5, #24]
	bl	usb_string_id(PLT)
	subs	r3, r0, #0
	blt	.L11279
	ldr	r2, .L11283+36
	uxtb	r3, r3
	strb	r3, [r6, #2168]
.LPIC2726:
	add	r2, pc, r2
	strb	r3, [r2, #1876]
	b	.L11278
.L11279:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11284:
	.align	2
.L11283:
	.word	.LANCHOR1-(.LPIC2722+8)
	.word	.LC615-(.LPIC2723+8)
	.word	.LANCHOR0-(.LPIC2724+8)
	.word	.LANCHOR0-(.LPIC2728+8)
	.word	.LC616-(.LPIC2727+8)
	.word	mtp_function_bind-(.LPIC2732+8)
	.word	mtp_function_unbind-(.LPIC2733+8)
	.word	mtp_function_set_alt-(.LPIC2734+8)
	.word	mtp_function_disable-(.LPIC2735+8)
	.word	.LANCHOR2-(.LPIC2726+8)
	.fnend
	.size	ptp_function_bind_config, .-ptp_function_bind_config
	.align	2
	.type	qdss_function_bind_config, %function
qdss_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r4, .L11310
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC2736:
	add	r4, pc, r4
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldrb	r3, [r4, #2264]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L11286
	ldr	r0, [r1, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L11297
	ldr	r5, .L11310+4
	uxtb	r8, r0
	ldr	r0, [r6, #24]
	strb	r8, [r4, #2264]
.LPIC2738:
	add	r5, pc, r5
	strb	r8, [r5, #2044]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L11297
	uxtb	r0, r0
	strb	r0, [r4, #2272]
	strb	r0, [r5, #2056]
.L11286:
	ldr	r0, .L11310+8
.LPIC2741:
	add	r0, pc, r0
	sub	r0, r0, #1488
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L11310+12
	mov	r7, r0
.LPIC2742:
	add	r3, pc, r3
	ldr	r4, [r3, #24]!
	cmp	r4, r3
	sub	r4, r4, #4
	beq	.L11288
	ldr	r5, .L11310+16
	ldr	r8, .L11310+20
.LPIC2745:
	add	r5, pc, r5
.LPIC2744:
	add	r8, pc, r8
	add	r5, r5, #24
	b	.L11290
.L11305:
	ldr	r4, [r4, #4]
	cmp	r4, r5
	sub	r4, r4, #4
	beq	.L11288
.L11290:
	mov	r0, r8
	ldr	r1, [r4]
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L11305
	sub	r5, r4, #112
	str	r5, [r4, #20]
.L11295:
	ldr	r0, .L11310+24
	mov	r1, r7
	mov	r10, #65024
	movt	r10, 65535
	ldr	fp, .L11310+28
	add	r8, r5, #160
	add	r9, r5, #148
	mov	r7, #0
.LPIC2755:
	add	r0, pc, r0
	sub	r0, r0, #1488
.LPIC2760:
	add	fp, pc, fp
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L11310+32
	mov	r0, r6
	add	lr, r5, #176
	ldr	r2, [r6, #24]
	str	r10, [r5, #156]
	str	r10, [r5, #172]
	ldr	r1, .L11310+36
	ldr	ip, .L11310+40
	str	r8, [r5, #160]
.LPIC2757:
	add	r3, pc, r3
	ldr	r10, .L11310+44
	str	r8, [r5, #164]
	add	r6, r3, #1840
	str	r2, [r5, #84]
	add	r3, r3, #2288
	add	r6, r6, #12
	ldr	r2, .L11310+48
.LPIC2756:
	add	r1, pc, r1
	str	r3, [r5, #4]
	ldr	r3, .L11310+52
.LPIC2762:
	add	ip, pc, ip
	str	r6, [r5, #16]
.LPIC2761:
	add	r10, pc, r10
	str	r6, [r5, #8]
	ldr	r6, .L11310+56
.LPIC2763:
	add	r2, pc, r2
	str	r1, [r5]
	mov	r1, r5
.LPIC2764:
	add	r3, pc, r3
	str	fp, [r5, #32]
	str	r2, [r5, #48]
	add	r2, r5, #140
.LPIC2765:
	add	r6, pc, r6
	str	r10, [r5, #36]
	str	ip, [r5, #40]
	str	r3, [r5, #168]
	strd	r6, [r5, #184]
	str	r2, [r5, #140]
	str	r2, [r5, #144]
	str	r9, [r5, #148]
	str	r9, [r5, #152]
	str	lr, [r5, #176]
	str	lr, [r5, #180]
	bl	usb_add_function(PLT)
	subs	r8, r0, #0
	bne	.L11306
.L11302:
	mov	r0, r8
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L11297:
	mov	r8, r0
.L11287:
	ldr	r1, .L11310+60
	ldr	r0, .L11310+64
.LPIC2769:
	add	r1, pc, r1
	add	r1, r1, #4048
.LPIC2768:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L11302
.L11288:
	ldr	r3, .L11310+68
.LPIC2770:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L11307
	movw	r1, #32800
	mov	r2, #200
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L11308
.L11291:
	ldr	r4, .L11310+72
	mov	r1, r7
	ldr	r8, .L11310+76
.LPIC2748:
	add	r4, pc, r4
	sub	r4, r4, #1488
.LPIC2750:
	add	r8, pc, r8
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L11310+80
	mov	r2, #0
	mov	r1, #10
	mov	r3, r2
	str	r8, [sp, #4]
	movt	r1, 2
	str	r2, [sp]
	mov	r2, #1
.LPIC2749:
	add	r0, pc, r0
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, #0
	str	r0, [r5, #196]
	beq	.L11309
	mov	r0, r4
	add	r4, r5, #112
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, .L11310+84
	mov	r7, r0
	str	r8, [r5, #112]
	add	r0, r5, #116
.LPIC2753:
	add	r2, pc, r2
	ldr	r1, [r2, #28]
	add	r2, r2, #24
	bl	__list_add(PLT)
	b	.L11295
.L11307:
	mov	r5, #16
	b	.L11291
.L11309:
	mov	r0, r5
	mvn	r8, #11
	bl	kfree(PLT)
	b	.L11287
.L11308:
	ldr	r0, .L11310+88
	mvn	r8, #11
.LPIC2746:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L11310+92
	mov	r1, r7
.LPIC2747:
	add	r0, pc, r0
	sub	r0, r0, #1488
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L11287
.L11306:
	ldr	r0, .L11310+96
.LPIC2766:
	add	r0, pc, r0
	bl	printk(PLT)
	str	r7, [r4, #20]
	mov	r0, r5
	bl	kfree(PLT)
	b	.L11287
.L11311:
	.align	2
.L11310:
	.word	.LANCHOR0-(.LPIC2736+8)
	.word	.LANCHOR2-(.LPIC2738+8)
	.word	.LANCHOR4-(.LPIC2741+8)
	.word	.LANCHOR0-(.LPIC2742+8)
	.word	.LANCHOR0-(.LPIC2745+8)
	.word	.LC617-(.LPIC2744+8)
	.word	.LANCHOR4-(.LPIC2755+8)
	.word	qdss_bind-(.LPIC2760+8)
	.word	.LANCHOR0-(.LPIC2757+8)
	.word	.LC617-(.LPIC2756+8)
	.word	qdss_set_alt-(.LPIC2762+8)
	.word	qdss_unbind-(.LPIC2761+8)
	.word	qdss_disable-(.LPIC2763+8)
	.word	usb_qdss_connect_work-(.LPIC2764+8)
	.word	usb_qdss_disconnect_work-(.LPIC2765+8)
	.word	.LANCHOR3-(.LPIC2769+8)
	.word	.LC620-(.LPIC2768+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2770+8))
	.word	.LANCHOR4-(.LPIC2748+8)
	.word	.LC617-(.LPIC2750+8)
	.word	.LC195-(.LPIC2749+8)
	.word	.LANCHOR0-(.LPIC2753+8)
	.word	.LC618-(.LPIC2746+8)
	.word	.LANCHOR4-(.LPIC2747+8)
	.word	.LC619-(.LPIC2766+8)
	.fnend
	.size	qdss_function_bind_config, .-qdss_function_bind_config
	.align	2
	.type	mtp_function_bind_config, %function
mtp_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r3, .L11318
	mov	r5, r1
	str	r6, [sp, #8]
	ldr	r0, .L11318+4
	ldr	r6, .L11318+8
	str	lr, [sp, #12]
.LPIC2771:
	add	r3, pc, r3
.LPIC2772:
	add	r0, pc, r0
	ldr	r4, [r3, #2504]
.LPIC2773:
	add	r6, pc, r6
	bl	printk(PLT)
	ldrb	r3, [r6, #2168]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11317
.L11313:
	ldr	r3, .L11318+12
	ldr	ip, .L11318+16
	ldr	lr, [r5, #24]
.LPIC2777:
	add	r3, pc, r3
	add	r0, r3, #2176
	add	r1, r3, #2288
	add	r2, r3, #2304
.LPIC2776:
	add	ip, pc, ip
	str	lr, [r4, #84]
	add	r0, r0, #8
	add	r1, r1, #8
	add	r2, r2, #12
	str	ip, [r4]
	ldr	ip, .L11318+20
	str	r0, [r4, #4]
	mov	r0, r5
	str	r1, [r4, #16]
	mov	r1, r4
	str	r2, [r4, #8]
	ldr	r2, [r5, #24]
	ldr	r5, .L11318+24
.LPIC2781:
	add	ip, pc, ip
	ldr	r2, [r2]
.LPIC2784:
	add	r5, pc, r5
	ldr	r2, [r2, #20]
	str	ip, [r4, #32]
	str	r5, [r4, #48]
	cmp	r2, #4
	ldr	r2, .L11318+28
	addhi	r3, r3, #2336
	strhi	r3, [r4, #12]
	ldr	r3, .L11318+32
.LPIC2782:
	add	r2, pc, r2
.LPIC2783:
	add	r3, pc, r3
	strd	r2, [r4, #36]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	usb_add_function(PLT)
.L11317:
	ldr	r0, [r5, #24]
	bl	usb_string_id(PLT)
	subs	r3, r0, #0
	blt	.L11314
	ldr	r2, .L11318+36
	uxtb	r3, r3
	strb	r3, [r6, #2168]
.LPIC2775:
	add	r2, pc, r2
	strb	r3, [r2, #1876]
	b	.L11313
.L11314:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11319:
	.align	2
.L11318:
	.word	.LANCHOR1-(.LPIC2771+8)
	.word	.LC615-(.LPIC2772+8)
	.word	.LANCHOR0-(.LPIC2773+8)
	.word	.LANCHOR0-(.LPIC2777+8)
	.word	.LC616-(.LPIC2776+8)
	.word	mtp_function_bind-(.LPIC2781+8)
	.word	mtp_function_disable-(.LPIC2784+8)
	.word	mtp_function_unbind-(.LPIC2782+8)
	.word	mtp_function_set_alt-(.LPIC2783+8)
	.word	.LANCHOR2-(.LPIC2775+8)
	.fnend
	.size	mtp_function_bind_config, .-mtp_function_bind_config
	.align	2
	.global	usb_string_ids_tab
	.type	usb_string_ids_tab, %function
usb_string_ids_tab:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r1, #4]
	ldrb	r2, [r0, #48]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L11322
	cmp	r2, #253
	bgt	.L11323
	add	r3, r2, #1
	add	r1, r1, #8
.L11324:
	ldr	ip, [r1, #4]
	uxtb	r2, r3
	add	r1, r1, #8
	add	r3, r3, #1
	strb	r2, [r1, #-16]
	cmp	ip, #0
	beq	.L11322
	cmp	r3, #255
	bne	.L11324
.L11323:
	mvn	r3, #18
	mov	r0, r3
	bx	lr
.L11322:
	mov	r3, #0
	strb	r2, [r0, #48]
	mov	r0, r3
	bx	lr
	.fnend
	.size	usb_string_ids_tab, .-usb_string_ids_tab
	.align	2
	.global	usb_string_ids_n
	.type	usb_string_ids_n, %function
usb_string_ids_n:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #254
	ldrb	r3, [r0, #48]	@ zero_extendqisi2
	bhi	.L11334
	add	r1, r1, r3
	cmp	r1, #254
	bhi	.L11334
	strb	r1, [r0, #48]
	add	r0, r3, #1
	bx	lr
.L11334:
	mvn	r0, #18
	bx	lr
	.fnend
	.size	usb_string_ids_n, .-usb_string_ids_n
	.align	2
	.global	usb_composite_probe
	.type	usb_composite_probe, %function
usb_composite_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L11340
	ldr	r3, [r0, #12]
	cmp	r3, #0
	cmpne	r1, #0
	beq	.L11340
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0]
	cmp	r4, #0
	beq	.L11344
.L11337:
	ldr	r3, [r0, #4]
	mov	r2, r1
	ldr	ip, .L11345
	ldr	r5, .L11345+4
	ldr	lr, .L11345+8
	cmp	r3, #0
	mov	r3, r0
	ldr	r1, .L11345+12
.LPIC2787:
	add	ip, pc, ip
	streq	r4, [r0, #4]
.LPIC2790:
	add	r5, pc, r5
	str	r4, [ip, #572]
	ldr	r4, [r0]
.LPIC2791:
	add	lr, pc, lr
	str	r3, [r5, #24]
.LPIC2793:
	add	r1, pc, r1
	add	r0, ip, #572
	str	r2, [lr, #3620]
	str	r4, [ip, #600]
	ldr	r3, [r3, #20]
	str	r3, [ip, #576]
	bl	usb_gadget_probe_driver(PLT)
	cmp	r0, #0
	movne	r3, #0
	strne	r3, [r5, #24]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L11344:
	ldr	r3, .L11345+16
.LPIC2786:
	add	r3, pc, r3
	mov	r4, r3
	str	r3, [r0]
	b	.L11337
.L11340:
	mvn	r0, #21
	bx	lr
.L11346:
	.align	2
.L11345:
	.word	.LANCHOR0-(.LPIC2787+8)
	.word	.LANCHOR1-(.LPIC2790+8)
	.word	.LANCHOR4-(.LPIC2791+8)
	.word	composite_bind-(.LPIC2793+8)
	.word	.LC621-(.LPIC2786+8)
	.fnend
	.size	usb_composite_probe, .-usb_composite_probe
	.section	.devinit.text,"ax",%progbits
	.align	2
	.type	android_probe, %function
android_probe:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	stmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	.pad #44
	sub	sp, sp, #44
	ldr	r7, .L11400
	mov	r4, r0
	ldr	r3, .L11400+4
	ldr	r2, [r0, #292]
.LPIC2795:
	add	r7, pc, r7
	ldr	r3, [r7, r3]
	cmp	r2, #0
	ldr	r2, [r3]
	str	r3, [sp, #12]
	str	r2, [sp, #36]
	beq	.L11348
	add	r0, r0, #8
	mov	r1, #52
	mov	r2, #208
	bl	devm_kzalloc(PLT)
	subs	r5, r0, #0
	bne	.L11349
	ldr	r1, .L11400+8
	mvn	r8, #11
	ldr	r0, .L11400+12
.LPIC2797:
	add	r1, pc, r1
	add	r1, r1, #4064
.LPIC2796:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L11350
.L11349:
	ldr	r1, .L11400+16
	mov	r3, #1
	add	r2, r5, #4
	ldr	r0, [r4, #292]
	mov	r6, #0
.LPIC2798:
	add	r1, pc, r1
	bl	of_property_read_u32_array(PLT)
	ldr	r1, .L11400+20
	mov	r2, r6
	ldr	r0, [r4, #292]
.LPIC2799:
	add	r1, pc, r1
	bl	of_find_property(PLT)
	ldr	r1, .L11400+24
	subs	r0, r0, r6
	mov	r2, r6
	movne	r0, #1
	strb	r0, [r5, #9]
	ldr	r0, [r4, #292]
.LPIC2800:
	add	r1, pc, r1
	bl	of_find_property(PLT)
	ldr	r1, .L11400+28
	subs	r0, r0, r6
	mov	r2, r6
	movne	r0, #1
	mov	r3, r6
	strb	r0, [r5, #11]
	ldr	r0, [r4, #292]
.LPIC2801:
	add	r1, pc, r1
	str	r6, [sp]
	bl	of_property_read_string_helper(PLT)
	cmp	r0, #3
	mov	r8, r0
	bgt	.L11351
	ldr	fp, .L11400+32
	add	r10, r5, #12
	add	r9, sp, #20
.LPIC2804:
	add	fp, pc, fp
	b	.L11352
.L11351:
	ldr	r1, .L11400+36
	mvn	r8, #21
	ldr	r0, .L11400+40
.LPIC2803:
	add	r1, pc, r1
	add	r1, r1, #4064
.LPIC2802:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L11350
.L11355:
	mov	ip, #0
	str	r6, [sp]
	mov	r1, fp
	ldr	r0, [r4, #292]
	mov	r2, r9
	mov	r3, #1
	str	ip, [sp, #20]
	bl	of_property_read_string_helper(PLT)
	ldr	r1, [sp, #20]
	cmp	r1, #0
	beq	.L11354
	mov	r0, r10
	mov	r2, #10
	bl	strlcpy(PLT)
.L11354:
	add	r6, r6, #1
	add	r10, r10, #10
.L11352:
	cmp	r6, r8
	blt	.L11355
	str	r8, [r5, #44]
	b	.L11356
.L11348:
	ldr	r5, [r0, #88]
.L11356:
	ldr	r6, .L11400+44
.LPIC2805:
	add	r6, pc, r6
	ldr	r0, [r6, #3552]
	cmp	r0, #0
	bne	.L11357
	ldr	r1, .L11400+48
	add	r2, r6, #3632
	add	r2, r2, #4
.LPIC2806:
	add	r1, pc, r1
	bl	__class_create(PLT)
	cmn	r0, #4096
	str	r0, [r6, #3552]
	movhi	r8, r0
	bhi	.L11350
.L11357:
	ldr	r3, .L11400+52
	ldr	r3, [r7, r3]
	ldr	r0, [r3, #40]
	cmp	r0, #0
	beq	.L11378
	movw	r1, #32976
	mov	r2, #528
	bl	kmem_cache_alloc_trace(PLT)
	subs	r6, r0, #0
	bne	.L11358
	ldr	r1, .L11400+56
	mvn	r8, #11
	ldr	r0, .L11400+60
.LPIC2810:
	add	r1, pc, r1
	add	r1, r1, #4064
.LPIC2809:
	add	r0, pc, r0
	add	r1, r1, #12
	mov	r2, r1
	bl	printk(PLT)
	b	.L11359
.L11378:
	mov	r6, #16
.L11358:
	ldr	r2, .L11400+64
	mov	r1, #65024
	add	lr, r6, #456
	ldr	r3, .L11400+68
	mov	r8, #0
	movt	r1, 65535
	ldr	fp, [r4]
	add	r9, r6, #508
	mov	r0, #1
	ldr	ip, .L11400+72
	add	r10, r6, #184
	str	lr, [r6, #456]
.LPIC2812:
	add	r2, pc, r2
	str	lr, [r6, #460]
.LPIC2813:
	add	r3, pc, r3
	add	r2, r2, #76
	str	r1, [r6, #180]
	str	r1, [r6, #452]
	mov	r1, r8
	str	r2, [r6, #4]
	mov	r2, r8
	str	r3, [r6, #192]
	mov	r3, r8
	str	r0, [r6, #20]
	add	r0, r6, #468
	str	r8, [r6, #516]
	ldr	r8, .L11400+76
	str	r9, [r6, #508]
	str	r9, [r6, #512]
	add	r9, r6, #520
	str	fp, [r6]
	str	r10, [r6, #184]
.LPIC2815:
	add	r8, pc, r8
	str	r10, [r6, #188]
	ldr	ip, [r7, ip]
	str	ip, [r6, #464]
	bl	init_timer_key(PLT)
	ldr	ip, .L11400+80
	add	r3, r6, #452
	add	r2, r8, #3632
	ldr	r1, .L11400+84
	add	r2, r2, #4
	add	r0, r6, #24
	ldr	ip, [r7, ip]
	str	r3, [r6, #488]
.LPIC2814:
	add	r1, pc, r1
	str	ip, [r6, #484]
	bl	__mutex_init(PLT)
	ldr	r2, .L11400+88
	mov	r0, r9
	str	r5, [r6, #44]
.LPIC2816:
	add	r2, pc, r2
	ldr	r1, [r2, #20]
	add	r2, r2, #16
	bl	__list_add(PLT)
	ldr	r3, [r8, #-636]
	cmp	r5, #0
	mov	r0, r4
	ldrneb	ip, [r5, #8]	@ zero_extendqisi2
	moveq	ip, r5
	mov	r1, #512
	mov	r2, #0
	add	r3, r3, #1
	str	r3, [r8, #-636]
	ldr	r3, .L11400+92
.LPIC2820:
	add	r3, pc, r3
	strb	ip, [r3, #656]
	bl	platform_get_resource(PLT)
	cmp	r0, #0
	beq	.L11361
	ldr	r2, [r0, #4]
	add	r4, r4, #8
	ldr	r1, [r0]
	mov	r0, r4
	add	r2, r2, #1
	rsb	r2, r1, r2
	bl	devm_ioremap(PLT)
	ldr	r3, .L11400+96
	cmp	r0, #0
	ldr	r3, [r7, r3]
	str	r0, [r3]
	bne	.L11361
	ldr	r1, .L11400+100
	mov	r0, r4
	mvn	r8, #11
.LPIC2821:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L11362
.L11361:
	ldr	r4, .L11400+104
	add	r7, sp, #25
	mov	r1, #11
	ldr	r2, .L11400+108
	mov	r0, r7
.LPIC2823:
	add	r4, pc, r4
.LPIC2822:
	add	r2, pc, r2
	ldrb	r3, [r4, #656]	@ zero_extendqisi2
	bl	snprintf(PLT)
	ldr	r0, .L11400+112
	mov	r1, #0
	str	r7, [sp]
	mov	r2, r1
	mov	r3, r1
.LPIC2824:
	add	r0, pc, r0
	ldr	r0, [r0, #3552]
	bl	device_create(PLT)
	cmn	r0, #4096
	mov	r8, r0
	str	r0, [r6, #12]
	bhi	.L11364
	add	r4, r4, #2352
	mov	r1, r6
	add	r4, r4, #12
	bl	dev_set_drvdata(PLT)
.L11365:
	ldr	r1, [r4, #4]!
	cmp	r1, #0
	beq	.L11367
	ldr	r0, [r6, #12]
	bl	device_create_file(PLT)
	cmp	r0, #0
	beq	.L11365
	ldr	r3, .L11400+116
	mov	r8, r0
	ldr	r2, [r6, #12]
.LPIC2826:
	add	r3, pc, r3
	ldr	r0, [r3, #3552]
	ldr	r1, [r2, #288]
	bl	device_destroy(PLT)
.L11364:
	cmp	r8, #0
	beq	.L11367
	ldr	r1, .L11400+120
	ldr	r0, .L11400+124
.LPIC2828:
	add	r1, pc, r1
	add	r1, r1, #4064
.LPIC2827:
	add	r0, pc, r0
	add	r1, r1, #12
	mov	r2, r1
	bl	printk(PLT)
	b	.L11362
.L11367:
	ldr	r2, [r6, #12]
	cmn	r2, #4096
	bls	.L11368
	ldr	r1, .L11400+128
	ldr	r0, .L11400+132
.LPIC2831:
	add	r1, pc, r1
	add	r1, r1, #4080
.LPIC2830:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	ldr	r8, [r6, #12]
	cmp	r8, #0
	beq	.L11370
	b	.L11369
.L11368:
	ldr	r1, .L11400+136
	mov	r0, r2
.LPIC2832:
	add	r1, pc, r1
	add	r1, r1, #2432
	add	r1, r1, #12
	bl	device_create_file(PLT)
	cmp	r0, #0
	beq	.L11370
	ldr	r1, .L11400+140
	mov	r8, r0
	ldr	r0, .L11400+144
.LPIC2834:
	add	r1, pc, r1
	add	r1, r1, #4080
.LPIC2833:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
.L11369:
	ldr	r1, .L11400+148
	ldr	r0, .L11400+152
.LPIC2836:
	add	r1, pc, r1
	add	r1, r1, #4064
.LPIC2835:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L11350
.L11370:
	ldr	r0, .L11400+156
	ldr	r1, .L11400+160
.LPIC2837:
	add	r0, pc, r0
	add	r0, r0, #2448
.LPIC2838:
	add	r1, pc, r1
	add	r0, r0, #12
	bl	usb_composite_probe(PLT)
	subs	r8, r0, #0
	beq	.L11371
	ldr	r1, .L11400+164
	ldr	r0, .L11400+168
.LPIC2840:
	add	r1, pc, r1
	add	r1, r1, #4064
.LPIC2839:
	add	r0, pc, r0
	add	r1, r1, #12
	mov	r2, r1
	bl	printk(PLT)
	b	.L11372
.L11371:
	cmp	r5, #0
	beq	.L11373
	ldr	r3, [r5, #4]
	cmp	r3, #0
	beq	.L11373
	add	r0, r6, #60
	mov	r1, #1
	mvn	r2, #0
	bl	pm_qos_add_request(PLT)
.L11373:
	ldr	r1, .L11400+172
	mov	r2, #5
	add	r0, r6, #52
.LPIC2842:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	ldr	r0, .L11400+176
.LPIC2843:
	add	r0, pc, r0
	add	r0, r0, #2496
	add	r0, r0, #8
	bl	misc_register(PLT)
	subs	r8, r0, #0
	beq	.L11374
	ldr	r0, .L11400+180
	mov	r1, r8
.LPIC2844:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r1, .L11400+184
	ldr	r0, .L11400+188
.LPIC2846:
	add	r1, pc, r1
	add	r1, r1, #4064
.LPIC2845:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L11372
.L11374:
	ldr	r2, .L11400+192
	ldr	r0, .L11400+196
	ldr	r1, .L11400+200
.LPIC2849:
	add	r2, pc, r2
.LPIC2847:
	add	r0, pc, r0
	add	r2, r2, #3632
.LPIC2848:
	add	r1, pc, r1
	add	r2, r2, #4
	add	r0, r0, #4
	bl	__init_waitqueue_head(PLT)
	b	.L11350
.L11372:
	ldr	r4, .L11400+204
.LPIC2850:
	add	r4, pc, r4
	add	r4, r4, #2352
	add	r4, r4, #12
.L11375:
	ldr	r1, [r4, #4]!
	cmp	r1, #0
	beq	.L11399
	ldr	r0, [r6, #12]
	bl	device_remove_file(PLT)
	b	.L11375
.L11399:
	ldr	r3, .L11400+208
	ldr	r2, [r6, #12]
.LPIC2851:
	add	r3, pc, r3
	ldr	r0, [r3, #3552]
	ldr	r1, [r2, #288]
	bl	device_destroy(PLT)
.L11362:
	mov	r0, r9
	bl	list_del(PLT)
	ldr	r2, .L11400+212
	mov	r0, r6
.LPIC2852:
	add	r2, pc, r2
	ldr	r3, [r2, #-636]
	sub	r3, r3, #1
	str	r3, [r2, #-636]
	bl	kfree(PLT)
.L11359:
	ldr	r3, .L11400+216
.LPIC2854:
	add	r3, pc, r3
	ldr	r2, [r3, #16]
	add	r3, r3, #16
	cmp	r2, r3
	bne	.L11350
	ldr	r4, .L11400+220
.LPIC2856:
	add	r4, pc, r4
	ldr	r0, [r4, #3552]
	bl	class_destroy(PLT)
	mov	r3, #0
	str	r3, [r4, #3552]
.L11350:
	ldr	r3, [sp, #12]
	mov	r0, r8
	ldr	r2, [sp, #36]
	ldr	r3, [r3]
	cmp	r2, r3
	beq	.L11377
	bl	__stack_chk_fail(PLT)
.L11377:
	add	sp, sp, #44
	@ sp needed
	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L11401:
	.align	2
.L11400:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC2795+8)
	.word	__stack_chk_guard(GOT)
	.word	.LANCHOR3-(.LPIC2797+8)
	.word	.LC622-(.LPIC2796+8)
	.word	.LC623-(.LPIC2798+8)
	.word	.LC624-(.LPIC2799+8)
	.word	.LC625-(.LPIC2800+8)
	.word	.LC626-(.LPIC2801+8)
	.word	.LC626-(.LPIC2804+8)
	.word	.LANCHOR3-(.LPIC2803+8)
	.word	.LC627-(.LPIC2802+8)
	.word	.LANCHOR4-(.LPIC2805+8)
	.word	.LC628-(.LPIC2806+8)
	.word	kmalloc_caches(GOT)
	.word	.LANCHOR3-(.LPIC2810+8)
	.word	.LC629-(.LPIC2809+8)
	.word	.LANCHOR7-(.LPIC2812+8)
	.word	android_work-(.LPIC2813+8)
	.word	usb_gadget_connect_work(GOT)
	.word	.LANCHOR4-(.LPIC2815+8)
	.word	delayed_work_timer_fn(GOT)
	.word	.LC630-(.LPIC2814+8)
	.word	.LANCHOR1-(.LPIC2816+8)
	.word	.LANCHOR0-(.LPIC2820+8)
	.word	diag_dload(GOT)
	.word	.LC631-(.LPIC2821+8)
	.word	.LANCHOR0-(.LPIC2823+8)
	.word	.LC632-(.LPIC2822+8)
	.word	.LANCHOR4-(.LPIC2824+8)
	.word	.LANCHOR4-(.LPIC2826+8)
	.word	.LANCHOR3-(.LPIC2828+8)
	.word	.LC633-(.LPIC2827+8)
	.word	.LANCHOR3-(.LPIC2831+8)
	.word	.LC634-(.LPIC2830+8)
	.word	.LANCHOR0-(.LPIC2832+8)
	.word	.LANCHOR3-(.LPIC2834+8)
	.word	.LC635-(.LPIC2833+8)
	.word	.LANCHOR3-(.LPIC2836+8)
	.word	.LC636-(.LPIC2835+8)
	.word	.LANCHOR0-(.LPIC2837+8)
	.word	android_bind-(.LPIC2838+8)
	.word	.LANCHOR3-(.LPIC2840+8)
	.word	.LC637-(.LPIC2839+8)
	.word	.LC638-(.LPIC2842+8)
	.word	.LANCHOR0-(.LPIC2843+8)
	.word	.LC639-(.LPIC2844+8)
	.word	.LANCHOR3-(.LPIC2846+8)
	.word	.LC640-(.LPIC2845+8)
	.word	.LANCHOR4-(.LPIC2849+8)
	.word	.LANCHOR1-(.LPIC2847+8)
	.word	.LC641-(.LPIC2848+8)
	.word	.LANCHOR0-(.LPIC2850+8)
	.word	.LANCHOR4-(.LPIC2851+8)
	.word	.LANCHOR4-(.LPIC2852+8)
	.word	.LANCHOR1-(.LPIC2854+8)
	.word	.LANCHOR4-(.LPIC2856+8)
	.fnend
	.size	android_probe, .-android_probe
	.text
	.align	2
	.global	usb_composite_unregister
	.type	usb_composite_unregister, %function
usb_composite_unregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L11405
.LPIC2858:
	add	r3, pc, r3
	ldr	r3, [r3, #24]
	cmp	r3, r0
	beq	.L11404
	bx	lr
.L11404:
	ldr	r0, .L11405+4
.LPIC2859:
	add	r0, pc, r0
	add	r0, r0, #572
	b	usb_gadget_unregister_driver(PLT)
.L11406:
	.align	2
.L11405:
	.word	.LANCHOR1-(.LPIC2858+8)
	.word	.LANCHOR0-(.LPIC2859+8)
	.fnend
	.size	usb_composite_unregister, .-usb_composite_unregister
	.align	2
	.type	android_remove, %function
android_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L11438
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #88]
.LPIC2860:
	add	r2, pc, r2
	ldr	r0, [r2, #16]!
	cmp	r7, #0
	ldrneb	r1, [r7, #8]	@ zero_extendqisi2
	moveq	r1, r7
	cmp	r0, r2
	sub	r4, r0, #520
	mov	r5, r0
	beq	.L11409
	ldr	r3, [r0, #-476]
	cmp	r3, #0
	bne	.L11434
	b	.L11409
.L11435:
	ldr	r3, [r4, #520]
	cmp	r3, r2
	mov	r5, r3
	sub	r4, r3, #520
	beq	.L11409
	ldr	r3, [r3, #-476]
	cmp	r3, #0
	beq	.L11409
.L11434:
	ldrb	r3, [r3, #8]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L11435
.L11409:
	cmp	r4, #0
	beq	.L11413
	ldr	r6, .L11438+4
.LPIC2863:
	add	r6, pc, r6
	ldr	r1, [r6, #2368]
	cmp	r1, #0
	addne	r6, r6, #2368
	beq	.L11418
.L11417:
	ldr	r0, [r4, #12]
	bl	device_remove_file(PLT)
	ldr	r1, [r6, #4]!
	cmp	r1, #0
	bne	.L11417
.L11418:
	ldr	r3, .L11438+8
	ldr	r2, [r4, #12]
.LPIC2864:
	add	r3, pc, r3
	ldr	r0, [r3, #3552]
	ldr	r1, [r2, #288]
	bl	device_destroy(PLT)
	cmp	r7, #0
	beq	.L11416
	ldr	r3, [r7, #4]
	cmp	r3, #0
	bne	.L11436
.L11416:
	mov	r0, r5
	bl	list_del(PLT)
	ldr	r2, .L11438+12
	mov	r0, r4
.LPIC2866:
	add	r2, pc, r2
	ldr	r3, [r2, #-636]
	sub	r3, r3, #1
	str	r3, [r2, #-636]
	bl	kfree(PLT)
	ldr	r3, .L11438+16
.LPIC2868:
	add	r3, pc, r3
	ldr	r0, [r3, #16]
.L11413:
	ldr	r3, .L11438+20
.LPIC2869:
	add	r3, pc, r3
	add	r3, r3, #16
	cmp	r0, r3
	beq	.L11437
.L11419:
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L11436:
	add	r0, r4, #60
	bl	pm_qos_remove_request(PLT)
	b	.L11416
.L11437:
	ldr	r4, .L11438+24
.LPIC2870:
	add	r4, pc, r4
	ldr	r0, [r4, #3552]
	bl	class_destroy(PLT)
	ldr	r0, .L11438+28
	mov	r3, #0
	str	r3, [r4, #3552]
.LPIC2872:
	add	r0, pc, r0
	add	r0, r0, #2448
	add	r0, r0, #12
	bl	usb_composite_unregister(PLT)
	b	.L11419
.L11439:
	.align	2
.L11438:
	.word	.LANCHOR1-(.LPIC2860+8)
	.word	.LANCHOR0-(.LPIC2863+8)
	.word	.LANCHOR4-(.LPIC2864+8)
	.word	.LANCHOR4-(.LPIC2866+8)
	.word	.LANCHOR1-(.LPIC2868+8)
	.word	.LANCHOR1-(.LPIC2869+8)
	.word	.LANCHOR4-(.LPIC2870+8)
	.word	.LANCHOR0-(.LPIC2872+8)
	.fnend
	.size	android_remove, .-android_remove
	.align	2
	.global	usb_composite_setup_continue
	.type	usb_composite_setup_continue, %function
usb_composite_setup_continue:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r6, r0, #60
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r8, [r0, #4]
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #56]
	mov	r7, r0
	cmp	r3, #0
	bne	.L11441
	cmp	r4, #0
	bne	.L11446
.L11443:
	mov	r0, r6
	mov	r1, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L11441:
	sub	r5, r3, #1
	cmp	r5, #0
	str	r5, [r4, #56]
	bne	.L11443
	str	r5, [r8, #4]
	ldr	r3, [r4]
	mov	r1, r8
	mov	r2, #32
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r5, [r8, #44]
	b	.L11443
.L11446:
	ldr	r3, .L11447
	movw	r1, #1855
	ldr	r0, .L11447+4
	ldr	r2, .L11447+8
.LPIC2875:
	add	r3, pc, r3
.LPIC2873:
	add	r0, pc, r0
	sub	r3, r3, #4064
.LPIC2874:
	add	r2, pc, r2
	bl	warn_slowpath_fmt(PLT)
	b	.L11443
.L11448:
	.align	2
.L11447:
	.word	.LANCHOR9-(.LPIC2875+8)
	.word	.LC84-(.LPIC2873+8)
	.word	.LC642-(.LPIC2874+8)
	.fnend
	.size	usb_composite_setup_continue, .-usb_composite_setup_continue
	.align	2
	.type	handle_exception, %function
handle_exception:
	.fnstart
	@ args = 0, pretend = 0, frame = 128
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r8, [sp, #16]
	mov	r9, r0
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	add	r10, r0, #44
	str	lr, [sp, #28]
	.pad #128
	sub	sp, sp, #128
	mov	r3, sp
	mov	r8, sp
	bic	r7, r3, #8128
	bic	r7, r7, #63
	b	.L11451
.L11542:
	cmp	r5, #10
	bne	.L11541
.L11451:
	ldr	r4, [r7, #12]
	ldr	r0, [r4, #1020]
	add	r0, r0, #1280
	add	r0, r0, #4
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	add	r1, r4, #1024
	mov	r2, r8
	mov	r0, r4
	bl	dequeue_signal(PLT)
	mov	r5, r0
	ldr	r0, [r4, #1020]
	mov	r1, r6
	add	r0, r0, #1280
	add	r0, r0, #4
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #0
	bne	.L11542
	ldr	r3, [r9, #8]
	cmp	r3, #0
	beq	.L11457
	ldr	r4, [r9, #68]
	ldr	r2, [r4, #20]
	cmp	r2, #0
	bne	.L11543
.L11458:
	ldr	r3, [r4, #28]
	cmp	r3, #0
	bne	.L11544
.L11459:
	ldr	r4, [r9, #68]
	ldr	r3, [r4, #52]
	cmp	r3, #0
	bne	.L11545
.L11460:
	ldr	r3, [r4, #60]
	cmp	r3, #0
	bne	.L11546
.L11461:
	ldr	r4, [r9, #68]
	ldr	r3, [r4, #84]
	cmp	r3, #0
	bne	.L11547
.L11462:
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L11548
.L11463:
	ldr	r4, [r9, #68]
	ldr	r3, [r4, #116]
	cmp	r3, #0
	bne	.L11549
.L11464:
	ldr	r3, [r4, #124]
	cmp	r3, #0
	bne	.L11550
.L11468:
	mov	r0, r10
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r9, #68]
	mov	r0, r10
	ldr	ip, [r3, #28]
	ldr	r1, [r3, #20]
	ldr	r2, [r3, #52]
	ldr	r6, [r3, #60]
	ldr	lr, [r3, #84]
	ldr	r5, [r3, #92]
	add	r1, r1, ip
	ldr	r4, [r3, #124]
	ldr	ip, [r3, #116]
	add	r2, r2, r6
	add	r2, r1, r2
	add	r3, lr, r5
	add	r3, r2, r3
	add	r4, ip, r4
	add	r4, r4, r3
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r4, #0
	mov	r0, r9
	beq	.L11466
	bl	sleep_thread(PLT)
	cmp	r0, #0
	beq	.L11468
.L11449:
	add	sp, sp, #128
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L11541:
	mov	r0, r10
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r9, #112]
	mov	ip, #6
	mov	r4, r0
	mov	r1, #2
	mov	r0, #10
	cmp	r3, ip
	bgt	.L11453
	ldr	r2, [r9, #168]
	str	ip, [r9, #112]
	ldr	r3, [r9, #56]
	cmp	r2, #0
	str	r3, [r9, #116]
	beq	.L11453
	bl	send_sig_info(PLT)
.L11453:
	mov	r1, r4
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L11451
.L11550:
	ldr	r3, [r9, #8]
	ldr	r1, [r4, #120]
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11468
.L11549:
	ldr	r3, [r9, #8]
	ldr	r1, [r4, #112]
	ldr	r0, [r3, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11464
.L11548:
	ldr	r3, [r9, #8]
	ldr	r1, [r4, #88]
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11463
.L11547:
	ldr	r3, [r9, #8]
	ldr	r1, [r4, #80]
	ldr	r0, [r3, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11462
.L11546:
	ldr	r3, [r9, #8]
	ldr	r1, [r4, #56]
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11461
.L11545:
	ldr	r3, [r9, #8]
	ldr	r1, [r4, #48]
	ldr	r0, [r3, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11460
.L11544:
	ldr	r3, [r9, #8]
	ldr	r1, [r4, #24]
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11459
.L11543:
	ldr	r0, [r3, #100]
	ldr	r1, [r4, #16]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L11458
.L11466:
	ldr	r3, [r9, #8]
	ldrb	r2, [r3, #94]	@ zero_extendqisi2
	tst	r2, #1
	beq	.L11469
	ldr	r0, [r3, #100]
	ldr	r1, [r0, #8]
	ldr	r1, [r1, #36]
	cmp	r1, #0
	beq	.L11469
	blx	r1
	ldr	r3, [r9, #8]
	ldrb	r2, [r3, #94]	@ zero_extendqisi2
.L11469:
	tst	r2, #2
	beq	.L11457
	ldr	r0, [r3, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L11457
	blx	r3
.L11457:
	mov	r0, r10
	mov	r5, #0
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r9, #68]
	str	r5, [r3, #4]
	ldr	r3, [r9, #68]
	str	r5, [r3, #36]
	ldr	r3, [r9, #68]
	str	r5, [r3, #68]
	ldr	r3, [r9, #68]
	str	r5, [r3, #100]
	ldr	r6, [r9, #112]
	ldr	r3, [r9, #68]
	ldr	r4, [r9, #116]
	cmp	r6, #1
	str	r3, [r9, #60]
	str	r3, [r9, #64]
	beq	.L11471
	ldr	r3, [r9, #92]
	cmp	r3, r5
	movne	r1, r5
	movne	ip, r1
	movne	r0, r1
	beq	.L11480
.L11472:
	ldr	r3, [r9, #100]
	add	ip, ip, #1
	add	r3, r3, r1
	add	r1, r1, #392
	ldrb	r2, [r3, #24]	@ zero_extendqisi2
	str	r0, [r3, #28]
	str	r0, [r3, #36]
	str	r0, [r3, #32]
	and	r2, r2, #239
	bfc	r2, #6, #1
	strb	r2, [r3, #24]
	ldr	r3, [r9, #92]
	cmp	ip, r3
	bcc	.L11472
.L11480:
	mov	r3, #0
	mov	r0, r10
	sub	r6, r6, #2
	str	r3, [r9, #112]
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r6, #5
	addls	pc, pc, r6, asl #2
	b	.L11449
.L11475:
	b	.L11474
	b	.L11449
	b	.L11476
	b	.L11449
	b	.L11477
	b	.L11477
	.p2align 1
.L11471:
	mvn	r3, #7
	mov	r0, r10
	str	r3, [r9, #112]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r9
	bl	send_status(PLT)
	mov	r0, r10
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r9, #112]
	cmn	r3, #8
	beq	.L11551
.L11479:
	mov	r0, r10
	bl	_raw_spin_unlock_irq(PLT)
	b	.L11449
.L11474:
	ldr	r1, [r9, #8]
	cmp	r1, #0
	beq	.L11552
	add	r1, r1, #96
	mov	r0, #0
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	bne	.L11553
.L11487:
	ldr	r3, [r9, #56]
	cmp	r3, r4
	bne	.L11449
	ldr	r0, [r9, #4]
	cmp	r0, #0
	beq	.L11554
.L11538:
	bl	usb_composite_setup_continue(PLT)
	b	.L11449
.L11476:
	mov	r0, r9
	ldr	r1, [r9, #12]
	bl	do_set_interface(PLT)
	ldr	r3, [r9, #12]
	cmp	r3, #0
	beq	.L11449
	ldr	r0, [r9, #4]
	b	.L11538
.L11477:
	mov	r1, #0
	mov	r0, r9
	bl	do_set_interface(PLT)
	mov	r0, r10
	bl	_raw_spin_lock_irq(PLT)
	mov	r3, #7
	mov	r0, r10
	str	r3, [r9, #112]
	bl	_raw_spin_unlock_irq(PLT)
	b	.L11449
.L11551:
	str	r5, [r9, #112]
	b	.L11479
.L11553:
	ldr	r3, [r9, #8]
	mov	r1, #0
	ldr	r0, [r3, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	b	.L11487
.L11554:
	ldr	r0, [r9, #48]
	mov	r2, #32
	ldr	r1, [r9, #52]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	ldr	r2, [r9, #48]
	cmp	r0, #0
	cmnne	r0, #108
	mov	r3, r0
	str	r9, [r2]
	beq	.L11449
	ldr	r0, [r9]
	ldr	r2, [r9, #48]
	ldr	r1, .L11555
	add	r0, r0, #32
	ldr	r2, [r2, #4]
.LPIC2879:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	b	.L11449
.L11552:
	ldr	r2, .L11555+4
	movw	r3, #3112
	ldr	r0, [r9]
	ldr	r1, .L11555+8
.LPIC2877:
	add	r2, pc, r2
	sub	r2, r2, #4032
	add	r0, r0, #32
.LPIC2876:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldr	r0, .L11555+12
	movw	r1, #550
.LPIC2878:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11449
.L11556:
	.align	2
.L11555:
	.word	.LC411-(.LPIC2879+8)
	.word	.LANCHOR9-(.LPIC2877+8)
	.word	.LC409-(.LPIC2876+8)
	.word	.LC410-(.LPIC2878+8)
	.fnend
	.size	handle_exception, .-handle_exception
	.align	2
	.type	fsg_main_thread, %function
fsg_main_thread:
	.fnstart
	@ args = 0, pretend = 0, frame = 72
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L12027
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	str	lr, [sp, #32]
	ldr	r4, .L12027+4
	strd	r8, [sp, #16]
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
.LPIC2887:
	add	r3, pc, r3
	.pad #84
	sub	sp, sp, #84
	mov	r10, r0
	mov	r0, #2
	str	r3, [sp, #12]
.LPIC2943:
	add	r4, pc, r4
	add	r9, r10, #44
	bl	allow_signal(PLT)
	ldr	r3, .L12027+8
	mov	r0, #15
	add	r8, r4, #3392
	add	r8, r8, #4
.LPIC2888:
	add	r3, pc, r3
	str	r3, [sp, #16]
	bl	allow_signal(PLT)
	mov	r0, #9
	bl	allow_signal(PLT)
	mov	r0, #10
	bl	allow_signal(PLT)
	bl	set_freezable(PLT)
	ldr	r1, .L12027+12
	mov	r3, sp
	mov	r2, #0
	bic	r3, r3, #8128
	bic	r3, r3, #63
.LPIC2947:
	add	r1, pc, r1
	str	r2, [r3, #8]
	add	r3, r1, #3392
	add	r3, r3, #4
	str	r3, [sp, #20]
.L11558:
	ldr	r3, [r10, #112]
	cmp	r3, #7
	beq	.L11990
.L11764:
	cmp	r3, #0
	bgt	.L11559
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L11559
	ldrb	r3, [r10, #144]	@ zero_extendqisi2
	tst	r3, #32
	bne	.L11562
	mov	r0, r10
	bl	sleep_thread(PLT)
	ldr	r3, [r10, #112]
	cmp	r3, #7
	bne	.L11764
.L11990:
	mov	r0, r9
	bl	_raw_spin_lock_irq(PLT)
	mov	r3, #0
	mov	r0, r9
	str	r3, [r10, #168]
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r10, #172]
	cmp	r3, #0
	beq	.L11768
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L11768
	mov	r0, r10
	blx	r3
	cmp	r0, #0
	blt	.L11768
.L11769:
	add	r0, r10, #152
	mov	r1, #0
	bl	complete_and_exit(PLT)
.L11768:
	ldr	r5, [r10, #92]
	add	r7, r10, #28
	ldr	r4, [r10, #100]
	mov	r0, r7
	bl	down_write(PLT)
	cmp	r5, #0
	movne	r6, #14848
	addne	r4, r4, #392
	movtne	r6, 2
	movne	r8, #0
	beq	.L11767
.L11771:
	ldr	r0, [r4, #-392]
	cmp	r0, #0
	beq	.L11770
	bl	fput(PLT)
	str	r8, [r4, #-392]
	str	r6, [r4, #-356]
.L11770:
	subs	r5, r5, #1
	add	r4, r4, #392
	bne	.L11771
.L11767:
	mov	r0, r7
	bl	up_write(PLT)
	b	.L11769
.L11559:
	mov	r0, r10
	bl	handle_exception(PLT)
	b	.L11558
.L11562:
	mov	r0, r9
	bl	_raw_spin_lock_irq(PLT)
	ldr	r4, [r10, #60]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L11567
.L11889:
	mov	r0, r9
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r10
	bl	sleep_thread(PLT)
	cmp	r0, #0
	bne	.L11558
	mov	r0, r9
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L11889
.L11567:
	mov	r0, r9
	bl	_raw_spin_unlock_irq(PLT)
	mov	r2, #31
	str	r2, [r4, #12]
	ldr	r1, [r10, #108]
	udiv	r3, r2, r1
	mul	r3, r1, r3
	subs	r3, r2, r3
	addne	r1, r1, #31
	rsbne	r2, r3, r1
	ldr	r3, [r4, #24]
	str	r2, [r3, #4]
	ldr	r5, [r10, #8]
	cmp	r5, #0
	beq	.L11991
	ldr	r0, [r5, #88]
	ldr	r6, [r5, #104]
	ldr	r7, [r4, #24]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq(PLT)
	mov	r2, #1
	mov	r3, #2
	str	r2, [r4, #28]
	str	r3, [r4, #4]
	ldr	r0, [r5, #88]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r6, #8]
	mov	r0, r6
	mov	r1, r7
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L11571
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r4, #28]
	str	r2, [r4, #4]
	beq	.L11571
	cmn	r3, #95
	beq	.L11992
.L11570:
	ldr	r0, [r5, #84]
	ldr	r1, .L12027+16
	ldr	r2, [r6, #4]
	add	r0, r0, #32
.LPIC2883:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	b	.L11571
.L11888:
	mov	r0, r9
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r10
	bl	sleep_thread(PLT)
	cmp	r0, #0
	bne	.L11558
.L11571:
	mov	r0, r9
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #1
	bne	.L11888
	mov	r0, r9
	bl	_raw_spin_unlock_irq(PLT)
#APP
@ 2858 "/root/lol//drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	ldr	r5, [r10, #8]
	cmp	r5, #0
	beq	.L11993
	ldr	r3, [r4, #24]
	ldr	r6, [r5, #88]
	ldr	r2, [r3, #44]
	ldr	r7, [r3]
	cmp	r2, #0
	bne	.L11574
	ldr	r2, [r5, #96]
	tst	r2, #1
	bne	.L11574
	ldr	r3, [r3, #48]
	cmp	r3, #31
	bne	.L11983
	ldr	r2, [r7]
	movw	r3, #21333
	movt	r3, 17218
	cmp	r2, r3
	bne	.L11983
	ldrb	r3, [r7, #13]	@ zero_extendqisi2
	cmp	r3, #7
	bls	.L11994
.L11589:
	ldrb	r3, [r6, #144]	@ zero_extendqisi2
	tst	r3, #1
	bne	.L11995
.L11574:
	mov	r0, r9
	bl	_raw_spin_lock_irq(PLT)
	mov	r3, #0
	mov	r0, r9
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irq(PLT)
	b	.L11558
.L11997:
	blx	r3
.L11587:
	cmp	r0, #0
	beq	.L11581
	cmn	r0, #11
	bne	.L11996
	mov	r0, #100
	bl	msleep_interruptible(PLT)
	cmp	r0, #0
	bne	.L11581
.L11983:
	ldr	r0, [r5, #100]
	ldr	r2, [r0, #8]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	bne	.L11997
	ldr	r3, [r2, #24]
	mov	r1, #1
	blx	r3
	b	.L11587
.L11992:
	ldr	r2, [r7, #4]
	cmp	r2, #0
	bne	.L11570
	b	.L11571
.L11994:
	ldrb	r3, [r7, #12]	@ zero_extendqisi2
	tst	r3, #127
	bne	.L11589
	ldrb	r2, [r7, #14]	@ zero_extendqisi2
	sub	r3, r2, #1
	cmp	r3, #15
	bhi	.L11589
	add	r1, r7, #15
	str	r2, [r6, #72]
	add	r0, r6, #76
	bl	memcpy(PLT)
	ldrsb	r3, [r7, #12]
	mov	r0, r9
	cmp	r3, #0
	movlt	r3, #2
	movge	r3, #1
	str	r3, [r6, #120]
	ldr	r3, [r7, #8]
	cmp	r3, #0
	str	r3, [r6, #124]
	moveq	r3, #3
	streq	r3, [r6, #120]
	ldr	r3, [r6, #92]
	ldrb	r2, [r7, #13]	@ zero_extendqisi2
	cmp	r2, r3
	str	r2, [r6, #96]
	ldrcc	r3, [r6, #100]
	movcc	r1, #392
	movcs	r3, #0
	mlacc	r3, r1, r2, r3
	str	r3, [r6, #104]
	ldr	r3, [r7, #4]
	str	r3, [r6, #132]
	bl	_raw_spin_lock_irq(PLT)
	mov	r3, #0
	mov	r0, r9
	str	r3, [r4, #4]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r9
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r10, #112]
	mov	r0, r9
	cmp	r3, #0
	mvnle	r3, #8
	strle	r3, [r10, #112]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r9
	bl	_raw_spin_lock_irq(PLT)
	ldr	r4, [r10, #60]
	str	r4, [r10, #64]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L11632
.L11887:
	mov	r0, r9
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r10
	bl	sleep_thread(PLT)
	cmp	r0, #0
	bne	.L11558
	mov	r0, r9
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L11887
.L11632:
	add	r5, r10, #28
	mov	r0, r9
	str	r5, [sp, #40]
	bl	_raw_spin_unlock_irq(PLT)
	ldrb	r3, [r10, #144]	@ zero_extendqisi2
	mov	r0, r5
	and	r3, r3, #251
	bfc	r3, #3, #1
	strb	r3, [r10, #144]
	bl	down_read(PLT)
	ldrb	r3, [r10, #76]	@ zero_extendqisi2
	cmp	r3, #37
	beq	.L11600
	bhi	.L11601
	cmp	r3, #21
	beq	.L11602
	bls	.L11998
	cmp	r3, #26
	beq	.L11610
	bls	.L11999
	cmp	r3, #30
	beq	.L11614
	cmp	r3, #35
	beq	.L11615
	cmp	r3, #27
	beq	.L12000
.L11599:
	ldr	r5, .L12027+20
	mov	r6, #0
	mov	r2, r3
	ldr	r1, .L12027+24
	str	r6, [r10, #128]
.LPIC2933:
	add	r5, pc, r5
	add	r5, r5, #3648
.LPIC2934:
	add	r1, pc, r1
	add	r5, r5, #8
	mov	r0, r5
	bl	sprintf(PLT)
	str	r5, [sp, #4]
	mov	r2, r6
	mov	r0, r10
	str	r6, [sp]
	mvn	r3, #0
	ldr	r1, [r10, #72]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11633
	ldr	r3, [r10, #104]
.L11970:
	mov	r2, #335872
	mvn	r5, #21
	str	r2, [r3, #28]
.L11635:
	ldr	r0, [sp, #40]
	bl	up_read(PLT)
.L11714:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L11558
	cmn	r5, #22
	beq	.L11786
	cmp	r5, #0
	ldrlt	r6, [r10, #120]
	blt	.L11713
.L11712:
	ldr	r6, [r10, #120]
	cmp	r6, #2
	bne	.L11713
	ldr	r3, [r10, #128]
	mov	r2, #1
	ldr	r1, [r4, #16]
	cmp	r5, r3
	movcs	r5, r3
	str	r5, [r1, #4]
	str	r2, [r4, #4]
	ldr	r3, [r10, #136]
	ldr	r6, [r10, #120]
	rsb	r3, r5, r3
	str	r3, [r10, #136]
.L11713:
	cmp	r6, #1
	ldr	r4, [r10, #60]
	beq	.L11735
	bcc	.L11715
	cmp	r6, #2
	bne	.L11775
	ldr	r3, [r10, #124]
	cmp	r3, #0
	beq	.L11775
	ldr	r3, [r10, #8]
	cmp	r3, #0
	beq	.L12001
	ldr	r7, [r10, #136]
	cmp	r7, #0
	bne	.L12002
	ldr	r3, [r4, #16]
	ldrb	r2, [r3, #26]	@ zero_extendqisi2
	bfi	r2, r7, #1, #1
	strb	r2, [r3, #26]
	ldr	r5, [r10, #8]
	cmp	r5, #0
	beq	.L12003
	ldr	r0, [r5, #88]
	ldr	r3, [r4, #16]
	ldr	fp, [r5, #100]
	add	r0, r0, #44
	str	r3, [sp, #40]
	bl	_raw_spin_lock_irq(PLT)
	mov	r3, #1
	str	r6, [r4, #4]
	str	r3, [r4, #20]
	ldr	r0, [r5, #88]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [fp, #8]
	mov	r0, fp
	mov	r2, #208
	ldr	r1, [sp, #40]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L11724
	cmn	r3, #108
	str	r7, [r4, #20]
	str	r7, [r4, #4]
	beq	.L11724
	cmn	r3, #95
	bne	.L11723
	ldr	r2, [sp, #40]
	ldr	r2, [r2, #4]
	cmp	r2, #0
	beq	.L11724
.L11723:
	ldr	r0, [r5, #84]
	ldr	r1, .L12027+28
	ldr	r2, [fp, #4]
	add	r0, r0, #32
.LPIC2945:
	add	r1, pc, r1
	bl	dev_warn(PLT)
.L11724:
	ldr	r3, [r4, #8]
	str	r3, [r10, #60]
.L11775:
	mov	r0, r9
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r10, #112]
	mov	r0, r9
	cmp	r3, #0
	mvnle	r3, #7
	strle	r3, [r10, #112]
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, .L12027+32
.LPIC2956:
	add	r3, pc, r3
	ldr	r2, [r3, #3548]
	cmp	r2, #0
	beq	.L11762
	mov	r2, #0
	str	r2, [r3, #3548]
	b	.L11558
.L11995:
	ldr	r0, [r5, #104]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	b	.L11984
.L11592:
	mov	r0, #100
	bl	msleep_interruptible(PLT)
	cmp	r0, #0
	bne	.L11574
.L11984:
	ldr	r0, [r5, #100]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	cmp	r0, #0
	beq	.L11574
	cmn	r0, #11
	beq	.L11592
	ldr	r3, [r5, #84]
	mov	r2, r0
	ldr	r1, [sp, #16]
	add	r0, r3, #32
	bl	dev_warn(PLT)
	b	.L11574
.L11991:
	ldr	r2, .L12027+36
	movw	r3, #805
	ldr	r0, [r10]
	ldr	r1, .L12027+40
.LPIC2881:
	add	r2, pc, r2
	add	r2, r2, #3408
	add	r0, r0, #32
.LPIC2880:
	add	r1, pc, r1
	add	r2, r2, #8
	bl	dev_err(PLT)
	ldr	r0, .L12027+44
	movw	r1, #550
.LPIC2882:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11558
.L11996:
	ldr	r3, [r5, #84]
	mov	r2, r0
	ldr	r1, [sp, #12]
	add	r0, r3, #32
	bl	dev_warn(PLT)
.L11581:
	add	r1, r5, #96
	mov	r0, #0
	bl	_set_bit(PLT)
	b	.L11574
.L11993:
	ldr	r2, .L12027+48
	movw	r3, #2859
	ldr	r0, [r10]
	ldr	r1, .L12027+52
.LPIC2885:
	add	r2, pc, r2
	sub	r2, r2, #4000
	add	r0, r0, #32
.LPIC2884:
	add	r1, pc, r1
	sub	r2, r2, #12
	bl	dev_err(PLT)
	ldr	r0, .L12027+56
	movw	r1, #550
.LPIC2886:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11574
.L11661:
	tst	r2, #16
	movwne	r3, #21250
	mvnne	r5, #21
	movtne	r3, 5
	strne	r3, [r6, #28]
	bne	.L11635
	cmp	r3, #0
	beq	.L11635
	ldr	r3, [r10, #172]
	cmp	r3, #0
	beq	.L11669
	ldr	ip, [r3, #4]
	cmp	ip, #0
	beq	.L11669
	ldr	r3, [r10, #100]
	movw	r2, #22737
	mov	r0, r10
	movt	r2, 6687
	mov	r1, r6
	rsb	r3, r3, r6
	mov	r3, r3, asr #3
	mul	r2, r2, r3
	blx	ip
	cmp	r0, #0
	blt	.L11782
	bne	.L11635
.L11669:
	ldr	r7, [sp, #40]
	mov	r0, r7
	bl	up_read(PLT)
	mov	r0, r7
	bl	down_write(PLT)
	ldr	r0, [r6]
	cmp	r0, #0
	beq	.L11668
	bl	fput(PLT)
	mov	r3, #0
	str	r3, [r6]
.L11668:
	ldr	r7, [sp, #40]
	mov	r0, r7
	bl	up_write(PLT)
	mov	r0, r7
	bl	down_read(PLT)
	ldr	r1, .L12027+60
	mov	r0, r10
.LPIC2913:
	add	r1, pc, r1
	bl	send_message(PLT)
	ldr	r3, [r10, #172]
	cmp	r3, #0
	beq	.L11635
	ldr	ip, [r3, #8]
	cmp	ip, #0
	beq	.L11635
	ldr	r3, [r10, #100]
	movw	r2, #22737
	mov	r1, r6
	movt	r2, 6687
	mov	r0, r10
	rsb	r3, r3, r6
	mov	r3, r3, asr #3
	mul	r2, r2, r3
	blx	ip
	and	r5, r0, r0, asr #31
.L11633:
	ldr	r0, [sp, #40]
	bl	up_read(PLT)
	cmn	r5, #4
	bne	.L11714
	b	.L11558
.L11601:
	cmp	r3, #68
	beq	.L11617
	bls	.L12004
	cmp	r3, #168
	beq	.L11625
	bls	.L12005
	cmp	r3, #190
	beq	.L11629
	cmp	r3, #250
	beq	.L11630
	cmp	r3, #170
	bne	.L11599
	ldrb	lr, [r10, #83]	@ zero_extendqisi2
	mov	r0, r10
	mov	r1, #12
	ldrb	r5, [r10, #82]	@ zero_extendqisi2
	mov	r2, #1
	ldrb	r3, [r10, #85]	@ zero_extendqisi2
	ldrb	ip, [r10, #84]	@ zero_extendqisi2
	mov	lr, lr, asl #16
	orr	lr, lr, r5, asl #24
	ldr	r5, .L12027+64
	orr	r3, lr, r3
	orr	ip, r3, ip, asl #8
	movw	r3, #1022
.LPIC2919:
	add	r5, pc, r5
	str	r5, [sp]
	str	ip, [r10, #128]
	bl	check_command_size_in_blocks.constprop.148(PLT)
	subs	r5, r0, #0
	bne	.L11633
.L11965:
	mov	r0, r10
	bl	do_write(PLT)
	mov	r5, r0
	b	.L11633
.L11786:
	mov	r5, r3
	b	.L11712
.L11998:
	cmp	r3, #8
	beq	.L11604
	bhi	.L11605
	cmp	r3, #0
	beq	.L11606
	cmp	r3, #3
	bne	.L11599
	ldr	ip, .L12027+68
	mov	r3, #0
	mov	r0, r10
	ldrb	lr, [r10, #80]	@ zero_extendqisi2
	mov	r1, #6
	mov	r2, #2
	str	r3, [sp]
	mov	r3, #16
.LPIC2910:
	add	ip, pc, ip
	str	lr, [r10, #128]
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11633
	ldr	r5, [r10, #104]
	ldr	r6, [r4]
	cmp	r5, #0
	beq	.L12006
	ldrb	r2, [r5, #24]	@ zero_extendqisi2
	mov	r1, #0
	ldr	r7, [r5, #28]
	ldr	r3, [r5, #32]
	str	r1, [r5, #28]
	str	r1, [r5, #32]
	ubfx	fp, r2, #6, #1
	bfi	r2, r1, #6, #1
	mov	fp, fp, asl #7
	strb	r2, [r5, #24]
.L11657:
	mov	r0, r6
	mov	r1, #18
	str	r3, [sp, #44]
	bl	__memzero(PLT)
	ldr	r3, [sp, #44]
	mov	r1, r7, lsr #16
	strb	r7, [r6, #13]
	mov	r7, r7, lsr #8
	orr	fp, fp, #112
	strb	r1, [r6, #2]
	mov	r5, #18
	mov	r2, r3, lsr #16
	strb	r3, [r6, #6]
	ubfx	r3, r3, #8, #8
	strb	fp, [r6]
	mov	r0, r2, lsr #8
	strb	r3, [r6, #5]
	strb	r2, [r6, #4]
	mov	r2, #10
	strb	r7, [r6, #12]
	strb	r0, [r6, #3]
	strb	r2, [r6, #7]
	b	.L11635
.L12004:
	cmp	r3, #47
	beq	.L11619
	bhi	.L11620
	cmp	r3, #40
	beq	.L11621
	cmp	r3, #42
	bne	.L11599
	ldrb	r5, [r10, #83]	@ zero_extendqisi2
	mov	r0, r10
	mov	r1, #10
	ldrb	ip, [r10, #84]	@ zero_extendqisi2
	mov	r2, #1
	movw	r3, #446
	ldr	lr, .L12027+72
	orr	ip, ip, r5, asl #8
.LPIC2918:
	add	lr, pc, lr
.L11978:
	str	lr, [sp]
	str	ip, [r10, #128]
	bl	check_command_size_in_blocks.constprop.148(PLT)
	subs	r5, r0, #0
	bne	.L11633
	b	.L11965
.L11715:
	ldrb	r3, [r10, #144]	@ zero_extendqisi2
	tst	r3, #1
	beq	.L11775
	ldr	r3, [r10, #8]
	cmp	r3, #0
	beq	.L12007
	ldr	r0, [r3, #104]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	ldr	r4, [r10, #8]
	mov	r1, #1
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	b	.L11756
.L11757:
	mov	r0, #100
	bl	msleep_interruptible(PLT)
	cmp	r0, #0
	bne	.L11558
	ldr	r0, [r4, #100]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
.L11756:
	cmp	r0, #0
	beq	.L11775
	cmn	r0, #11
	beq	.L11757
	ldr	r3, [r4, #84]
	mov	r2, r0
	ldr	r1, .L12027+76
	add	r0, r3, #32
.LPIC2955:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	b	.L11775
.L11735:
	ldr	r3, [r10, #136]
	cmp	r3, #0
	beq	.L11775
	ldrb	r3, [r10, #144]	@ zero_extendqisi2
	tst	r3, #8
	beq	.L11736
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r10, #112]
	mov	r4, r0
	cmp	r3, #1
	bgt	.L11745
	ldr	r2, [r10, #168]
	str	r6, [r10, #112]
	ldr	r3, [r10, #56]
	cmp	r2, #0
	str	r3, [r10, #116]
	beq	.L11745
.L11981:
	mov	r0, #10
	mov	r1, #2
	bl	send_sig_info(PLT)
.L11745:
	mov	r1, r4
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L11558
.L11620:
	cmp	r3, #53
	beq	.L11623
	cmp	r3, #67
	bne	.L11599
	ldr	r2, [r10, #104]
	cmp	r2, #0
	beq	.L11599
	ldrb	r2, [r2, #24]	@ zero_extendqisi2
	tst	r2, #8
	beq	.L11599
	ldrb	r5, [r10, #83]	@ zero_extendqisi2
	mov	r7, #1
	mov	r0, r10
	ldrb	ip, [r10, #84]	@ zero_extendqisi2
	mov	r1, #10
	mov	r2, #2
	ldr	lr, .L12027+80
	str	r7, [sp]
	movw	r3, #962
	orr	ip, ip, r5, asl #8
.LPIC2908:
	add	lr, pc, lr
	str	lr, [sp, #4]
	str	ip, [r10, #128]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11633
	ldrb	r1, [r10, #77]	@ zero_extendqisi2
	ldrb	r3, [r10, #82]	@ zero_extendqisi2
	ldrb	r0, [r10, #85]	@ zero_extendqisi2
	ldr	r2, [r10, #104]
	tst	r1, #253
	and	r1, r1, #2
	ldr	r6, [r4]
	movne	ip, r7
	moveq	ip, #0
	cmp	r3, r7
	movle	r3, ip
	orrgt	r3, ip, #1
	uxtb	fp, r1
	cmp	r3, #0
	movne	r3, #9216
	mov	r0, r0, lsr #6
	movtne	r3, 5
	mvnne	r5, #21
	strne	r3, [r2, #28]
	bne	.L11635
	cmp	r0, #2
	beq	.L12008
	mov	r1, #20
	mov	r0, r6
	str	r2, [sp, #44]
	bl	__memzero(PLT)
	mov	r1, #18
	mov	r3, #22
	strb	r7, [r6, #2]
	cmp	fp, #0
	strb	r7, [r6, #3]
	ldr	r2, [sp, #44]
	strb	r7, [r6, #6]
	strb	r1, [r6, #1]
	strb	r3, [r6, #5]
	bne	.L12009
	mvn	r1, #85
	strb	r5, [r6, #8]
	strb	r5, [r6, #9]
	strb	r5, [r6, #10]
	strb	r5, [r6, #11]
	mov	r5, #20
	strb	r1, [r6, #14]
	strb	r3, [r6, #13]
	ldr	r3, [r2, #16]
	mov	r2, r3, lsr #16
	ubfx	r1, r3, #8, #8
	strb	r3, [r6, #19]
	mov	r3, r2, lsr #8
	strb	r1, [r6, #18]
	strb	r2, [r6, #17]
	strb	r3, [r6, #16]
	b	.L11635
.L12005:
	cmp	r3, #85
	beq	.L11627
	cmp	r3, #90
	bne	.L11599
	ldrb	r3, [r10, #84]	@ zero_extendqisi2
	mov	r2, #0
	mov	r0, r10
	ldrb	ip, [r10, #83]	@ zero_extendqisi2
	mov	r1, #10
	ldr	lr, .L12027+84
	str	r2, [sp]
	mov	r2, #2
	orr	ip, r3, ip, asl #8
	movw	r3, #390
.LPIC2901:
	add	lr, pc, lr
	str	lr, [sp, #4]
	str	ip, [r10, #128]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11633
.L11964:
	mov	r0, r10
	mov	r1, r4
	bl	do_mode_sense(PLT)
	mov	r5, r0
	b	.L11633
.L11999:
	cmp	r3, #22
	beq	.L11612
	cmp	r3, #23
	bne	.L11599
	ldr	r1, .L12027+88
	mov	r5, #0
	ldr	r0, .L12027+92
.LPIC2921:
	add	r1, pc, r1
	sub	r1, r1, #3984
.LPIC2920:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	r1, .L12027+96
	mov	r0, r10
.LPIC2922:
	add	r1, pc, r1
	bl	send_message(PLT)
	b	.L11635
.L11605:
	cmp	r3, #10
	beq	.L11608
	cmp	r3, #18
	bne	.L11599
	ldr	ip, .L12027+100
	mov	r3, #0
	mov	r0, r10
	ldrb	lr, [r10, #80]	@ zero_extendqisi2
	mov	r1, #6
	mov	r2, #2
	str	r3, [sp]
	mov	r3, #16
.LPIC2889:
	add	ip, pc, ip
	str	lr, [r10, #128]
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11633
	ldr	lr, [r10, #104]
	ldr	r6, [r4]
	cmp	lr, #0
	beq	.L12010
	ldrb	ip, [lr, #24]	@ zero_extendqisi2
	mov	fp, #0
	mov	r0, #2
	ldr	r7, .L12027+104
	mov	r3, #31
	add	r2, r10, #218
	mov	r1, r2
	str	r2, [sp, #44]
	mov	r2, #16
	ands	ip, ip, #8
	movne	ip, #5
.LPIC2890:
	add	r7, pc, r7
	add	r5, r7, #3632
	strb	ip, [r6]
	ldrb	ip, [lr, #24]	@ zero_extendqisi2
	add	r5, r5, #4
	strb	r0, [r6, #2]
	strb	r0, [r6, #3]
	mov	r0, r5
	strb	r3, [r6, #4]
	and	ip, ip, #4
	strb	fp, [r6, #5]
	cmp	ip, fp
	strb	fp, [r6, #6]
	movne	ip, #128
	moveq	ip, fp
	strb	fp, [r6, #7]
	strb	ip, [r6, #1]
	bl	strncpy(PLT)
	ldr	r0, [sp, #44]
	strb	fp, [r7, #3652]
	bl	strlen(PLT)
	cmp	r0, #11
	bhi	.L11638
	ldr	r3, [r10, #96]
	cmp	r3, fp
	bne	.L12011
.L11638:
	ldr	ip, .L12027+108
	mov	r3, #1
	add	r7, r10, #180
	ldr	r2, .L12027+112
	mov	r1, #29
	mov	r0, r7
	str	r3, [sp, #4]
	add	r3, r10, #209
	mov	r5, #36
.LPIC2897:
	add	ip, pc, ip
	add	ip, ip, #3632
.LPIC2896:
	add	r2, pc, r2
	add	ip, ip, #4
	str	ip, [sp]
	bl	snprintf(PLT)
	ldr	r0, [r10, #180]	@ unaligned
	ldr	r1, [r10, #184]	@ unaligned
	ldr	r2, [r10, #188]	@ unaligned
	ldr	ip, [r10, #192]	@ unaligned
	str	r0, [r6, #8]	@ unaligned
	str	r1, [r6, #12]	@ unaligned
	str	r2, [r6, #16]	@ unaligned
	str	ip, [r6, #20]	@ unaligned
	ldr	r2, [r10, #204]	@ unaligned
	ldr	r0, [r10, #196]	@ unaligned
	ldr	r1, [r10, #200]	@ unaligned
	str	r2, [r6, #32]	@ unaligned
	str	r0, [r6, #24]	@ unaligned
	str	r1, [r6, #28]	@ unaligned
	ldrb	r2, [r10, #208]	@ zero_extendqisi2
	strb	r2, [r6, #36]
	b	.L11635
.L11762:
	mov	r0, r10
	bl	send_status(PLT)
	subs	r4, r0, #0
	bne	.L11558
	mov	r0, r9
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r10, #112]
	mov	r0, r9
	cmp	r3, #0
	strle	r4, [r10, #112]
	bl	_raw_spin_unlock_irq(PLT)
	b	.L11558
.L12028:
	.align	2
.L12027:
	.word	.LC643-(.LPIC2887+8)
	.word	.LANCHOR3-(.LPIC2943+8)
	.word	.LC644-(.LPIC2888+8)
	.word	.LANCHOR3-(.LPIC2947+8)
	.word	.LC411-(.LPIC2883+8)
	.word	.LANCHOR4-(.LPIC2933+8)
	.word	.LC674-(.LPIC2934+8)
	.word	.LC411-(.LPIC2945+8)
	.word	.LANCHOR4-(.LPIC2956+8)
	.word	.LANCHOR3-(.LPIC2881+8)
	.word	.LC409-(.LPIC2880+8)
	.word	.LC410-(.LPIC2882+8)
	.word	.LANCHOR9-(.LPIC2885+8)
	.word	.LC409-(.LPIC2884+8)
	.word	.LC410-(.LPIC2886+8)
	.word	.LC662-(.LPIC2913+8)
	.word	.LC668-(.LPIC2919+8)
	.word	.LC659-(.LPIC2910+8)
	.word	.LC667-(.LPIC2918+8)
	.word	.LC644-(.LPIC2955+8)
	.word	.LC657-(.LPIC2908+8)
	.word	.LC650-(.LPIC2901+8)
	.word	.LANCHOR9-(.LPIC2921+8)
	.word	.LC669-(.LPIC2920+8)
	.word	.LC670-(.LPIC2922+8)
	.word	.LC645-(.LPIC2889+8)
	.word	.LANCHOR4-(.LPIC2890+8)
	.word	.LANCHOR4-(.LPIC2897+8)
	.word	.LC475-(.LPIC2896+8)
	.word	.LC665-(.LPIC2916+8)
	.word	.LC411-(.LPIC2954+8)
	.word	.LC653-(.LPIC2904+8)
	.word	.LC656-(.LPIC2907+8)
	.word	.LC654-(.LPIC2905+8)
	.word	.LC663-(.LPIC2914+8)
	.word	.LC655-(.LPIC2906+8)
	.word	.LC649-(.LPIC2900+8)
	.word	.LC651-(.LPIC2902+8)
	.word	.LC648-(.LPIC2899+8)
	.word	.LC660-(.LPIC2911+8)
	.word	.LC658-(.LPIC2909+8)
	.word	.LC666-(.LPIC2917+8)
	.word	.LC647-(.LPIC2898+8)
	.word	.LC664-(.LPIC2915+8)
	.word	.LC652-(.LPIC2903+8)
	.word	.LANCHOR9-(.LPIC2924+8)
	.word	.LC669-(.LPIC2923+8)
	.word	.LC671-(.LPIC2925+8)
	.word	.LANCHOR9-(.LPIC2932+8)
	.word	.LC673-(.LPIC2931+8)
	.word	.LC672-(.LPIC2926+8)
	.word	.LC411-(.LPIC2930+8)
	.word	.LC411-(.LPIC2949+8)
	.word	.LC644-(.LPIC2950+8)
	.word	.LANCHOR3-(.LPIC2952+8)
	.word	.LC409-(.LPIC2951+8)
	.word	.LC410-(.LPIC2953+8)
	.word	.LANCHOR9-(.LPIC2940+8)
	.word	.LC409-(.LPIC2939+8)
	.word	.LC410-(.LPIC2941+8)
	.word	.LANCHOR9-(.LPIC2937+8)
	.word	.LC409-(.LPIC2936+8)
	.word	.LC410-(.LPIC2938+8)
.L11619:
	ldr	ip, .L12027+116
	mov	r2, #0
	mov	r3, #1
	mov	r0, r10
	mov	r1, #10
	str	r2, [r10, #128]
	mov	r2, #3
	str	r3, [sp]
	movw	r3, #446
.LPIC2916:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11633
	ldrb	r2, [r10, #79]	@ zero_extendqisi2
	ldrb	r0, [r10, #78]	@ zero_extendqisi2
	ldr	r3, [r10, #60]
	ldr	r6, [r10, #104]
	ldrb	r1, [r10, #81]	@ zero_extendqisi2
	mov	r7, r2, asl #16
	ldrb	ip, [r10, #80]	@ zero_extendqisi2
	orr	r0, r7, r0, asl #24
	str	r3, [sp, #52]
	ldrd	r2, [r6, #16]
	orr	r1, r0, r1
	orr	ip, r1, ip, asl #8
	mov	r1, #0
	cmp	ip, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r5, #21
	movtge	r3, 5
	strge	r3, [r6, #28]
	bge	.L11633
	ldrb	r3, [r10, #77]	@ zero_extendqisi2
	tst	r3, #239
	movne	r3, #9216
	mvnne	r5, #21
	movtne	r3, 5
	strne	r3, [r6, #28]
	bne	.L11633
	ldrb	r7, [r10, #83]	@ zero_extendqisi2
	ldrb	r3, [r10, #84]	@ zero_extendqisi2
	orrs	r7, r3, r7, asl #8
	beq	.L11708
	ldr	r2, [r6, #40]
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	ldr	r0, [r6]
	sub	r1, r2, #32
	mov	r7, r7, asl r2
	orr	r1, r5, ip, asl r1
	ubfx	r3, r3, #1, #1
	cmp	r0, #0
	orreq	r3, r3, #1
	str	r1, [sp, #36]
	rsb	r1, r2, #32
	cmp	r3, #0
	ldr	lr, [sp, #36]
	mov	r3, ip, asl r2
	str	r3, [sp, #32]
	orr	r1, lr, ip, lsr r1
	str	r1, [sp, #36]
	bne	.L11675
	mov	r1, #1
	bl	vfs_fsync(PLT)
.L11675:
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r1, r3, #1
	bne	.L11968
	ldr	r3, [r6]
	mvn	r2, #0
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #32]
	ldr	r0, [r3, #32]
	bl	invalidate_mapping_pages(PLT)
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L11968
	mov	r3, sp
	str	r8, [sp, #48]
	mov	r8, r5
	bic	ip, r3, #8128
	mov	r5, r4
	str	r10, [sp, #44]
	bic	ip, ip, #63
	mov	r4, ip
.L11678:
	cmp	r7, #0
	beq	.L12012
	ldrd	r0, [r6, #8]
	mov	r3, #0
	ldrd	r10, [sp, #32]
	subs	r10, r0, r10
	sbc	fp, r1, fp
	cmp	r7, #16384
	movcc	r2, r7
	movcs	r2, #16384
	cmp	r10, r2
	sbcs	ip, fp, r3
	movlt	r2, r10
	cmp	r2, #0
	mov	fp, r2
	beq	.L12013
	ldrd	r0, [sp, #32]
	add	r3, sp, #80
	strd	r0, [r3, #-8]!
	ldr	r1, [sp, #52]
	ldr	r0, [r6]
	ldr	r1, [r1]
	bl	vfs_read(PLT)
	ldr	r3, [r4, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	bne	.L11954
	cmp	r0, #0
	blt	.L11685
	cmp	fp, r0
	bls	.L11684
	ldr	r3, [r6, #44]
	rsb	r3, r3, #0
	and	r0, r0, r3
.L11684:
	cmp	r0, #0
	beq	.L11685
	ldrd	r2, [sp, #32]
	rsb	r7, r0, r7
	adds	r2, r2, r0
	adc	r3, r3, r0, asr #31
	strd	r2, [sp, #32]
	b	.L11678
.L11736:
	ldr	r2, .L12027+120
	str	r6, [sp, #40]
	ldr	r3, [r10, #64]
.LPIC2954:
	add	r2, pc, r2
	str	r2, [sp, #44]
	b	.L11740
.L12015:
	ldr	r3, [r10, #140]
	cmp	r3, #0
	beq	.L11775
	ldr	r4, [r10, #60]
	ldr	r2, [r4, #4]
	cmp	r2, #0
	bne	.L11747
.L11776:
	cmp	r3, #16384
	movcc	r5, r3
	movcs	r5, #16384
	str	r5, [r4, #12]
	ldr	r3, [r10, #108]
	udiv	r2, r5, r3
	mls	r2, r3, r2, r5
	cmp	r2, #0
	addne	r3, r5, r3
	moveq	r3, r5
	rsbne	r3, r2, r3
	ldr	r2, [r4, #24]
	str	r3, [r2, #4]
	ldr	r6, [r10, #8]
	cmp	r6, #0
	beq	.L12014
	ldr	r0, [r6, #88]
	ldr	r7, [r6, #104]
	ldr	fp, [r4, #24]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [sp, #40]
	str	r3, [r4, #28]
	mov	r3, #2
	str	r3, [r4, #4]
	ldr	r0, [r6, #88]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r7, #8]
	mov	r0, r7
	mov	r1, fp
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L11752
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r4, #28]
	str	r2, [r4, #4]
	beq	.L11752
	cmn	r3, #95
	bne	.L11751
	ldr	r2, [fp, #4]
	cmp	r2, #0
	beq	.L11752
.L11751:
	ldr	r0, [r6, #84]
	ldr	r1, [sp, #44]
	ldr	r2, [r7, #4]
	add	r0, r0, #32
	bl	dev_warn(PLT)
.L11752:
	ldr	r3, [r10, #140]
	ldr	r2, [r4, #8]
	rsb	r5, r5, r3
	str	r2, [r10, #60]
	str	r5, [r10, #140]
.L11743:
	ldr	r3, [r10, #64]
.L11740:
	ldr	r2, [r3, #4]
	cmp	r2, #0
	beq	.L12015
	cmp	r2, #1
	bne	.L11741
#APP
@ 2060 "/root/lol//drivers/usb/gadget/f_mass_storage.c" 1
	dmb
@ 0 "" 2
	ldr	r2, [r3, #8]
	mov	r1, #0
	str	r1, [r3, #4]
	str	r2, [r10, #64]
	ldr	r2, [r3, #24]
	ldr	r3, [r3, #12]
	ldr	r1, [r2, #48]
	cmp	r1, r3
	bcc	.L11742
	ldr	r3, [r2, #44]
	cmp	r3, #0
	beq	.L11743
.L11742:
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r10, #112]
	mov	r4, r0
	cmp	r3, #1
	bgt	.L11745
	ldr	r2, [r10, #168]
	mov	r1, #1
	ldr	r3, [r10, #56]
	str	r1, [r10, #112]
	cmp	r2, #0
	str	r3, [r10, #116]
	bne	.L11981
	b	.L11745
.L11741:
	ldr	r4, [r10, #60]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L11747
	ldr	r3, [r10, #140]
	cmp	r3, #0
	bne	.L11776
.L11747:
	mov	r0, r10
	bl	sleep_thread(PLT)
	cmp	r0, #0
	beq	.L11743
	b	.L11558
.L11621:
	ldrb	r5, [r10, #83]	@ zero_extendqisi2
	mov	r0, r10
	mov	r1, #10
	ldrb	ip, [r10, #84]	@ zero_extendqisi2
	mov	r2, #2
	movw	r3, #446
	ldr	lr, .L12027+124
	orr	ip, ip, r5, asl #8
.LPIC2904:
	add	lr, pc, lr
.L11974:
	str	lr, [sp]
	str	ip, [r10, #128]
	bl	check_command_size_in_blocks.constprop.148(PLT)
	subs	r5, r0, #0
	bne	.L11633
.L11967:
	mov	r0, r10
	bl	do_read(PLT)
	mov	r5, r0
	b	.L11633
.L11617:
	ldr	r2, [r10, #104]
	cmp	r2, #0
	beq	.L11599
	ldrb	r2, [r2, #24]	@ zero_extendqisi2
	tst	r2, #8
	beq	.L11599
	ldrb	r5, [r10, #83]	@ zero_extendqisi2
	mov	fp, #1
	mov	r0, r10
	ldrb	ip, [r10, #84]	@ zero_extendqisi2
	mov	r1, #10
	mov	r2, #2
	ldr	lr, .L12027+128
	str	fp, [sp]
	movw	r3, #446
	orr	ip, ip, r5, asl #8
.LPIC2907:
	add	lr, pc, lr
	str	lr, [sp, #4]
	str	ip, [r10, #128]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11633
	ldrb	r0, [r10, #79]	@ zero_extendqisi2
	ldrb	r2, [r10, #78]	@ zero_extendqisi2
	ldrb	r7, [r10, #77]	@ zero_extendqisi2
	ldrb	r3, [r10, #81]	@ zero_extendqisi2
	mov	r0, r0, asl #16
	ldrb	r6, [r10, #80]	@ zero_extendqisi2
	ldr	ip, [r10, #104]
	orr	r2, r0, r2, asl #24
	tst	r7, #253
	and	r1, r7, #2
	ldr	r7, [r4]
	orr	r3, r2, r3
	uxtb	r2, r1
	orr	r6, r3, r6, asl #8
	movne	r3, #9216
	movtne	r3, 5
	str	r2, [sp, #44]
	mvnne	r5, #21
	strne	r3, [ip, #28]
	bne	.L11635
	ldrd	r2, [ip, #16]
	mov	r1, #0
	cmp	r6, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r5, #21
	movtge	r3, 5
	strge	r3, [ip, #28]
	bge	.L11635
	mov	r0, r7
	mov	r1, #8
	bl	__memzero(PLT)
	ldr	r3, [sp, #44]
	strb	fp, [r7]
	cmp	r3, #0
	bne	.L12016
	mov	r3, r6, lsr #16
	mov	r5, #8
	strb	r6, [r7, #7]
	ubfx	r1, r6, #8, #8
	mov	r2, r3, lsr r5
	strb	r1, [r7, #6]
	strb	r3, [r7, #5]
	strb	r2, [r7, #4]
	b	.L11635
.L11625:
	ldrb	lr, [r10, #83]	@ zero_extendqisi2
	mov	r0, r10
	mov	r1, #12
	ldrb	r5, [r10, #82]	@ zero_extendqisi2
	mov	r2, #2
	ldrb	r3, [r10, #85]	@ zero_extendqisi2
	ldrb	ip, [r10, #84]	@ zero_extendqisi2
	mov	lr, lr, asl #16
	orr	lr, lr, r5, asl #24
	ldr	r5, .L12027+132
	orr	r3, lr, r3
	orr	ip, r3, ip, asl #8
	movw	r3, #1022
.LPIC2905:
	add	r5, pc, r5
	str	r5, [sp]
	str	ip, [r10, #128]
	bl	check_command_size_in_blocks.constprop.148(PLT)
	subs	r5, r0, #0
	bne	.L11633
	b	.L11967
.L11623:
	ldr	ip, .L12027+136
	mov	r3, #0
	mov	r6, #1
	mov	r0, r10
	mov	r1, #10
	str	r3, [r10, #128]
	mov	r2, #3
	mov	r3, #444
.LPIC2914:
	add	ip, pc, ip
	stmia	sp, {r6, ip}
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11633
	ldr	r7, [r10, #104]
	ldrb	r3, [r7, #24]	@ zero_extendqisi2
	ldr	r0, [r7]
	ubfx	r3, r3, #1, #1
	cmp	r0, #0
	orreq	r3, r3, #1
	cmp	r3, #0
	bne	.L11635
	mov	r1, r6
	bl	vfs_fsync(PLT)
	cmp	r0, #0
	beq	.L11635
	movw	r3, #3074
	movt	r3, 3
	str	r3, [r7, #28]
	b	.L11635
.L11600:
	ldr	ip, .L12027+140
	mov	r3, #1
	mov	r6, #8
	mov	r0, r10
	mov	r1, #10
	str	r6, [r10, #128]
	mov	r2, #2
	str	r3, [sp]
	mov	r3, #316
.LPIC2906:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11633
	ldrb	r1, [r10, #79]	@ zero_extendqisi2
	ldrb	r0, [r10, #78]	@ zero_extendqisi2
	ldrb	r2, [r10, #84]	@ zero_extendqisi2
	ldrb	r3, [r10, #81]	@ zero_extendqisi2
	mov	r1, r1, asl #16
	ldrb	ip, [r10, #80]	@ zero_extendqisi2
	orr	r0, r1, r0, asl #24
	cmp	r2, #1
	ldr	r1, [r10, #104]
	orr	r0, r0, r3
	ldr	r3, [r4]
	orr	r0, r0, ip, asl r6
	bgt	.L11646
	eor	r2, r2, #1
	cmp	r0, #0
	moveq	r2, #0
	andne	r2, r2, #1
	cmp	r2, #0
	bne	.L11646
	ldr	r2, [r1, #16]
	mov	r5, r6
	sub	r2, r2, #1
	mov	r0, r2, lsr #16
	ubfx	ip, r2, #8, #8
	strb	r2, [r3, #3]
	mov	r2, r0, lsr #8
	strb	ip, [r3, #2]
	strb	r0, [r3, #1]
	strb	r2, [r3]
	ldr	r2, [r1, #44]
	mov	r1, r2, lsr #16
	ubfx	r0, r2, #8, #8
	strb	r2, [r3, #7]
	mov	r2, r1, lsr #8
	strb	r0, [r3, #6]
	strb	r1, [r3, #5]
	strb	r2, [r3, #4]
	b	.L11635
.L11610:
	ldr	ip, .L12027+144
	mov	r3, #0
	mov	r0, r10
	ldrb	lr, [r10, #80]	@ zero_extendqisi2
	mov	r1, #6
	mov	r2, #2
	str	r3, [sp]
	mov	r3, #22
.LPIC2900:
	add	ip, pc, ip
	str	lr, [r10, #128]
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11633
	b	.L11964
.L11614:
	ldr	ip, .L12027+148
	mov	r3, #0
	mov	r0, r10
	mov	r1, #6
	mov	r2, #3
	str	r3, [r10, #128]
	str	r3, [sp]
	mov	r3, #16
.LPIC2902:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11633
	ldr	r6, [r10, #104]
	cmp	r6, #0
	beq	.L11641
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	tst	r3, #4
	beq	.L11971
	ldrb	r7, [r10, #80]	@ zero_extendqisi2
	tst	r7, #254
	and	r7, r7, #1
	bne	.L11659
	and	r1, r3, #144
	eor	r2, r7, #1
	cmp	r1, #16
	movne	r2, #0
	andeq	r2, r2, #1
	cmp	r2, #0
	bne	.L12017
.L11644:
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	bfi	r3, r7, #4, #1
	strb	r3, [r6, #24]
	b	.L11635
.L11627:
	ldrb	r3, [r10, #84]	@ zero_extendqisi2
	mov	r2, #0
	mov	r0, r10
	ldrb	ip, [r10, #83]	@ zero_extendqisi2
	mov	r1, #10
	ldr	lr, .L12027+152
	str	r2, [sp]
	mov	r2, #1
	orr	ip, r3, ip, asl #8
	movw	r3, #386
.LPIC2899:
	add	lr, pc, lr
	str	lr, [sp, #4]
	str	ip, [r10, #128]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11633
.L11980:
	ldr	r3, [r10, #104]
	cmp	r3, #0
	bne	.L11970
.L11641:
	mvn	r5, #21
	b	.L11635
.L12000:
	ldr	ip, .L12027+156
	mov	r3, #0
	mov	r0, r10
	mov	r1, #6
	mov	r2, #3
	str	r3, [r10, #128]
	str	r3, [sp]
	mov	r3, #18
.LPIC2911:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11633
	ldr	r6, [r10, #104]
	cmp	r6, #0
	beq	.L11641
	ldrb	r2, [r6, #24]	@ zero_extendqisi2
	tst	r2, #4
	beq	.L11971
	ldrb	r3, [r10, #77]	@ zero_extendqisi2
	tst	r3, #254
	bne	.L11659
	ldrb	r3, [r10, #80]	@ zero_extendqisi2
	tst	r3, #252
	bne	.L11659
	tst	r3, #1
	and	r3, r3, #2
	uxtb	r3, r3
	beq	.L11661
	cmp	r3, #0
	bne	.L12018
.L11662:
	ldr	r3, [r6]
	cmp	r3, #0
	moveq	r3, #14848
	mvneq	r5, #21
	movteq	r3, 2
	streq	r3, [r6, #28]
	b	.L11635
.L11615:
	ldrb	r3, [r10, #84]	@ zero_extendqisi2
	mov	r2, #1
	mov	r0, r10
	ldrb	ip, [r10, #83]	@ zero_extendqisi2
	mov	r1, #10
	ldr	lr, .L12027+160
	str	r2, [sp]
	mov	r2, #2
	orr	ip, r3, ip, asl #8
	mov	r3, #384
.LPIC2909:
	add	lr, pc, lr
	str	lr, [sp, #4]
	str	ip, [r10, #128]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11633
	ldr	r1, [r10, #104]
	mov	r2, #8
	mov	ip, #2
	ldr	r3, [r4]
	strb	r5, [r3, #2]
	strb	r5, [r3, #1]
	strb	r5, [r3]
	mov	r5, #12
	strb	r2, [r3, #3]
	ldr	r2, [r1, #16]
	mov	r0, r2, lsr #16
	strb	r2, [r3, #7]
	ubfx	r2, r2, #8, #8
	strb	r2, [r3, #6]
	mov	r2, r0, lsr #8
	strb	r0, [r3, #5]
	strb	r2, [r3, #4]
	ldr	r2, [r1, #44]
	strb	ip, [r3, #8]
	mov	r1, r2, lsr #16
	ubfx	r0, r2, #8, #8
	strb	r2, [r3, #11]
	strb	r0, [r3, #10]
	strb	r1, [r3, #9]
	b	.L11635
.L11608:
	ldrb	ip, [r10, #80]	@ zero_extendqisi2
	mov	r0, r10
	mov	r1, #6
	ldr	lr, .L12027+164
	mov	r2, #1
	mov	r3, #30
	cmp	ip, #0
.LPIC2917:
	add	lr, pc, lr
	moveq	ip, #256
	b	.L11978
.L11602:
	ldr	ip, .L12027+168
	mov	r3, #0
	mov	r0, r10
	ldrb	lr, [r10, #80]	@ zero_extendqisi2
	mov	r1, #6
	mov	r2, #1
	str	r3, [sp]
	mov	r3, #18
.LPIC2898:
	add	ip, pc, ip
	str	lr, [r10, #128]
	str	ip, [sp, #4]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11633
	b	.L11980
.L11606:
	ldr	ip, .L12027+172
	mov	r2, #1
	str	r3, [r10, #128]
	mov	r0, r10
	mov	r1, #6
	str	r2, [sp]
	mov	r2, #3
.LPIC2915:
	add	ip, pc, ip
	str	ip, [sp, #4]
	bl	check_command(PLT)
	mov	r5, r0
	b	.L11633
.L11604:
	ldrb	ip, [r10, #80]	@ zero_extendqisi2
	mov	r0, r10
	mov	r1, #6
	ldr	lr, .L12027+176
	mov	r2, #2
	mov	r3, #30
	cmp	ip, #0
.LPIC2903:
	add	lr, pc, lr
	moveq	ip, #256
	b	.L11974
.L11612:
	ldr	r1, .L12027+180
	mov	r5, #0
	ldr	r0, .L12027+184
.LPIC2924:
	add	r1, pc, r1
	sub	r1, r1, #3968
.LPIC2923:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	r1, .L12027+188
	mov	r0, r10
.LPIC2925:
	add	r1, pc, r1
	bl	send_message(PLT)
	b	.L11635
.L11630:
	ldr	r1, .L12027+192
	add	r6, r10, #235
	ldrb	r5, [r10, #80]	@ zero_extendqisi2
	mov	r3, r6
	ldr	r0, .L12027+196
.LPIC2932:
	add	r1, pc, r1
	sub	r1, r1, #3952
	str	r5, [r10, #128]
	mov	r2, r5
	sub	r1, r1, #8
.LPIC2931:
	add	r0, pc, r0
	ldr	r7, [r4]
	bl	printk(PLT)
	ldr	r1, [r10, #128]
	cmp	r1, #0
	bne	.L12019
.L11709:
	cmp	r5, #101
	mov	r0, r7
	movhi	r2, #101
	mov	r1, r6
	movls	r2, r5
	movhi	r5, r2
	bl	memcpy(PLT)
	b	.L11635
.L11629:
	ldrb	ip, [r10, #83]	@ zero_extendqisi2
	mov	r2, #1
	mov	r0, r10
	ldrb	lr, [r10, #82]	@ zero_extendqisi2
	mov	r1, #12
	ldrb	r3, [r10, #84]	@ zero_extendqisi2
	str	r2, [sp]
	mov	r2, #2
	mov	ip, ip, asl #8
	orr	ip, ip, lr, asl #16
	ldr	lr, .L12027+200
	orr	ip, ip, r3
	mov	r3, #956
	mov	ip, ip, asl #9
.LPIC2926:
	add	lr, pc, lr
	str	lr, [sp, #4]
	str	ip, [r10, #128]
	bl	check_command(PLT)
	subs	r5, r0, #0
	bne	.L11633
	ldrb	r6, [r10, #79]	@ zero_extendqisi2
	ldrb	ip, [r10, #83]	@ zero_extendqisi2
	ldrb	r2, [r10, #78]	@ zero_extendqisi2
	ldrb	r7, [r10, #82]	@ zero_extendqisi2
	mov	r6, r6, asl #16
	ldrb	r3, [r10, #84]	@ zero_extendqisi2
	mov	ip, ip, asl #8
	ldrb	r1, [r10, #81]	@ zero_extendqisi2
	orr	r6, r6, r2, asl #24
	ldrb	r2, [r10, #80]	@ zero_extendqisi2
	orr	r7, ip, r7, asl #16
	ldr	fp, [r10, #104]
	orrs	r3, r7, r3
	orr	r3, r6, r1
	orr	r3, r3, r2, asl #8
	mov	ip, r3
	str	r3, [sp, #56]
	beq	.L11633
	ldrd	r2, [fp, #16]
	mov	r1, #0
	cmp	ip, r2
	sbcs	r3, r1, r3
	movge	r3, #8448
	mvnge	r5, #21
	movtge	r3, 5
	strge	r3, [fp, #28]
	bge	.L11633
	ldrb	r2, [r10, #85]	@ zero_extendqisi2
	and	r3, r2, #248
	cmp	r3, #248
	str	r3, [sp, #60]
	beq	.L12020
	ldr	r2, [sp, #56]
	ldr	r3, [r10, #128]
	mov	r1, r2, lsr #23
	mov	r2, r2, asl #9
	cmp	r3, #0
	mov	r0, r3
	str	r1, [sp, #28]
	str	r2, [sp, #24]
	beq	.L11708
.L11692:
	mov	r3, sp
	str	r9, [sp, #48]
	bic	r3, r3, #8128
	str	r8, [sp, #52]
	ldrd	r8, [sp, #24]
	str	r4, [sp, #44]
	mov	r4, r0
	str	r3, [sp, #64]
	ldr	r3, .L12027+204
.LPIC2930:
	add	r3, pc, r3
	str	r3, [sp, #68]
.L11691:
	ldrd	r2, [fp, #8]
	mov	r1, #0
	subs	r2, r2, r8
	sbc	r3, r3, r9
	cmp	r4, #16384
	movcc	r0, r4
	movcs	r0, #16384
	cmp	r2, r0
	sbcs	ip, r3, r1
	ubfx	r3, r8, #0, #12
	movlt	r0, r2
	cmp	r3, #0
	mov	r7, r0
	beq	.L11694
	rsb	r3, r3, #4096
	cmp	r3, r0
	movcc	r7, r3
	movcs	r7, r0
.L11694:
	ldr	r6, [r10, #60]
	b	.L11695
.L11696:
	mov	r0, r10
	bl	sleep_thread(PLT)
	cmp	r0, #0
	bne	.L11955
.L11695:
	ldr	r3, [r6, #4]
	cmp	r3, #0
	bne	.L11696
	cmp	r7, #0
	beq	.L12021
	ldr	r3, [sp, #60]
	strd	r8, [sp, #72]
	cmp	r3, #248
	beq	.L12022
	ldr	r0, [fp]
	mov	r2, r7
	add	r3, sp, #72
	ldr	r1, [r6]
	bl	vfs_read(PLT)
.L11700:
	ldr	r3, [sp, #64]
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	ands	r3, r3, #1
	bne	.L11785
	cmp	r0, #0
	blt	.L11701
	cmp	r7, r0
	ldr	r3, [r10, #136]
	bhi	.L12023
	rsb	r3, r0, r3
	adds	r8, r8, r0
	adc	r9, r9, r0, asr #31
	mov	r2, #1
	str	r3, [r10, #136]
	ldr	r3, [r6, #16]
	rsb	r4, r0, r4
	str	r0, [r3, #4]
	str	r2, [r6, #4]
.L11703:
	cmp	r4, #0
	beq	.L11956
	ldr	r5, [r10, #8]
	cmp	r5, #0
	beq	.L12024
	ldr	r0, [r5, #88]
	ldr	r3, [r6, #16]
	ldr	r7, [r5, #100]
	add	r0, r0, #44
	str	r3, [sp, #24]
	bl	_raw_spin_lock_irq(PLT)
	mov	r2, #1
	mov	r3, #2
	str	r2, [r6, #20]
	str	r3, [r6, #4]
	ldr	r0, [r5, #88]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r7, #8]
	mov	r0, r7
	mov	r2, #208
	ldr	r1, [sp, #24]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L11774
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r6, #20]
	str	r2, [r6, #4]
	beq	.L11774
	cmn	r3, #95
	bne	.L11706
	ldr	r2, [sp, #24]
	ldr	r2, [r2, #4]
	cmp	r2, #0
	beq	.L11774
.L11706:
	ldr	r0, [r5, #84]
	ldr	r1, [sp, #68]
	ldr	r2, [r7, #4]
	add	r0, r0, #32
	bl	dev_warn(PLT)
.L11774:
	ldr	r3, [r6, #8]
	str	r3, [r10, #60]
	b	.L11691
.L12002:
	ldr	r2, [r4, #16]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #2
	strb	r3, [r2, #26]
	ldr	r5, [r10, #8]
	cmp	r5, #0
	beq	.L12025
	ldr	r0, [r5, #88]
	ldr	r7, [r5, #100]
	ldr	fp, [r4, #16]
	add	r0, r0, #44
	bl	_raw_spin_lock_irq(PLT)
	mov	r3, #1
	str	r6, [r4, #4]
	str	r3, [r4, #20]
	ldr	r0, [r5, #88]
	add	r0, r0, #44
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r7, #8]
	mov	r0, r7
	mov	r1, fp
	mov	r2, #208
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	beq	.L11730
	mov	r2, #0
	cmn	r3, #108
	str	r2, [r4, #20]
	str	r2, [r4, #4]
	beq	.L11730
	cmn	r3, #95
	bne	.L11729
	ldr	r2, [fp, #4]
	cmp	r2, #0
	beq	.L11730
.L11729:
	ldr	r0, [r5, #84]
	ldr	r1, .L12027+208
	ldr	r2, [r7, #4]
	add	r0, r0, #32
.LPIC2949:
	add	r1, pc, r1
	bl	dev_warn(PLT)
.L11730:
	ldrb	r2, [r10, #144]	@ zero_extendqisi2
	ldr	r3, [r4, #8]
	tst	r2, #1
	str	r3, [r10, #60]
	beq	.L11775
.L11726:
	ldr	r4, [r10, #8]
	mov	r1, #1
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	b	.L11731
.L11732:
	mov	r0, #100
	bl	msleep_interruptible(PLT)
	cmp	r0, #0
	bne	.L11558
	ldr	r0, [r4, #100]
	mov	r1, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
.L11731:
	cmp	r0, #0
	beq	.L11775
	cmn	r0, #11
	beq	.L11732
	ldr	r3, [r4, #84]
	mov	r2, r0
	ldr	r1, .L12027+212
	add	r0, r3, #32
.LPIC2950:
	add	r1, pc, r1
	bl	dev_warn(PLT)
	b	.L11775
.L12014:
	ldr	r2, .L12027+216
	movw	r3, #805
	ldr	r0, [r10]
	ldr	r1, .L12027+220
.LPIC2952:
	add	r2, pc, r2
	add	r2, r2, #3408
	add	r0, r0, #32
.LPIC2951:
	add	r1, pc, r1
	add	r2, r2, #8
	bl	dev_err(PLT)
	ldr	r0, .L12027+224
	movw	r1, #550
.LPIC2953:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11558
.L12023:
	bic	r0, r0, #508
	mov	r2, #1
	bic	r0, r0, #3
	rsb	r3, r0, r3
	adds	r8, r8, r0
	adc	r9, r9, r0, asr #31
	cmp	r7, r0
	str	r3, [r10, #136]
	ldr	r3, [r6, #16]
	rsb	r4, r0, r4
	str	r0, [r3, #4]
	str	r2, [r6, #4]
	bls	.L11703
	strd	r8, [sp, #24]
	ldr	r4, [sp, #44]
	ldr	r9, [sp, #48]
	ldr	r8, [sp, #52]
.L11773:
	ldr	r2, [sp, #24]
	mov	r1, #4352
	ldr	r0, [sp, #28]
	movt	r1, 3
	ldrb	r3, [fp, #24]	@ zero_extendqisi2
	str	r1, [fp, #28]
	mov	r2, r2, lsr #9
	orr	r2, r2, r0, asl #23
	orr	r3, r3, #64
	strb	r3, [fp, #24]
	str	r2, [fp, #32]
.L11698:
	ldr	r3, [sp, #60]
	cmp	r3, #248
	beq	.L12026
.L11708:
	mvn	r5, #4
	b	.L11633
.L11955:
	strd	r8, [sp, #24]
	ldr	r4, [sp, #44]
	mov	r5, r0
	ldr	r9, [sp, #48]
	ldr	r8, [sp, #52]
	b	.L11633
.L12019:
	mov	r0, r7
	bl	__memzero(PLT)
	b	.L11709
.L12001:
	ldr	r2, .L12027+228
	movw	r3, #2135
	ldr	r0, [r10]
	ldr	r1, .L12027+232
.LPIC2940:
	add	r2, pc, r2
	sub	r2, r2, #3936
	add	r0, r0, #32
.LPIC2939:
	add	r1, pc, r1
	sub	r2, r2, #4
	bl	dev_err(PLT)
	ldr	r0, .L12027+236
	movw	r1, #550
.LPIC2941:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11558
.L12007:
	ldr	r2, .L12027+240
	movw	r3, #2120
	ldr	r0, [r10]
	ldr	r1, .L12027+244
.LPIC2937:
	add	r2, pc, r2
	sub	r2, r2, #3936
	add	r0, r0, #32
.LPIC2936:
	add	r1, pc, r1
	sub	r2, r2, #4
	bl	dev_err(PLT)
	ldr	r0, .L12027+248
	movw	r1, #550
.LPIC2938:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11558
.L12008:
	mov	r1, #20
	mvn	lr, #95
	strb	r7, [r6, #2]
	mvn	ip, #94
	mvn	r5, #93
	strb	r7, [r6, #3]
	cmp	fp, #0
	strb	r7, [r6, #4]
	strb	r3, [r6, #6]
	strb	r3, [r6, #8]
	strb	r3, [r6, #9]
	strb	r3, [r6, #10]
	strb	r3, [r6, #11]
	strb	r7, [r6, #12]
	strb	r3, [r6, #13]
	strb	r3, [r6, #14]
	strb	r7, [r6, #15]
	strb	r3, [r6, #17]
	strb	r3, [r6, #19]
	strb	r3, [r6, #20]
	strb	r3, [r6, #21]
	strb	r3, [r6, #22]
	strb	r7, [r6, #23]
	strb	r3, [r6, #24]
	strb	r3, [r6, #25]
	strb	r7, [r6, #26]
	strb	r3, [r6, #28]
	strb	r3, [r6, #30]
	strb	r3, [r6, #31]
	strb	r3, [r6, #32]
	strb	r1, [r6, #5]
	strb	r1, [r6, #16]
	strb	r1, [r6, #27]
	strb	lr, [r6, #7]
	strb	ip, [r6, #18]
	strb	r5, [r6, #29]
	beq	.L11653
	strb	r3, [r6, #33]
	ldr	r2, [r2, #16]
	mov	ip, #75
	strb	r7, [r6, #37]
	movw	lr, #4500
	add	r5, r6, #48
	strb	r7, [r6, #40]
	strb	r1, [r6, #38]
	mov	r1, #60
	add	r2, r2, #150
	strb	r3, [r6, #39]
	strb	r3, [r6, #41]
	sdiv	r7, r2, ip
	strb	r3, [r6, #42]
	strb	r3, [r6, #43]
	sdiv	lr, r2, lr
	strb	r3, [r6, #44]
	strb	r3, [r6, #45]
	strb	r3, [r6, #47]
	strb	r0, [r6, #46]
	sdiv	r3, r7, r1
	mls	r2, ip, r7, r2
	strb	lr, [r6, #34]
	strb	r2, [r6, #36]
	mls	r1, r1, r3, r7
	strb	r1, [r6, #35]
.L11654:
	rsb	r5, r6, r5
	sub	r3, r5, #2
	uxth	r3, r3
	mov	r2, r3, lsr #8
	strb	r3, [r6, #1]
	strb	r2, [r6]
	b	.L11633
.L12009:
	mov	r1, #2
	mvn	r0, #85
	strb	r5, [r6, #11]
	strb	r5, [r6, #9]
	strb	r5, [r6, #8]
	strb	r1, [r6, #10]
	mov	r1, #75
	strb	r0, [r6, #14]
	strb	r3, [r6, #13]
	ldr	r3, [r2, #16]
	mov	r2, #60
	strb	r5, [r6, #16]
	mov	r5, #20
	mov	r3, r3, lsr #2
	add	r3, r3, #150
	udiv	r0, r3, r1
	udiv	ip, r0, r2
	mls	r3, r1, r0, r3
	strb	r3, [r6, #19]
	mls	r2, r2, ip, r0
	strb	ip, [r6, #17]
	strb	r2, [r6, #18]
	b	.L11635
.L12016:
	mov	r3, r6, lsr #2
	mov	r0, #75
	strb	r5, [r7, #4]
	mov	r2, #60
	add	r3, r3, #150
	mov	r5, #8
	udiv	r1, r3, r0
	udiv	ip, r1, r2
	mls	r0, r0, r1, r3
	strb	r0, [r7, #7]
	mls	r2, r2, ip, r1
	strb	ip, [r7, #5]
	strb	r2, [r7, #6]
	b	.L11635
.L11653:
	ldr	r3, [r2, #16]
	strb	r1, [r6, #38]
	add	r5, r6, #48
	strb	r7, [r6, #37]
	strb	fp, [r6, #39]
	strb	r7, [r6, #40]
	mov	r2, r3, lsr #16
	ubfx	r1, r3, #8, #8
	strb	r3, [r6, #36]
	strb	fp, [r6, #41]
	mov	r3, r2, lsr #8
	strb	fp, [r6, #42]
	strb	fp, [r6, #43]
	strb	fp, [r6, #44]
	strb	fp, [r6, #45]
	strb	fp, [r6, #46]
	strb	fp, [r6, #47]
	strb	r2, [r6, #34]
	strb	r3, [r6, #33]
	strb	r1, [r6, #35]
	b	.L11654
.L12024:
	ldr	r2, .L12029
	mov	r3, #796
	strd	r8, [sp, #24]
	ldr	r0, [r10]
	mvn	r5, #4
	ldr	r1, .L12029+4
	ldr	r4, [sp, #44]
.LPIC2928:
	add	r2, pc, r2
	ldr	r9, [sp, #48]
	add	r2, r2, #3392
	add	r0, r0, #32
	ldr	r8, [sp, #52]
.LPIC2927:
	add	r1, pc, r1
	add	r2, r2, #4
	bl	dev_err(PLT)
	ldr	r0, .L12029+8
	movw	r1, #550
.LPIC2929:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11633
.L11956:
	strd	r8, [sp, #24]
	ldr	r4, [sp, #44]
	ldr	r9, [sp, #48]
	ldr	r8, [sp, #52]
	b	.L11698
.L12025:
	ldr	r0, [r10]
	mov	r3, #796
	ldr	r1, .L12029+12
	ldr	r2, [sp, #20]
	add	r0, r0, #32
.LPIC2946:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldr	r0, .L12029+16
	movw	r1, #550
.LPIC2948:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldrb	r2, [r10, #144]	@ zero_extendqisi2
	ldr	r3, [r4, #8]
	tst	r2, #1
	str	r3, [r10, #60]
	beq	.L11558
	b	.L11726
.L12003:
	ldr	r0, [r10]
	mov	r2, r8
	mov	r3, #796
	ldr	r1, .L12029+20
	add	r0, r0, #32
.LPIC2942:
	add	r1, pc, r1
	bl	dev_err(PLT)
	ldr	r0, .L12029+24
	movw	r1, #550
.LPIC2944:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L11558
.L11785:
	strd	r8, [sp, #24]
	ldr	r4, [sp, #44]
	ldr	r9, [sp, #48]
	ldr	r8, [sp, #52]
.L11968:
	mvn	r5, #3
	b	.L11633
.L12022:
	ldr	r1, [r6]
	mov	r2, r7
	add	r3, sp, #72
	ldr	r0, [fp]
	add	r1, r1, #16
	bl	vfs_read(PLT)
	b	.L11700
.L11954:
	mov	r4, r5
	ldr	r10, [sp, #44]
	ldr	r8, [sp, #48]
	b	.L11968
.L12012:
	mov	r4, r5
	ldr	r10, [sp, #44]
	mov	r5, r8
	ldr	r8, [sp, #48]
	b	.L11633
.L12013:
	mov	r4, r5
	ldr	r10, [sp, #44]
	mov	r5, r8
	ldr	r3, [r6, #40]
	mov	r2, #8448
	ldr	r8, [sp, #48]
	movt	r2, 5
.L11976:
	str	r2, [r6, #28]
	ldr	r2, [sp, #32]
	subs	r1, r3, #32
	ldr	r0, [sp, #36]
	mov	r2, r2, lsr r3
	rsb	r3, r3, #32
	orr	r2, r2, r0, asl r3
	movpl	r3, r0
	orrpl	r2, r2, r3, asr r1
	ldrb	r3, [r6, #24]	@ zero_extendqisi2
	str	r2, [r6, #32]
	orr	r3, r3, #64
	strb	r3, [r6, #24]
	b	.L11633
.L12020:
	mov	r3, #2352
	mov	r0, r3
	ldr	r3, [sp, #56]
	mov	r2, r3, lsr #21
	mov	r3, r3, asl #11
	str	r2, [sp, #28]
	str	r3, [sp, #24]
	b	.L11692
.L12006:
	ldrb	r2, [r10, #144]	@ zero_extendqisi2
	mov	fp, #0
	mov	r7, #9472
	movt	r7, 5
	mov	r3, fp
	orr	r2, r2, #16
	strb	r2, [r10, #144]
	b	.L11657
.L12018:
	ldr	r1, .L12029+28
	mov	r0, r10
.LPIC2912:
	add	r1, pc, r1
	bl	send_message(PLT)
	b	.L11662
.L11782:
	mov	r5, r0
	b	.L11633
.L11701:
	ldr	r1, [r6, #16]
	mov	r2, #1
	strd	r8, [sp, #24]
	ldr	r4, [sp, #44]
	ldr	r9, [sp, #48]
	ldr	r8, [sp, #52]
	str	r3, [r1, #4]
	str	r2, [r6, #4]
	b	.L11773
.L12011:
	mov	r0, r5
	bl	strlen(PLT)
	ldr	r3, .L12029+32
	add	r2, r5, r0
.LPIC2894:
	add	r3, pc, r3
	ldr	r1, [r3]
	ldrh	r3, [r3, #4]
	str	r1, [r5, r0]	@ unaligned
	strh	r3, [r2, #4]	@ unaligned
	strb	fp, [r7, #3652]
	b	.L11638
.L12026:
	ldr	r6, [r6]
	mov	fp, #0
	mov	r1, #255
	mov	r2, #10
	mvn	r5, #4
	mov	r0, r6
	strb	fp, [r0], #1
	bl	memset(PLT)
	ldr	r3, [sp, #56]
	strb	fp, [r6, #11]
	mov	r2, #1
	mov	fp, #60
	movw	lr, #4500
	strb	r2, [r6, #15]
	add	r0, r6, #2064
	mov	r1, #288
	add	r7, r3, #150
	mov	r3, #75
	sdiv	ip, r7, r3
	sdiv	lr, r7, lr
	sdiv	r2, ip, fp
	mls	r3, r3, ip, r7
	strb	lr, [r6, #12]
	strb	r3, [r6, #14]
	mls	r2, fp, r2, ip
	strb	r2, [r6, #13]
	bl	__memzero(PLT)
	b	.L11633
.L12021:
	mov	r0, r8
	mov	r1, r9
	ldrb	r3, [fp, #24]	@ zero_extendqisi2
	mov	r2, r0, lsr #9
	ldr	r4, [sp, #44]
	strd	r0, [sp, #24]
	mov	r1, #8448
	ldr	r9, [sp, #48]
	ldr	r0, [sp, #28]
	movt	r1, 5
	orr	r3, r3, #64
	ldr	r8, [sp, #52]
	str	r1, [fp, #28]
	strb	r3, [fp, #24]
	orr	r2, r2, r0, asl #23
	str	r2, [fp, #32]
	ldr	r3, [r6, #16]
	mov	r2, #1
	str	r7, [r3, #4]
	str	r2, [r6, #4]
	b	.L11698
.L12017:
	ldr	r0, [r6]
	ubfx	r3, r3, #1, #1
	cmp	r0, #0
	orreq	r3, r3, #1
	cmp	r3, #0
	bne	.L11644
	mov	r1, #1
	bl	vfs_fsync(PLT)
	b	.L11644
.L11971:
	mov	r3, #335872
	mvn	r5, #21
	str	r3, [r6, #28]
	b	.L11635
.L11659:
	mov	r3, #9216
	mvn	r5, #21
	movt	r3, 5
	str	r3, [r6, #28]
	b	.L11635
.L11646:
	mov	r3, #9216
	mvn	r5, #21
	movt	r3, 5
	str	r3, [r1, #28]
	b	.L11635
.L12010:
	ldrb	r3, [r10, #144]	@ zero_extendqisi2
	mov	r1, #36
	mov	r0, r6
	mov	r5, r1
	orr	r3, r3, #16
	strb	r3, [r10, #144]
	bl	__memzero(PLT)
	mov	r2, #127
	mov	r3, #31
	strb	r2, [r6]
	strb	r3, [r6, #4]
	b	.L11635
.L11685:
	mov	r2, #4352
	mov	r4, r5
	ldr	r10, [sp, #44]
	mov	r5, r8
	ldr	r3, [r6, #40]
	movt	r2, 3
	ldr	r8, [sp, #48]
	b	.L11976
.L12030:
	.align	2
.L12029:
	.word	.LANCHOR3-(.LPIC2928+8)
	.word	.LC409-(.LPIC2927+8)
	.word	.LC410-(.LPIC2929+8)
	.word	.LC409-(.LPIC2946+8)
	.word	.LC410-(.LPIC2948+8)
	.word	.LC409-(.LPIC2942+8)
	.word	.LC410-(.LPIC2944+8)
	.word	.LC661-(.LPIC2912+8)
	.word	.LC646-(.LPIC2894+8)
	.fnend
	.size	fsg_main_thread, .-fsg_main_thread
	.align	2
	.global	usb_diag_open
	.type	usb_diag_open, %function
usb_diag_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L12044
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r8, r1
	mov	r9, r2
	str	r10, [sp, #24]
.LPIC2958:
	add	r3, pc, r3
	str	lr, [sp, #28]
	sub	r0, r3, #1472
	sub	r0, r0, #4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L12044+4
	mov	r10, r0
.LPIC2959:
	add	r3, pc, r3
	ldr	r4, [r3]
	mov	r5, r4
	sub	r4, r4, #4
	cmp	r5, r3
	beq	.L12032
	ldr	r7, .L12044+8
.LPIC2961:
	add	r7, pc, r7
	b	.L12034
.L12043:
	ldr	r4, [r4, #4]
	mov	r5, r4
	sub	r4, r4, #4
	cmp	r5, r7
	beq	.L12032
.L12034:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L12043
	ldr	r0, .L12044+12
	mov	r1, r10
.LPIC2968:
	add	r0, pc, r0
	sub	r0, r0, #1472
	sub	r0, r0, #4
	bl	_raw_spin_unlock_irqrestore(PLT)
.L12037:
	ldr	r7, .L12044+16
	str	r6, [r4]
	str	r8, [r4, #16]
	str	r9, [r4, #12]
.LPIC2962:
	add	r7, pc, r7
	sub	r7, r7, #1472
	sub	r7, r7, #4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, .L12044+20
	mov	r6, r0
	mov	r0, r5
.LPIC2963:
	add	r2, pc, r2
	ldr	r1, [r2, #4]
	bl	__list_add(PLT)
	mov	r0, r7
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
.L12040:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12032:
	ldr	r0, .L12044+24
	mov	r1, r10
.LPIC2966:
	add	r0, pc, r0
	sub	r0, r0, #1472
	sub	r0, r0, #4
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L12044+28
.LPIC2969:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r5, #20
	moveq	r4, #16
	beq	.L12037
	movw	r1, #32976
	mov	r2, #24
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	mvneq	r0, #11
	beq	.L12040
	add	r5, r4, #4
	b	.L12037
.L12045:
	.align	2
.L12044:
	.word	.LANCHOR4-(.LPIC2958+8)
	.word	.LANCHOR0-(.LPIC2959+8)
	.word	.LANCHOR0-(.LPIC2961+8)
	.word	.LANCHOR4-(.LPIC2968+8)
	.word	.LANCHOR4-(.LPIC2962+8)
	.word	.LANCHOR0-(.LPIC2963+8)
	.word	.LANCHOR4-(.LPIC2966+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC2969+8))
	.fnend
	.size	usb_diag_open, .-usb_diag_open
	.align	2
	.global	usb_diag_close
	.type	usb_diag_close, %function
usb_diag_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L12053
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r7, #0
	str	lr, [sp, #20]
	str	r8, [sp, #16]
.LPIC2970:
	add	r4, pc, r4
	sub	r0, r4, #1472
	sub	r0, r0, #4
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r5, r0
	str	r7, [r6, #16]
	add	r0, r6, #4
	str	r7, [r6, #12]
	bl	list_del(PLT)
	ldr	r3, [r4, #-1452]
	sub	r2, r4, #1440
	sub	r2, r2, #12
	cmp	r3, r2
	sub	r3, r3, #140
	beq	.L12050
.L12049:
	ldr	r4, [r3, #124]
	cmp	r4, r6
	streq	r7, [r3, #124]
	ldr	r3, [r3, #140]
	cmp	r3, r2
	sub	r3, r3, #140
	bne	.L12049
.L12050:
	mov	r0, r6
	bl	kfree(PLT)
	ldr	r0, .L12053+4
	mov	r1, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
.LPIC2973:
	add	r0, pc, r0
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	sub	r0, r0, #1472
	sub	r0, r0, #4
	b	_raw_spin_unlock_irqrestore(PLT)
.L12054:
	.align	2
.L12053:
	.word	.LANCHOR4-(.LPIC2970+8)
	.word	.LANCHOR4-(.LPIC2973+8)
	.fnend
	.size	usb_diag_close, .-usb_diag_close
	.align	2
	.global	usb_diag_alloc_req
	.type	usb_diag_alloc_req, %function
usb_diag_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #20]
	.pad #12
	sub	sp, sp, #12
	cmp	r4, #0
	beq	.L12074
	add	fp, r4, #108
	mov	r5, r4
	mov	r0, fp
	mov	r8, r1
	mov	r10, r2
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r1, [r5, #100]!
	str	r0, [sp, #4]
	cmp	r1, r5
	ldr	r7, [r1]
	bne	.L12060
	b	.L12061
.L12075:
	mov	r7, r3
.L12060:
	mov	r0, r1
	sub	r6, r1, #36
	bl	list_del(PLT)
	ldr	r0, [r4, #88]
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r5, r7
	ldr	r3, [r7]
	mov	r1, r7
	bne	.L12075
.L12061:
	mov	r7, r4
	ldr	r1, [r7, #92]!
	cmp	r1, r7
	ldr	r9, [r1]
	bne	.L12064
	b	.L12059
.L12077:
	mov	r9, r3
.L12064:
	mov	r0, r1
	sub	r6, r1, #36
	bl	list_del(PLT)
	ldr	r0, [r4, #84]
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r9
	ldr	r3, [r9]
	mov	r1, r9
	bne	.L12077
.L12059:
	cmp	r8, #0
	ble	.L12063
	ldr	r9, .L12092
	mov	r6, #0
.LPIC2975:
	add	r9, pc, r9
	b	.L12062
.L12090:
	str	r9, [r3, #28]
	ldr	r1, [r4, #104]
	bl	__list_add(PLT)
	cmp	r6, r8
	beq	.L12063
.L12062:
	ldr	r0, [r4, #88]
	mov	r1, #32
	add	r6, r6, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r5
	add	r0, r3, #36
	bne	.L12090
.L12067:
	ldr	r1, [r4, #100]
	cmp	r1, r5
	ldr	r8, [r1]
	bne	.L12071
	b	.L12072
.L12079:
	mov	r8, r3
.L12071:
	mov	r0, r1
	sub	r6, r1, #36
	bl	list_del(PLT)
	ldr	r0, [r4, #88]
	mov	r1, r6
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r5, r8
	ldr	r3, [r8]
	mov	r1, r8
	bne	.L12079
.L12072:
	ldr	r1, [r4, #92]
	cmp	r1, r7
	ldr	r6, [r1]
	bne	.L12073
	b	.L12070
.L12080:
	mov	r6, r3
.L12073:
	mov	r0, r1
	sub	r5, r1, #36
	bl	list_del(PLT)
	ldr	r0, [r4, #84]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r6
	ldr	r3, [r6]
	mov	r1, r6
	bne	.L12080
.L12070:
	mov	r0, fp
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #11
.L12056:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12063:
	cmp	r10, #0
	ble	.L12066
	ldr	r8, .L12092+4
	mov	r6, #0
.LPIC2976:
	add	r8, pc, r8
	b	.L12065
.L12091:
	str	r8, [r3, #28]
	ldr	r1, [r4, #96]
	bl	__list_add(PLT)
	cmp	r6, r10
	beq	.L12066
.L12065:
	ldr	r0, [r4, #84]
	mov	r1, #32
	add	r6, r6, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r7
	add	r0, r3, #36
	bne	.L12091
	b	.L12067
.L12066:
	mov	r0, fp
	ldr	r1, [sp, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L12056
.L12074:
	mvn	r0, #18
	b	.L12056
.L12093:
	.align	2
.L12092:
	.word	diag_write_complete-(.LPIC2975+8)
	.word	diag_read_complete-(.LPIC2976+8)
	.fnend
	.size	usb_diag_alloc_req, .-usb_diag_alloc_req
	.align	2
	.global	usb_diag_read
	.type	usb_diag_read, %function
usb_diag_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L12098
	add	r8, r4, #108
	mov	r6, r1
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #112]
	mov	r10, r0
	cmp	r3, #0
	beq	.L12104
	ldr	r5, [r4, #92]
	add	r9, r4, #92
	cmp	r5, r9
	beq	.L12105
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del(PLT)
	mov	r0, r8
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r6, [r5, #-4]
	str	r3, [r5, #-32]
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L12106
.L12095:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12106:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #96]
	mov	r0, r5
	ldr	r5, .L12107
	bl	__list_add(PLT)
	mov	r0, r8
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L12107+4
.LPIC2980:
	add	r5, pc, r5
	sub	r5, r5, #3920
	sub	r5, r5, #4
	mov	r1, r5
.LPIC2979:
	add	r0, pc, r0
	add	r0, r0, #2368
	add	r0, r0, #4
	bl	___ratelimit(PLT)
	cmp	r0, #0
	mvneq	r0, #4
	beq	.L12095
	ldr	r3, [r4, #116]
	mov	r2, r5
	ldr	r1, .L12107+8
	ldr	r0, [r3]
.LPIC2981:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mvn	r0, #4
	b	.L12095
.L12098:
	mvn	r0, #18
	b	.L12095
.L12104:
	mov	r0, r8
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #4
	b	.L12095
.L12105:
	mov	r0, r8
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #116]
	ldr	r2, .L12107+12
	ldr	r1, .L12107+16
	ldr	r0, [r3]
.LPIC2978:
	add	r2, pc, r2
	sub	r2, r2, #3920
.LPIC2977:
	add	r1, pc, r1
	sub	r2, r2, #4
	add	r0, r0, #32
	bl	dev_err(PLT)
	mvn	r0, #10
	b	.L12095
.L12108:
	.align	2
.L12107:
	.word	.LANCHOR9-(.LPIC2980+8)
	.word	.LANCHOR2-(.LPIC2979+8)
	.word	.LC676-(.LPIC2981+8)
	.word	.LANCHOR9-(.LPIC2978+8)
	.word	.LC675-(.LPIC2977+8)
	.fnend
	.size	usb_diag_read, .-usb_diag_read
	.align	2
	.global	usb_diag_write
	.type	usb_diag_write, %function
usb_diag_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L12115
	add	r8, r4, #108
	mov	r6, r1
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #112]
	mov	r10, r0
	cmp	r3, #0
	beq	.L12120
	ldr	r5, [r4, #100]
	add	r9, r4, #100
	cmp	r5, r9
	beq	.L12121
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del(PLT)
	mov	r0, r8
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r6, [r5, #-4]
	str	r3, [r5, #-32]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L12122
	ldr	r2, [r4, #128]
	ldr	r3, [r4, #136]
	add	r2, r2, #1
	add	r3, r3, #1
	str	r2, [r4, #128]
	str	r3, [r4, #136]
.L12110:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12115:
	mvn	r0, #18
	b	.L12110
.L12120:
	mov	r0, r8
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #4
	b	.L12110
.L12122:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #104]
	mov	r0, r5
	ldr	r5, .L12123
	bl	__list_add(PLT)
	ldr	r0, .L12123+4
.LPIC2986:
	add	r5, pc, r5
	sub	r5, r5, #3904
.LPIC2985:
	add	r0, pc, r0
	sub	r5, r5, #4
	add	r0, r0, #2384
	mov	r1, r5
	add	r0, r0, #12
	bl	___ratelimit(PLT)
	cmp	r0, #0
	beq	.L12114
	ldr	r3, [r4, #116]
	mov	r2, r5
	ldr	r1, .L12123+8
	ldr	r0, [r3]
.LPIC2987:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
.L12114:
	mov	r0, r8
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #4
	b	.L12110
.L12121:
	mov	r0, r8
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4, #116]
	ldr	r2, .L12123+12
	ldr	r1, .L12123+16
	ldr	r0, [r3]
.LPIC2984:
	add	r2, pc, r2
	sub	r2, r2, #3904
.LPIC2983:
	add	r1, pc, r1
	sub	r2, r2, #4
	add	r0, r0, #32
	bl	dev_err(PLT)
	mvn	r0, #10
	b	.L12110
.L12124:
	.align	2
.L12123:
	.word	.LANCHOR9-(.LPIC2986+8)
	.word	.LANCHOR2-(.LPIC2985+8)
	.word	.LC676-(.LPIC2987+8)
	.word	.LANCHOR9-(.LPIC2984+8)
	.word	.LC675-(.LPIC2983+8)
	.fnend
	.size	usb_diag_write, .-usb_diag_write
	.align	2
	.global	diag_function_add
	.type	diag_function_add, %function
diag_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L12145
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC2989:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	fp, [r3]
	cmp	r3, fp
	sub	fp, fp, #4
	beq	.L12126
	ldr	r7, .L12145+4
	mov	r4, r1
.LPIC2991:
	add	r7, pc, r7
	b	.L12128
.L12141:
	ldr	fp, [fp, #4]
	cmp	r7, fp
	sub	fp, fp, #4
	beq	.L12126
.L12128:
	mov	r0, r4
	ldr	r1, [fp]
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L12141
	ldr	r3, .L12145+8
.LPIC3003:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L12142
	movw	r1, #32976
	mov	r2, #148
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L12143
.L12130:
	ldr	r3, .L12145+12
	add	r7, r4, #140
	mov	r10, #0
	mov	r0, r7
	ldr	r9, .L12145+16
	ldr	r8, .L12145+20
.LPIC2992:
	add	r3, pc, r3
	sub	r2, r3, #1440
	ldr	r1, [r3, #-1448]
.LPIC2996:
	add	r9, pc, r9
	sub	r2, r2, #12
.LPIC2997:
	add	r8, pc, r8
	bl	__list_add(PLT)
	str	fp, [r4, #124]
	ldr	r3, .L12145+24
	add	ip, r4, #92
	str	r5, [r4, #120]
	ldr	lr, [r6, #24]
	add	r2, r4, #100
	ldr	r5, .L12145+28
	mov	r0, r6
	mov	r1, r4
.LPIC2994:
	add	r3, pc, r3
	str	lr, [r4, #116]
	ldr	lr, [fp]
.LPIC2998:
	add	r5, pc, r5
	add	fp, r3, #1152
	add	r3, r3, #1168
	str	r9, [r4, #32]
	str	r5, [r4, #40]
	str	fp, [r4, #16]
	str	lr, [r4]
	ldr	lr, .L12145+32
	str	r3, [r4, #8]
	str	r8, [r4, #36]
	str	r10, [r4, #108]
.LPIC2999:
	add	lr, pc, lr
	str	ip, [r4, #92]
	str	ip, [r4, #96]
	str	lr, [r4, #48]
	str	r2, [r4, #100]
	str	r2, [r4, #104]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L12144
.L12136:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12126:
	ldr	r3, [r6, #24]
	ldr	r1, .L12145+36
	ldr	r0, [r3]
.LPIC3001:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	dev_err(PLT)
	mvn	r0, #18
	b	.L12136
.L12142:
	mov	r4, #16
	b	.L12130
.L12144:
	ldr	r3, [r6, #24]
	ldr	r1, .L12145+40
	ldr	r0, [r3]
.LPIC3000:
	add	r1, pc, r1
	add	r0, r0, #32
	bl	_dev_info(PLT)
	mov	r0, r7
	bl	list_del(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
	b	.L12136
.L12143:
	mvn	r0, #11
	b	.L12136
.L12146:
	.align	2
.L12145:
	.word	.LANCHOR0-(.LPIC2989+8)
	.word	.LANCHOR0-(.LPIC2991+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3003+8))
	.word	.LANCHOR4-(.LPIC2992+8)
	.word	diag_function_bind-(.LPIC2996+8)
	.word	diag_function_unbind-(.LPIC2997+8)
	.word	.LANCHOR0-(.LPIC2994+8)
	.word	diag_function_set_alt-(.LPIC2998+8)
	.word	diag_function_disable-(.LPIC2999+8)
	.word	.LC678-(.LPIC3001+8)
	.word	.LC677-(.LPIC3000+8)
	.fnend
	.size	diag_function_add, .-diag_function_add
	.align	2
	.type	diag_function_bind_config, %function
diag_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r2, .L12171
	strd	r10, [sp, #24]
	ldr	fp, .L12171+4
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r6, [sp, #8]
.LPIC3007:
	add	r2, pc, r2
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
.LPIC3014:
	ldr	fp, [pc, fp]		@ tls_load_dot_plus_eight
	ldr	r3, [r2, #16]!
	ldr	r1, [r1, #24]
	ldr	r0, [fp]
	cmp	r3, r2
	sub	r5, r3, #520
	str	r0, [sp, #44]
	bne	.L12151
	b	.L12148
.L12168:
	ldr	r3, [r5, #520]
	cmp	r3, r2
	sub	r5, r3, #520
	beq	.L12148
.L12151:
	ldr	r3, [r3, #-512]
	cmp	r1, r3
	bne	.L12168
.L12148:
	ldr	r1, .L12171+8
	add	r9, sp, #12
	mov	r2, #32
	ldr	r3, .L12171+12
	mov	r0, r9
	mov	r4, #0
	ldr	r6, .L12171+16
	mvn	r7, #0
	ldr	r10, .L12171+20
.LPIC3010:
	add	r1, pc, r1
.LPIC3006:
	add	r3, pc, r3
	sub	r1, r1, #1376
.LPIC3011:
	add	r6, pc, r6
	str	r3, [sp]
.LPIC3005:
	add	r10, pc, r10
	bl	strlcpy(PLT)
	mov	r0, r9
	ldr	r9, .L12171+24
	bl	strim(PLT)
	str	r0, [sp, #8]
.LPIC3013:
	add	r9, pc, r9
	sub	r3, r9, #3888
	sub	r3, r3, #4
	str	r3, [sp, #4]
	b	.L12152
.L12155:
	add	r0, sp, #8
	mov	r1, r6
	bl	strsep(PLT)
	cmp	r4, #0
	mov	r9, r0
	movne	r2, #0
	bne	.L12153
	ldr	r2, [r5, #44]
	cmp	r2, #0
	beq	.L12158
	ldr	r2, [r2]
	cmp	r2, #0
	moveq	r2, r10
.L12153:
	cmp	r9, #0
	beq	.L12154
	mov	r0, r8
	mov	r1, r9
	bl	diag_function_add(PLT)
	subs	r7, r0, #0
	bne	.L12169
.L12154:
	ldr	r0, [sp, #8]
	add	r4, r4, #1
.L12152:
	cmp	r0, #0
	bne	.L12155
	ldr	r2, [sp, #44]
	mov	r0, r7
	ldr	r3, [fp]
	cmp	r2, r3
	bne	.L12170
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12158:
	ldr	r2, [sp]
	b	.L12153
.L12169:
	ldr	r0, .L12171+28
	mov	r2, r9
	ldr	r1, [sp, #4]
.LPIC3012:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L12154
.L12170:
	bl	__stack_chk_fail(PLT)
.L12172:
	.align	2
.L12171:
	.word	.LANCHOR1-(.LPIC3007+8)
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC3014+8))
	.word	.LANCHOR4-(.LPIC3010+8)
	.word	usb_diag_update_pid_and_serial_num-(.LPIC3006+8)
	.word	.LC285-(.LPIC3011+8)
	.word	usb_diag_update_pid_and_serial_num-(.LPIC3005+8)
	.word	.LANCHOR9-(.LPIC3013+8)
	.word	.LC679-(.LPIC3012+8)
	.fnend
	.size	diag_function_bind_config, .-diag_function_bind_config
	.align	2
	.global	send_sps_req
	.type	send_sps_req, %function
send_sps_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #32
	mov	r4, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0]
	ldr	r3, [r0, #8]
	ldr	r2, [r6, #84]
	ldr	r3, [r3, #8]
	ldr	r7, [r2]
	blx	r3
	subs	r5, r0, #0
	beq	.L12182
	ldr	r0, .L12185
	ldr	r1, [r7, #28]
.LPIC3016:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L12183
	ldr	r3, .L12185+4
	mov	r2, #0
.LPIC3018:
	add	r3, pc, r3
	ldr	r3, [r3, #3672]
	bic	r3, r3, #65536
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, #32
.L12177:
	str	r2, [r5, #4]
	mov	r1, r5
	mov	r0, r4
	str	r3, [r5, #52]
	mov	r2, #32
	str	r5, [r6, #96]
	ldr	r3, [r4, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L12184
.L12175:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12183:
	ldr	r3, .L12185+8
	mov	r2, #32768
.LPIC3017:
	add	r3, pc, r3
	ldr	r3, [r3, #3672]
	orr	r3, r3, #1312
	b	.L12177
.L12184:
	ldr	r0, .L12185+12
.LPIC3019:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #4
	b	.L12175
.L12182:
	ldr	r0, .L12185+16
.LPIC3015:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #11
	b	.L12175
.L12186:
	.align	2
.L12185:
	.word	.LC367-(.LPIC3016+8)
	.word	.LANCHOR4-(.LPIC3018+8)
	.word	.LANCHOR4-(.LPIC3017+8)
	.word	.LC681-(.LPIC3019+8)
	.word	.LC680-(.LPIC3015+8)
	.fnend
	.size	send_sps_req, .-send_sps_req
	.align	2
	.global	init_data
	.type	init_data, %function
init_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	ldr	r0, .L12195
	str	lr, [sp, #4]
	ldr	r3, [r4]
.LPIC3020:
	add	r0, pc, r0
	ldr	r3, [r3, #84]
	ldr	r3, [r3]
	ldr	r1, [r3, #28]
	bl	strcmp(PLT)
	cmp	r0, #0
	movne	r4, #0
	beq	.L12194
.L12188:
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L12194:
	mov	r0, r4
	bl	msm_ep_config(PLT)
	subs	r4, r0, #0
	beq	.L12188
	ldr	r0, .L12195+4
.LPIC3021:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L12188
.L12196:
	.align	2
.L12195:
	.word	.LC367-(.LPIC3020+8)
	.word	.LC682-(.LPIC3021+8)
	.fnend
	.size	init_data, .-init_data
	.align	2
	.type	usb_qdss_connect_work, %function
usb_qdss_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r0, #-48]
	bl	init_data(PLT)
	subs	r3, r0, #0
	bne	.L12212
	ldr	r0, [r4, #-72]
	mov	r1, #1
	ldr	r5, .L12216
	mov	r2, r1
	ldr	r8, [r4, #-48]
	ldr	r6, [r0]
.LPIC3023:
	add	r5, pc, r5
	ldr	r0, [r6, #28]
	bl	usb_bam_get_connection_idx(PLT)
	uxtb	r9, r0
	add	r1, r5, #3664
	add	r1, r1, #8
	mov	r0, r9
	bl	usb_bam_connect(PLT)
	ldr	r3, .L12216+4
	mov	r7, r0
.LPIC3037:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L12199
	movw	r1, #32976
	mov	r2, #16
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r5, #3684]
	beq	.L12213
.L12200:
	ldr	r5, .L12216+8
	ldr	r0, [r6, #28]
	bl	usb_bam_set_qdss_core(PLT)
	mov	r3, #0
	mov	r0, r9
.LPIC3027:
	add	r5, pc, r5
	ldr	ip, [r5, #3684]
	add	r2, r5, #3664
	add	r1, r5, #3680
	add	r2, r2, #8
	str	r3, [sp]
	add	r3, r2, #4
	str	ip, [sp, #4]
	bl	get_bam2bam_connection_info(PLT)
	ldr	r0, .L12216+12
	ldr	r1, [r6, #28]
.LPIC3031:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L12214
.L12202:
	cmp	r7, #0
	bne	.L12201
	ldr	ip, [r4, #-32]
	cmp	ip, #0
	beq	.L12204
	ldr	r0, [r4, #-28]
	mov	r1, r7
	mov	r2, r7
	sub	r3, r4, #44
	blx	ip
.L12204:
	ldr	r0, [r4, #-48]
	bl	send_sps_req(PLT)
	cmp	r0, #0
	bne	.L12215
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L12199:
	mov	r3, #16
	str	r3, [r5, #3684]
	b	.L12200
.L12214:
	ldr	r2, [r5, #3684]
	mov	r0, r8
	ldrb	r3, [r5, #3672]	@ zero_extendqisi2
	ldmib	r2, {r1, r2}
	bl	msm_data_fifo_config(PLT)
	b	.L12202
.L12212:
	ldr	r0, .L12216+16
.LPIC3022:
	add	r0, pc, r0
.L12211:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	lr, [sp, #24]
	add	sp, sp, #28
	b	printk(PLT)
.L12213:
	ldr	r0, .L12216+20
.LPIC3026:
	add	r0, pc, r0
	bl	printk(PLT)
.L12201:
	ldr	r0, .L12216+24
.LPIC3035:
	add	r0, pc, r0
	b	.L12211
.L12215:
	ldr	r0, .L12216+28
.LPIC3036:
	add	r0, pc, r0
	b	.L12211
.L12217:
	.align	2
.L12216:
	.word	.LANCHOR4-(.LPIC3023+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3037+8))
	.word	.LANCHOR4-(.LPIC3027+8)
	.word	.LC367-(.LPIC3031+8)
	.word	.LC683-(.LPIC3022+8)
	.word	.LC684-(.LPIC3026+8)
	.word	.LC685-(.LPIC3035+8)
	.word	.LC686-(.LPIC3036+8)
	.fnend
	.size	usb_qdss_connect_work, .-usb_qdss_connect_work
	.align	2
	.global	uninit_data
	.type	uninit_data, %function
uninit_data:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	ldr	r0, .L12226
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	ldr	r3, [r4]
.LPIC3038:
	add	r0, pc, r0
	ldr	r3, [r3, #84]
	ldr	r5, [r3]
	bl	printk(PLT)
	ldr	r0, .L12226+4
	ldr	r1, [r5, #28]
.LPIC3039:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	movne	r4, #0
	beq	.L12225
.L12219:
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12225:
	mov	r0, r4
	bl	msm_ep_unconfig(PLT)
	subs	r4, r0, #0
	beq	.L12219
	ldr	r0, .L12226+8
.LPIC3040:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L12219
.L12227:
	.align	2
.L12226:
	.word	.LC687-(.LPIC3038+8)
	.word	.LC367-(.LPIC3039+8)
	.word	.LC688-(.LPIC3040+8)
	.fnend
	.size	uninit_data, .-uninit_data
	.align	2
	.type	usb_qdss_disconnect_work, %function
usb_qdss_disconnect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #-64]
	bl	uninit_data(PLT)
	cmp	r0, #0
	bne	.L12240
.L12229:
	ldr	ip, [r4, #-48]
	cmp	ip, #0
	beq	.L12228
	mov	r2, #0
	ldr	r0, [r4, #-44]
	mov	r1, #1
	mov	r3, r2
	blx	ip
	ldr	r0, [r4, #-88]
	mov	r1, #1
	mov	r3, #0
	mov	r2, r1
	ldr	r0, [r0]
	ldr	r0, [r0, #28]
	bl	usb_bam_get_connection_idx(PLT)
	ldr	r3, .L12242
	mov	r4, r0
.LPIC3043:
	add	r3, pc, r3
	ldr	r0, [r3, #3684]
	bl	kfree(PLT)
	uxtb	r0, r4
	bl	usb_bam_disconnect_pipe(PLT)
	cmp	r0, #0
	bne	.L12241
.L12228:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L12240:
	ldr	r1, .L12242+4
	ldr	r0, .L12242+8
.LPIC3042:
	add	r1, pc, r1
	sub	r1, r1, #3856
.LPIC3041:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L12229
.L12241:
	ldr	r0, .L12242+12
.LPIC3044:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L12242+16
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC3045:
	add	r0, pc, r0
	b	printk(PLT)
.L12243:
	.align	2
.L12242:
	.word	.LANCHOR4-(.LPIC3043+8)
	.word	.LANCHOR9-(.LPIC3042+8)
	.word	.LC689-(.LPIC3041+8)
	.word	.LC690-(.LPIC3044+8)
	.word	.LC691-(.LPIC3045+8)
	.fnend
	.size	usb_qdss_disconnect_work, .-usb_qdss_disconnect_work
	.align	2
	.global	usb_qdss_free_req
	.type	usb_qdss_free_req, %function
usb_qdss_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r6, [r0, #20]
	cmp	r6, #0
	beq	.L12256
	mov	r7, r6
	ldr	r1, [r7, #148]!
	cmp	r1, r7
	ldr	r5, [r1]
	bne	.L12249
	b	.L12250
.L12253:
	mov	r5, r3
.L12249:
	mov	r0, r1
	sub	r4, r1, #36
	bl	list_del(PLT)
	ldr	r0, [r6, #104]
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r5
	ldr	r3, [r5]
	mov	r1, r5
	bne	.L12253
.L12250:
	mov	r7, r6
	ldr	r1, [r7, #140]!
	cmp	r1, r7
	ldr	r5, [r1]
	bne	.L12252
	b	.L12244
.L12254:
	mov	r5, r3
.L12252:
	mov	r0, r1
	sub	r4, r1, #36
	bl	list_del(PLT)
	ldr	r0, [r6, #100]
	mov	r1, r4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	cmp	r7, r5
	ldr	r3, [r5]
	mov	r1, r5
	bne	.L12254
.L12244:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12256:
	ldr	r0, .L12257
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC3046:
	add	r0, pc, r0
	add	sp, sp, #24
	b	printk(PLT)
.L12258:
	.align	2
.L12257:
	.word	.LC692-(.LPIC3046+8)
	.fnend
	.size	usb_qdss_free_req, .-usb_qdss_free_req
	.align	2
	.global	usb_qdss_alloc_req
	.type	usb_qdss_alloc_req, %function
usb_qdss_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r7, r2
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r9, r0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	cmpne	r2, #0
	movle	r5, #1
	movgt	r5, #0
	cmp	r1, #0
	orrle	r5, r5, #1
	cmp	r5, #0
	bne	.L12270
	ldr	r10, .L12273
	add	r8, r4, #148
.LPIC3049:
	add	r10, pc, r10
.L12260:
	ldr	r0, [r4, #104]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r8
	add	r0, r3, #36
	beq	.L12271
	str	r10, [r3, #28]
	ldr	r1, [r4, #152]
	bl	__list_add(PLT)
	cmp	r6, r5
	bgt	.L12260
	ldr	r8, .L12273+4
	mov	r5, #0
	add	r6, r4, #140
.LPIC3051:
	add	r8, pc, r8
.L12265:
	ldr	r0, [r4, #100]
	mov	r1, #32
	add	r5, r5, #1
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r3, r0, #0
	mov	r2, r6
	add	r0, r3, #36
	beq	.L12272
	str	r8, [r3, #28]
	ldr	r1, [r4, #144]
	bl	__list_add(PLT)
	cmp	r7, r5
	bgt	.L12265
	mov	r0, #0
.L12261:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12271:
	ldr	r0, .L12273+8
.LPIC3048:
	add	r0, pc, r0
	bl	printk(PLT)
.L12263:
	mov	r0, r9
	bl	usb_qdss_free_req(PLT)
	mvn	r0, #11
	b	.L12261
.L12272:
	ldr	r0, .L12273+12
.LPIC3050:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L12263
.L12270:
	ldr	r0, .L12273+16
.LPIC3047:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #18
	b	.L12261
.L12274:
	.align	2
.L12273:
	.word	qdss_ctrl_write_complete-(.LPIC3049+8)
	.word	qdss_ctrl_read_complete-(.LPIC3051+8)
	.word	.LC694-(.LPIC3048+8)
	.word	.LC695-(.LPIC3050+8)
	.word	.LC693-(.LPIC3047+8)
	.fnend
	.size	usb_qdss_alloc_req, .-usb_qdss_alloc_req
	.align	2
	.global	usb_qdss_ctrl_read
	.type	usb_qdss_ctrl_read, %function
usb_qdss_ctrl_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L12279
	add	r8, r4, #188
	mov	r6, r1
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #92]
	mov	r10, r0
	cmp	r3, #0
	beq	.L12284
	ldr	r5, [r4, #140]
	add	r9, r4, #140
	cmp	r5, r9
	beq	.L12285
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del(PLT)
	mov	r0, r8
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r6, [r5, #-4]
	str	r3, [r5, #-32]
	ldr	r0, [r4, #100]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L12286
.L12276:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12279:
	mvn	r0, #18
	b	.L12276
.L12284:
	mov	r0, r8
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #4
	b	.L12276
.L12286:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #144]
	mov	r0, r5
	bl	__list_add(PLT)
	mov	r0, r8
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L12287
.LPIC3053:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #4
	b	.L12276
.L12285:
	mov	r0, r8
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L12287+4
.LPIC3052:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #10
	b	.L12276
.L12288:
	.align	2
.L12287:
	.word	.LC697-(.LPIC3053+8)
	.word	.LC696-(.LPIC3052+8)
	.fnend
	.size	usb_qdss_ctrl_read, .-usb_qdss_ctrl_read
	.align	2
	.global	usb_qdss_ctrl_write
	.type	usb_qdss_ctrl_write, %function
usb_qdss_ctrl_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #20]
	cmp	r4, #0
	beq	.L12293
	add	r8, r4, #188
	mov	r6, r1
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #92]
	mov	r10, r0
	cmp	r3, #0
	beq	.L12298
	ldr	r5, [r4, #148]
	add	r9, r4, #148
	cmp	r5, r9
	beq	.L12299
	mov	r0, r5
	sub	r7, r5, #36
	bl	list_del(PLT)
	mov	r0, r8
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r6]
	mov	r1, r7
	mov	r2, #32
	str	r3, [r5, #-36]
	ldr	r3, [r6, #4]
	str	r6, [r5, #-4]
	str	r3, [r5, #-32]
	ldr	r0, [r4, #104]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L12300
.L12290:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12293:
	mvn	r0, #18
	b	.L12290
.L12298:
	mov	r0, r8
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #4
	b	.L12290
.L12300:
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	mov	r2, r9
	ldr	r1, [r4, #152]
	mov	r0, r5
	bl	__list_add(PLT)
	mov	r0, r8
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L12301
.LPIC3055:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #4
	b	.L12290
.L12299:
	ldr	r0, .L12301+4
.LPIC3054:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r8
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #10
	b	.L12290
.L12302:
	.align	2
.L12301:
	.word	.LC697-(.LPIC3055+8)
	.word	.LC698-(.LPIC3054+8)
	.fnend
	.size	usb_qdss_ctrl_write, .-usb_qdss_ctrl_write
	.align	2
	.global	usb_qdss_open
	.type	usb_qdss_open, %function
usb_qdss_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	strd	r8, [sp, #16]
	subs	r8, r2, #0
	strd	r6, [sp, #8]
	str	lr, [sp, #24]
	.pad #12
	sub	sp, sp, #12
	beq	.L12320
	mov	r6, r0
	ldr	r0, .L12326
	mov	r9, r1
.LPIC3057:
	add	r0, pc, r0
	sub	r0, r0, #1488
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	ldr	r0, .L12326+4
.LPIC3058:
	add	r0, pc, r0
	ldr	r4, [r0, #24]!
	cmp	r4, r0
	sub	r4, r4, #4
	beq	.L12306
	ldr	r5, .L12326+8
.LPIC3060:
	add	r5, pc, r5
	add	r5, r5, #24
	b	.L12308
.L12321:
	ldr	r4, [r4, #4]
	cmp	r4, r5
	sub	r4, r4, #4
	beq	.L12306
.L12308:
	mov	r0, r6
	ldr	r1, [r4]
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L12321
	sub	r5, r4, #112
	str	r5, [r4, #20]
.L12312:
	ldr	r0, .L12326+12
	mov	r3, #1
	str	r6, [r4]
	str	r9, [r4, #16]
	mov	r1, r7
	str	r3, [r4, #24]
	str	r8, [r4, #12]
.LPIC3067:
	add	r0, pc, r0
	sub	r0, r0, #1488
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r5, #92]
	cmp	r3, #1
	movne	r0, r4
	beq	.L12322
.L12316:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L12306:
	ldr	r3, .L12326+16
.LPIC3069:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L12323
	movw	r1, #32800
	mov	r2, #200
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L12324
.L12309:
	ldr	r4, .L12326+20
	mov	r1, r7
.LPIC3062:
	add	r4, pc, r4
	sub	r4, r4, #1488
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L12326+24
	mov	r2, #0
	mov	r1, #10
	mov	r3, r2
	str	r6, [sp, #4]
	movt	r1, 2
	str	r2, [sp]
	mov	r2, #1
.LPIC3063:
	add	r0, pc, r0
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, #0
	str	r0, [r5, #196]
	beq	.L12325
	mov	r0, r4
	add	r4, r5, #112
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, .L12326+28
	mov	r7, r0
	add	r0, r5, #116
.LPIC3065:
	add	r2, pc, r2
	ldr	r1, [r2, #28]
	add	r2, r2, #24
	bl	__list_add(PLT)
	b	.L12312
.L12323:
	mov	r5, #16
	b	.L12309
.L12322:
	mov	r0, #4
	ldr	r1, [r5, #196]
	add	r2, r5, #156
	bl	queue_work_on(PLT)
	mov	r0, r4
	b	.L12316
.L12324:
	ldr	r0, .L12326+32
	mov	r1, r7
.LPIC3061:
	add	r0, pc, r0
	sub	r0, r0, #1488
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #11
	b	.L12316
.L12325:
	mov	r0, r5
	bl	kfree(PLT)
	mvn	r0, #11
	b	.L12316
.L12320:
	ldr	r0, .L12326+36
.LPIC3056:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r8
	b	.L12316
.L12327:
	.align	2
.L12326:
	.word	.LANCHOR4-(.LPIC3057+8)
	.word	.LANCHOR0-(.LPIC3058+8)
	.word	.LANCHOR0-(.LPIC3060+8)
	.word	.LANCHOR4-(.LPIC3067+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3069+8))
	.word	.LANCHOR4-(.LPIC3062+8)
	.word	.LC195-(.LPIC3063+8)
	.word	.LANCHOR0-(.LPIC3065+8)
	.word	.LANCHOR4-(.LPIC3061+8)
	.word	.LC699-(.LPIC3056+8)
	.fnend
	.size	usb_qdss_open, .-usb_qdss_open
	.align	2
	.global	usb_qdss_close
	.type	usb_qdss_close, %function
usb_qdss_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r5, .L12332
	str	lr, [sp, #20]
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	ldr	r4, [r0, #20]
.LPIC3070:
	add	r5, pc, r5
	sub	r5, r5, #1488
	mov	r0, r5
	ldr	r3, [r4, #84]
	ldr	r7, [r3]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	ldr	r0, [r4, #108]
	ldr	r1, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r0, [r4, #108]
	ldr	r1, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r3, #0
	mov	r0, r5
	mov	r1, r8
	str	r3, [r4, #96]
	str	r3, [r6, #24]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, .L12332+4
	ldr	r1, [r7, #28]
.LPIC3072:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L12331
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12331:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	msm_dwc3_restart_usb_session(PLT)
.L12333:
	.align	2
.L12332:
	.word	.LANCHOR4-(.LPIC3070+8)
	.word	.LC367-(.LPIC3072+8)
	.fnend
	.size	usb_qdss_close, .-usb_qdss_close
	.align	2
	.global	rmnet_smd_bind_config
	.type	rmnet_smd_bind_config, %function
rmnet_smd_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L12352
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC3102:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L12342
	movw	r1, #32976
	mov	r2, #456
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L12350
.L12335:
	ldr	lr, .L12352+4
	mov	r5, #0
	mov	r1, #10
	ldr	ip, .L12352+8
	mov	r3, r5
	movt	r1, 2
	ldr	r0, .L12352+12
	str	r5, [sp]
	mov	r2, #1
.LPIC3076:
	add	lr, pc, lr
.LPIC3074:
	add	ip, pc, ip
	str	lr, [sp, #4]
.LPIC3075:
	add	r0, pc, r0
	str	r4, [ip, #2584]
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, r5
	str	r0, [r4, #388]
	beq	.L12344
	ldr	ip, .L12352+16
	mov	lr, #65024
	add	r8, r4, #396
	ldr	r3, .L12352+20
	movt	lr, 65535
	add	r6, r4, #412
	ldr	r1, .L12352+24
	str	r5, [r4, #164]
	add	r0, r4, #284
	str	lr, [r4, #392]
	mov	r2, r4
	ldr	fp, .L12352+28
.LPIC3077:
	add	ip, pc, ip
	str	lr, [r4, #408]
	add	r10, r4, #108
.LPIC3078:
	add	r3, pc, r3
	str	r5, [r4, #172]
	add	r9, r4, #124
	str	ip, [r4, #404]
.LPIC3079:
	add	r1, pc, r1
	str	r3, [r4, #420]
.LPIC3087:
	add	fp, pc, fp
	str	r5, [r4, #168]
	str	r5, [r4, #308]
	str	r5, [r4, #372]
	str	r8, [r4, #396]
	str	r8, [r4, #400]
	add	r8, r4, #116
	str	r6, [r4, #412]
	str	r6, [r4, #416]
	ldr	r6, .L12352+32
	bl	tasklet_init(PLT)
	ldr	r1, .L12352+36
	add	r0, r4, #264
	mov	r2, r4
.LPIC3084:
	add	r6, pc, r6
	add	r6, r6, #3680
.LPIC3080:
	add	r1, pc, r1
	add	r6, r6, #8
	bl	tasklet_init(PLT)
	ldr	r1, .L12352+40
	add	r0, r4, #348
	mov	r2, r4
.LPIC3081:
	add	r1, pc, r1
	bl	tasklet_init(PLT)
	ldr	r1, .L12352+44
	add	r0, r4, #328
	mov	r2, r4
.LPIC3082:
	add	r1, pc, r1
	bl	tasklet_init(PLT)
	ldr	r1, .L12352+48
	mov	r2, r6
	add	r0, r4, #312
.LPIC3083:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L12352+52
	mov	r2, r6
	add	r0, r4, #376
	add	r6, r4, #132
.LPIC3085:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L12352+56
	str	r5, [r4, #204]
	mov	r0, r7
	ldr	r3, .L12352+60
	str	fp, [r4, #176]
	add	lr, r4, #148
	ldr	r7, .L12352+64
	add	ip, r4, #156
	add	r2, r4, #140
	ldr	fp, .L12352+68
	str	r10, [r4, #108]
.LPIC3088:
	add	r1, pc, r1
	str	r10, [r4, #112]
.LPIC3090:
	add	r3, pc, r3
	str	r9, [r4, #124]
	add	r5, r3, #2528
	str	r1, [r4, #196]
	add	r1, r3, #2544
	add	r3, r3, #2560
	add	r5, r5, #12
	str	r9, [r4, #128]
	add	r3, r3, #8
	add	r1, r1, #4
	str	r8, [r4, #116]
	str	r5, [r4, #4]
	ldr	r5, .L12352+72
.LPIC3095:
	add	r7, pc, r7
	str	r3, [r4, #8]
	ldr	r3, .L12352+76
.LPIC3096:
	add	fp, pc, fp
	str	r1, [r4, #16]
	mov	r1, r4
	str	r7, [r4, #52]
.LPIC3089:
	add	r5, pc, r5
	str	fp, [r4, #40]
.LPIC3093:
	add	r3, pc, r3
	str	r8, [r4, #120]
	str	r5, [r4]
	ldr	r5, .L12352+80
	str	r3, [r4, #32]
	ldr	r3, .L12352+84
	str	r6, [r4, #132]
	str	r6, [r4, #136]
.LPIC3097:
	add	r5, pc, r5
	str	lr, [r4, #148]
.LPIC3094:
	add	r3, pc, r3
	str	lr, [r4, #152]
	str	r5, [r4, #48]
	str	r3, [r4, #36]
	str	ip, [r4, #156]
	str	ip, [r4, #160]
	str	r2, [r4, #140]
	str	r2, [r4, #144]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	beq	.L12351
.L12338:
	ldr	r0, [r4, #388]
	bl	destroy_workqueue(PLT)
.L12337:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
.L12336:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12351:
	ldr	r0, .L12352+88
	mov	r1, r5
	ldr	r6, .L12352+92
.LPIC3098:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
.LPIC3100:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	cmp	r0, #0
	str	r0, [r6]
	beq	.L12340
	cmn	r0, #4096
	bhi	.L12340
	ldr	ip, .L12352+96
	mov	r2, r0
	mov	r3, r4
	ldr	r0, .L12352+100
	mov	r1, #292
.LPIC3101:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
.LPIC3099:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	cmp	r0, #0
	beq	.L12341
	cmn	r0, #4096
	bhi	.L12341
.L12340:
	mov	r0, #0
	b	.L12336
.L12342:
	mov	r4, #16
	b	.L12335
.L12344:
	mvn	r5, #11
	b	.L12337
.L12341:
	ldr	r0, [r6]
	bl	debugfs_remove(PLT)
	mov	r3, #0
	mov	r0, r3
	str	r3, [r6]
	b	.L12336
.L12350:
	mvn	r0, #11
	b	.L12336
.L12353:
	.align	2
.L12352:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3102+8))
	.word	.LC700-(.LPIC3076+8)
	.word	.LANCHOR1-(.LPIC3074+8)
	.word	.LC195-(.LPIC3075+8)
	.word	rmnet_smd_connect_work-(.LPIC3077+8)
	.word	rmnet_smd_disconnect_work-(.LPIC3078+8)
	.word	rmnet_control_rx_tlet-(.LPIC3079+8)
	.word	rmnet_smd_ch_probe-(.LPIC3087+8)
	.word	.LANCHOR4-(.LPIC3084+8)
	.word	rmnet_control_tx_tlet-(.LPIC3080+8)
	.word	rmnet_data_rx_tlet-(.LPIC3081+8)
	.word	rmnet_data_tx_tlet-(.LPIC3082+8)
	.word	.LC701-(.LPIC3083+8)
	.word	.LC702-(.LPIC3085+8)
	.word	.LC342-(.LPIC3088+8)
	.word	.LANCHOR0-(.LPIC3090+8)
	.word	rmnet_smd_setup-(.LPIC3095+8)
	.word	rmnet_smd_set_alt-(.LPIC3096+8)
	.word	.LC703-(.LPIC3089+8)
	.word	rmnet_smd_bind-(.LPIC3093+8)
	.word	rmnet_smd_disable-(.LPIC3097+8)
	.word	rmnet_smd_unbind-(.LPIC3094+8)
	.word	.LC704-(.LPIC3098+8)
	.word	dent_smd(GOT_PREL)+(.-(.LPIC3100+8))
	.word	rmnet_smd_debug_stats_ops(GOT_PREL)+(.-(.LPIC3101+8))
	.word	.LC138-(.LPIC3099+8)
	.fnend
	.size	rmnet_smd_bind_config, .-rmnet_smd_bind_config
	.align	2
	.type	rmnet_smd_function_bind_config, %function
rmnet_smd_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	b	rmnet_smd_bind_config(PLT)
	.fnend
	.size	rmnet_smd_function_bind_config, .-rmnet_smd_function_bind_config
	.align	2
	.global	rmnet_sdio_function_add
	.type	rmnet_sdio_function_add, %function
rmnet_sdio_function_add:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L12368
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
.LPIC3126:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L12360
	movw	r1, #32976
	mov	r2, #376
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L12366
.L12356:
	ldr	ip, .L12368+4
	mov	r5, #0
	mov	r1, #10
	ldr	r0, .L12368+8
	mov	r3, r5
	movt	r1, 2
	str	r5, [sp]
	mov	r2, #1
.LPIC3105:
	add	ip, pc, ip
.LPIC3104:
	add	r0, pc, r0
	str	ip, [sp, #4]
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, r5
	str	r0, [r4, #200]
	beq	.L12362
	ldr	r0, .L12368+12
	mov	r6, #65024
	add	lr, r4, #256
	ldr	r1, .L12368+16
	movt	r6, 65535
	add	fp, r4, #208
	ldr	r2, .L12368+20
	add	r10, r4, #340
	add	r9, r4, #224
	ldr	r3, .L12368+24
	add	r7, r4, #240
	str	r5, [r4, #188]
	ldr	ip, .L12368+28
.LPIC3106:
	add	r0, pc, r0
	str	r5, [r4, #196]
.LPIC3107:
	add	r1, pc, r1
	str	r5, [r4, #192]
.LPIC3108:
	add	r2, pc, r2
	str	r6, [r4, #204]
.LPIC3109:
	add	r3, pc, r3
	str	r6, [r4, #336]
.LPIC3110:
	add	ip, pc, ip
	str	r6, [r4, #220]
	str	r6, [r4, #236]
	str	r6, [r4, #252]
	str	r0, [r4, #216]
	add	r0, r4, #268
	str	r1, [r4, #348]
	mov	r1, r5
	str	r2, [r4, #232]
	mov	r2, r5
	str	r3, [r4, #248]
	mov	r3, r5
	str	ip, [r4, #264]
	str	fp, [r4, #208]
	str	fp, [r4, #212]
	str	r10, [r4, #340]
	str	r10, [r4, #344]
	add	r10, r4, #308
	str	r9, [r4, #224]
	str	r9, [r4, #228]
	add	r9, r4, #108
	str	r7, [r4, #240]
	str	r7, [r4, #244]
	add	r7, r4, #120
	str	lr, [r4, #256]
	str	lr, [r4, #260]
	bl	init_timer_key(PLT)
	ldr	r1, .L12368+32
	add	r3, r4, #252
	str	r5, [r4, #156]
	ldr	r2, .L12368+36
	str	r5, [r4, #152]
	mov	r0, r8
	str	r3, [r4, #288]
	ldr	r3, .L12368+40
	add	lr, r4, #160
	str	r5, [r4, #184]
	ldr	r8, .L12368+44
	add	ip, r4, #132
.LPIC3125:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	str	r5, [r4, #180]
.LPIC3111:
	add	r2, pc, r2
	str	r6, [r4, #304]
	add	r6, r4, #144
.LPIC3113:
	add	r3, pc, r3
	str	r10, [r4, #308]
	add	fp, r3, #2576
	add	r5, r3, #2608
	str	r2, [r4, #316]
	str	r1, [r4, #284]
	ldr	r1, .L12368+48
	add	fp, fp, #12
	add	r5, r5, #8
	ldr	r2, .L12368+52
.LPIC3118:
	add	r8, pc, r8
	str	fp, [r4, #4]
	add	fp, r3, #2592
	ldr	r3, .L12368+56
	str	r5, [r4, #8]
	ldr	r5, .L12368+60
	add	fp, fp, #4
.LPIC3112:
	add	r1, pc, r1
	str	r8, [r4, #52]
	str	fp, [r4, #16]
.LPIC3120:
	add	r2, pc, r2
	add	fp, r4, #172
	str	r1, [r4]
	ldr	r1, .L12368+64
.LPIC3119:
	add	r3, pc, r3
.LPIC3121:
	add	r5, pc, r5
	str	r2, [r4, #48]
	str	r3, [r4, #40]
	str	r5, [r4, #56]
.LPIC3116:
	add	r1, pc, r1
	str	r10, [r4, #312]
	str	r9, [r4, #108]
	str	r1, [r4, #32]
	ldr	r1, .L12368+68
	str	r9, [r4, #112]
	str	r7, [r4, #120]
	str	r7, [r4, #124]
.LPIC3117:
	add	r1, pc, r1
	str	lr, [r4, #160]
	str	lr, [r4, #164]
	str	r1, [r4, #36]
	mov	r1, r4
	str	ip, [r4, #132]
	str	ip, [r4, #136]
	str	r6, [r4, #144]
	str	r6, [r4, #148]
	str	fp, [r4, #172]
	str	fp, [r4, #176]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	beq	.L12367
.L12359:
	ldr	r0, [r4, #200]
	bl	destroy_workqueue(PLT)
.L12358:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
.L12357:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12367:
	ldr	r0, .L12368+72
	mov	r1, r5
.LPIC3122:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	cmn	r0, #4096
	str	r0, [r4, #352]
	bhi	.L12363
	ldr	ip, .L12368+76
	mov	r2, r0
	mov	r3, r4
	ldr	r0, .L12368+80
	mov	r1, #292
.LPIC3124:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
.LPIC3123:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	mov	r0, r5
	b	.L12357
.L12360:
	mov	r4, #16
	b	.L12356
.L12362:
	mvn	r5, #11
	b	.L12358
.L12363:
	mov	r0, r5
	b	.L12357
.L12366:
	mvn	r0, #11
	b	.L12357
.L12369:
	.align	2
.L12368:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3126+8))
	.word	.LC700-(.LPIC3105+8)
	.word	.LC195-(.LPIC3104+8)
	.word	rmnet_sdio_disconnect_work-(.LPIC3106+8)
	.word	rmnet_sdio_set_modem_cbits_w-(.LPIC3107+8)
	.word	rmnet_sdio_control_rx_work-(.LPIC3108+8)
	.word	rmnet_sdio_data_rx_work-(.LPIC3109+8)
	.word	rmnet_open_sdio_work-(.LPIC3110+8)
	.word	delayed_work_timer_fn(GOT_PREL)+(.-(.LPIC3125+8))
	.word	rmnet_close_sdio_work-(.LPIC3111+8)
	.word	.LANCHOR0-(.LPIC3113+8)
	.word	rmnet_sdio_setup-(.LPIC3118+8)
	.word	.LC705-(.LPIC3112+8)
	.word	rmnet_sdio_disable-(.LPIC3120+8)
	.word	rmnet_sdio_set_alt-(.LPIC3119+8)
	.word	rmnet_sdio_suspend-(.LPIC3121+8)
	.word	rmnet_sdio_bind-(.LPIC3116+8)
	.word	rmnet_sdio_unbind-(.LPIC3117+8)
	.word	.LC706-(.LPIC3122+8)
	.word	debug_rmnet_sdio_stats_ops(GOT_PREL)+(.-(.LPIC3124+8))
	.word	.LC138-(.LPIC3123+8)
	.fnend
	.size	rmnet_sdio_function_add, .-rmnet_sdio_function_add
	.align	2
	.type	rmnet_sdio_function_bind_config, %function
rmnet_sdio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	b	rmnet_sdio_function_add(PLT)
	.fnend
	.size	rmnet_sdio_function_bind_config, .-rmnet_sdio_function_bind_config
	.align	2
	.global	frmnet_free_req
	.type	frmnet_free_req, %function
frmnet_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	frmnet_free_req, .-frmnet_free_req
	.align	2
	.type	frmnet_unbind, %function
frmnet_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L12377
.L12374:
	cmp	r3, #2
	bls	.L12375
	ldr	r0, [r4, #8]
	bl	kfree(PLT)
.L12375:
	ldr	r0, [r4, #16]
	bl	kfree(PLT)
	ldrd	r0, [r4, #136]
	bl	frmnet_free_req(PLT)
	ldr	r6, [sp, #8]
	ldr	r0, [r4]
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	kfree(PLT)
.L12377:
	ldr	r0, [r1, #12]
	bl	kfree(PLT)
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L12374
	.fnend
	.size	frmnet_unbind, .-frmnet_unbind
	.align	2
	.type	frmnet_bind, %function
frmnet_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	.pad #12
	sub	sp, sp, #12
	ldr	r5, [r0, #24]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	str	r0, [r4, #112]
	blt	.L12421
	ldr	r6, .L12427
.LPIC3131:
	add	r6, pc, r6
	add	r1, r6, #2432
	strb	r0, [r6, #2422]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L12422
	add	r1, r6, #2432
	str	r0, [r4, #84]
	add	r1, r1, #12
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L12423
	add	r1, r6, #2448
	str	r0, [r4, #88]
	add	r1, r1, #8
	str	r5, [r0]
	ldr	r0, [r5]
	bl	usb_ep_autoconfig(PLT)
	subs	r7, r0, #0
	beq	.L12424
	str	r7, [r4, #136]
	ldr	r3, [r7, #8]
	mov	r1, #208
	str	r5, [r7]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L12386
	ldr	r3, .L12427+4
.LPIC3162:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L12387
	mov	r1, #208
	mov	r2, #8
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L12425
.L12388:
	mov	r3, #8
	cmn	r6, #4096
	str	r3, [r6, #4]
	str	r6, [r4, #140]
	bhi	.L12389
	ldr	r3, .L12427+8
	ldr	r7, .L12427+12
.LPIC3144:
	add	r3, pc, r3
.LPIC3145:
	add	r7, pc, r7
	str	r3, [r6, #28]
	ldr	r3, [r4, #140]
	add	r0, r7, #2624
	add	r0, r0, #12
	str	r4, [r3, #32]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L12392
	ldr	r3, [r5]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bhi	.L12426
.L12393:
	ldr	r3, [r3, #20]
	ldrb	r2, [r4, #116]	@ zero_extendqisi2
	cmp	r3, #2
	bhi	.L12404
	ldr	r3, .L12427+16
.LPIC3128:
	add	r3, pc, r3
.L12396:
	ldr	lr, [r4, #84]
	ldr	ip, [r4, #88]
	ldr	r1, .L12427+20
	ldr	r0, .L12427+24
	ldr	lr, [lr, #4]
.LPIC3161:
	add	r1, pc, r1
	sub	r1, r1, #3824
.LPIC3160:
	add	r0, pc, r0
	str	lr, [sp]
	ldr	ip, [ip, #4]
	sub	r1, r1, #12
	str	ip, [sp, #4]
	bl	printk(PLT)
	mov	r0, #0
	b	.L12418
.L12387:
	mov	r3, #16
	str	r3, [r6]
	b	.L12388
.L12426:
	ldr	r6, .L12427+28
	add	r0, r7, #2656
.LPIC3146:
	add	r6, pc, r6
	ldrb	r1, [r6, #2434]	@ zero_extendqisi2
	ldrb	r2, [r6, #2446]	@ zero_extendqisi2
	ldrb	r3, [r6, #2458]	@ zero_extendqisi2
	strb	r1, [r6, #2470]
	strb	r2, [r6, #2482]
	strb	r3, [r6, #2494]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L12394
	ldr	r3, [r5]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	bls	.L12393
	ldrb	r3, [r6, #2458]	@ zero_extendqisi2
	add	r0, r7, #2672
	ldrb	r1, [r6, #2434]	@ zero_extendqisi2
	add	r0, r0, #4
	ldrb	r2, [r6, #2446]	@ zero_extendqisi2
	strb	r3, [r6, #2530]
	strb	r1, [r6, #2506]
	strb	r2, [r6, #2518]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #12]
	ldrne	r3, [r5]
	bne	.L12393
.L12397:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12400
	bl	kfree(PLT)
.L12400:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L12401
	bl	kfree(PLT)
.L12401:
	ldr	r1, [r4, #140]
	cmp	r1, #0
	beq	.L12391
	ldr	r0, [r4, #136]
	bl	frmnet_free_req(PLT)
.L12391:
	ldr	r2, [r4, #136]
	mov	r3, #0
	mvn	r0, #11
	str	r3, [r2]
	str	r3, [r4, #136]
.L12385:
	ldr	r2, [r4, #88]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #88]
.L12383:
	ldr	r2, [r4, #84]
	mov	r3, #0
	str	r3, [r2]
	str	r3, [r4, #84]
.L12418:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L12425:
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
.L12386:
	mvn	r3, #11
	str	r3, [r4, #140]
.L12389:
	ldr	r1, .L12427+32
	ldr	r0, .L12427+36
.LPIC3143:
	add	r1, pc, r1
	sub	r1, r1, #3824
.LPIC3142:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L12391
.L12392:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L12397
.L12402:
	bl	kfree(PLT)
	b	.L12397
.L12404:
	ldr	r3, .L12427+40
.LPIC3127:
	add	r3, pc, r3
	b	.L12396
.L12394:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	bne	.L12402
	b	.L12400
.L12424:
	ldr	r1, .L12427+44
	ldr	r0, .L12427+48
.LPIC3140:
	add	r1, pc, r1
	sub	r1, r1, #3824
.LPIC3139:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #18
	b	.L12385
.L12423:
	ldr	r1, .L12427+52
	ldr	r0, .L12427+56
.LPIC3137:
	add	r1, pc, r1
	sub	r1, r1, #3824
.LPIC3136:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #18
	b	.L12383
.L12422:
	ldr	r1, .L12427+60
	ldr	r0, .L12427+64
.LPIC3134:
	add	r1, pc, r1
	sub	r1, r1, #3824
.LPIC3133:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #18
	b	.L12418
.L12421:
	ldr	r1, .L12427+68
	mov	r2, r0
	ldr	r0, .L12427+72
.LPIC3130:
	add	r1, pc, r1
	sub	r1, r1, #3824
.LPIC3129:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	r0, [r4, #112]
	b	.L12418
.L12428:
	.align	2
.L12427:
	.word	.LANCHOR2-(.LPIC3131+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3162+8))
	.word	frmnet_notify_complete-(.LPIC3144+8)
	.word	.LANCHOR0-(.LPIC3145+8)
	.word	.LC555-(.LPIC3128+8)
	.word	.LANCHOR9-(.LPIC3161+8)
	.word	.LC707-(.LPIC3160+8)
	.word	.LANCHOR2-(.LPIC3146+8)
	.word	.LANCHOR9-(.LPIC3143+8)
	.word	.LC536-(.LPIC3142+8)
	.word	.LC554-(.LPIC3127+8)
	.word	.LANCHOR9-(.LPIC3140+8)
	.word	.LC576-(.LPIC3139+8)
	.word	.LANCHOR9-(.LPIC3137+8)
	.word	.LC558-(.LPIC3136+8)
	.word	.LANCHOR9-(.LPIC3134+8)
	.word	.LC556-(.LPIC3133+8)
	.word	.LANCHOR9-(.LPIC3130+8)
	.word	.LC575-(.LPIC3129+8)
	.fnend
	.size	frmnet_bind, .-frmnet_bind
	.align	2
	.global	audio_source_bind_config
	.type	audio_source_bind_config, %function
audio_source_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mvn	r3, #0
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r1, #0
	mov	r6, r0
	str	r8, [sp, #16]
	mov	r0, r3
	mov	r2, r1
	str	lr, [sp, #20]
	.pad #16
	sub	sp, sp, #16
	add	ip, sp, #8
	str	r3, [r5]
	str	r3, [r5, #4]
	mov	r3, r1
	str	ip, [sp]
	bl	snd_card_create(PLT)
	subs	ip, r0, #0
	movne	r0, ip
	beq	.L12436
.L12430:
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12436:
	ldr	r0, [r6, #24]
	mov	r2, ip
	mov	r3, #1
	ldr	r4, [sp, #8]
	ldr	r1, .L12438
	ldr	lr, [r0]
	mov	r0, r4
.LPIC3163:
	add	r1, pc, r1
	add	lr, lr, #32
	str	lr, [r4, #496]
	str	ip, [sp]
	add	ip, sp, #12
	str	ip, [sp, #4]
	bl	snd_pcm_new(PLT)
	subs	r4, r0, #0
	bne	.L12433
	ldr	r8, .L12438+4
	mov	r2, #80
	ldr	r3, [sp, #12]
	ldr	r1, .L12438+8
.LPIC3164:
	add	r8, pc, r8
	add	r7, r8, #2704
	str	r4, [r3, #16]
	add	r0, r3, #88
	add	r7, r7, #8
.LPIC3166:
	add	r1, pc, r1
	str	r3, [r8, #2800]
	str	r7, [r3, #272]
	bl	strlcpy(PLT)
	ldr	r2, .L12438+12
	mov	r1, r4
	ldr	r0, [sp, #12]
.LPIC3167:
	add	r2, pc, r2
	add	r2, r2, #180
	bl	snd_pcm_set_ops(PLT)
	mov	ip, #65536
	mov	r3, r4
	ldr	r0, [sp, #12]
	mov	r2, r4
	mov	r1, #2
	str	ip, [sp]
	bl	snd_pcm_lib_preallocate_pages_for_all(PLT)
	ldr	r0, [sp, #8]
	mov	r2, #16
	ldr	r1, .L12438+16
	add	r0, r0, #20
.LPIC3168:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	ldr	r1, [sp, #8]
	mov	r2, #32
	add	r0, r1, #36
	add	r1, r1, #20
	bl	strlcpy(PLT)
	ldr	r0, [sp, #8]
	mov	r2, #80
	ldr	r1, .L12438+20
	add	r0, r0, #68
.LPIC3169:
	add	r1, pc, r1
	bl	strlcpy(PLT)
	ldr	r0, [sp, #8]
	bl	snd_card_register(PLT)
	subs	r4, r0, #0
	bne	.L12433
	mov	r0, r6
	mov	r1, r7
	bl	usb_add_function(PLT)
	subs	r4, r0, #0
	beq	.L12437
.L12431:
.L12432:
.L12433:
	ldr	r3, .L12438+24
.LPIC3172:
	add	r3, pc, r3
	ldr	r0, [r3, #2796]
	bl	snd_card_free(PLT)
	mov	r0, r4
	b	.L12430
.L12437:
	ldr	r3, [sp, #12]
	mov	r0, r4
	ldr	r2, [sp, #8]
	ldr	r1, [r3]
	ldr	r1, [r1]
	str	r1, [r5]
	ldr	r3, [r3, #12]
	str	r3, [r5, #4]
	str	r2, [r8, #2796]
	b	.L12430
.L12439:
	.align	2
.L12438:
	.word	.LC708-(.LPIC3163+8)
	.word	.LANCHOR0-(.LPIC3164+8)
	.word	.LC709-(.LPIC3166+8)
	.word	.LANCHOR7-(.LPIC3167+8)
	.word	.LC710-(.LPIC3168+8)
	.word	.LC711-(.LPIC3169+8)
	.word	.LANCHOR0-(.LPIC3172+8)
	.fnend
	.size	audio_source_bind_config, .-audio_source_bind_config
	.align	2
	.type	audio_source_function_bind_config, %function
audio_source_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #4]
	mov	r0, r1
	mov	r1, r3
	b	audio_source_bind_config(PLT)
	.fnend
	.size	audio_source_function_bind_config, .-audio_source_function_bind_config
	.align	2
	.global	gs_alloc_req
	.type	gs_alloc_req, %function
gs_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, r2
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L12442
	str	r6, [r4, #4]
	mov	r0, r6
	mov	r1, r5
	bl	__kmalloc(PLT)
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4]
	beq	.L12447
.L12442:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12447:
	ldr	r2, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r3
	ldr	r3, [r2, #12]
	blx	r3
	b	.L12442
	.fnend
	.size	gs_alloc_req, .-gs_alloc_req
	.align	2
	.global	gs_free_req
	.type	gs_free_req, %function
gs_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gs_free_req, .-gs_free_req
	.align	2
	.type	gs_start_tx, %function
gs_start_tx:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	add	r8, r0, #76
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r5, [r0, #76]
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r0, #4]
	cmp	r8, r5
	ldr	r6, [r3, #88]
	beq	.L12471
	ldr	r3, [r0, #84]
	cmp	r3, #7
	bgt	.L12471
	ldr	r9, .L12496
	mov	r4, r0
	mov	r10, #0
.LPIC3178:
	add	r9, pc, r9
	b	.L12454
.L12456:
	ldr	r3, [r4, #96]
	add	r2, r3, r2
	rsb	r10, r1, r2
	cmp	r10, fp
	bcs	.L12491
	rsb	r3, r10, fp
	mov	r2, r10
	mov	r0, ip
	str	r3, [sp, #4]
	bl	memcpy(PLT)
	add	r0, r0, r10
	ldr	r10, [sp, #4]
	ldr	r1, [r4, #96]
	mov	r2, r10
	bl	memcpy(PLT)
	ldr	r3, [r4, #96]
	add	r10, r3, r10
	str	r10, [r4, #100]
.L12457:
	str	fp, [r5, #-32]
	mov	r0, r5
	bl	list_del(PLT)
	mov	r0, r4
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r2, #32
	mov	r0, r6
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r4
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L12492
	cmp	fp, #0
	bne	.L12493
	ldr	r1, [r5, #-32]
	ldr	r2, [r4, #136]
	ldr	r3, [r4, #84]
	ldr	r5, [r4, #76]
	str	r1, [r9, #3688]
	add	r2, r2, r1
	add	r3, r3, #1
	cmp	r8, r5
	str	r2, [r4, #136]
	str	r3, [r4, #84]
	beq	.L12453
	cmp	r3, #7
	mov	r10, #1
	bgt	.L12453
.L12454:
	ldr	r2, [r4, #92]
	sub	r7, r5, #36
	ldr	r3, [r4, #104]
	ldr	r1, [r4, #100]
	ldr	ip, [r5, #-36]
	add	r3, r3, r2
	rsb	r3, r1, r3
	udiv	fp, r3, r2
	mls	fp, r2, fp, r3
	cmp	fp, #4096
	movcs	fp, #4096
	bcs	.L12456
	cmp	fp, #0
	bne	.L12456
	ldr	r3, .L12496+4
.LPIC3173:
	add	r3, pc, r3
	ldr	r2, [r3, #3688]
	cmp	r2, #0
	beq	.L12472
	ldrh	r1, [r6, #20]
	sdiv	r3, r2, r1
	mls	r2, r1, r3, r2
	cmp	r2, #0
	bne	.L12459
	str	r2, [r5, #-32]
	mov	r0, r5
	bl	list_del(PLT)
	mov	r0, r4
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r7
	mov	r2, #32
	mov	r0, r6
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r4
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L12494
	cmp	fp, #0
	bne	.L12495
.L12462:
	ldr	r3, .L12496+8
	mov	r2, #0
.LPIC3177:
	add	r3, pc, r3
	str	r2, [r3, #3688]
	b	.L12459
.L12491:
	mov	r0, ip
	mov	r2, fp
	bl	memcpy(PLT)
	cmp	r10, fp
	ldrhi	r3, [r4, #100]
	ldrls	r3, [r4, #96]
	addhi	r3, r3, fp
	str	r3, [r4, #100]
	b	.L12457
.L12493:
	mov	r0, r5
	mov	r1, r8
	ldr	r2, [r4, #76]
	bl	__list_add(PLT)
.L12453:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12477
	bl	tty_wakeup(PLT)
.L12477:
	mov	r0, fp
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12472:
	mov	fp, r2
.L12459:
	mov	r1, #1
	add	r0, r4, #108
	mov	r2, r1
	mov	r3, #0
	bl	__wake_up(PLT)
.L12461:
	cmp	r10, #0
	beq	.L12477
	b	.L12453
.L12492:
	mov	r0, r6
	mov	r1, r7
	bl	gs_free_req(PLT)
	b	.L12477
.L12471:
	mov	fp, #0
	b	.L12477
.L12494:
	mov	r0, r6
	mov	r1, r7
	bl	gs_free_req(PLT)
	b	.L12461
.L12495:
	ldr	r1, .L12496+12
	mov	r3, fp
	ldr	r0, .L12496+16
	ldr	r2, .L12496+20
.LPIC3175:
	add	r1, pc, r1
	sub	r1, r1, #3824
.LPIC3174:
	add	r0, pc, r0
.LPIC3176:
	add	r2, pc, r2
	bl	printk(PLT)
	mov	r0, r5
	mov	r1, r8
	ldr	r2, [r4, #76]
	bl	__list_add(PLT)
	b	.L12462
.L12497:
	.align	2
.L12496:
	.word	.LANCHOR4-(.LPIC3178+8)
	.word	.LANCHOR4-(.LPIC3173+8)
	.word	.LANCHOR4-(.LPIC3177+8)
	.word	.LANCHOR9-(.LPIC3175+8)
	.word	.LC712-(.LPIC3174+8)
	.word	.LC713-(.LPIC3176+8)
	.fnend
	.size	gs_start_tx, .-gs_start_tx
	.align	2
	.type	gs_flush_chars, %function
gs_flush_chars:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #4]
	mov	r5, r0
	cmp	r3, #0
	beq	.L12499
	mov	r0, r4
	bl	gs_start_tx(PLT)
.L12499:
	mov	r0, r4
	mov	r1, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
	.fnend
	.size	gs_flush_chars, .-gs_flush_chars
	.align	2
	.type	gs_write, %function
gs_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #272]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	cmp	r5, #0
	mov	r7, r0
	bne	.L12519
.L12505:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L12510
	mov	r0, r4
	bl	gs_start_tx(PLT)
.L12510:
	mov	r0, r4
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12519:
	ldr	r2, [r4, #92]
	mov	r8, r5
	ldr	r3, [r4, #100]
	ldr	r0, [r4, #104]
	add	r3, r3, r2
	rsb	r3, r0, r3
	sub	r3, r3, #1
	udiv	r5, r3, r2
	mls	r5, r2, r5, r3
	cmp	r8, r5
	bhi	.L12520
.L12506:
	ldr	r5, [r4, #96]
	mov	r1, r6
	add	r5, r5, r2
	rsb	r5, r0, r5
	cmp	r5, r8
	bcs	.L12508
	mov	r2, r5
	rsb	r9, r5, r8
	bl	memcpy(PLT)
	add	r1, r6, r5
	mov	r2, r9
	ldr	r0, [r4, #96]
	bl	memcpy(PLT)
	ldr	r3, [r4, #96]
	mov	r5, r8
	add	r3, r3, r9
	str	r3, [r4, #104]
	b	.L12505
.L12520:
	cmp	r5, #0
	beq	.L12505
	mov	r8, r5
	b	.L12506
.L12508:
	mov	r2, r8
	bl	memcpy(PLT)
	cmp	r5, r8
	bls	.L12509
	ldr	r3, [r4, #104]
	mov	r5, r8
	add	r8, r3, r8
	str	r8, [r4, #104]
	b	.L12505
.L12509:
	ldr	r3, [r4, #96]
	mov	r5, r8
	str	r3, [r4, #104]
	b	.L12505
	.fnend
	.size	gs_write, .-gs_write
	.align	2
	.type	gs_write_complete, %function
gs_write_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	str	lr, [sp, #20]
	str	r8, [sp, #16]
	ldr	r4, [r0]
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #140]
	mov	r6, r0
	add	r1, r4, #76
	ldr	ip, [r5, #48]
	add	r0, r5, #36
	ldr	r2, [r4, #76]
	add	r3, r3, ip
	str	r3, [r4, #140]
	bl	__list_add(PLT)
	ldr	r3, [r4, #84]
	sub	r3, r3, #1
	str	r3, [r4, #84]
	ldr	r3, [r5, #44]
	cmn	r3, #108
	beq	.L12523
	cmp	r3, #0
	bne	.L12535
.L12524:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L12523
	mov	r0, r4
	bl	gs_start_tx(PLT)
.L12523:
	mov	r0, r4
	mov	r1, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L12535:
	ldr	r1, .L12536
	ldr	r0, .L12536+4
	ldr	r2, [r7, #4]
.LPIC3180:
	add	r1, pc, r1
	sub	r1, r1, #3808
.LPIC3179:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L12524
.L12537:
	.align	2
.L12536:
	.word	.LANCHOR9-(.LPIC3180+8)
	.word	.LC714-(.LPIC3179+8)
	.fnend
	.size	gs_write_complete, .-gs_write_complete
	.align	2
	.type	gs_start_io, %function
gs_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r10, [sp, #24]
	mov	r10, r0
	strd	r6, [sp, #8]
	adds	r3, r10, #44
	add	r4, r10, #32
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	r0, [r0, #4]
	.pad #12
	sub	sp, sp, #12
	str	r3, [sp]
	ldr	r5, [r0, #92]
	beq	.L12583
	ldr	r7, [r10, #44]
	rsb	r7, r7, #8
	cmp	r7, #0
	ble	.L12541
	ldr	r8, .L12627
	mov	r6, #0
.LPIC3182:
	add	r8, pc, r8
	b	.L12540
.L12544:
	str	r8, [r3, #28]
	ldr	r1, [r10, #36]
	bl	__list_add(PLT)
	ldr	r3, [r10, #44]
	cmp	r7, r6
	add	r3, r3, #1
	str	r3, [r10, #44]
	ble	.L12543
.L12540:
	mov	r2, #32
	mov	r0, r5
	mov	r1, #4096
	add	r6, r6, #1
	bl	gs_alloc_req(PLT)
	subs	r3, r0, #0
	mov	r2, r4
	add	r0, r3, #36
	bne	.L12544
.L12542:
	ldr	r2, [r10, #32]
	cmp	r4, r2
	beq	.L12545
.L12543:
	ldr	r0, [r10, #4]
.L12541:
	adds	r3, r10, #88
	ldr	r8, [r0, #88]
	add	r7, r10, #76
	str	r3, [sp, #4]
	beq	.L12618
	ldr	r9, [r10, #88]
	rsb	r9, r9, #8
	cmp	r9, #0
	ble	.L12548
	ldr	fp, .L12627+4
	mov	r6, #0
.LPIC3184:
	add	fp, pc, fp
	b	.L12547
.L12552:
	str	fp, [r3, #28]
	ldr	r1, [r10, #80]
	bl	__list_add(PLT)
	ldr	r3, [r10, #88]
	cmp	r9, r6
	add	r3, r3, #1
	str	r3, [r10, #88]
	ble	.L12551
.L12547:
	mov	r2, #32
	mov	r0, r8
	mov	r1, #4096
	add	r6, r6, #1
	bl	gs_alloc_req(PLT)
	subs	r3, r0, #0
	mov	r2, r7
	add	r0, r3, #36
	bne	.L12552
.L12549:
	ldr	r2, [r10, #76]
	cmp	r7, r2
	beq	.L12619
.L12551:
	ldr	r0, [r10, #4]
.L12548:
	ldr	fp, [r10, #32]
	mov	r2, #0
	str	r2, [r10, #56]
	ldr	r6, [r0, #92]
	cmp	r4, fp
	ldreq	r2, [r10, #40]
	beq	.L12560
	ldr	r1, [r10, #8]
	ldr	r2, [r10, #40]
	cmp	r1, #0
	beq	.L12564
	cmp	r2, #7
	ble	.L12579
	b	.L12620
.L12559:
	cmp	r9, #0
	bne	.L12621
	ldr	r2, [r10, #40]
	ldr	fp, [r10, #32]
	add	r2, r2, #1
	cmp	r4, fp
	str	r2, [r10, #40]
	beq	.L12581
	ldr	r0, [r10, #8]
	cmp	r0, #0
	beq	.L12564
	cmp	r2, #7
	bgt	.L12582
.L12579:
	mov	r0, fp
	sub	r8, fp, #36
	bl	list_del(PLT)
	mov	r3, #4096
	mov	r0, r10
	str	r3, [fp, #-32]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r8
	mov	r2, #32
	mov	r0, r6
	ldr	r3, [r3, #16]
	blx	r3
	mov	r9, r0
	mov	r0, r10
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r10, #4]
	cmp	r3, #0
	bne	.L12559
	mov	r0, r6
	mov	r1, r8
	bl	gs_free_req(PLT)
	ldr	r0, [r10, #4]
	ldr	r2, [r10, #40]
.L12560:
	cmp	r0, #0
	beq	.L12564
.L12581:
	ldr	r0, [r10, #8]
	cmp	r0, #0
	beq	.L12564
	cmp	r2, #0
	bne	.L12582
	ldr	r6, [sp]
.L12566:
	cmp	r6, #0
	beq	.L12569
	b	.L12567
.L12622:
	bl	list_del(PLT)
	mov	r0, r5
	mov	r1, r6
	bl	gs_free_req(PLT)
.L12569:
	ldr	r0, [r10, #32]
	cmp	r4, r0
	sub	r6, r0, #36
	bne	.L12622
.L12568:
	ldr	r2, [r10, #4]
	ldr	r4, [sp, #4]
	ldr	r5, [r2, #88]
.L12571:
	cmp	r4, #0
	beq	.L12573
	b	.L12572
.L12623:
	bl	list_del(PLT)
	mov	r0, r5
	mov	r1, r4
	bl	gs_free_req(PLT)
.L12573:
	ldr	r0, [r10, #76]
	cmp	r7, r0
	sub	r4, r0, #36
	bne	.L12623
.L12586:
	mvn	r0, #4
	b	.L12609
.L12619:
	ldr	r6, [sp]
.L12602:
	cmp	r6, #0
	beq	.L12555
	b	.L12554
.L12624:
	bl	list_del(PLT)
	mov	r0, r5
	mov	r1, r6
	bl	gs_free_req(PLT)
.L12555:
	ldr	r0, [r10, #32]
	cmp	r4, r0
	sub	r6, r0, #36
	bne	.L12624
.L12545:
	mvn	r0, #11
.L12609:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12620:
	cmp	r0, #0
	beq	.L12564
	mov	r0, r1
.L12582:
	bl	tty_wakeup(PLT)
	mov	r0, #0
	b	.L12609
.L12583:
	ldr	r7, .L12627+8
	mov	r6, r3
.LPIC3181:
	add	r7, pc, r7
	b	.L12539
.L12625:
	str	r7, [r3, #28]
	ldr	r1, [r10, #36]
	bl	__list_add(PLT)
	cmp	r6, #8
	beq	.L12543
.L12539:
	mov	r2, #32
	mov	r0, r5
	mov	r1, #4096
	add	r6, r6, #1
	bl	gs_alloc_req(PLT)
	subs	r3, r0, #0
	mov	r2, r4
	add	r0, r3, #36
	bne	.L12625
	b	.L12542
.L12618:
	ldr	r9, .L12627+12
	mov	r6, r3
.LPIC3183:
	add	r9, pc, r9
	b	.L12550
.L12626:
	str	r9, [r3, #28]
	ldr	r1, [r10, #80]
	bl	__list_add(PLT)
	cmp	r6, #8
	beq	.L12551
.L12550:
	mov	r2, #32
	mov	r0, r8
	mov	r1, #4096
	add	r6, r6, #1
	bl	gs_alloc_req(PLT)
	subs	r3, r0, #0
	mov	r2, r7
	add	r0, r3, #36
	bne	.L12626
	b	.L12549
.L12572:
	ldr	r3, [r10, #76]
	cmp	r7, r3
	sub	r6, r3, #36
	mov	r0, r3
	beq	.L12586
	bl	list_del(PLT)
	mov	r0, r5
	mov	r1, r6
	bl	gs_free_req(PLT)
	ldr	r3, [r10, #88]
	sub	r3, r3, #1
	str	r3, [r10, #88]
	b	.L12571
.L12567:
	ldr	r3, [r10, #32]
	cmp	r4, r3
	sub	r8, r3, #36
	mov	r0, r3
	beq	.L12568
	bl	list_del(PLT)
	mov	r0, r5
	mov	r1, r8
	bl	gs_free_req(PLT)
	ldr	r3, [r10, #44]
	sub	r3, r3, #1
	str	r3, [r10, #44]
	b	.L12566
.L12554:
	ldr	r3, [r10, #32]
	cmp	r4, r3
	sub	r7, r3, #36
	mov	r0, r3
	beq	.L12545
	bl	list_del(PLT)
	mov	r0, r5
	mov	r1, r7
	bl	gs_free_req(PLT)
	ldr	r3, [r10, #44]
	sub	r3, r3, #1
	str	r3, [r10, #44]
	b	.L12602
.L12621:
	mov	r0, fp
	ldr	r2, [r10, #32]
	mov	r1, r4
	bl	__list_add(PLT)
	ldr	r0, [r10, #4]
	ldr	r2, [r10, #40]
	b	.L12560
.L12564:
	ldr	r1, .L12627+16
	ldr	r0, .L12627+20
.LPIC3186:
	add	r1, pc, r1
.LPIC3185:
	add	r0, pc, r0
	sub	r1, r1, #3792
	bl	printk(PLT)
	mvn	r0, #4
	b	.L12609
.L12628:
	.align	2
.L12627:
	.word	gs_read_complete-(.LPIC3182+8)
	.word	gs_write_complete-(.LPIC3184+8)
	.word	gs_read_complete-(.LPIC3181+8)
	.word	gs_write_complete-(.LPIC3183+8)
	.word	.LANCHOR9-(.LPIC3186+8)
	.word	.LC715-(.LPIC3185+8)
	.fnend
	.size	gs_start_io, .-gs_start_io
	.align	2
	.type	gs_open, %function
gs_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L12648
	strd	r6, [sp, #8]
	mov	r6, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r5, [r0, #20]
.LPIC3187:
	add	r4, pc, r4
	add	r2, r4, #3680
	add	r2, r2, #12
	mov	r3, r5, asl #5
	sub	r5, r3, r5, asl #3
	add	r7, r2, r5
	add	r5, r4, r5
.L12634:
	mov	r0, r7
	bl	mutex_lock(PLT)
	ldr	r4, [r5, #3712]
	subs	r0, r4, #0
	beq	.L12630
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	beq	.L12631
	add	r3, r3, #1
	mov	r0, r4
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r7
	bl	mutex_unlock(PLT)
	mov	r0, #0
.L12645:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12631:
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	mov	r0, r4
	cmp	r3, #0
	beq	.L12633
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r7
	bl	mutex_unlock(PLT)
	mov	r0, #1
	bl	msleep(PLT)
	b	.L12634
.L12630:
	mov	r0, r7
	bl	mutex_unlock(PLT)
	mvn	r0, #18
	b	.L12645
.L12633:
	mov	r3, #1
	mov	r0, r4
	strb	r3, [r4, #16]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r7
	bl	mutex_unlock(PLT)
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #96]
	cmp	r3, #0
	beq	.L12647
.L12635:
	str	r4, [r6, #272]
	ldr	r7, [r4, #4]
	mov	r5, #0
	mov	r3, #1
	str	r6, [r4, #8]
	strb	r5, [r4, #16]
	str	r3, [r4, #12]
	cmp	r7, r5
	beq	.L12641
	mov	r0, r4
	bl	gs_start_io(PLT)
	ldr	r3, [r7, #116]
	cmp	r3, #0
	beq	.L12641
	mov	r0, r7
	blx	r3
.L12640:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	b	.L12645
.L12641:
	mov	r5, #0
	b	.L12640
.L12647:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, .L12648+4
.LPIC3190:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #52]
	cmp	r0, #0
	beq	.L12636
	mov	r1, #208
	mov	r2, #8192
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	mov	r7, r0
	str	r0, [r4, #96]
	beq	.L12637
.L12638:
	mov	r3, #8192
	str	r7, [r4, #104]
	mov	r0, r4
	str	r7, [r4, #100]
	str	r3, [r4, #92]
	bl	_raw_spin_lock_irq(PLT)
	b	.L12635
.L12637:
	mov	r0, r4
	mvn	r5, #11
	bl	_raw_spin_lock_irq(PLT)
	strb	r7, [r4, #16]
	b	.L12640
.L12636:
	mov	r3, #16
	mov	r7, r3
	str	r3, [r4, #96]
	b	.L12638
.L12649:
	.align	2
.L12648:
	.word	.LANCHOR4-(.LPIC3187+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3190+8))
	.fnend
	.size	gs_open, .-gs_open
	.align	2
	.type	gs_rx_push, %function
gs_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r8, [sp, #16]
	sub	r9, r0, #60
	sub	r8, r0, #12
	strd	r6, [sp, #8]
	mov	r0, r9
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	bl	_raw_spin_lock_irq(PLT)
	ldr	r5, [r4, #-12]
	ldr	r6, [r4, #-52]
	cmp	r8, r5
	beq	.L12651
	ldr	r3, .L12711
	mov	r7, #0
	str	r9, [sp, #4]
	mov	r10, r7
	str	r7, [sp]
.LPIC3191:
	add	r3, pc, r3
	mov	fp, r3
	b	.L12660
.L12709:
	cmp	r2, #0
	beq	.L12656
	mov	r0, fp
	ldrb	r1, [r4, #-43]	@ zero_extendqisi2
	bl	printk(PLT)
.L12656:
	ldr	r9, [r5, #12]
	cmp	r9, #0
	beq	.L12652
	ldr	r3, [r4, #-4]
	mov	r0, r6
	mov	r2, #0
	ldr	r1, [r5, #-36]
	cmp	r3, #0
	rsbne	r9, r3, r9
	addne	r1, r1, r3
	mov	r3, r9
	bl	tty_insert_flip_string_fixed_flag(PLT)
	ldr	r3, [r4, #72]
	cmp	r0, #0
	movne	r7, #1
	cmp	r9, r0
	add	r3, r3, r0
	str	r3, [r4, #72]
	bne	.L12707
	str	r10, [r4, #-4]
.L12652:
	mov	r0, r5
	bl	__list_del_entry(PLT)
	mov	r0, r5
	sub	r1, r4, #28
	ldr	r2, [r4, #-28]
	bl	__list_add(PLT)
	ldr	r3, [r4, #-20]
	ldr	r5, [r4, #-12]
	sub	r3, r3, #1
	cmp	r8, r5
	str	r3, [r4, #-20]
	beq	.L12708
.L12660:
	cmp	r6, #0
	beq	.L12652
	ldr	r3, [r6, #156]
	tst	r3, #1
	bne	.L12702
	ldr	r2, [r5, #8]
	cmn	r2, #108
	bne	.L12709
	mov	r3, #1
	str	r3, [sp]
	b	.L12656
.L12708:
	cmp	r6, #0
	moveq	r3, #0
	andne	r3, r7, #1
	ldr	r9, [sp, #4]
	cmp	r3, #0
	bne	.L12662
.L12664:
	ldr	r3, [sp]
	cmp	r3, #0
	bne	.L12666
.L12651:
	ldr	r3, [r4, #-56]
	cmp	r3, #0
	beq	.L12666
	ldr	r5, [r4, #-28]
	sub	r7, r4, #28
	ldr	r6, [r3, #92]
	cmp	r7, r5
	beq	.L12666
	ldr	r3, [r4, #-52]
	cmp	r3, #0
	beq	.L12666
	ldr	r3, [r4, #-20]
	cmp	r3, #7
	movle	r8, #4096
	ble	.L12669
	b	.L12666
.L12670:
	cmp	fp, #0
	bne	.L12710
	ldr	r3, [r4, #-20]
	ldr	r5, [r4, #-28]
	add	r3, r3, #1
	cmp	r7, r5
	str	r3, [r4, #-20]
	beq	.L12666
	ldr	r2, [r4, #-52]
	cmp	r2, #0
	beq	.L12666
	cmp	r3, #7
	bgt	.L12666
.L12669:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del(PLT)
	mov	r0, r9
	str	r8, [r5, #-32]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r10
	mov	r2, #32
	mov	r0, r6
	ldr	r3, [r3, #16]
	blx	r3
	mov	fp, r0
	mov	r0, r9
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #-56]
	cmp	r3, #0
	bne	.L12670
	mov	r0, r6
	mov	r1, r10
	bl	gs_free_req(PLT)
.L12666:
	mov	r0, r9
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq(PLT)
.L12702:
	ldr	r9, [sp, #4]
.L12653:
	cmp	r7, #0
	bne	.L12662
.L12705:
	ldr	r3, [r4, #-12]
	cmp	r3, r8
	beq	.L12664
	ldr	r3, [r6, #156]
	tst	r3, #1
	bne	.L12664
	cmp	r7, #0
	beq	.L12665
	ldr	r3, .L12711+4
	mov	r2, r4
	mov	r0, #4
.LPIC3192:
	add	r3, pc, r3
	ldr	r1, [r3, #2588]
	bl	queue_work_on(PLT)
	b	.L12664
.L12662:
	mov	r0, r6
	bl	tty_flip_buffer_push(PLT)
	b	.L12705
.L12707:
	ldr	r3, [r4, #-4]
	ldr	r9, [sp, #4]
	add	r0, r3, r0
	str	r0, [r4, #-4]
	b	.L12653
.L12710:
	mov	r0, r5
	mov	r1, r7
	ldr	r2, [r4, #-28]
	bl	__list_add(PLT)
	b	.L12666
.L12665:
	ldr	r0, .L12711+8
	ldrb	r1, [r4, #-43]	@ zero_extendqisi2
.LPIC3193:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L12664
.L12712:
	.align	2
.L12711:
	.word	.LC716-(.LPIC3191+8)
	.word	.LANCHOR1-(.LPIC3192+8)
	.word	.LC717-(.LPIC3193+8)
	.fnend
	.size	gs_rx_push, .-gs_rx_push
	.align	2
	.global	gserial_setup
	.type	gserial_setup, %function
gserial_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 88
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L12751
	mov	r4, r1
	ldr	r3, .L12751+4
	strd	r8, [sp, #16]
	sub	r8, r1, #1
	strd	r10, [sp, #24]
	cmp	r8, #7
	strd	r6, [sp, #8]
	str	lr, [sp, #32]
	.pad #100
	sub	sp, sp, #100
.LPIC3194:
	add	r5, pc, r5
	str	r0, [sp, #24]
	ldr	r3, [r5, r3]
	str	r3, [sp, #20]
	ldr	r3, [r3]
	str	r3, [sp, #92]
	bhi	.L12729
	ldr	r6, .L12751+8
	mov	r0, r1
	mov	r1, #0
	bl	__alloc_tty_driver(PLT)
	cmp	r0, #0
.LPIC3195:
	add	r6, pc, r6
	str	r0, [r6, #3884]
	beq	.L12730
	ldr	r1, .L12751+12
	mov	r10, #3
	mov	r9, #1
	ldr	ip, .L12751+16
	mov	r7, #14
	ldr	r2, .L12751+20
	strh	r10, [r0, #96]	@ movhi
	str	r7, [r0, #144]
	mov	r7, #0
.LPIC3196:
	add	r1, pc, r1
	strh	r9, [r0, #98]	@ movhi
.LPIC3197:
	add	ip, pc, ip
	str	r1, [r0, #72]
	ldr	r1, .L12751+24
	str	ip, [r0, #76]
	ldr	ip, [r5, r2]
	movw	r2, #3261
.LPIC3198:
	add	r1, pc, r1
	ldrd	r10, [ip]
	add	r1, r1, #216
	strd	r10, [r0, #100]
	ldrd	r10, [ip, #8]
	strd	r10, [r0, #108]
	ldrd	r10, [ip, #16]
	str	r2, [r0, #108]
	mov	r2, #9600
	str	r2, [r0, #140]
	strd	r10, [r0, #116]
	ldrd	r10, [ip, #24]
	strd	r10, [r0, #124]
	ldrd	r10, [ip, #32]
	strd	r10, [r0, #132]
	str	r2, [r0, #136]
	bl	tty_set_operations(PLT)
	ldr	ip, .L12751+28
	mov	r1, #10
	mov	r3, r7
	ldr	r0, .L12751+32
	mov	r2, r9
	str	r7, [sp]
	movt	r1, 2
.LPIC3200:
	add	ip, pc, ip
.LPIC3199:
	add	r0, pc, r0
	str	ip, [sp, #4]
	bl	__alloc_workqueue_key(PLT)
	ldr	r3, .L12751+36
	cmp	r0, r7
.LPIC3201:
	add	r3, pc, r3
	str	r0, [r3, #2588]
	beq	.L12731
	add	r2, r6, #3680
	ldr	r3, .L12751+40
	add	r10, r6, #3888
	mov	r1, r2
	ldr	r2, .L12751+44
	add	r1, r1, #12
	ldr	r0, .L12751+48
	mov	r8, r1
	str	r1, [sp, #28]
	ldr	r1, .L12751+52
.LPIC3206:
	add	r2, pc, r2
.LPIC3203:
	add	r0, pc, r0
	add	r9, r2, #3888
	str	r2, [sp, #32]
	mov	fp, r0
.LPIC3205:
	add	r1, pc, r1
	str	r1, [sp, #12]
	ldr	r3, [r5, r3]
	str	r5, [sp, #36]
	str	r3, [sp, #8]
	ldr	r3, .L12751+56
.LPIC3207:
	add	r3, pc, r3
	str	r3, [sp, #16]
	b	.L12718
.L12747:
	movw	r1, #32976
	mov	r2, #144
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L12745
.L12716:
	mov	r6, #0
	mov	r0, r5
	ldr	r1, [sp, #12]
	mov	r2, r9
	add	r8, r8, #24
	str	r6, [r0], #20
	bl	__init_waitqueue_head(PLT)
	ldr	r1, [sp, #16]
	add	r0, r5, #108
	mov	r2, r9
	bl	__init_waitqueue_head(PLT)
	ldr	r3, .L12751+60
	mov	r2, #65024
	strb	r7, [r5, #17]
	movt	r2, 65535
	add	r7, r7, #1
	strb	r6, [r5, #125]
	add	lr, r5, #64
	add	r0, r5, #32
	strb	r6, [r5, #126]
	add	r1, r5, #48
	str	r2, [r5, #60]
	mov	ip, #9600
.LPIC3209:
	add	r3, pc, r3
	add	r2, r5, #76
	str	lr, [r5, #64]
	cmp	r7, r4
	str	lr, [r5, #68]
	str	r3, [r5, #72]
	mov	r3, #8
	str	r0, [r5, #32]
	str	r0, [r5, #36]
	str	r1, [r5, #48]
	str	r1, [r5, #52]
	str	r2, [r5, #76]
	str	r2, [r5, #80]
	str	ip, [r5, #120]
	strb	r3, [r5, #124]
	str	r5, [r8, #-4]
	beq	.L12746
.L12718:
	mov	r0, r8
	mov	r1, fp
	mov	r2, r10
	bl	__mutex_init(PLT)
	ldr	r3, [sp, #8]
	ldr	r0, [r3, #8]
	cmp	r0, #0
	bne	.L12747
	mov	r5, #16
	b	.L12716
.L12745:
.L12717:
	cmp	r7, #0
	sub	r8, r7, #1
	mvn	r6, #11
	beq	.L12720
.L12715:
	ldr	r3, .L12751+64
	mov	r4, r8, asl #5
	sub	r4, r4, r8, asl #3
.LPIC3220:
	add	r3, pc, r3
	add	r3, r3, #3680
	add	r3, r3, #12
	add	r4, r3, r4
.L12726:
	ldr	r0, [r4, #20]
	sub	r4, r4, #24
	bl	kfree(PLT)
	cmp	r8, #0
	sub	r8, r8, #1
	bne	.L12726
.L12720:
	ldr	r3, .L12751+68
.LPIC3221:
	add	r3, pc, r3
	ldr	r0, [r3, #2588]
	cmp	r0, #0
	beq	.L12727
	bl	destroy_workqueue(PLT)
.L12727:
	ldr	r4, .L12751+72
.LPIC3222:
	add	r4, pc, r4
	ldr	r0, [r4, #3884]
	bl	put_tty_driver(PLT)
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #3884]
.L12714:
	ldr	r3, [sp, #20]
	ldr	r2, [sp, #92]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L12748
	add	sp, sp, #100
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12746:
	ldr	r3, [sp, #32]
	ldr	r5, [sp, #36]
	ldr	r0, [r3, #3884]
	str	r7, [r3, #3888]
	bl	tty_register_driver(PLT)
	subs	r6, r0, #0
	bne	.L12749
	ldr	r8, .L12751+76
	mov	r10, r6
	sub	r9, r9, #3888
	ldr	r3, [sp, #24]
	ldr	r6, .L12751+80
.LPIC3216:
	add	r8, pc, r8
	sub	r8, r8, #3776
	add	r7, r3, #32
.LPIC3215:
	add	r6, pc, r6
	sub	r8, r8, #4
	b	.L12722
.L12721:
	add	r10, r10, #1
	cmp	r10, r4
	beq	.L12750
.L12722:
	ldr	r0, [r9, #3884]
	mov	r1, r10
	mov	r2, r7
	bl	tty_register_device(PLT)
	cmn	r0, #4096
	bls	.L12721
	mov	r3, r0
	mov	r2, r10
	mov	r0, r6
	mov	r1, r8
	add	r10, r10, #1
	bl	printk(PLT)
	cmp	r10, r4
	bne	.L12722
.L12750:
	ldr	fp, .L12751+84
	mov	r10, #0
	add	r7, sp, #44
	ldr	r2, .L12751+88
	ldr	r9, .L12751+92
	ldr	r3, .L12751+96
.LPIC3218:
	add	fp, pc, fp
	ldr	r6, [sp, #28]
.LPIC3219:
	add	r2, pc, r2
.LPIC3217:
	add	r9, pc, r9
	str	r2, [sp, #8]
	ldr	r8, [r5, r3]
	str	fp, [sp, #12]
	mov	fp, r10
	mov	r10, r9
	mov	r9, r4
.L12725:
	mov	r1, #48
	mov	r2, r10
	ldr	r4, [r6, #20]
	mov	r3, fp
	mov	r0, r7
	bl	snprintf(PLT)
	mov	r0, r7
	mov	r1, #0
	bl	debugfs_create_dir(PLT)
	cmp	r0, #0
	str	r0, [r8]
	beq	.L12724
	cmn	r0, #4096
	bhi	.L12724
	ldr	lr, .L12751+100
	mov	r2, r0
	mov	r1, #292
	mov	r3, r4
	ldr	r0, [sp, #12]
	ldr	lr, [r5, lr]
	str	lr, [sp]
	bl	debugfs_create_file(PLT)
	ldr	lr, .L12751+104
	mov	r3, r4
	mov	r1, #420
	ldr	r2, [r8]
	ldr	r0, [sp, #8]
	ldr	lr, [r5, lr]
	str	lr, [sp]
	bl	debugfs_create_file(PLT)
.L12724:
	add	fp, fp, #1
	add	r6, r6, #24
	cmp	fp, r9
	bne	.L12725
	mov	r0, #0
	b	.L12714
.L12731:
	mvn	r6, #11
	b	.L12715
.L12729:
	mvn	r0, #21
	b	.L12714
.L12730:
	mvn	r0, #11
	b	.L12714
.L12748:
	bl	__stack_chk_fail(PLT)
.L12749:
	ldr	r1, .L12751+108
	mov	r2, r6
	sub	r8, r7, #1
	ldr	r0, .L12751+112
.LPIC3213:
	add	r1, pc, r1
	sub	r1, r1, #3776
.LPIC3212:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L12715
.L12752:
	.align	2
.L12751:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC3194+8)
	.word	__stack_chk_guard(GOT)
	.word	.LANCHOR4-(.LPIC3195+8)
	.word	.LC718-(.LPIC3196+8)
	.word	.LC719-(.LPIC3197+8)
	.word	tty_std_termios(GOT)
	.word	.LANCHOR5-(.LPIC3198+8)
	.word	.LC720-(.LPIC3200+8)
	.word	.LC195-(.LPIC3199+8)
	.word	.LANCHOR1-(.LPIC3201+8)
	.word	kmalloc_caches(GOT)
	.word	.LANCHOR4-(.LPIC3206+8)
	.word	.LC721-(.LPIC3203+8)
	.word	.LC722-(.LPIC3205+8)
	.word	.LC723-(.LPIC3207+8)
	.word	gs_rx_push-(.LPIC3209+8)
	.word	.LANCHOR4-(.LPIC3220+8)
	.word	.LANCHOR1-(.LPIC3221+8)
	.word	.LANCHOR4-(.LPIC3222+8)
	.word	.LANCHOR9-(.LPIC3216+8)
	.word	.LC725-(.LPIC3215+8)
	.word	.LC727-(.LPIC3218+8)
	.word	.LC728-(.LPIC3219+8)
	.word	.LC726-(.LPIC3217+8)
	.word	gs_dent(GOT)
	.word	debug_adb_ops(GOT)
	.word	debug_rst_ops(GOT)
	.word	.LANCHOR9-(.LPIC3213+8)
	.word	.LC724-(.LPIC3212+8)
	.fnend
	.size	gserial_setup, .-gserial_setup
	.align	2
	.type	acm_function_init, %function
acm_function_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L12759
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	mov	r5, r1
	str	lr, [sp, #12]
.LPIC3225:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L12754
	movw	r1, #32976
	mov	r2, #4
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r4, #4]
	beq	.L12757
.L12756:
	ldr	r0, [r5]
	mov	r1, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	gserial_setup(PLT)
.L12754:
	mov	r3, #16
	str	r3, [r4, #4]
	b	.L12756
.L12757:
	ldrd	r4, [sp]
	mvn	r0, #11
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12760:
	.align	2
.L12759:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3225+8))
	.fnend
	.size	acm_function_init, .-acm_function_init
	.align	2
	.global	gserial_cleanup
	.type	gserial_cleanup, %function
gserial_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	ldr	r8, .L12796
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
.LPIC3226:
	add	r8, pc, r8
	ldr	r0, [r8, #3884]
	cmp	r0, #0
	beq	.L12761
	ldr	r3, [r8, #3888]
	cmp	r3, #0
	beq	.L12763
	mov	r4, #0
	b	.L12764
.L12793:
	ldr	r0, [r8, #3884]
.L12764:
	mov	r1, r4
	add	r4, r4, #1
	bl	tty_unregister_device(PLT)
	ldr	r3, [r8, #3888]
	cmp	r3, r4
	bhi	.L12793
	cmp	r3, #0
	beq	.L12763
	ldr	fp, .L12796+4
	add	r7, r8, #3680
	mov	r9, #0
	add	r7, r7, #12
	mov	r10, r9
.LPIC3237:
	add	fp, pc, fp
.L12772:
	mov	r0, r7
	bl	mutex_lock(PLT)
	ldr	r4, [r7, #20]
	mov	r0, r7
	str	r10, [r7, #20]
	bl	mutex_unlock(PLT)
	add	r0, r4, #60
	bl	cancel_work_sync(PLT)
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #12]
	cmp	r3, #0
	bne	.L12766
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L12794
.L12766:
	mov	r0, r4
	add	r5, sp, #4
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r2, .L12796+8
	mov	r3, sp
	str	r10, [sp, #4]
	bic	r3, r3, #8128
	add	r6, r4, #20
	bic	r3, r3, #63
	ldr	r1, [r3, #12]
	add	r3, sp, #16
.LPIC3239:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #16]
	str	r3, [sp, #20]
	str	r1, [sp, #8]
	str	r2, [sp, #12]
	b	.L12770
.L12768:
	bl	_raw_spin_unlock_irq(PLT)
	bl	schedule(PLT)
.L12770:
	mov	r0, r6
	mov	r1, r5
	mov	r2, #2
	bl	prepare_to_wait(PLT)
	mov	r0, r4
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #12]
	mov	r0, r4
	cmp	r3, #0
	bne	.L12768
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L12768
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r6
	mov	r1, r5
	bl	finish_wait(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L12795
.L12771:
	mov	r0, r4
	add	r9, r9, #1
	bl	kfree(PLT)
	ldr	r3, [r8, #3888]
	add	r7, r7, #24
	cmp	r9, r3
	bcc	.L12772
.L12763:
	ldr	r3, .L12796+12
	mov	r5, #0
	ldr	r4, .L12796+16
.LPIC3240:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
.LPIC3228:
	add	r4, pc, r4
	str	r5, [r4, #3888]
	ldr	r0, [r3]
	bl	debugfs_remove_recursive(PLT)
	ldr	r3, .L12796+20
.LPIC3230:
	add	r3, pc, r3
	ldr	r0, [r3, #2588]
	bl	destroy_workqueue(PLT)
	ldr	r0, [r4, #3884]
	bl	tty_unregister_driver(PLT)
	ldr	r0, [r4, #3884]
	bl	put_tty_driver(PLT)
	str	r5, [r4, #3884]
.L12761:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L12794:
	mov	r0, r4
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L12771
.L12795:
	mov	r0, fp
	movw	r1, #1477
	bl	warn_slowpath_null(PLT)
	b	.L12771
.L12797:
	.align	2
.L12796:
	.word	.LANCHOR4-(.LPIC3226+8)
	.word	.LC385-(.LPIC3237+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC3239+8))
	.word	gs_dent(GOT_PREL)+(.-(.LPIC3240+8))
	.word	.LANCHOR4-(.LPIC3228+8)
	.word	.LANCHOR1-(.LPIC3230+8)
	.fnend
	.size	gserial_cleanup, .-gserial_cleanup
	.align	2
	.type	acm_function_cleanup, %function
acm_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	bl	gserial_cleanup(PLT)
	ldr	r0, [r4, #4]
	bl	kfree(PLT)
	mov	r3, #0
	str	r3, [r4, #4]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	acm_function_cleanup, .-acm_function_cleanup
	.align	2
	.global	gserial_connect
	.type	gserial_connect, %function
gserial_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L12815
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3241:
	add	r3, pc, r3
	ldr	r2, [r3, #3884]
	cmp	r2, #0
	beq	.L12808
	ldr	r2, [r3, #3888]
	cmp	r1, r2
	bcs	.L12808
	mov	r4, r0
	ldr	r0, [r0, #88]
	mov	r2, r1, asl #5
	sub	r1, r2, r1, asl #3
	ldr	r2, [r0, #8]
	add	r3, r3, r1
	ldr	r5, [r3, #3712]
	ldr	r1, [r0, #28]
	ldr	r3, [r2]
	blx	r3
	subs	r6, r0, #0
	blt	.L12801
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	blt	.L12802
	ldr	r3, [r4, #92]
	mov	r0, r5
	str	r5, [r3]
	bl	_raw_spin_lock_irqsave(PLT)
	str	r5, [r4, #84]
	ldr	r1, [r5, #120]
	mov	r7, r0
	str	r4, [r5, #4]
	str	r1, [r4, #96]
	ldrh	r1, [r5, #124]
	strh	r1, [r4, #100]	@ movhi
	ldrb	r2, [r5, #126]	@ zero_extendqisi2
	strb	r2, [r4, #102]
	ldr	r3, [r5, #12]
	cmp	r3, #0
	bne	.L12814
	ldr	r3, [r4, #120]
	cmp	r3, #0
	beq	.L12805
.L12813:
	mov	r0, r4
	blx	r3
.L12805:
	mov	r0, r5
	mov	r1, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
.L12801:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12802:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #88]
	mov	r2, #0
	str	r2, [r3]
	b	.L12801
.L12814:
	mov	r0, r5
	bl	gs_start_io(PLT)
	ldr	r3, [r4, #116]
	cmp	r3, #0
	bne	.L12813
	b	.L12805
.L12808:
	mvn	r6, #5
	b	.L12801
.L12816:
	.align	2
.L12815:
	.word	.LANCHOR4-(.LPIC3241+8)
	.fnend
	.size	gserial_connect, .-gserial_connect
	.align	2
	.global	gserial_disconnect
	.type	gserial_disconnect, %function
gserial_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #84]
	cmp	r4, #0
	beq	.L12817
	mov	r8, r0
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r5, r0
	ldr	r0, [r8, #96]
	mov	r2, #0
	str	r0, [r4, #120]
	ldrh	r0, [r8, #100]
	strh	r0, [r4, #124]	@ movhi
	ldrb	r1, [r8, #102]	@ zero_extendqisi2
	str	r2, [r4, #4]
	strb	r1, [r4, #126]
	str	r2, [r8, #84]
	ldr	r3, [r4, #12]
	cmp	r3, r2
	bne	.L12819
	ldrb	r3, [r4, #16]	@ zero_extendqisi2
	cmp	r3, r2
	beq	.L12820
.L12819:
	mov	r1, #1
	add	r0, r4, #108
	mov	r2, r1
	mov	r3, #0
	bl	__wake_up(PLT)
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L12820
	bl	tty_hangup(PLT)
.L12820:
	mov	r1, r5
	mov	r0, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r8, #92]
	mov	r5, #0
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r8, #92]
	str	r5, [r3]
	ldr	r0, [r8, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r8, #88]
	mov	r0, r4
	str	r5, [r3]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #12]
	mov	r7, r0
	cmp	r3, r5
	beq	.L12838
.L12822:
	ldr	r0, [r4, #32]
	add	r9, r4, #32
	ldr	r5, [r8, #92]
	cmp	r9, r0
	beq	.L12823
.L12824:
	sub	r6, r0, #36
	bl	list_del(PLT)
	mov	r0, r5
	mov	r1, r6
	bl	gs_free_req(PLT)
	ldr	r0, [r4, #32]
	cmp	r9, r0
	bne	.L12824
	ldr	r5, [r8, #92]
.L12823:
	ldr	r0, [r4, #48]
	add	r9, r4, #48
	cmp	r0, r9
	beq	.L12829
.L12828:
	sub	r6, r0, #36
	bl	list_del(PLT)
	mov	r0, r5
	mov	r1, r6
	bl	gs_free_req(PLT)
	ldr	r0, [r4, #48]
	cmp	r0, r9
	bne	.L12828
.L12829:
	ldr	r0, [r4, #76]
	add	r6, r4, #76
	ldr	r8, [r8, #88]
	cmp	r0, r6
	beq	.L12827
.L12830:
	sub	r5, r0, #36
	bl	list_del(PLT)
	mov	r0, r8
	mov	r1, r5
	bl	gs_free_req(PLT)
	ldr	r0, [r4, #76]
	cmp	r0, r6
	bne	.L12830
.L12827:
	mov	r3, #0
	mov	r1, r7
	mov	r0, r4
	str	r3, [r4, #84]
	str	r3, [r4, #88]
	str	r3, [r4, #40]
	str	r3, [r4, #44]
	str	r3, [r4, #140]
	str	r3, [r4, #136]
	str	r3, [r4, #132]
	str	r3, [r4, #128]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L12838:
	ldrb	r5, [r4, #16]	@ zero_extendqisi2
	cmp	r5, #0
	bne	.L12822
	ldr	r0, [r4, #96]
	bl	kfree(PLT)
	str	r5, [r4, #96]
	b	.L12822
.L12817:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	gserial_disconnect, .-gserial_disconnect
	.align	2
	.type	acm_disable, %function
acm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	bl	gserial_disconnect(PLT)
	ldr	r0, [r4, #152]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #152]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	acm_disable, .-acm_disable
	.align	2
	.type	acm_set_alt, %function
acm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r0, #144]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L12864
	ldrb	r3, [r0, #145]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L12846
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L12847
	bl	gserial_disconnect(PLT)
	ldr	r2, [r4, #88]
.L12847:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L12848
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L12848
.L12849:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L12853
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed(PLT)
	subs	r5, r0, #0
	bne	.L12853
	mov	r0, r4
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
	bl	gserial_connect(PLT)
.L12845:
	mov	r0, r5
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12864:
	ldr	r2, [r0, #152]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L12843
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #152]
.L12843:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	subs	r5, r0, #0
	bne	.L12846
	ldr	r0, [r4, #152]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #152]
	str	r4, [r3]
	b	.L12845
.L12848:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L12853
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L12853
	ldr	r2, [r4, #88]
	b	.L12849
.L12853:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r5, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L12845
.L12846:
	mvn	r5, #21
	b	.L12845
	.fnend
	.size	acm_set_alt, .-acm_set_alt
	.align	2
	.global	gsdio_free_req
	.type	gsdio_free_req, %function
gsdio_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	gsdio_free_req, .-gsdio_free_req
	.align	2
	.global	gsdio_alloc_req
	.type	gsdio_alloc_req, %function
gsdio_alloc_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, r2
	str	r8, [sp, #16]
	mov	r7, r0
	str	lr, [sp, #20]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r4, r0, #0
	beq	.L12871
	mov	r1, r5
	str	r6, [r4, #4]
	mov	r0, r6
	bl	__kmalloc(PLT)
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4]
	beq	.L12872
.L12869:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L12871:
	ldr	r1, .L12873
	ldr	r0, .L12873+4
.LPIC3245:
	add	r1, pc, r1
	sub	r1, r1, #3760
.LPIC3244:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L12869
.L12872:
	ldr	r1, .L12873+8
	ldr	r0, .L12873+12
.LPIC3247:
	add	r1, pc, r1
	sub	r1, r1, #3760
.LPIC3246:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	ldr	r3, [r7, #8]
	mov	r1, r4
	mov	r0, r7
	mov	r4, r5
	ldr	r3, [r3, #12]
	blx	r3
	b	.L12869
.L12874:
	.align	2
.L12873:
	.word	.LANCHOR9-(.LPIC3245+8)
	.word	.LC423-(.LPIC3244+8)
	.word	.LANCHOR9-(.LPIC3247+8)
	.word	.LC424-(.LPIC3246+8)
	.fnend
	.size	gsdio_alloc_req, .-gsdio_alloc_req
	.align	2
	.global	gsdio_free_requests
	.type	gsdio_free_requests, %function
gsdio_free_requests:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r0, [r1]
	cmp	r1, r0
	beq	.L12875
.L12877:
	sub	r5, r0, #36
	bl	list_del(PLT)
	mov	r0, r6
	mov	r1, r5
	bl	gsdio_free_req(PLT)
	ldr	r0, [r4]
	cmp	r4, r0
	bne	.L12877
.L12875:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	gsdio_free_requests, .-gsdio_free_requests
	.align	2
	.global	gsdio_alloc_requests
	.type	gsdio_alloc_requests, %function
gsdio_alloc_requests:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r8, [sp, #16]
	ldr	r9, [sp, #32]
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ble	.L12887
	mov	r7, r3
	mov	r5, r1
	mov	r6, r0
	mov	r8, r2
	mov	r4, #0
	b	.L12886
.L12884:
	str	r9, [ip, #28]
	ldr	r2, [r5]
	bl	__list_add(PLT)
	cmp	r4, r8
	beq	.L12887
.L12886:
	mov	r1, r7
	mov	r0, r6
	mov	r2, #32
	add	r4, r4, #1
	bl	gsdio_alloc_req(PLT)
	subs	ip, r0, #0
	mov	r1, r5
	add	r0, ip, #36
	bne	.L12884
	ldr	r3, [r5]
	cmp	r5, r3
	mvneq	r0, #11
	movne	r0, #0
	b	.L12883
.L12887:
	mov	r0, #0
.L12883:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
	.fnend
	.size	gsdio_alloc_requests, .-gsdio_alloc_requests
	.align	2
	.global	gsdio_start_rx
	.type	gsdio_start_rx, %function
gsdio_start_rx:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	beq	.L12906
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	add	r6, r0, #4
	mov	r0, r6
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L12894
	ldr	r2, [r5, #108]
	cmp	r2, #0
	beq	.L12894
	ldr	r7, [r3, #92]
	add	r8, r5, #12
	mov	r9, #2048
	b	.L12896
.L12898:
	bl	list_del(PLT)
	str	r9, [r4, #-32]
	ldr	r3, [r5, #44]
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r5, #44]
	bl	_raw_spin_unlock_irq(PLT)
	ldr	r3, [r7, #8]
	mov	r1, r10
	mov	r2, #32
	mov	r0, r7
	ldr	r3, [r3, #16]
	blx	r3
	mov	r10, r0
	mov	r0, r6
	bl	_raw_spin_lock_irq(PLT)
	cmp	r10, #0
	bne	.L12907
	ldr	r3, [r5, #96]
	cmp	r3, #0
	beq	.L12894
.L12896:
	ldr	r4, [r5, #12]
	cmp	r8, r4
	mov	r0, r4
	sub	r10, r4, #36
	bne	.L12898
.L12894:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irq(PLT)
.L12907:
	ldr	r1, .L12908
	mov	r2, r5
	ldr	r0, .L12908+4
	ldr	r3, [r5]
.LPIC3251:
	add	r1, pc, r1
	sub	r1, r1, #3744
.LPIC3250:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	mov	r2, r8
	ldr	r1, [r5, #16]
	bl	__list_add(PLT)
	ldr	r3, [r5, #44]
	add	r3, r3, #1
	str	r3, [r5, #44]
	b	.L12894
.L12906:
	ldr	r1, .L12908+8
	ldr	r0, .L12908+12
.LPIC3249:
	add	r1, pc, r1
	sub	r1, r1, #3744
.LPIC3248:
	add	r0, pc, r0
	sub	r1, r1, #4
	b	printk(PLT)
.L12909:
	.align	2
.L12908:
	.word	.LANCHOR9-(.LPIC3251+8)
	.word	.LC22-(.LPIC3250+8)
	.word	.LANCHOR9-(.LPIC3249+8)
	.word	.LC21-(.LPIC3248+8)
	.fnend
	.size	gsdio_start_rx, .-gsdio_start_rx
	.align	2
	.global	gsdio_write
	.type	gsdio_write, %function
gsdio_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r4, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L12919
	cmp	r1, #0
	beq	.L12920
	ldr	r3, [r4, #108]
	cmp	r3, #0
	beq	.L12912
	ldr	r3, [r1, #48]
	cmp	r3, #0
	bne	.L12914
	str	r3, [r4, #8]
.L12912:
	ldrd	r4, [sp]
	mvn	r0, #18
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L12919:
	ldr	r1, .L12921
	ldr	r0, .L12921+4
.LPIC3253:
	add	r1, pc, r1
	sub	r1, r1, #3728
.LPIC3252:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L12912
.L12920:
	ldr	r1, .L12921+8
	ldr	r0, .L12921+12
	ldr	r2, [r4]
.LPIC3255:
	add	r1, pc, r1
	sub	r1, r1, #3728
.LPIC3254:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L12912
.L12914:
	add	r5, r4, #4
	mov	r0, r5
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irq(PLT)
	ldr	r1, .L12921+16
	mvn	r3, #18
	ldr	r0, .L12921+20
	ldr	r2, [r4]
.LPIC3257:
	add	r1, pc, r1
	sub	r1, r1, #3728
.LPIC3256:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L12912
.L12922:
	.align	2
.L12921:
	.word	.LANCHOR9-(.LPIC3253+8)
	.word	.LC21-(.LPIC3252+8)
	.word	.LANCHOR9-(.LPIC3255+8)
	.word	.LC729-(.LPIC3254+8)
	.word	.LANCHOR9-(.LPIC3257+8)
	.word	.LC730-(.LPIC3256+8)
	.fnend
	.size	gsdio_write, .-gsdio_write
	.align	2
	.global	gsdio_rx_push
	.type	gsdio_rx_push, %function
gsdio_rx_push:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r8, [sp, #16]
	sub	r9, r0, #24
	sub	r8, r4, #8
	strd	r6, [sp, #8]
	sub	r6, r0, #28
	mov	r0, r9
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irq(PLT)
	ldr	r3, [r4, #68]
	cmp	r3, #0
	beq	.L12944
	ldr	r10, [r4, #-8]
	ldr	r3, [r3, #92]
	cmp	r8, r10
	str	r3, [sp, #12]
	beq	.L12926
	ldr	r5, .L12947
	sub	fp, r4, #16
	ldr	r3, .L12947+4
.LPIC3259:
	add	r5, pc, r5
.LPIC3258:
	add	r3, pc, r3
	sub	r5, r5, #3712
	sub	r5, r5, #8
	str	r3, [sp, #8]
	mov	r3, fp
	mov	fp, r5
	mov	r5, r10
	mov	r10, r8
	mov	r8, r3
.L12933:
	ldr	lr, [r5, #8]
	sub	r7, r5, #36
	cmn	lr, #108
	beq	.L12926
	cmp	lr, #0
	mov	r2, r6
	ldr	r0, [sp, #8]
	mov	r1, fp
	beq	.L12928
	ldr	r3, [r4, #-28]
	str	lr, [sp]
	bl	printk(PLT)
.L12928:
	ldr	r3, [r4, #80]
	mov	r0, r5
	cmp	r3, #0
	beq	.L12945
	bl	list_del(PLT)
	ldr	r3, [r4, #20]
	mov	r1, r7
	mov	r0, r6
	sub	r3, r3, #1
	str	r3, [r4, #20]
	bl	gsdio_write(PLT)
	ldr	r3, [r4, #68]
	mov	r2, r0
	mov	r1, r8
	mov	r0, r5
	cmp	r3, #0
	beq	.L12946
	cmp	r2, #0
	bne	.L12932
	ldr	r3, [r4, #-20]
	cmp	r3, #0
	bne	.L12932
	ldr	r2, [r4, #-16]
	bl	__list_add(PLT)
	ldr	r3, [r4, #16]
	ldr	r5, [r4, #-8]
	add	r3, r3, #1
	cmp	r10, r5
	str	r3, [r4, #16]
	bne	.L12933
.L12926:
	mov	r0, r9
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	gsdio_start_rx(PLT)
.L12946:
	str	r3, [r4, #-20]
	ldr	r0, [sp, #12]
	mov	r1, r7
	bl	gsdio_free_req(PLT)
.L12944:
	mov	r0, r9
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irq(PLT)
.L12932:
	mov	r8, r10
	mov	r0, r5
	ldr	r2, [r4, #-8]
	mov	r1, r8
	bl	__list_add(PLT)
	ldr	r3, [r4, #20]
	add	r3, r3, #1
	str	r3, [r4, #20]
	b	.L12926
.L12945:
	ldr	r1, .L12947+8
	ldr	r0, .L12947+12
.LPIC3261:
	add	r1, pc, r1
	sub	r1, r1, #3712
.LPIC3260:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r5
	bl	__list_del_entry(PLT)
	ldr	r2, [r4, #-16]
	mov	r0, r5
	sub	r1, r4, #16
	bl	__list_add(PLT)
	ldrd	r2, [r4, #16]
	add	r2, r2, #1
	sub	r3, r3, #1
	strd	r2, [r4, #16]
	b	.L12926
.L12948:
	.align	2
.L12947:
	.word	.LANCHOR9-(.LPIC3259+8)
	.word	.LC187-(.LPIC3258+8)
	.word	.LANCHOR9-(.LPIC3261+8)
	.word	.LC731-(.LPIC3260+8)
	.fnend
	.size	gsdio_rx_push, .-gsdio_rx_push
	.align	2
	.global	gsdio_read_pending
	.type	gsdio_read_pending, %function
gsdio_read_pending:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	beq	.L12954
	ldr	r3, [r0, #120]
	ldr	r3, [r3, #4]
	cmp	r3, #0
	beq	.L12949
.L12953:
	b	.L12953
.L12949:
	bx	lr
.L12954:
	ldr	r1, .L12955
	ldr	r0, .L12955+4
.LPIC3263:
	add	r1, pc, r1
	sub	r1, r1, #3696
.LPIC3262:
	add	r0, pc, r0
	sub	r1, r1, #8
	b	printk(PLT)
.L12956:
	.align	2
.L12955:
	.word	.LANCHOR9-(.LPIC3263+8)
	.word	.LC21-(.LPIC3262+8)
	.fnend
	.size	gsdio_read_pending, .-gsdio_read_pending
	.align	2
	.global	gsdio_tx_pull
	.type	gsdio_tx_pull, %function
gsdio_tx_pull:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	sub	r7, r0, #8
	strd	r8, [sp, #16]
	sub	r8, r0, #60
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #36]
	.pad #8
	sub	sp, sp, #8
	cmp	r3, #0
	beq	.L12965
	sub	r5, r0, #56
	mov	r0, r5
	bl	_raw_spin_lock_irq(PLT)
	ldr	r6, [r4, #-8]
	cmp	r7, r6
	beq	.L12959
	ldr	r2, [r4, #48]
	ldr	r3, [r4, #36]
	cmp	r2, #0
	ldr	r9, [r3, #88]
	bne	.L12966
.L12959:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irq(PLT)
.L12965:
	ldr	r1, .L12968
	ldr	r0, .L12968+4
.LPIC3265:
	add	r1, pc, r1
	sub	r1, r1, #3680
.LPIC3264:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r8
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gsdio_read_pending(PLT)
.L12966:
	mov	r0, r6
	sub	r10, r6, #36
	bl	list_del(PLT)
	ldr	r3, [r4, #16]
	mov	r0, r5
	sub	r3, r3, #1
	str	r3, [r4, #16]
	bl	_raw_spin_unlock_irq(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irq(PLT)
	ldr	r1, .L12968+8
	mvn	r3, #18
	mov	r2, r8
	ldr	r0, .L12968+12
	str	r3, [sp]
	ldr	r3, [r4, #-60]
.LPIC3267:
	add	r1, pc, r1
	sub	r1, r1, #3680
.LPIC3266:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	ldr	r3, [r4, #36]
	cmp	r3, #0
	beq	.L12967
	mov	r0, r6
	mov	r1, r7
	ldr	r2, [r4, #-8]
	bl	__list_add(PLT)
	ldr	r3, [r4, #16]
	add	r3, r3, #1
	str	r3, [r4, #16]
	b	.L12959
.L12967:
	mov	r0, r9
	mov	r1, r10
	bl	gsdio_free_req(PLT)
	b	.L12959
.L12969:
	.align	2
.L12968:
	.word	.LANCHOR9-(.LPIC3265+8)
	.word	.LC732-(.LPIC3264+8)
	.word	.LANCHOR9-(.LPIC3267+8)
	.word	.LC733-(.LPIC3266+8)
	.fnend
	.size	gsdio_tx_pull, .-gsdio_tx_pull
	.align	2
	.global	gsdio_start_io
	.type	gsdio_start_io, %function
gsdio_start_io:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #4
	strd	r8, [sp, #16]
	mov	r0, r7
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #8
	sub	sp, sp, #8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #96]
	mov	r8, r0
	cmp	r3, #0
	beq	.L12976
	ldr	ip, .L12979
	add	r9, r4, #12
	mov	r2, #8
	ldr	r0, [r3, #92]
	mov	r1, r9
	mov	r3, #2048
.LPIC3275:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	str	ip, [sp]
	bl	gsdio_alloc_requests(PLT)
	subs	r10, r0, #0
	bne	.L12977
	ldr	ip, .L12979+4
	mov	r6, #8
	add	r1, r4, #52
	ldr	r0, [r4, #96]
	mov	r2, r6
	mov	r3, #2048
	str	r6, [r4, #44]
.LPIC3274:
	ldr	ip, [pc, ip]		@ tls_load_dot_plus_eight
	ldr	r0, [r0, #88]
	str	ip, [sp]
	bl	gsdio_alloc_requests(PLT)
	subs	r5, r0, #0
	bne	.L12978
	mov	r1, r8
	mov	r0, r7
	str	r6, [r4, #76]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r4
	bl	gsdio_start_rx(PLT)
	ldr	r3, .L12979+8
	add	r2, r4, #60
	mov	r0, #4
.LPIC3273:
	add	r3, pc, r3
	ldr	r1, [r3, #2592]
	bl	queue_work_on(PLT)
	mov	r0, r5
.L12972:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L12976:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mvn	r0, #18
	b	.L12972
.L12978:
	ldr	r3, [r4, #96]
	mov	r1, r9
	ldr	r0, [r3, #92]
	bl	gsdio_free_requests(PLT)
	mov	r0, r7
	mov	r1, r8
	str	r10, [r4, #44]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, .L12979+12
	ldr	r0, .L12979+16
.LPIC3272:
	add	r1, pc, r1
	sub	r1, r1, #3664
.LPIC3271:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r5
	b	.L12972
.L12977:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, .L12979+20
	ldr	r0, .L12979+24
.LPIC3270:
	add	r1, pc, r1
	sub	r1, r1, #3664
.LPIC3269:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r10
	b	.L12972
.L12980:
	.align	2
.L12979:
	.word	gsdio_read_complete(GOT_PREL)+(.-(.LPIC3275+8))
	.word	gsdio_write_complete(GOT_PREL)+(.-(.LPIC3274+8))
	.word	.LANCHOR1-(.LPIC3273+8)
	.word	.LANCHOR9-(.LPIC3272+8)
	.word	.LC735-(.LPIC3271+8)
	.word	.LANCHOR9-(.LPIC3270+8)
	.word	.LC734-(.LPIC3269+8)
	.fnend
	.size	gsdio_start_io, .-gsdio_start_io
	.align	2
	.global	gsdio_port_free
	.type	gsdio_port_free, %function
gsdio_port_free:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, #104
	ldr	r3, .L12985
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	mul	r1, r1, r0
.LPIC3276:
	add	r3, pc, r3
	add	r2, r3, r1
	ldr	r4, [r2, #308]
	add	r3, r2, #312
	cmp	r4, #0
	beq	.L12984
	mov	r0, r3
	bl	platform_driver_unregister(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
.L12984:
	ldr	r1, .L12985+4
	mov	r2, r0
	ldr	r0, .L12985+8
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC3279:
	add	r1, pc, r1
	sub	r1, r1, #3648
.LPIC3278:
	add	r0, pc, r0
	sub	r1, r1, #4
	b	printk(PLT)
.L12986:
	.align	2
.L12985:
	.word	.LANCHOR1-(.LPIC3276+8)
	.word	.LANCHOR9-(.LPIC3279+8)
	.word	.LC89-(.LPIC3278+8)
	.fnend
	.size	gsdio_port_free, .-gsdio_port_free
	.align	2
	.global	gsdio_ctrl_modem_status
	.type	gsdio_ctrl_modem_status, %function
gsdio_ctrl_modem_status:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ands	r3, r0, #128
	moveq	r2, #1
	streq	r3, [r1, #176]
	beq	.L12989
	mov	ip, #8
	mov	r2, #9
	mov	r3, ip
	str	ip, [r1, #176]
.L12989:
	tst	r0, #64
	movne	r3, r2
	strne	r2, [r1, #176]
	tst	r0, #256
	ldr	r0, [r1, #96]
	orrne	r3, r3, #2
	strne	r3, [r1, #176]
	cmp	r0, #0
	beq	.L12987
	ldr	r2, [r0, #136]
	cmp	r2, #0
	beq	.L12987
	mov	r1, r3
	bx	r2
.L12987:
	bx	lr
	.fnend
	.size	gsdio_ctrl_modem_status, .-gsdio_ctrl_modem_status
	.align	2
	.type	gsdio_ch_remove, %function
gsdio_ch_remove:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L13023
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC3280:
	add	r5, pc, r5
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r7, [r5, #284]
	cmp	r7, #0
	beq	.L13020
	ldr	r9, .L13023+4
	mov	r8, r0
	add	r5, r5, #288
	ldr	r3, .L13023+8
	mov	r6, #0
.LPIC3283:
	add	r9, pc, r9
.LPIC3282:
	add	r3, pc, r3
	str	r3, [sp, #4]
.L13011:
	ldr	r4, [r5, #20]
	mov	r2, #9
	ldr	r1, [r8]
	ldr	r3, [r4, #120]
	ldr	r0, [r3]
	bl	strncmp(PLT)
	subs	r3, r0, #0
	mov	r2, #1
	bne	.L13007
	ldr	r7, [r4, #96]
	mov	r1, r4
	add	fp, r4, #4
	str	r3, [r4, #108]
	str	r3, [r4, #112]
	str	r2, [r4, #116]
	cmp	r7, #0
	beq	.L13022
	bl	gsdio_ctrl_modem_status(PLT)
	ldr	r0, [r7, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L13009
	blx	r3
.L13009:
	ldr	r0, [r7, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #36]
	cmp	r3, #0
	beq	.L13010
	blx	r3
.L13010:
	add	r0, r4, #28
	bl	cancel_work_sync(PLT)
	add	r0, r4, #60
	bl	cancel_work_sync(PLT)
	mov	r0, fp
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r10, r0
	add	r1, r4, #12
	ldr	r0, [r7, #92]
	bl	gsdio_free_requests(PLT)
	ldr	r0, [r7, #92]
	add	r1, r4, #20
	bl	gsdio_free_requests(PLT)
	ldr	r0, [r7, #88]
	add	r1, r4, #52
	bl	gsdio_free_requests(PLT)
	mov	r3, #0
	mov	r1, r10
	mov	r0, fp
	str	r3, [r4, #44]
	str	r3, [r4, #48]
	str	r3, [r4, #76]
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r7, [r9, #284]
.L13007:
	add	r6, r6, #1
	add	r5, r5, #104
	cmp	r6, r7
	bcc	.L13011
.L13020:
	mov	r0, #0
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13022:
	ldr	r3, [sp, #4]
	ldr	r7, [r3, #284]
	b	.L13007
.L13024:
	.align	2
.L13023:
	.word	.LANCHOR1-(.LPIC3280+8)
	.word	.LANCHOR1-(.LPIC3283+8)
	.word	.LANCHOR1-(.LPIC3282+8)
	.fnend
	.size	gsdio_ch_remove, .-gsdio_ch_remove
	.align	2
	.global	gsdio_ch_notify
	.type	gsdio_ch_notify, %function
gsdio_ch_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #1
	beq	.L13026
	cmp	r1, #2
	beq	.L13028
	bx	lr
.L13026:
	ldr	r3, .L13029
	add	r2, r0, #60
	mov	r0, #4
.LPIC3285:
	add	r3, pc, r3
	ldr	r1, [r3, #2592]
	b	queue_work_on(PLT)
.L13028:
	ldr	r3, .L13029+4
	add	r2, r0, #28
	mov	r0, #4
.LPIC3284:
	add	r3, pc, r3
	ldr	r1, [r3, #2592]
	b	queue_work_on(PLT)
.L13030:
	.align	2
.L13029:
	.word	.LANCHOR1-(.LPIC3285+8)
	.word	.LANCHOR1-(.LPIC3284+8)
	.fnend
	.size	gsdio_ch_notify, .-gsdio_ch_notify
	.align	2
	.global	gsdio_port_alloc
	.type	gsdio_port_alloc, %function
gsdio_port_alloc:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r3, .L13037
	strd	r6, [sp, #8]
	ldr	r6, .L13037+4
	mov	r7, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	mov	r9, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.LPIC3286:
	add	r6, pc, r6
	ldr	r3, [r6, r3]
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L13034
	movw	r1, #32976
	mov	r2, #192
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L13036
.L13032:
	mov	r5, #0
	str	r8, [r4]
	add	r1, r4, #32
	mov	ip, #65024
	add	lr, r4, #12
	str	r5, [r4, #4]
	ldr	r3, [r7]	@ unaligned
	movt	ip, 65535
	add	r10, r4, #20
	add	r2, r4, #52
	str	r3, [r4, #100]
	ldrh	r0, [r7, #4]	@ unaligned
	add	r3, r4, #64
	strh	r0, [r4, #104]	@ movhi
	ldrb	r7, [r7, #6]	@ zero_extendqisi2
	add	r0, r4, #84
	str	r1, [r4, #32]
	str	r1, [r4, #36]
	ldr	r1, .L13037+8
	str	ip, [r4, #28]
	strb	r7, [r4, #106]
	ldr	r7, .L13037+12
	str	lr, [r4, #12]
	str	lr, [r4, #16]
	ldr	lr, .L13037+16
	str	r10, [r4, #20]
	str	r10, [r4, #24]
	ldr	fp, [r6, r1]
	add	r10, r4, #128
	str	ip, [r4, #60]
.LPIC3289:
	add	r7, pc, r7
	mov	r1, r5
	str	r2, [r4, #52]
	str	r2, [r4, #56]
	mov	r2, r5
	str	fp, [r4, #40]
	ldr	fp, .L13037+20
	str	r3, [r4, #64]
	str	r3, [r4, #68]
	mov	r3, r5
	ldr	fp, [r6, fp]
	str	ip, [r4, #80]
	str	r0, [r4, #84]
	str	r0, [r4, #88]
	add	r0, r4, #140
	str	fp, [r4, #72]
	ldr	lr, [r6, lr]
	str	ip, [r4, #124]
	str	r7, [r4, #136]
	str	r10, [r4, #128]
	str	lr, [r4, #92]
	str	r10, [r4, #132]
	bl	init_timer_key(PLT)
	ldr	r1, .L13037+24
	mov	r3, #104
	add	lr, r4, #124
	ldr	r0, .L13037+28
	mul	r8, r3, r8
	ldr	r2, .L13037+32
	ldr	r3, .L13037+36
	ldr	ip, [r6, r1]
	str	lr, [r4, #160]
.LPIC3290:
	add	r0, pc, r0
	add	r6, r0, r8
.LPIC3292:
	add	r2, pc, r2
.LPIC3294:
	add	r3, pc, r3
	add	r0, r6, #312
	str	ip, [r4, #156]
	str	r4, [r6, #308]
	str	r9, [r4, #120]
	str	r2, [r6, #312]
	str	r3, [r6, #316]
	ldr	r3, [r9]
	str	r5, [r6, #340]
	str	r3, [r6, #332]
	bl	platform_driver_register(PLT)
	mov	r0, r5
.L13033:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13034:
	mov	r4, #16
	b	.L13032
.L13036:
	ldr	r1, .L13037+40
	ldr	r0, .L13037+44
.LPIC3288:
	add	r1, pc, r1
	sub	r1, r1, #3632
.LPIC3287:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #11
	b	.L13033
.L13038:
	.align	2
.L13037:
	.word	kmalloc_caches(GOT)
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC3286+8)
	.word	gsdio_rx_push(GOT)
	.word	gsdio_open_work-(.LPIC3289+8)
	.word	gsdio_ctrl_wq(GOT)
	.word	gsdio_tx_pull(GOT)
	.word	delayed_work_timer_fn(GOT)
	.word	.LANCHOR1-(.LPIC3290+8)
	.word	gsdio_ch_probe-(.LPIC3292+8)
	.word	gsdio_ch_remove-(.LPIC3294+8)
	.word	.LANCHOR9-(.LPIC3288+8)
	.word	.LC736-(.LPIC3287+8)
	.fnend
	.size	gsdio_port_alloc, .-gsdio_port_alloc
	.align	2
	.global	gsdio_connect
	.type	gsdio_connect, %function
gsdio_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13056
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC3298:
	add	r3, pc, r3
	ldr	r2, [r3, #284]
	cmp	r1, r2
	bcs	.L13051
	cmp	r0, #0
	mov	r4, r0
	beq	.L13052
	mov	r0, #104
	mla	r1, r0, r1, r3
	ldr	r5, [r1, #308]
	add	r6, r5, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L13056+4
	mov	r1, r0
	str	r4, [r5, #96]
	mov	r0, r6
.LPIC3309:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r3, [r4, #140]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L13053
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L13054
	ldr	r3, [r4, #92]
	str	r5, [r3]
	ldr	r3, [r5, #108]
	cmp	r3, #0
	bne	.L13055
.L13041:
	mov	r0, r6
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13055:
	mov	r0, r5
	bl	gsdio_start_io(PLT)
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L13041
	mov	r0, r4
	ldr	r1, [r5, #176]
	blx	r3
	b	.L13041
.L13054:
	ldr	r1, .L13056+8
	mov	r2, r6
	ldr	r0, .L13056+12
.LPIC3308:
	add	r1, pc, r1
	sub	r1, r1, #3616
.LPIC3307:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r3, #0
	str	r3, [r5, #96]
	ldr	r2, [r4, #88]
	str	r3, [r2]
	b	.L13041
.L13053:
	ldr	r1, .L13056+16
	mov	r2, r6
	ldr	r0, .L13056+20
.LPIC3306:
	add	r1, pc, r1
.LPIC3305:
	add	r0, pc, r0
	sub	r1, r1, #3616
	bl	printk(PLT)
	mov	r3, #0
	str	r3, [r5, #96]
	b	.L13041
.L13052:
	ldr	r1, .L13056+24
	mvn	r6, #21
	ldr	r0, .L13056+28
.LPIC3302:
	add	r1, pc, r1
	sub	r1, r1, #3616
.LPIC3301:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13041
.L13051:
	ldr	r3, .L13056+32
	mov	r2, r1
	mvn	r6, #21
	ldr	r0, .L13056+36
.LPIC3300:
	add	r3, pc, r3
	sub	r1, r3, #3616
.LPIC3299:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13041
.L13057:
	.align	2
.L13056:
	.word	.LANCHOR1-(.LPIC3298+8)
	.word	gsdio_ctrl_notify_modem(GOT_PREL)+(.-(.LPIC3309+8))
	.word	.LANCHOR9-(.LPIC3308+8)
	.word	.LC737-(.LPIC3307+8)
	.word	.LANCHOR9-(.LPIC3306+8)
	.word	.LC737-(.LPIC3305+8)
	.word	.LANCHOR9-(.LPIC3302+8)
	.word	.LC90-(.LPIC3301+8)
	.word	.LANCHOR9-(.LPIC3300+8)
	.word	.LC89-(.LPIC3299+8)
	.fnend
	.size	gsdio_connect, .-gsdio_connect
	.align	2
	.global	gsdio_disconnect
	.type	gsdio_disconnect, %function
gsdio_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L13064
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3310:
	add	r4, pc, r4
	ldr	r3, [r4, #284]
	cmp	r1, r3
	bcs	.L13062
	cmp	r0, #0
	beq	.L13063
	mov	r3, #104
	mov	r2, r1
	ldr	r1, [r4, #2592]
	mov	r6, #0
	mov	r5, r0
	mla	r2, r3, r2, r4
	mov	r0, #4
	ldr	r4, [r2, #308]
	add	r2, r4, #80
	add	r7, r4, r0
	str	r6, [r4, #180]
	bl	queue_work_on(PLT)
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r6, [r4, #96]
	mov	r0, r7
	str	r6, [r4, #188]
	str	r6, [r4, #184]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #92]
	str	r6, [r3]
	ldr	r0, [r5, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r5, #88]
	mov	r0, r7
	str	r6, [r3]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	add	r1, r4, #12
	ldr	r0, [r5, #92]
	bl	gsdio_free_requests(PLT)
	add	r1, r4, #20
	ldr	r0, [r5, #92]
	bl	gsdio_free_requests(PLT)
	ldr	r0, [r5, #88]
	add	r1, r4, #52
	bl	gsdio_free_requests(PLT)
	str	r6, [r4, #44]
	mov	r0, r7
	mov	r1, r8
	str	r6, [r4, #48]
	str	r6, [r4, #76]
	str	r6, [r4, #8]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
.L13062:
	ldr	r3, .L13064+4
	mov	r2, r1
	ldr	r0, .L13064+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3312:
	add	r3, pc, r3
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC3311:
	add	r0, pc, r0
	sub	r1, r3, #3600
	add	sp, sp, #24
	b	printk(PLT)
.L13063:
	ldr	r1, .L13064+12
	ldr	r0, .L13064+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3314:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC3313:
	add	r0, pc, r0
	sub	r1, r1, #3600
	add	sp, sp, #24
	b	printk(PLT)
.L13065:
	.align	2
.L13064:
	.word	.LANCHOR1-(.LPIC3310+8)
	.word	.LANCHOR9-(.LPIC3312+8)
	.word	.LC89-(.LPIC3311+8)
	.word	.LANCHOR9-(.LPIC3314+8)
	.word	.LC90-(.LPIC3313+8)
	.fnend
	.size	gsdio_disconnect, .-gsdio_disconnect
	.align	2
	.global	gsdio_setup
	.type	gsdio_setup, %function
gsdio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r3, r1, #1
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	cmp	r3, #1
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	.pad #16
	sub	sp, sp, #16
	bhi	.L13087
	ldr	ip, .L13090
	mov	r5, #0
	mov	lr, #8
	ldr	r0, .L13090+4
	mvn	r7, #127
	mov	r4, #37
	ldr	r6, .L13090+8
	mov	r1, #10
	str	r5, [sp]
	mov	r3, r5
	movt	r1, 2
	strb	r5, [sp, #11]
.LPIC3320:
	add	ip, pc, ip
	mov	r2, #1
	strb	r5, [sp, #12]
.LPIC3319:
	add	r0, pc, r0
	strb	r5, [sp, #14]
	str	ip, [sp, #4]
.LPIC3321:
	add	r6, pc, r6
	strb	r5, [sp, #15]
	strb	r7, [sp, #9]
	strb	r4, [sp, #10]
	strb	lr, [sp, #13]
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, r5
	str	r0, [r6, #2592]
	beq	.L13088
	ldr	r4, .L13090+12
	add	r0, r6, #288
	add	r9, sp, #9
	ldr	r10, .L13090+16
	ldr	r7, .L13090+20
.LPIC3327:
	add	r4, pc, r4
	add	r4, r4, #3888
.LPIC3326:
	add	r10, pc, r10
	add	r4, r4, #4
	mov	r1, r10
	mov	r2, r4
	bl	__mutex_init(PLT)
.LPIC3344:
	ldr	r7, [pc, r7]		@ tls_load_dot_plus_eight
	mov	r0, r5
	mov	r1, r9
	mov	r2, r7
	bl	gsdio_port_alloc(PLT)
	ldr	r3, [r6, #284]
	subs	r5, r0, #0
	add	r2, r3, #1
	str	r2, [r6, #284]
	bne	.L13072
	cmp	r8, #2
	bne	.L13073
	mov	r1, r10
	mov	r2, r4
	add	r0, r6, #392
	bl	__mutex_init(PLT)
	add	r2, r7, #12
	mov	r1, r9
	mov	r0, #1
	bl	gsdio_port_alloc(PLT)
	ldr	r3, [r6, #284]
	subs	r5, r0, #0
	add	r2, r3, #1
	str	r2, [r6, #284]
	bne	.L13072
.L13073:
	ldr	r0, .L13090+24
	mov	r1, #0
.LPIC3322:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	cmn	r0, #4096
	bhi	.L13089
	ldr	ip, .L13090+28
	mov	r2, r0
	mov	r1, #292
	ldr	r0, .L13090+32
	mov	r3, #0
.LPIC3342:
	add	ip, pc, ip
	add	ip, ip, #340
.LPIC3341:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	mov	r0, #0
.L13068:
	add	sp, sp, #16
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13089:
	mov	r0, #0
	b	.L13068
.L13072:
	ldr	r1, .L13090+36
	ldr	r6, .L13090+40
	ldr	r0, .L13090+44
.LPIC3338:
	add	r1, pc, r1
.LPIC3336:
	add	r6, pc, r6
	sub	r1, r1, #3568
.LPIC3337:
	add	r0, pc, r0
	sub	r1, r1, #12
	str	r3, [r6, #284]
	bl	printk(PLT)
	ldr	r3, [r6, #284]
	cmp	r3, #0
	movne	r4, #0
	beq	.L13075
.L13074:
	mov	r0, r4
	add	r4, r4, #1
	bl	gsdio_port_free(PLT)
	ldr	r3, [r6, #284]
	cmp	r4, r3
	bcc	.L13074
.L13075:
	ldr	r3, .L13090+48
.LPIC3340:
	add	r3, pc, r3
	ldr	r0, [r3, #2592]
	bl	destroy_workqueue(PLT)
	mov	r0, r5
	b	.L13068
.L13088:
	ldr	r1, .L13090+52
	ldr	r0, .L13090+56
.LPIC3324:
	add	r1, pc, r1
	sub	r1, r1, #3568
.LPIC3323:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #11
	b	.L13068
.L13087:
	ldr	r1, .L13090+60
	mov	r2, r8
	mov	r3, #2
	ldr	r0, .L13090+64
.LPIC3318:
	add	r1, pc, r1
	sub	r1, r1, #3568
.LPIC3317:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #21
	b	.L13068
.L13091:
	.align	2
.L13090:
	.word	.LC720-(.LPIC3320+8)
	.word	.LC195-(.LPIC3319+8)
	.word	.LANCHOR1-(.LPIC3321+8)
	.word	.LANCHOR4-(.LPIC3327+8)
	.word	.LC741-(.LPIC3326+8)
	.word	sport_info(GOT_PREL)+(.-(.LPIC3344+8))
	.word	.LC739-(.LPIC3322+8)
	.word	.LANCHOR5-(.LPIC3342+8)
	.word	.LC138-(.LPIC3341+8)
	.word	.LANCHOR9-(.LPIC3338+8)
	.word	.LANCHOR1-(.LPIC3336+8)
	.word	.LC742-(.LPIC3337+8)
	.word	.LANCHOR1-(.LPIC3340+8)
	.word	.LANCHOR9-(.LPIC3324+8)
	.word	.LC740-(.LPIC3323+8)
	.word	.LANCHOR9-(.LPIC3318+8)
	.word	.LC738-(.LPIC3317+8)
	.fnend
	.size	gsdio_setup, .-gsdio_setup
	.align	2
	.global	gsmd_connect
	.type	gsmd_connect, %function
gsmd_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13103
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3345:
	add	r3, pc, r3
	ldr	r2, [r3, #496]
	cmp	r1, r2
	bcs	.L13099
	cmp	r0, #0
	mov	r4, r0
	beq	.L13100
	mov	r0, #104
	mov	r6, #0
	mla	r1, r0, r1, r3
	ldr	r5, [r1, #520]
	add	r7, r5, #4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L13103+4
	mov	r1, r0
	str	r4, [r5, #68]
	mov	r0, r7
.LPIC3351:
	add	r3, pc, r3
	str	r3, [r4, #140]
	str	r6, [r5, #168]
	str	r6, [r5, #172]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r7, r0, #0
	bne	.L13101
	ldr	r3, [r4, #88]
	str	r5, [r3]
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r7, r0, #0
	bne	.L13102
	ldr	r3, .L13103+8
	ldr	r2, [r4, #92]
.LPIC3356:
	add	r3, pc, r3
	ldr	r4, [r3, #-1188]
	str	r5, [r2]
	bl	msecs_to_jiffies(PLT)
	mov	r3, r0
	add	r2, r5, #76
	mov	r0, #4
	mov	r1, r4
	bl	queue_delayed_work_on(PLT)
.L13094:
	mov	r0, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13099:
	ldr	r3, .L13103+12
	mov	r2, r1
	mvn	r7, #21
	ldr	r0, .L13103+16
.LPIC3347:
	add	r3, pc, r3
	sub	r1, r3, #3568
.LPIC3346:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13094
.L13102:
	ldr	r1, .L13103+20
	ldr	r0, .L13103+24
	ldr	r2, [r4, #92]
.LPIC3355:
	add	r1, pc, r1
.LPIC3354:
	add	r0, pc, r0
	sub	r1, r1, #3568
	bl	printk(PLT)
	str	r6, [r5, #68]
	ldr	r3, [r4, #88]
	str	r6, [r3]
	b	.L13094
.L13101:
	ldr	r1, .L13103+28
	ldr	r0, .L13103+32
	ldr	r2, [r4, #88]
.LPIC3353:
	add	r1, pc, r1
.LPIC3352:
	add	r0, pc, r0
	sub	r1, r1, #3568
	bl	printk(PLT)
	str	r6, [r5, #68]
	b	.L13094
.L13100:
	ldr	r1, .L13103+36
	mvn	r7, #21
	ldr	r0, .L13103+40
.LPIC3349:
	add	r1, pc, r1
	sub	r1, r1, #3568
.LPIC3348:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13094
.L13104:
	.align	2
.L13103:
	.word	.LANCHOR1-(.LPIC3345+8)
	.word	gsmd_notify_modem-(.LPIC3351+8)
	.word	.LANCHOR4-(.LPIC3356+8)
	.word	.LANCHOR9-(.LPIC3347+8)
	.word	.LC743-(.LPIC3346+8)
	.word	.LANCHOR9-(.LPIC3355+8)
	.word	.LC200-(.LPIC3354+8)
	.word	.LANCHOR9-(.LPIC3353+8)
	.word	.LC199-(.LPIC3352+8)
	.word	.LANCHOR9-(.LPIC3349+8)
	.word	.LC90-(.LPIC3348+8)
	.fnend
	.size	gsmd_connect, .-gsmd_connect
	.align	2
	.global	gsmd_disconnect
	.type	gsmd_disconnect, %function
gsmd_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L13128
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC3357:
	add	r5, pc, r5
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	ldr	r3, [r5, #496]
	cmp	r1, r3
	bcs	.L13124
	cmp	r0, #0
	beq	.L13125
	mov	r3, #104
	mov	r9, r0
	mov	r6, #0
	mla	r4, r3, r1, r5
	ldr	r5, [r4, #520]
	add	r7, r5, #4
	add	r10, r5, #12
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r6, [r5, #68]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r9, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r9, #92]
	str	r6, [r3]
	ldr	r0, [r9, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r9, #88]
	mov	r0, r7
	str	r6, [r3]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #12]
	mov	r8, r0
	ldr	r6, [r9, #92]
	cmp	r10, r4
	beq	.L13108
.L13109:
	mov	r0, r4
	sub	fp, r4, #36
	bl	list_del(PLT)
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, fp
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r4, [r5, #12]
	cmp	r10, r4
	bne	.L13109
	ldr	r6, [r9, #92]
.L13108:
	ldr	r4, [r5, #20]
	add	r10, r5, #20
	cmp	r10, r4
	beq	.L13114
.L13113:
	mov	r0, r4
	sub	fp, r4, #36
	bl	list_del(PLT)
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, fp
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r4, [r5, #20]
	cmp	r10, r4
	bne	.L13113
.L13114:
	ldr	r4, [r5, #44]
	add	r10, r5, #44
	ldr	r6, [r9, #88]
	cmp	r10, r4
	beq	.L13112
.L13117:
	mov	r0, r4
	sub	r9, r4, #36
	bl	list_del(PLT)
	ldr	r0, [r4, #-36]
	bl	kfree(PLT)
	ldr	r3, [r6, #8]
	mov	r1, r9
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r4, [r5, #44]
	cmp	r10, r4
	bne	.L13117
.L13112:
	mov	r4, #0
	mov	r0, r7
	mov	r1, r8
	str	r4, [r5, #8]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, [r5, #72]
	mov	r0, r4
	add	r1, r1, #8
	bl	_test_and_clear_bit(PLT)
	cmp	r0, r4
	bne	.L13126
	ldr	r3, [r5, #72]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L13105
.L13127:
	ldr	r3, .L13128+4
	add	r2, r5, #128
	mov	r0, #4
.LPIC3363:
	add	r3, pc, r3
	ldr	r1, [r3, #-1188]
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work_on(PLT)
.L13126:
	ldr	r3, [r5, #72]
	str	r4, [r5, #160]
	mov	r1, r4
	mvn	r2, #0
	ldr	r0, [r3]
	bl	smd_tiocmset(PLT)
	ldr	r3, [r5, #72]
	ldr	r3, [r3]
	cmp	r3, #0
	bne	.L13127
.L13105:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13125:
	ldr	r1, .L13128+8
	ldr	r0, .L13128+12
.LPIC3361:
	add	r1, pc, r1
.LPIC3360:
	add	r0, pc, r0
	sub	r1, r1, #3552
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk(PLT)
.L13124:
	ldr	r3, .L13128+16
	mov	r2, r1
	ldr	r0, .L13128+20
.LPIC3359:
	add	r3, pc, r3
.LPIC3358:
	add	r0, pc, r0
	sub	r1, r3, #3552
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk(PLT)
.L13129:
	.align	2
.L13128:
	.word	.LANCHOR1-(.LPIC3357+8)
	.word	.LANCHOR4-(.LPIC3363+8)
	.word	.LANCHOR9-(.LPIC3361+8)
	.word	.LC90-(.LPIC3360+8)
	.word	.LANCHOR9-(.LPIC3359+8)
	.word	.LC89-(.LPIC3358+8)
	.fnend
	.size	gsmd_disconnect, .-gsmd_disconnect
	.align	2
	.global	gsmd_setup
	.type	gsmd_setup, %function
gsmd_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	sub	r2, r1, #1
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r3, r1
	strd	r6, [sp, #8]
	cmp	r2, #1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #44
	sub	sp, sp, #44
	str	r1, [sp, #12]
	bhi	.L13159
	ldr	r4, .L13166
	mov	r9, #0
	mov	r1, #10
	ldr	r0, .L13166+4
	mov	r2, #1
	mov	r3, r9
	movt	r1, 2
	str	r9, [sp]
.LPIC3367:
	add	r4, pc, r4
.LPIC3366:
	add	r0, pc, r0
	str	r4, [sp, #4]
	bl	__alloc_workqueue_key(PLT)
	ldr	r2, .L13166+8
	cmp	r0, r9
.LPIC3368:
	add	r2, pc, r2
	str	r0, [r2, #-1188]
	beq	.L13160
	ldr	r3, .L13166+12
	add	r2, r2, #3888
	mov	r8, r9
	add	r2, r2, #4
	ldr	r10, .L13166+16
	str	r2, [sp, #24]
	ldr	r2, .L13166+20
.LPIC3395:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
.LPIC3372:
	add	r10, pc, r10
	add	r5, r10, #500
.LPIC3373:
	add	r2, pc, r2
	str	r3, [sp, #16]
	ldr	r3, .L13166+24
	str	r2, [sp, #20]
	ldr	r2, .L13166+28
.LPIC3379:
	add	r3, pc, r3
.LPIC3378:
	add	r2, pc, r2
	str	r3, [sp, #32]
	ldr	r3, .L13166+32
	str	r2, [sp, #28]
.LPIC3380:
	add	r3, pc, r3
	str	r3, [sp, #36]
	b	.L13138
.L13163:
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L13161
.L13136:
	ldr	r3, .L13166+36
	add	r2, r4, #32
	add	lr, r4, #56
	ldr	ip, [sp, #28]
	add	r0, r4, #12
	add	r1, r4, #20
	str	r2, [sp, #8]
	ldr	r2, [sp, #32]
	add	fp, r4, #44
	str	r8, [r4]
	add	r8, r8, #1
.LPIC3397:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r7, [r4, #28]
	str	ip, [r4, #40]
	add	ip, r4, #80
	str	r2, [r4, #64]
	ldr	r2, [sp, #36]
	str	r7, [r4, #52]
	add	r3, r9, r3
	str	r7, [r4, #76]
	add	r9, r9, #12
	str	r0, [r4, #12]
	str	r3, [r4, #72]
	ldr	r3, [sp, #8]
	str	r2, [r4, #88]
	mov	r2, r6
	str	r0, [r4, #16]
	add	r0, r4, #92
	str	r1, [r4, #20]
	str	r1, [r4, #24]
	mov	r1, r6
	str	r3, [r4, #32]
	str	r3, [r4, #36]
	mov	r3, r6
	str	lr, [r4, #56]
	str	lr, [r4, #60]
	str	ip, [r4, #80]
	str	ip, [r4, #84]
	str	r6, [r4, #4]
	str	fp, [r4, #44]
	str	fp, [r4, #48]
	bl	init_timer_key(PLT)
	add	ip, r4, #76
	ldr	r3, .L13166+40
	str	r7, [r4, #128]
	ldr	r2, .L13166+44
	add	r1, r4, #132
	add	r0, r5, #24
	str	ip, [r4, #112]
	ldr	r7, .L13166+48
	add	r5, r5, #104
	ldr	ip, .L13166+52
	str	r1, [r4, #132]
.LPIC3396:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r1, [r4, #136]
.LPIC3381:
	add	r2, pc, r2
.LPIC3382:
	add	r7, pc, r7
.LPIC3383:
	add	ip, pc, ip
	str	r2, [r4, #140]
	str	r3, [r4, #108]
	str	r4, [r5, #-84]
	str	r7, [r5, #-80]
	str	ip, [r5, #-76]
	ldr	r3, [r4, #72]
	ldr	r3, [r3, #4]
	str	r6, [r5, #-52]
	str	r3, [r5, #-60]
	bl	platform_driver_register(PLT)
	ldr	r3, [sp, #12]
	cmp	r8, r3
	beq	.L13162
.L13138:
	mov	r0, r5
	ldr	r1, [sp, #20]
	mov	r6, #0
	ldr	r2, [sp, #24]
	mov	r7, #65024
	bl	__mutex_init(PLT)
	ldr	r0, [sp, #16]
	movt	r7, 65535
	movw	r1, #32976
	ldr	r3, [r10, #496]
	mov	r2, #176
	ldr	ip, [r0, #8]
	add	r3, r3, #1
	str	r3, [r10, #496]
	cmp	ip, r6
	mov	r0, ip
	bne	.L13163
	mov	r4, #16
	b	.L13136
.L13162:
	ldr	r0, .L13166+56
	mov	r1, r6
.LPIC3369:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	cmn	r0, #4096
	bhi	.L13164
	ldr	ip, .L13166+60
	mov	r2, r0
	mov	r1, #292
	ldr	r0, .L13166+64
	mov	r3, r6
.LPIC3385:
	add	ip, pc, ip
	add	ip, ip, #448
.LPIC3384:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	mov	r0, r6
.L13150:
	add	sp, sp, #44
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13161:
	ldr	r3, [r10, #496]
	mov	r2, r8
	ldr	r1, .L13166+68
	ldr	r0, .L13166+72
	sub	r3, r3, #1
.LPIC3391:
	add	r1, pc, r1
.LPIC3390:
	add	r0, pc, r0
	sub	r1, r1, #3536
	str	r3, [r10, #496]
	bl	printk(PLT)
	ldr	r3, [r10, #496]
	cmp	r3, #0
	beq	.L13141
	ldr	r0, [r10, #520]
	cmp	r0, #0
	beq	.L13165
.L13142:
	cmp	r3, #1
	bls	.L13141
	ldr	r3, .L13166+76
.LPIC3386:
	add	r3, pc, r3
	ldr	r0, [r3, #624]
	cmp	r0, #0
	bne	.L13141
	bl	kfree(PLT)
.L13141:
	ldr	r3, .L13166+80
.LPIC3387:
	add	r3, pc, r3
	ldr	r0, [r3, #-1188]
	bl	destroy_workqueue(PLT)
	mvn	r0, #11
	b	.L13150
.L13164:
	mov	r0, r6
	b	.L13150
.L13165:
	bl	kfree(PLT)
	ldr	r3, [r10, #496]
	b	.L13142
.L13160:
	ldr	r1, .L13166+84
	ldr	r0, .L13166+88
.LPIC3371:
	add	r1, pc, r1
.LPIC3370:
	add	r0, pc, r0
	sub	r1, r1, #3536
	bl	printk(PLT)
	mvn	r0, #11
	b	.L13150
.L13159:
	ldr	r1, .L13166+92
	mov	r2, r3
	mov	r3, r0
	ldr	r0, .L13166+96
.LPIC3365:
	add	r1, pc, r1
.LPIC3364:
	add	r0, pc, r0
	sub	r1, r1, #3536
	bl	printk(PLT)
	mvn	r0, #21
	b	.L13150
.L13167:
	.align	2
.L13166:
	.word	.LC745-(.LPIC3367+8)
	.word	.LC195-(.LPIC3366+8)
	.word	.LANCHOR4-(.LPIC3368+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3395+8))
	.word	.LANCHOR1-(.LPIC3372+8)
	.word	.LC748-(.LPIC3373+8)
	.word	gsmd_tx_pull-(.LPIC3379+8)
	.word	gsmd_rx_push-(.LPIC3378+8)
	.word	gsmd_connect_work-(.LPIC3380+8)
	.word	smd_pi(GOT_PREL)+(.-(.LPIC3397+8))
	.word	delayed_work_timer_fn(GOT_PREL)+(.-(.LPIC3396+8))
	.word	gsmd_disconnect_work-(.LPIC3381+8)
	.word	gsmd_ch_probe-(.LPIC3382+8)
	.word	gsmd_ch_remove-(.LPIC3383+8)
	.word	.LC746-(.LPIC3369+8)
	.word	.LANCHOR5-(.LPIC3385+8)
	.word	.LC138-(.LPIC3384+8)
	.word	.LANCHOR9-(.LPIC3391+8)
	.word	.LC749-(.LPIC3390+8)
	.word	.LANCHOR1-(.LPIC3386+8)
	.word	.LANCHOR4-(.LPIC3387+8)
	.word	.LANCHOR9-(.LPIC3371+8)
	.word	.LC747-(.LPIC3370+8)
	.word	.LANCHOR9-(.LPIC3365+8)
	.word	.LC744-(.LPIC3364+8)
	.fnend
	.size	gsmd_setup, .-gsmd_setup
	.align	2
	.global	gsmd_cleanup
	.type	gsmd_cleanup, %function
gsmd_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bx	lr
	.fnend
	.size	gsmd_cleanup, .-gsmd_cleanup
	.align	2
	.global	gbam_data_recv_cb
	.type	gbam_data_recv_cb, %function
gbam_data_recv_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	bxeq	lr
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	add	r7, r0, #8
	mov	r6, r1
	mov	r0, r7
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #12]
	mov	r8, r0
	cmp	r3, #0
	beq	.L13173
	ldr	r3, .L13179
	ldr	r2, [r4, #44]
.LPIC3398:
	add	r3, pc, r3
	ldr	r3, [r3, #2540]
	cmp	r2, r3
	bls	.L13172
	ldr	r3, .L13179+4
	ldr	r2, [r4, #244]
.LPIC3399:
	add	r3, pc, r3
	sub	r5, r3, #3520
	add	r2, r2, #1
	sub	r5, r5, #4
	mov	r0, r5
	str	r2, [r4, #244]
	bl	__printk_ratelimit(PLT)
	cmp	r0, #0
	bne	.L13178
.L13173:
	mov	r0, r7
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r4, [sp]
	mov	r0, r6
	ldr	r8, [sp, #16]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	dev_kfree_skb_any(PLT)
.L13172:
	ldr	r3, [r4, #40]
	add	r2, r4, #36
	mov	r0, r7
	mov	r1, r8
	strd	r2, [r6]
	str	r6, [r3]
	ldr	r3, [r4, #44]
	str	r6, [r4, #40]
	add	r3, r3, #1
	str	r3, [r4, #44]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	mov	r0, r4
	ldr	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	gbam_write_data_tohost(PLT)
.L13178:
	ldr	r0, .L13179+8
	mov	r1, r5
	ldr	r2, [r4, #244]
.LPIC3400:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13173
.L13180:
	.align	2
.L13179:
	.word	.LANCHOR2-(.LPIC3398+8)
	.word	.LANCHOR9-(.LPIC3399+8)
	.word	.LC750-(.LPIC3400+8)
	.fnend
	.size	gbam_data_recv_cb, .-gbam_data_recv_cb
	.align	2
	.global	gbam_data_write_done
	.type	gbam_data_write_done, %function
gbam_data_write_done:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r0, r1
	add	r5, r4, #4
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #240]
	mov	r1, r0
	mov	r0, r5
	sub	r3, r3, #1
	str	r3, [r4, #240]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L13184
	add	r2, r4, #80
	mov	r0, #4
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
.LPIC3402:
	add	r3, pc, r3
	ldr	r1, [r3, #-1440]
	b	queue_work_on(PLT)
.L13185:
	.align	2
.L13184:
	.word	.LANCHOR4-(.LPIC3402+8)
	.fnend
	.size	gbam_data_write_done, .-gbam_data_write_done
	.align	2
	.type	gbam_notify, %function
gbam_notify:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #0
	beq	.L13188
	cmp	r1, #1
	bne	.L13192
	mov	r1, r2
	b	gbam_data_write_done(PLT)
.L13192:
	bx	lr
.L13188:
	mov	r1, r2
	b	gbam_data_recv_cb(PLT)
	.fnend
	.size	gbam_notify, .-gbam_notify
	.align	2
	.global	gbam_disconnect
	.type	gbam_disconnect, %function
gbam_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r2, #5
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r10, [sp, #24]
	mov	r10, r2
	mov	fp, r1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	beq	.L13219
	sub	r3, r2, #6
	cmp	r3, #1
	bls	.L13220
.L13196:
	cmp	r4, #0
	beq	.L13202
	ldr	r3, .L13224
.LPIC3417:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r5, [r3, fp, asl #2]
	str	r4, [r5, #16]
.L13197:
	ldr	r9, .L13224+4
	add	r7, r5, #4
	mov	r6, #0
	mov	r0, r7
	add	r8, r5, #8
	bl	_raw_spin_lock_irqsave(PLT)
	str	r0, [sp, #4]
	mov	r0, r8
.LPIC3413:
	add	r9, pc, r9
	bl	_raw_spin_lock(PLT)
	mov	r0, r8
	str	r6, [r5, #12]
	str	r6, [r9, #-1444]
	bl	_raw_spin_unlock(PLT)
	ldr	r1, [sp, #4]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r0, [r4, #84]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #84]
	bic	r2, r10, #2
	cmp	r2, #5
	str	r6, [r3]
	ldr	r3, [r4, #88]
	str	r6, [r3]
	beq	.L13221
	cmp	fp, #0
	cmpeq	r10, #6
	beq	.L13222
.L13193:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13220:
	ldr	r3, .L13224+8
.LPIC3406:
	add	r3, pc, r3
	ldr	r3, [r3, #3892]
	cmp	r1, r3
	blt	.L13196
	ldr	r1, .L13224+12
	mov	r2, fp
	ldr	r0, .L13224+16
.LPIC3408:
	add	r1, pc, r1
.LPIC3407:
	add	r0, pc, r0
.L13217:
	sub	r1, r1, #3504
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk(PLT)
.L13219:
	ldr	r2, .L13224+20
.LPIC3403:
	add	r2, pc, r2
	ldr	r3, [r2, #2400]
	cmp	r1, r3
	bge	.L13223
	cmp	r0, #0
	beq	.L13202
	mov	r3, #84
	mla	r3, r3, fp, r2
	ldr	r5, [r3, #2404]
	str	r4, [r5, #16]
	mov	r0, r5
	bl	gbam_free_buffers(PLT)
	b	.L13197
.L13221:
	ldr	r1, [r9, #-1440]
	add	r2, r5, #300
	mov	r0, #4
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	queue_work_on(PLT)
.L13222:
	mov	r0, r6
	bl	usb_bam_client_ready(PLT)
	cmp	r0, #0
	beq	.L13193
	ldr	r1, .L13224+24
	ldr	r0, .L13224+28
.LPIC3416:
	add	r1, pc, r1
.LPIC3415:
	add	r0, pc, r0
	b	.L13218
.L13202:
	ldr	r1, .L13224+32
	ldr	r0, .L13224+36
.LPIC3410:
	add	r1, pc, r1
.LPIC3409:
	add	r0, pc, r0
.L13218:
	sub	r1, r1, #3504
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk(PLT)
.L13223:
	ldr	r1, .L13224+40
	mov	r2, fp
	ldr	r0, .L13224+44
.LPIC3405:
	add	r1, pc, r1
.LPIC3404:
	add	r0, pc, r0
	b	.L13217
.L13225:
	.align	2
.L13224:
	.word	bam2bam_ports(GOT_PREL)+(.-(.LPIC3417+8))
	.word	.LANCHOR4-(.LPIC3413+8)
	.word	.LANCHOR4-(.LPIC3406+8)
	.word	.LANCHOR9-(.LPIC3408+8)
	.word	.LC752-(.LPIC3407+8)
	.word	.LANCHOR1-(.LPIC3403+8)
	.word	.LANCHOR9-(.LPIC3416+8)
	.word	.LC754-(.LPIC3415+8)
	.word	.LANCHOR9-(.LPIC3410+8)
	.word	.LC753-(.LPIC3409+8)
	.word	.LANCHOR9-(.LPIC3405+8)
	.word	.LC751-(.LPIC3404+8)
	.fnend
	.size	gbam_disconnect, .-gbam_disconnect
	.align	2
	.global	gbam_connect
	.type	gbam_connect, %function
gbam_connect:
	.fnstart
	@ args = 4, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r2, #5
	mov	r5, r2
	strd	r10, [sp, #24]
	mov	r10, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
	ldrb	fp, [sp, #48]	@ zero_extendqisi2
	str	r3, [sp, #4]
	beq	.L13250
	sub	r3, r2, #6
	cmp	r3, #1
	bls	.L13251
.L13230:
	cmp	r10, #0
	beq	.L13237
	ldr	r3, .L13257
.LPIC3433:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r4, [r3, r1, asl #2]
.L13231:
	ldr	r0, [r10, #84]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L13252
	ldr	r3, [r10, #84]
	str	r4, [r3]
	ldr	r0, [r10, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L13253
	ldr	r3, [r10, #88]
	add	r7, r4, #4
	add	r8, r4, #8
	mov	r0, r7
	str	r4, [r3]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r9, r0
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	cmp	r5, #5
	str	r10, [r4, #12]
	beq	.L13254
	mov	r0, r8
	bl	_raw_spin_unlock(PLT)
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #6
	beq	.L13255
	cmp	r5, #7
	bne	.L13235
	ldrb	r1, [sp, #4]	@ zero_extendqisi2
	add	r2, r4, #120
	add	r3, r4, #124
	str	r10, [r4, #16]
	strb	fp, [r4, #137]
	strd	r2, [r4, #140]
	strb	r1, [r4, #136]
.L13235:
	ldr	r3, .L13257+4
	str	r5, [r4, #132]
	add	r2, r4, #284
	mov	r0, #4
.LPIC3432:
	add	r3, pc, r3
	ldr	r1, [r3, #-1440]
	bl	queue_work_on(PLT)
.L13246:
	mov	r0, r6
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13255:
	ldrb	r3, [sp, #4]	@ zero_extendqisi2
	str	r10, [r4, #16]
	strb	fp, [r4, #129]
	strb	r3, [r4, #128]
	b	.L13235
.L13251:
	ldr	r3, .L13257+8
.LPIC3421:
	add	r3, pc, r3
	ldr	r3, [r3, #3892]
	cmp	r1, r3
	blt	.L13230
	ldr	r3, .L13257+12
	mov	r2, r1
	mvn	r6, #18
	ldr	r0, .L13257+16
.LPIC3423:
	add	r3, pc, r3
	sub	r1, r3, #3488
.LPIC3422:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13246
.L13250:
	ldr	r0, .L13257+20
.LPIC3418:
	add	r0, pc, r0
	ldr	r3, [r0, #2400]
	cmp	r1, r3
	bge	.L13256
	cmp	r10, #0
	beq	.L13237
	mov	r3, #84
	mla	r1, r3, r1, r0
	ldr	r4, [r1, #2404]
	b	.L13231
.L13254:
	mov	r0, r8
	str	r6, [r4, #264]
	str	r6, [r4, #260]
	str	r6, [r4, #240]
	str	r6, [r4, #244]
	str	r6, [r4, #248]
	str	r6, [r4, #268]
	str	r6, [r4, #272]
	str	r6, [r4, #276]
	str	r6, [r4, #280]
	bl	_raw_spin_unlock(PLT)
	mov	r0, r7
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L13235
.L13253:
	ldr	r1, .L13257+24
	ldr	r0, .L13257+28
	ldr	r2, [r10, #88]
.LPIC3431:
	add	r1, pc, r1
.LPIC3430:
	add	r0, pc, r0
	sub	r1, r1, #3488
	bl	printk(PLT)
	ldr	r3, [r10, #84]
	mov	r2, #0
	str	r2, [r3]
	b	.L13246
.L13252:
	ldr	r1, .L13257+32
	ldr	r0, .L13257+36
	ldr	r2, [r10, #84]
.LPIC3429:
	add	r1, pc, r1
	sub	r1, r1, #3488
.LPIC3428:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13246
.L13237:
	ldr	r1, .L13257+40
	mvn	r6, #18
	ldr	r0, .L13257+44
.LPIC3425:
	add	r1, pc, r1
	sub	r1, r1, #3488
.LPIC3424:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13246
.L13256:
	ldr	r3, .L13257+48
	mov	r2, r1
	mvn	r6, #18
	ldr	r0, .L13257+52
.LPIC3420:
	add	r3, pc, r3
	sub	r1, r3, #3488
.LPIC3419:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13246
.L13258:
	.align	2
.L13257:
	.word	bam2bam_ports(GOT_PREL)+(.-(.LPIC3433+8))
	.word	.LANCHOR4-(.LPIC3432+8)
	.word	.LANCHOR4-(.LPIC3421+8)
	.word	.LANCHOR9-(.LPIC3423+8)
	.word	.LC89-(.LPIC3422+8)
	.word	.LANCHOR1-(.LPIC3418+8)
	.word	.LANCHOR9-(.LPIC3431+8)
	.word	.LC200-(.LPIC3430+8)
	.word	.LANCHOR9-(.LPIC3429+8)
	.word	.LC199-(.LPIC3428+8)
	.word	.LANCHOR9-(.LPIC3425+8)
	.word	.LC753-(.LPIC3424+8)
	.word	.LANCHOR9-(.LPIC3420+8)
	.word	.LC89-(.LPIC3419+8)
	.fnend
	.size	gbam_connect, .-gbam_connect
	.align	2
	.global	gbam_setup
	.type	gbam_setup, %function
gbam_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L13307
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r3, r1
	strd	r6, [sp, #8]
	mov	r4, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
.LPIC3442:
	add	r2, pc, r2
	str	r1, [sp, #12]
	orrs	r1, r0, r3
	str	r2, [sp, #8]
	beq	.L13260
	cmp	r3, #3
	cmpls	r0, #1
	movhi	r3, #1
	movls	r3, #0
	bhi	.L13260
	ldr	r0, .L13307+4
	str	r3, [sp]
	mov	r1, #10
	mov	r2, #1
.LPIC3436:
	add	r0, pc, r0
	bl	__alloc_workqueue_key(PLT)
	ldr	r3, .L13307+8
	cmp	r0, #0
.LPIC3437:
	add	r3, pc, r3
	str	r0, [r3, #-1440]
	beq	.L13263
	cmp	r4, #0
	beq	.L13269
	ldr	r4, .L13307+12
	ldr	r3, .L13307+16
.LPIC3440:
	add	r4, pc, r4
	ldr	r2, [r4, #2400]
	add	r2, r2, #1
	str	r2, [r4, #2400]
	ldr	r2, [sp, #8]
	ldr	r6, [r2, r3]
	ldr	r0, [r6, #36]
	cmp	r0, #0
	beq	.L13282
	movw	r1, #32976
	mov	r2, #348
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	beq	.L13304
.L13267:
	ldr	r2, .L13307+20
	mov	ip, #65024
	add	r8, r0, #52
	movt	ip, 65535
	ldr	r7, .L13307+24
	add	fp, r0, #288
	ldr	r6, .L13307+28
	str	r8, [r0, #52]
	mov	r3, #0
	ldr	r5, .L13307+32
	str	ip, [r0, #284]
	add	r10, r0, #304
	ldr	r4, .L13307+36
	str	ip, [r0, #300]
.LPIC3447:
	add	r2, pc, r2
	str	ip, [r0, #80]
	ldr	lr, .L13307+40
.LPIC3443:
	add	r7, pc, r7
	str	ip, [r0, #96]
	ldr	ip, .L13307+44
.LPIC3444:
	add	r6, pc, r6
	str	r8, [r0, #56]
	ldr	r8, .L13307+48
.LPIC3445:
	add	r5, pc, r5
	add	r2, r2, #2400
.LPIC3446:
	add	r4, pc, r4
	str	r7, [r0, #296]
	add	r2, r2, #4
	add	r9, r0, #28
	str	r6, [r0, #312]
	mov	r1, r2
	add	r6, r0, #84
	str	r5, [r0, #92]
	str	r4, [r0, #108]
	add	r5, r0, #100
	add	r7, r0, #36
	add	r4, r0, #60
	str	fp, [r0, #288]
.LPIC3449:
	add	lr, pc, lr
	str	fp, [r0, #292]
.LPIC3450:
	add	ip, pc, ip
	mov	fp, #8
.LPIC3448:
	add	r8, pc, r8
	str	r0, [r0, #76]
	str	r3, [r0]
	str	r3, [r0, #4]
	str	r3, [r0, #8]
	str	r3, [r0, #48]
	str	r3, [r0, #44]
	str	r3, [r0, #72]
	str	r3, [r0, #68]
	str	r10, [r0, #304]
	str	r10, [r0, #308]
	str	r9, [r0, #28]
	str	r9, [r0, #32]
	str	r6, [r0, #84]
	str	r6, [r0, #88]
	str	r5, [r0, #100]
	str	r5, [r0, #104]
	str	r7, [r0, #36]
	str	r7, [r0, #40]
	str	r4, [r0, #60]
	str	r4, [r0, #64]
	str	fp, [r0, #24]
	str	r0, [r1], #4
	mov	r0, r1
	str	r8, [r2, #4]
	str	r3, [r1, #28]
	str	lr, [r1, #4]
	str	ip, [r1, #20]
	bl	platform_driver_register(PLT)
.L13269:
	ldr	r3, [sp, #12]
	cmp	r3, #0
	beq	.L13266
	ldr	r3, .L13307+16
	mov	r5, #65024
	mov	r4, #0
	ldr	r2, [sp, #8]
	movt	r5, 65535
	ldr	r10, .L13307+52
	ldr	r9, .L13307+56
	ldr	r8, .L13307+60
	ldr	r6, [r2, r3]
	ldr	r3, .L13307+64
.LPIC3452:
	add	r10, pc, r10
	ldr	r7, .L13307+68
.LPIC3454:
	add	r9, pc, r9
.LPIC3455:
	add	r8, pc, r8
	str	r6, [sp, #20]
.LPIC3457:
	add	r3, pc, r3
.LPIC3456:
	add	r7, pc, r7
	str	r3, [sp, #16]
	b	.L13274
.L13306:
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	beq	.L13305
.L13272:
	add	r2, r0, #336
	ldr	r3, .L13307+72
	mov	fp, #0
	ldr	r6, [sp, #16]
	add	lr, r0, #288
	add	ip, r0, #304
	str	r2, [r0, #336]
	add	r1, r0, #320
	str	r2, [r0, #340]
	ldr	r2, [sp, #8]
	str	r4, [r0]
	str	fp, [r0, #4]
	str	fp, [r0, #8]
	str	r5, [r0, #284]
	str	r9, [r0, #296]
	str	r5, [r0, #300]
	str	r8, [r0, #312]
	str	r5, [r0, #316]
	str	r7, [r0, #328]
	str	r5, [r0, #332]
	str	r6, [r0, #344]
	str	r0, [r0, #76]
	str	lr, [r0, #288]
	str	lr, [r0, #292]
	str	ip, [r0, #304]
	str	ip, [r0, #308]
	str	r1, [r0, #320]
	str	r1, [r0, #324]
	ldr	r3, [r2, r3]
	str	r0, [r3, r4, asl #2]
	ldr	r3, [sp, #12]
	add	r4, r4, #1
	cmp	r4, r3
	beq	.L13266
.L13274:
	ldr	r0, [sp, #20]
	movw	r1, #32976
	mov	r2, #348
	ldr	r3, [r10, #3892]
	ldr	ip, [r0, #36]
	add	r3, r3, #1
	str	r3, [r10, #3892]
	subs	r0, ip, #0
	bne	.L13306
	mov	r0, #16
	b	.L13272
.L13282:
	mov	r0, #16
	b	.L13267
.L13266:
	ldr	r0, .L13307+76
	mov	r1, #0
.LPIC3451:
	add	r0, pc, r0
	bl	debugfs_create_dir(PLT)
	ldr	r2, [sp, #8]
	cmp	r0, #0
	ldr	r3, .L13307+80
	ldr	r4, [r2, r3]
	str	r0, [r4]
	beq	.L13270
	cmn	r0, #4096
	bhi	.L13270
	ldr	lr, [sp, #8]
	mov	r2, r0
	mov	r1, #292
	ldr	ip, .L13307+84
	mov	r3, #0
	ldr	r0, .L13307+88
	ldr	ip, [lr, ip]
.LPIC3458:
	add	r0, pc, r0
	str	ip, [sp]
	bl	debugfs_create_file(PLT)
	cmp	r0, #0
	beq	.L13275
	cmn	r0, #4096
	bhi	.L13275
.L13270:
	mov	r0, #0
.L13299:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13304:
	ldr	r3, [r4, #2400]
	mov	r2, r0
	ldr	r1, .L13307+92
	ldr	r0, .L13307+96
	sub	r3, r3, #1
.LPIC3468:
	add	r1, pc, r1
.LPIC3467:
	add	r0, pc, r0
	sub	r1, r1, #3472
	str	r3, [r4, #2400]
	bl	printk(PLT)
.L13276:
	ldr	r4, .L13307+100
.LPIC3459:
	add	r4, pc, r4
	ldr	r3, [r4, #2400]
	cmp	r3, #0
	ble	.L13281
	ldr	r0, [r4, #2404]
	cmp	r0, #0
	beq	.L13281
	bl	kfree(PLT)
	add	r0, r4, #2400
	add	r0, r0, #8
	bl	platform_driver_unregister(PLT)
.L13281:
	ldr	r5, .L13307+104
.LPIC3460:
	add	r5, pc, r5
	ldr	r3, [r5, #3892]
	cmp	r3, #0
	ble	.L13279
	ldr	r3, .L13307+72
	mov	r4, #0
	ldr	r2, [sp, #8]
	ldr	r6, [r2, r3]
.L13278:
	ldr	r0, [r6, r4, asl #2]
	add	r4, r4, #1
	bl	kfree(PLT)
	ldr	r3, [r5, #3892]
	cmp	r3, r4
	bgt	.L13278
.L13279:
	ldr	r3, .L13307+108
.LPIC3463:
	add	r3, pc, r3
	ldr	r0, [r3, #-1440]
	bl	destroy_workqueue(PLT)
	mvn	r0, #11
	b	.L13299
.L13305:
	ldr	r3, [r10, #3892]
	mov	r2, r4
	ldr	r1, .L13307+112
	ldr	r0, .L13307+116
	sub	r3, r3, #1
.LPIC3472:
	add	r1, pc, r1
	sub	r1, r1, #3472
.LPIC3471:
	add	r0, pc, r0
	str	r3, [r10, #3892]
	bl	printk(PLT)
	b	.L13276
.L13275:
	ldr	r0, [r4]
	bl	debugfs_remove(PLT)
	mov	r3, #0
	mov	r0, r3
	str	r3, [r4]
	b	.L13299
.L13263:
	ldr	r1, .L13307+120
	ldr	r0, .L13307+124
.LPIC3439:
	add	r1, pc, r1
.LPIC3438:
	add	r0, pc, r0
	sub	r1, r1, #3472
	bl	printk(PLT)
	mvn	r0, #11
	b	.L13299
.L13260:
	ldr	r1, .L13307+128
	mov	r2, r4
	ldr	r0, .L13307+132
	ldr	r3, [sp, #12]
.LPIC3435:
	add	r1, pc, r1
.LPIC3434:
	add	r0, pc, r0
	sub	r1, r1, #3472
	bl	printk(PLT)
	mvn	r0, #21
	b	.L13299
.L13308:
	.align	2
.L13307:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC3442+8)
	.word	.LC756-(.LPIC3436+8)
	.word	.LANCHOR4-(.LPIC3437+8)
	.word	.LANCHOR1-(.LPIC3440+8)
	.word	kmalloc_caches(GOT)
	.word	.LANCHOR1-(.LPIC3447+8)
	.word	gbam_connect_work-(.LPIC3443+8)
	.word	gbam_disconnect_work-(.LPIC3444+8)
	.word	gbam_data_write_tobam-(.LPIC3445+8)
	.word	gbam_write_data_tohost_w-(.LPIC3446+8)
	.word	gbam_data_ch_remove-(.LPIC3449+8)
	.word	.LC198-(.LPIC3450+8)
	.word	gbam_data_ch_probe-(.LPIC3448+8)
	.word	.LANCHOR4-(.LPIC3452+8)
	.word	gbam2bam_connect_work-(.LPIC3454+8)
	.word	gbam2bam_disconnect_work-(.LPIC3455+8)
	.word	gbam2bam_resume_work-(.LPIC3457+8)
	.word	gbam2bam_suspend_work-(.LPIC3456+8)
	.word	bam2bam_ports(GOT)
	.word	.LC758-(.LPIC3451+8)
	.word	gbam_dent(GOT)
	.word	gbam_stats_ops(GOT)
	.word	.LC138-(.LPIC3458+8)
	.word	.LANCHOR9-(.LPIC3468+8)
	.word	.LC749-(.LPIC3467+8)
	.word	.LANCHOR1-(.LPIC3459+8)
	.word	.LANCHOR4-(.LPIC3460+8)
	.word	.LANCHOR4-(.LPIC3463+8)
	.word	.LANCHOR9-(.LPIC3472+8)
	.word	.LC749-(.LPIC3471+8)
	.word	.LANCHOR9-(.LPIC3439+8)
	.word	.LC757-(.LPIC3438+8)
	.word	.LANCHOR9-(.LPIC3435+8)
	.word	.LC755-(.LPIC3434+8)
	.fnend
	.size	gbam_setup, .-gbam_setup
	.align	2
	.global	gbam_cleanup
	.type	gbam_cleanup, %function
gbam_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L13310
.LPIC3474:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3]
	b	debugfs_remove_recursive(PLT)
.L13311:
	.align	2
.L13310:
	.word	gbam_dent(GOT_PREL)+(.-(.LPIC3474+8))
	.fnend
	.size	gbam_cleanup, .-gbam_cleanup
	.align	2
	.type	rmnet_function_cleanup, %function
rmnet_function_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	ldr	r6, .L13319
	str	lr, [sp, #12]
.LPIC3475:
	add	r6, pc, r6
	ldr	r3, [r6, #3896]
	cmp	r3, #0
	beq	.L13315
	ldr	r4, .L13319+4
	mov	r5, #0
.LPIC3485:
	add	r4, pc, r4
	add	r4, r4, #2496
	add	r4, r4, #12
.L13314:
	ldr	r0, [r4, #20]
	add	r5, r5, #1
	add	r4, r4, #24
	bl	kfree(PLT)
	ldr	r3, [r6, #3896]
	cmp	r5, r3
	bcc	.L13314
.L13315:
	bl	gbam_cleanup(PLT)
	ldr	r3, .L13319+8
	mov	r2, #0
.LPIC3476:
	add	r3, pc, r3
	str	r2, [r3, #3896]
	str	r2, [r3, #3900]
	str	r2, [r3, #3904]
	str	r2, [r3, #3908]
	str	r2, [r3, #3912]
	str	r2, [r3, #3916]
	str	r2, [r3, #3920]
	str	r2, [r3, #3924]
	str	r2, [r3, #3928]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13320:
	.align	2
.L13319:
	.word	.LANCHOR4-(.LPIC3475+8)
	.word	.LANCHOR1-(.LPIC3485+8)
	.word	.LANCHOR4-(.LPIC3476+8)
	.fnend
	.size	rmnet_function_cleanup, .-rmnet_function_cleanup
	.align	2
	.global	gbam_suspend
	.type	gbam_suspend, %function
gbam_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	sub	r2, r2, #6
	mov	r3, r1
	cmp	r2, #1
	bls	.L13323
	bx	lr
.L13323:
	ldr	r2, .L13324
	mov	r0, #4
	ldr	r1, .L13324+4
.LPIC3489:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
.LPIC3487:
	add	r1, pc, r1
	ldr	r1, [r1, #-1440]
	ldr	r2, [r2, r3, asl #2]
	add	r2, r2, #316
	b	queue_work_on(PLT)
.L13325:
	.align	2
.L13324:
	.word	bam2bam_ports(GOT_PREL)+(.-(.LPIC3489+8))
	.word	.LANCHOR4-(.LPIC3487+8)
	.fnend
	.size	gbam_suspend, .-gbam_suspend
	.align	2
	.type	frmnet_suspend, %function
frmnet_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr	r3, .L13357
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r0, [r0, #136]
.LPIC3501:
	add	r3, pc, r3
	ldrb	r1, [r6, #116]	@ zero_extendqisi2
	ldr	ip, [r0, #8]
	mov	r2, r1, asl #5
	sub	r2, r2, r1, asl #3
	ldr	r1, [ip, #36]
	add	r3, r3, r2
	ldr	r8, [r3, #2508]
	cmp	r1, #0
	beq	.L13327
	blx	r1
.L13327:
	add	r9, r6, #132
	add	r7, r6, #144
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r6, #144]
	mov	r10, r0
	cmp	r4, r7
	beq	.L13332
.L13331:
	mov	r0, r4
	sub	r5, r4, #8
	bl	list_del(PLT)
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	ldr	r4, [r6, #144]
	cmp	r7, r4
	bne	.L13331
.L13332:
	mov	r3, #0
	mov	r0, r9
	mov	r1, r10
	str	r3, [r6, #152]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrb	r1, [r6, #116]	@ zero_extendqisi2
	sub	r0, r8, #5
	ldr	r3, .L13357+4
	cmp	r0, #5
	mov	r2, r1, asl #5
.LPIC3502:
	add	r3, pc, r3
	sub	r2, r2, r1, asl #3
	add	r3, r3, r2
	ldr	r1, [r3, #2516]
	bhi	.L13329
	mov	r3, #1
	mov	r3, r3, asl r0
	tst	r3, #57
	bne	.L13326
	tst	r3, #6
	bne	.L13356
.L13329:
	sub	r8, r8, #1
	cmp	r8, #9
	addls	pc, pc, r8, asl #2
	b	.L13334
.L13336:
	b	.L13346
	b	.L13337
	b	.L13338
	b	.L13339
	b	.L13340
	b	.L13341
	b	.L13342
	b	.L13343
	b	.L13344
	b	.L13345
	.p2align 1
.L13326:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13356:
	mov	r0, r6
	mov	r2, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	uxtb	r1, r1
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gbam_suspend(PLT)
.L13346:
	ldr	r2, .L13357+8
.LPIC3490:
	add	r2, pc, r2
.L13335:
	ldr	r1, .L13357+12
	ldr	r0, .L13357+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3504:
	add	r1, pc, r1
	ldrd	r8, [sp, #16]
	sub	r1, r1, #3456
	ldr	r10, [sp, #24]
.LPIC3503:
	add	r0, pc, r0
	ldr	lr, [sp, #28]
	sub	r1, r1, #4
	add	sp, sp, #32
	b	printk(PLT)
.L13338:
	ldr	r2, .L13357+20
.LPIC3492:
	add	r2, pc, r2
	b	.L13335
.L13339:
	ldr	r2, .L13357+24
.LPIC3493:
	add	r2, pc, r2
	b	.L13335
.L13337:
	ldr	r2, .L13357+28
.LPIC3491:
	add	r2, pc, r2
	b	.L13335
.L13344:
	ldr	r2, .L13357+32
.LPIC3498:
	add	r2, pc, r2
	b	.L13335
.L13345:
	ldr	r2, .L13357+36
.LPIC3499:
	add	r2, pc, r2
	b	.L13335
.L13340:
	ldr	r2, .L13357+40
.LPIC3494:
	add	r2, pc, r2
	b	.L13335
.L13341:
	ldr	r2, .L13357+44
.LPIC3495:
	add	r2, pc, r2
	b	.L13335
.L13342:
	ldr	r2, .L13357+48
.LPIC3496:
	add	r2, pc, r2
	b	.L13335
.L13343:
	ldr	r2, .L13357+52
.LPIC3497:
	add	r2, pc, r2
	b	.L13335
.L13334:
	ldr	r2, .L13357+56
.LPIC3500:
	add	r2, pc, r2
	b	.L13335
.L13358:
	.align	2
.L13357:
	.word	.LANCHOR1-(.LPIC3501+8)
	.word	.LANCHOR1-(.LPIC3502+8)
	.word	.LC0-(.LPIC3490+8)
	.word	.LANCHOR9-(.LPIC3504+8)
	.word	.LC759-(.LPIC3503+8)
	.word	.LC2-(.LPIC3492+8)
	.word	.LC3-(.LPIC3493+8)
	.word	.LC1-(.LPIC3491+8)
	.word	.LC8-(.LPIC3498+8)
	.word	.LC9-(.LPIC3499+8)
	.word	.LC4-(.LPIC3494+8)
	.word	.LC5-(.LPIC3495+8)
	.word	.LC6-(.LPIC3496+8)
	.word	.LC7-(.LPIC3497+8)
	.word	.LC10-(.LPIC3500+8)
	.fnend
	.size	frmnet_suspend, .-frmnet_suspend
	.align	2
	.global	gbam_resume
	.type	gbam_resume, %function
gbam_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	sub	r2, r2, #6
	mov	r3, r1
	cmp	r2, #1
	bls	.L13361
	bx	lr
.L13361:
	ldr	r2, .L13362
	mov	r0, #4
	ldr	r1, .L13362+4
.LPIC3507:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
.LPIC3505:
	add	r1, pc, r1
	ldr	r1, [r1, #-1440]
	ldr	r2, [r2, r3, asl #2]
	add	r2, r2, #332
	b	queue_work_on(PLT)
.L13363:
	.align	2
.L13362:
	.word	bam2bam_ports(GOT_PREL)+(.-(.LPIC3507+8))
	.word	.LANCHOR4-(.LPIC3505+8)
	.fnend
	.size	gbam_resume, .-gbam_resume
	.align	2
	.type	frmnet_resume, %function
frmnet_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldrb	r1, [r0, #116]	@ zero_extendqisi2
	ldr	r3, .L13384
	mov	r2, r1, asl #5
.LPIC3519:
	add	r3, pc, r3
	sub	r2, r2, r1, asl #3
	add	r3, r3, r2
	ldr	r2, [r3, #2508]
	ldr	r1, [r3, #2516]
	sub	ip, r2, #5
	cmp	ip, #5
	bhi	.L13365
	mov	r3, #1
	mov	r3, r3, asl ip
	tst	r3, #57
	bne	.L13364
	tst	r3, #6
	bne	.L13383
.L13365:
	sub	r2, r2, #1
	cmp	r2, #9
	addls	pc, pc, r2, asl #2
	b	.L13367
.L13369:
	b	.L13379
	b	.L13370
	b	.L13371
	b	.L13372
	b	.L13373
	b	.L13374
	b	.L13375
	b	.L13376
	b	.L13377
	b	.L13378
	.p2align 1
.L13364:
	bx	lr
.L13383:
	uxtb	r1, r1
	b	gbam_resume(PLT)
.L13379:
	ldr	r2, .L13384+4
.LPIC3508:
	add	r2, pc, r2
.L13368:
	ldr	r1, .L13384+8
	ldr	r0, .L13384+12
.LPIC3522:
	add	r1, pc, r1
	sub	r1, r1, #3440
.LPIC3521:
	add	r0, pc, r0
	sub	r1, r1, #4
	b	printk(PLT)
.L13371:
	ldr	r2, .L13384+16
.LPIC3510:
	add	r2, pc, r2
	b	.L13368
.L13372:
	ldr	r2, .L13384+20
.LPIC3511:
	add	r2, pc, r2
	b	.L13368
.L13370:
	ldr	r2, .L13384+24
.LPIC3509:
	add	r2, pc, r2
	b	.L13368
.L13377:
	ldr	r2, .L13384+28
.LPIC3516:
	add	r2, pc, r2
	b	.L13368
.L13378:
	ldr	r2, .L13384+32
.LPIC3517:
	add	r2, pc, r2
	b	.L13368
.L13373:
	ldr	r2, .L13384+36
.LPIC3512:
	add	r2, pc, r2
	b	.L13368
.L13374:
	ldr	r2, .L13384+40
.LPIC3513:
	add	r2, pc, r2
	b	.L13368
.L13375:
	ldr	r2, .L13384+44
.LPIC3514:
	add	r2, pc, r2
	b	.L13368
.L13376:
	ldr	r2, .L13384+48
.LPIC3515:
	add	r2, pc, r2
	b	.L13368
.L13367:
	ldr	r2, .L13384+52
.LPIC3518:
	add	r2, pc, r2
	b	.L13368
.L13385:
	.align	2
.L13384:
	.word	.LANCHOR1-(.LPIC3519+8)
	.word	.LC0-(.LPIC3508+8)
	.word	.LANCHOR9-(.LPIC3522+8)
	.word	.LC759-(.LPIC3521+8)
	.word	.LC2-(.LPIC3510+8)
	.word	.LC3-(.LPIC3511+8)
	.word	.LC1-(.LPIC3509+8)
	.word	.LC8-(.LPIC3516+8)
	.word	.LC9-(.LPIC3517+8)
	.word	.LC4-(.LPIC3512+8)
	.word	.LC5-(.LPIC3513+8)
	.word	.LC6-(.LPIC3514+8)
	.word	.LC7-(.LPIC3515+8)
	.word	.LC10-(.LPIC3518+8)
	.fnend
	.size	frmnet_resume, .-frmnet_resume
	.align	2
	.global	gsmd_ctrl_connect
	.type	gsmd_ctrl_connect, %function
gsmd_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	uxtb	r2, r1
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	cmp	r2, #5
	str	lr, [sp, #12]
	bhi	.L13387
	ldr	r3, .L13401
	mov	r4, r0
	mov	r0, #84
.LPIC3523:
	add	r3, pc, r3
	mla	r2, r0, r2, r3
	ldr	r2, [r2, #708]
	cmp	r2, #0
	beq	.L13387
	cmp	r4, #0
	beq	.L13400
	mla	r1, r0, r1, r3
	ldr	r5, [r1, #708]
	add	r6, r5, #108
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, .L13401+4
	mov	r1, r0
	str	r4, [r5, #104]
	ldr	r3, .L13401+8
	mov	r0, r6
.LPIC3527:
	add	r2, pc, r2
.LPIC3528:
	add	r3, pc, r3
	strd	r2, [r4, #96]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, .L13401+12
	add	r2, r5, #112
	mov	r0, #4
	mov	r3, #0
.LPIC3529:
	add	r1, pc, r1
	ldr	r1, [r1, #-1468]
	bl	queue_delayed_work_on(PLT)
	mov	r0, #0
	b	.L13396
.L13387:
	ldr	r3, .L13401+16
	mov	r2, r1
	ldr	r0, .L13401+20
.LPIC3531:
	add	r3, pc, r3
	sub	r1, r3, #3424
.LPIC3530:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
.L13396:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13400:
	ldr	r1, .L13401+24
	ldr	r0, .L13401+28
.LPIC3525:
	add	r1, pc, r1
	sub	r1, r1, #3424
.LPIC3524:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L13396
.L13402:
	.align	2
.L13401:
	.word	.LANCHOR1-(.LPIC3523+8)
	.word	grmnet_ctrl_smd_send_cpkt_tomodem-(.LPIC3527+8)
	.word	gsmd_ctrl_send_cbits_tomodem-(.LPIC3528+8)
	.word	.LANCHOR4-(.LPIC3529+8)
	.word	.LANCHOR9-(.LPIC3531+8)
	.word	.LC760-(.LPIC3530+8)
	.word	.LANCHOR9-(.LPIC3525+8)
	.word	.LC753-(.LPIC3524+8)
	.fnend
	.size	gsmd_ctrl_connect, .-gsmd_ctrl_connect
	.align	2
	.global	gsmd_ctrl_disconnect
	.type	gsmd_ctrl_disconnect, %function
gsmd_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #5
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	bhi	.L13404
	ldr	r3, .L13424
	mov	r2, #84
.LPIC3532:
	add	r3, pc, r3
	mla	r3, r2, r1, r3
	ldr	r6, [r3, #708]
	cmp	r6, #0
	beq	.L13404
	cmp	r0, #0
	beq	.L13422
	add	r8, r6, #108
	mov	r4, r0
	mov	r0, r8
	add	r7, r6, #40
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r3, #0
	mov	r9, r0
	str	r3, [r6, #104]
	str	r3, [r4, #96]
	str	r3, [r4, #100]
	ldr	r4, [r6, #40]
	str	r3, [r6, #88]
	cmp	r4, r7
	beq	.L13410
.L13409:
	mov	r0, r4
	sub	r5, r4, #8
	bl	list_del(PLT)
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	ldr	r4, [r6, #40]
	cmp	r7, r4
	bne	.L13409
.L13410:
	mov	r0, r8
	mov	r1, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	add	r1, r6, #8
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	bne	.L13423
.L13408:
	ldr	r1, .L13424+4
	add	r2, r6, #164
	mov	r0, #4
	ldrd	r4, [sp]
	mov	r3, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
.LPIC3535:
	add	r1, pc, r1
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	ldr	r1, [r1, #-1468]
	b	queue_delayed_work_on(PLT)
.L13404:
	ldr	r3, .L13424+8
	mov	r2, r1
	ldr	r0, .L13424+12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3537:
	add	r3, pc, r3
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
.LPIC3536:
	add	r0, pc, r0
	sub	r1, r3, #3408
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L13423:
	ldr	r1, [r6, #88]
	ldr	r0, [r6]
	orr	r2, r1, #4
	mvn	r2, r2
	bl	smd_tiocmset(PLT)
	b	.L13408
.L13422:
	ldr	r1, .L13424+16
	ldr	r0, .L13424+20
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3534:
	add	r1, pc, r1
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
.LPIC3533:
	add	r0, pc, r0
	sub	r1, r1, #3408
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L13425:
	.align	2
.L13424:
	.word	.LANCHOR1-(.LPIC3532+8)
	.word	.LANCHOR4-(.LPIC3535+8)
	.word	.LANCHOR9-(.LPIC3537+8)
	.word	.LC760-(.LPIC3536+8)
	.word	.LANCHOR9-(.LPIC3534+8)
	.word	.LC753-(.LPIC3533+8)
	.fnend
	.size	gsmd_ctrl_disconnect, .-gsmd_ctrl_disconnect
	.align	2
	.global	gsmd_ctrl_setup
	.type	gsmd_ctrl_setup, %function
gsmd_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r0, #1
	strd	r8, [sp, #16]
	mov	r8, r0
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	str	r2, [sp, #36]
	bhi	.L13452
	sub	r3, r1, #1
	mov	r4, r1
	cmp	r3, #2
	bhi	.L13453
	ldr	r3, .L13457
.LPIC3564:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r3, [sp, #40]
	ldrb	r3, [r3]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L13454
.L13430:
	add	r2, r8, r8, asl #1
	ldr	r1, [sp, #40]
	add	ip, r3, #1
	add	r3, r2, r4
	mov	r7, r2
	cmp	r2, r3
	str	r2, [sp, #8]
	str	r3, [sp, #12]
	strb	ip, [r1]
	bcs	.L13437
	mov	r3, #84
	ldr	r8, .L13457+4
	ldr	r9, .L13457+8
	mul	r3, r3, r2
	ldr	r2, .L13457+12
	ldr	r10, .L13457+16
.LPIC3547:
	add	r8, pc, r8
	add	r6, r8, #708
	str	r3, [sp, #44]
.LPIC3552:
	add	r9, pc, r9
.LPIC3548:
	add	r2, pc, r2
	add	r6, r6, r3
	ldr	r3, .L13457+20
	add	r9, r9, #3920
.LPIC3563:
	ldr	r10, [pc, r10]		@ tls_load_dot_plus_eight
	str	r2, [sp, #16]
	ldr	r2, .L13457+24
	add	r9, r9, #12
.LPIC3551:
	add	r3, pc, r3
.LPIC3549:
	add	r2, pc, r2
	str	r3, [sp, #28]
	str	r2, [sp, #20]
	ldr	r2, .L13457+28
.LPIC3550:
	add	r2, pc, r2
	str	r2, [sp, #24]
	b	.L13436
.L13456:
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L13455
.L13434:
	ldr	ip, [sp, #16]
	add	lr, r4, #116
	add	r0, r4, #128
	str	r7, [r4, #100]
	mov	r1, r5
	mov	r2, r5
	mov	r3, r5
	str	lr, [r4, #116]
	str	lr, [r4, #120]
	str	ip, [r4, #124]
	str	r5, [r4, #108]
	str	fp, [r4, #112]
	bl	init_timer_key(PLT)
	ldr	r2, [sp, #20]
	add	lr, r4, #168
	add	r3, r4, #112
.LPIC3565:
	ldr	r8, [pc, r8]		@ tls_load_dot_plus_eight
	add	r0, r4, #180
	mov	r1, r5
	str	lr, [r4, #168]
	str	lr, [r4, #172]
	str	r2, [r4, #176]
	mov	r2, r5
	str	r3, [r4, #148]
	mov	r3, r5
	str	r8, [r4, #144]
	str	fp, [r4, #164]
	bl	init_timer_key(PLT)
	ldr	r3, [sp, #24]
	add	r2, r4, #164
	str	r8, [r4, #196]
	add	r0, r4, #12
	ldr	r1, [sp, #28]
	str	r4, [r4, #84]
	str	r2, [r4, #200]
	mov	r2, r9
	add	r8, r4, #40
	add	r3, r3, r7, asl #2
	add	r7, r7, #1
	ldr	r3, [r3, #556]
	str	r3, [r4, #4]
	bl	__init_waitqueue_head(PLT)
	ldr	r1, .L13457+32
	add	r0, r4, #24
	mov	r2, r9
.LPIC3553:
	add	r1, pc, r1
	bl	__init_waitqueue_head(PLT)
	ldr	ip, [sp, #12]
	add	lr, r4, #56
	add	r0, r4, #72
	ldr	r1, .L13457+36
	str	fp, [r4, #52]
	ldr	r2, .L13457+40
	str	fp, [r4, #68]
	ldr	r3, .L13457+44
	str	r8, [r4, #40]
	cmp	r7, ip
	ldr	ip, .L13457+48
	str	r8, [r4, #44]
.LPIC3555:
	add	r1, pc, r1
	str	lr, [r4, #56]
.LPIC3556:
	add	r2, pc, r2
	str	lr, [r4, #60]
.LPIC3557:
	add	r3, pc, r3
	str	r1, [r4, #64]
.LPIC3558:
	add	ip, pc, ip
	str	r2, [r4, #80]
	str	r0, [r4, #72]
	str	r0, [r4, #76]
	str	r4, [r6]
	stmib	r6, {r3, ip}
	ldr	r3, [r4, #4]
	add	r6, r6, #84
	str	r5, [r6, #-52]
	str	r3, [r6, #-60]
	beq	.L13437
.L13436:
	ldr	r3, [r10, #32]
	mov	r5, #0
	mov	fp, #65024
	ldr	r0, [sp, #8]
	movt	fp, 65535
	movw	r1, #32976
	ldr	r8, .L13457+52
	mov	r2, #216
	cmp	r3, r5
	rsb	r0, r0, r7
	str	r0, [sp, #32]
	mov	r0, r3
	bne	.L13456
	mov	r4, #16
	b	.L13434
.L13437:
	ldr	r3, [sp, #36]
	cmp	r3, #0
	beq	.L13450
	ldrb	r2, [sp, #8]	@ zero_extendqisi2
	strb	r2, [r3]
.L13450:
	mov	r0, #0
.L13448:
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13455:
	ldr	r1, .L13457+56
	mov	r2, r7
	ldr	r0, .L13457+60
.LPIC3561:
	add	r1, pc, r1
	sub	r1, r1, #3376
.LPIC3560:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	r3, [sp, #32]
	cmp	r3, #0
	ble	.L13440
	ldr	r3, .L13457+64
	ldr	r2, [sp, #44]
.LPIC3562:
	add	r3, pc, r3
	add	r3, r3, r2
	add	r5, r3, #712
.L13439:
	ldr	r3, [r5, #-4]
	add	r4, r4, #1
	subs	r0, r3, #0
	beq	.L13438
	bl	kfree(PLT)
	mov	r0, r5
	bl	platform_driver_unregister(PLT)
.L13438:
	ldr	r3, [sp, #32]
	add	r5, r5, #84
	cmp	r4, r3
	bne	.L13439
.L13440:
	ldr	r2, [sp, #40]
	ldrb	r3, [r2]	@ zero_extendqisi2
	sub	r3, r3, #1
	uxtb	r3, r3
	cmp	r3, #0
	strb	r3, [r2]
	mvnne	r0, #11
	bne	.L13448
	ldr	r3, .L13457+68
.LPIC3559:
	add	r3, pc, r3
	ldr	r0, [r3, #-1468]
	bl	destroy_workqueue(PLT)
	mvn	r0, #11
	b	.L13448
.L13454:
	ldr	r0, .L13457+72
	str	r3, [sp]
	mov	r1, #10
	mov	r2, #1
.LPIC3543:
	add	r0, pc, r0
	bl	__alloc_workqueue_key(PLT)
	ldr	r3, .L13457+76
	cmp	r0, #0
.LPIC3544:
	add	r3, pc, r3
	str	r0, [r3, #-1468]
	beq	.L13431
	ldr	r3, [sp, #40]
	ldrb	r3, [r3]	@ zero_extendqisi2
	b	.L13430
.L13453:
	ldr	r1, .L13457+80
	mov	r2, r4
	ldr	r0, .L13457+84
.LPIC3541:
	add	r1, pc, r1
	sub	r1, r1, #3376
.LPIC3540:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #21
	b	.L13448
.L13452:
	ldr	r1, .L13457+88
	mov	r2, r0
	ldr	r0, .L13457+92
.LPIC3539:
	add	r1, pc, r1
	sub	r1, r1, #3376
.LPIC3538:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #21
	b	.L13448
.L13431:
	ldr	r1, .L13457+96
	ldr	r0, .L13457+100
.LPIC3546:
	add	r1, pc, r1
	sub	r1, r1, #3376
.LPIC3545:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #11
	b	.L13448
.L13458:
	.align	2
.L13457:
	.word	online_clients(GOT_PREL)+(.-(.LPIC3564+8))
	.word	.LANCHOR1-(.LPIC3547+8)
	.word	.LANCHOR4-(.LPIC3552+8)
	.word	grmnet_ctrl_smd_connect_w-(.LPIC3548+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3563+8))
	.word	.LC765-(.LPIC3551+8)
	.word	grmnet_ctrl_smd_disconnect_w-(.LPIC3549+8)
	.word	.LANCHOR5-(.LPIC3550+8)
	.word	.LC766-(.LPIC3553+8)
	.word	grmnet_ctrl_smd_read_w-(.LPIC3555+8)
	.word	grmnet_ctrl_smd_write_w-(.LPIC3556+8)
	.word	grmnet_ctrl_smd_ch_probe-(.LPIC3557+8)
	.word	grmnet_ctrl_smd_ch_remove-(.LPIC3558+8)
	.word	delayed_work_timer_fn(GOT_PREL)+(.-(.LPIC3565+8))
	.word	.LANCHOR9-(.LPIC3561+8)
	.word	.LC749-(.LPIC3560+8)
	.word	.LANCHOR1-(.LPIC3562+8)
	.word	.LANCHOR4-(.LPIC3559+8)
	.word	.LC763-(.LPIC3543+8)
	.word	.LANCHOR4-(.LPIC3544+8)
	.word	.LANCHOR9-(.LPIC3541+8)
	.word	.LC762-(.LPIC3540+8)
	.word	.LANCHOR9-(.LPIC3539+8)
	.word	.LC761-(.LPIC3538+8)
	.word	.LANCHOR9-(.LPIC3546+8)
	.word	.LC764-(.LPIC3545+8)
	.fnend
	.size	gsmd_ctrl_setup, .-gsmd_ctrl_setup
	.align	2
	.global	gqti_ctrl_connect
	.type	gqti_ctrl_connect, %function
gqti_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L13466
	ldr	r3, .L13467
.LPIC3568:
	add	r3, pc, r3
	ldr	r4, [r3, #-672]
	add	r6, r4, #52
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, .L13467+4
	mov	r1, r0
	str	r5, [r4]
	ldr	r3, .L13467+8
	mov	r0, r6
.LPIC3569:
	add	r2, pc, r2
.LPIC3570:
	add	r3, pc, r3
	strd	r2, [r5, #96]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r3, #1
	add	r0, r4, #32
	mov	r2, r3
	mov	r1, #3
	str	r3, [r4, #8]
	mov	r3, #0
	bl	__wake_up(PLT)
	cmp	r4, #0
	beq	.L13464
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L13461
	ldr	r4, [r0, #108]
	cmp	r4, #0
	beq	.L13464
	blx	r4
	mov	r0, #0
.L13461:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L13464:
	mov	r0, r4
	b	.L13461
.L13466:
	ldr	r1, .L13467+12
	ldr	r0, .L13467+16
.LPIC3567:
	add	r1, pc, r1
	sub	r1, r1, #3360
.LPIC3566:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #18
	b	.L13461
.L13468:
	.align	2
.L13467:
	.word	.LANCHOR4-(.LPIC3568+8)
	.word	grmnet_ctrl_qti_send_cpkt_tomodem-(.LPIC3569+8)
	.word	gqti_ctrl_notify_modem-(.LPIC3570+8)
	.word	.LANCHOR9-(.LPIC3567+8)
	.word	.LC753-(.LPIC3566+8)
	.fnend
	.size	gqti_ctrl_connect, .-gqti_ctrl_connect
	.align	2
	.global	gqti_ctrl_disconnect
	.type	gqti_ctrl_disconnect, %function
gqti_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13495
	cmp	r0, #0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
.LPIC3571:
	add	r3, pc, r3
	str	lr, [sp, #28]
	ldr	r5, [r3, #-672]
	beq	.L13492
	cmp	r5, #0
	mov	r6, r0
	beq	.L13471
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L13471
	ldr	r3, [r0, #104]
	cmp	r3, #0
	beq	.L13471
	blx	r3
.L13471:
	mov	r4, #0
	mov	r7, r5
	add	r8, r5, #52
	str	r4, [r5, #8]
	mov	r0, r8
	str	r4, [r5, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	str	r4, [r7], #44
	mov	r9, r0
	str	r4, [r6, #96]
	str	r4, [r6, #100]
	ldr	r4, [r5, #44]
	cmp	r7, r4
	beq	.L13472
.L13473:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del(PLT)
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r6
	bl	kfree(PLT)
	ldr	r4, [r5, #44]
	cmp	r4, r7
	bne	.L13473
.L13472:
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldrb	r3, [r5, #4]	@ zero_extendqisi2
	mov	r4, r0
	cmp	r3, #0
	beq	.L13493
	ldr	r3, .L13495+4
.LPIC3577:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L13478
	movw	r1, #32800
	mov	r2, #16
	bl	kmem_cache_alloc_trace(PLT)
	subs	r3, r0, #0
	beq	.L13494
.L13475:
	mov	r1, #16
	mov	r2, #0
	mov	r0, r3
	stmia	r3, {r1, r2}
.L13476:
	mov	r2, r7
	ldr	r1, [r5, #48]
	add	r0, r0, #8
	bl	__list_add(PLT)
	mov	r0, r8
	mov	r1, r4
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	add	r0, r5, #32
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	__wake_up(PLT)
.L13478:
	mov	r3, #16
	b	.L13475
.L13494:
	mvn	r0, #11
	b	.L13476
.L13492:
	ldr	r1, .L13495+8
	ldr	r0, .L13495+12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3573:
	add	r1, pc, r1
	ldrd	r8, [sp, #16]
	sub	r1, r1, #3344
	ldr	r10, [sp, #24]
.LPIC3572:
	add	r0, pc, r0
	ldr	lr, [sp, #28]
	sub	r1, r1, #4
	add	sp, sp, #32
	b	printk(PLT)
.L13493:
	ldr	r1, .L13495+16
	mov	r2, r5
	ldr	r0, .L13495+20
.LPIC3575:
	add	r1, pc, r1
	add	r1, r1, #3136
.LPIC3574:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	ldrd	r6, [sp, #8]
	mov	r0, r8
	mov	r1, r4
	ldrd	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock_irqrestore(PLT)
.L13496:
	.align	2
.L13495:
	.word	.LANCHOR4-(.LPIC3571+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3577+8))
	.word	.LANCHOR9-(.LPIC3573+8)
	.word	.LC753-(.LPIC3572+8)
	.word	.LANCHOR3-(.LPIC3575+8)
	.word	.LC386-(.LPIC3574+8)
	.fnend
	.size	gqti_ctrl_disconnect, .-gqti_ctrl_disconnect
	.align	2
	.global	ghsic_ctrl_connect
	.type	ghsic_ctrl_connect, %function
ghsic_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L13508
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	clz	r3, r0
	strd	r6, [sp, #8]
	mov	r6, r0
	mov	r3, r3, lsr #5
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3578:
	add	r2, pc, r2
	ldr	r0, [r2, #1212]
	cmp	r1, r0
	orrhi	r3, r3, #1
	cmp	r3, #0
	bne	.L13504
	mov	r3, #104
	mla	r1, r3, r1, r2
	ldr	r4, [r1, #1216]
	cmp	r4, #0
	beq	.L13505
	add	r7, r4, #4
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #48]
	mov	r1, r0
	cmp	r3, #0
	beq	.L13506
	cmp	r3, #1
	beq	.L13507
.L13502:
	mov	r5, #0
	mov	r0, r7
	str	r6, [r4, #8]
	str	r5, [r4, #100]
	str	r5, [r4, #96]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #4
	ldr	r1, [r4, #12]
	add	r2, r4, #16
	bl	queue_work_on(PLT)
	mov	r0, r5
.L13499:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13506:
	ldr	r3, .L13508+4
.LPIC3584:
	add	r3, pc, r3
	str	r3, [r6, #140]
	ldr	r3, [r4, #48]
	cmp	r3, #1
	bne	.L13502
.L13507:
	ldr	r2, .L13508+8
	ldr	r3, .L13508+12
	ldr	r0, [r6, #92]
.LPIC3585:
	add	r2, pc, r2
.LPIC3586:
	add	r3, pc, r3
	str	r0, [r4, #52]
	strd	r2, [r6, #96]
	b	.L13502
.L13504:
	ldr	r3, .L13508+16
	mov	r2, r1
	ldr	r0, .L13508+20
.LPIC3580:
	add	r3, pc, r3
	sub	r1, r3, #3312
.LPIC3579:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #18
	b	.L13499
.L13505:
	ldr	r1, .L13508+24
	ldr	r0, .L13508+28
.LPIC3583:
	add	r1, pc, r1
	sub	r1, r1, #3312
.LPIC3582:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #18
	b	.L13499
.L13509:
	.align	2
.L13508:
	.word	.LANCHOR1-(.LPIC3578+8)
	.word	ghsic_send_cbits_tomodem-(.LPIC3584+8)
	.word	ghsic_send_cpkt_tomodem-(.LPIC3585+8)
	.word	ghsic_send_cbits_tomodem-(.LPIC3586+8)
	.word	.LANCHOR9-(.LPIC3580+8)
	.word	.LC89-(.LPIC3579+8)
	.word	.LANCHOR9-(.LPIC3583+8)
	.word	.LC21-(.LPIC3582+8)
	.fnend
	.size	ghsic_ctrl_connect, .-ghsic_ctrl_connect
	.align	2
	.global	ghsic_ctrl_disconnect
	.type	ghsic_ctrl_disconnect, %function
ghsic_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13521
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #104
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3587:
	add	r3, pc, r3
	ldr	r2, [r3, #1212]
	mla	r3, ip, r1, r3
	cmp	r1, r2
	ldr	r4, [r3, #1216]
	bhi	.L13519
	cmp	r4, #0
	cmpne	r0, #0
	moveq	r8, #1
	movne	r8, #0
	beq	.L13520
	ldr	r7, [r4, #48]
	mov	r5, r0
	cmp	r7, #0
	beq	.L13513
	add	r6, r4, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r8, [r5, #96]
	str	r8, [r5, #100]
.L13515:
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #88]
	str	r3, [r4, #8]
	str	r3, [r4, #52]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	add	r2, r4, #32
	mov	r0, #4
	ldr	r1, [r4, #12]
	ldr	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work_on(PLT)
.L13513:
	add	r6, r4, #4
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r7, [r5, #140]
	b	.L13515
.L13519:
	ldr	r3, .L13521+4
	mov	r2, r1
	ldr	r0, .L13521+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3590:
	add	r3, pc, r3
	ldr	r8, [sp, #16]
	sub	r1, r3, #3296
	ldr	lr, [sp, #20]
.LPIC3589:
	add	r0, pc, r0
	sub	r1, r1, #8
	add	sp, sp, #24
	b	printk(PLT)
.L13520:
	ldr	r1, .L13521+12
	ldr	r0, .L13521+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3592:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	sub	r1, r1, #3296
	ldr	lr, [sp, #20]
.LPIC3591:
	add	r0, pc, r0
	sub	r1, r1, #8
	add	sp, sp, #24
	b	printk(PLT)
.L13522:
	.align	2
.L13521:
	.word	.LANCHOR1-(.LPIC3587+8)
	.word	.LANCHOR9-(.LPIC3590+8)
	.word	.LC89-(.LPIC3589+8)
	.word	.LANCHOR9-(.LPIC3592+8)
	.word	.LC753-(.LPIC3591+8)
	.fnend
	.size	ghsic_ctrl_disconnect, .-ghsic_ctrl_disconnect
	.align	2
	.global	ghsic_ctrl_set_port_name
	.type	ghsic_ctrl_set_port_name, %function
ghsic_ctrl_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13530
.LPIC3593:
	add	r3, pc, r3
	ldr	r3, [r3, #3932]
	cmp	r3, #3
	bhi	.L13528
	cmp	r0, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L13529
	ldr	ip, .L13530+4
	mov	lr, #104
	mov	r1, r0
	mov	r2, #20
.LPIC3597:
	add	ip, pc, ip
	mla	r0, lr, r3, ip
	add	r0, r0, #1296
	add	r0, r0, #4
	bl	strlcpy(PLT)
.L13526:
	ldr	r4, .L13530+8
	mov	ip, #104
	mov	r2, #20
	ldr	r0, .L13530+12
	ldr	r1, .L13530+16
.LPIC3599:
	add	r4, pc, r4
	ldr	r3, [r4, #3932]
.LPIC3598:
	add	r0, pc, r0
.LPIC3600:
	add	r1, pc, r1
	mla	r0, ip, r3, r0
	add	r0, r0, #1296
	add	r0, r0, #4
	bl	strlcat(PLT)
	ldr	r3, [r4, #3932]
	add	r3, r3, #1
	str	r3, [r4, #3932]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L13529:
	ldr	r0, .L13530+20
	mov	ip, #104
	mov	r2, #20
.LPIC3596:
	add	r0, pc, r0
	mla	r0, ip, r3, r0
	add	r0, r0, #1296
	add	r0, r0, #4
	bl	strlcpy(PLT)
	b	.L13526
.L13528:
	ldr	r1, .L13530+24
	mov	r2, r3
	ldr	r0, .L13530+28
.LPIC3595:
	add	r1, pc, r1
.LPIC3594:
	add	r0, pc, r0
	sub	r1, r1, #3280
	b	printk(PLT)
.L13531:
	.align	2
.L13530:
	.word	.LANCHOR4-(.LPIC3593+8)
	.word	.LANCHOR1-(.LPIC3597+8)
	.word	.LANCHOR4-(.LPIC3599+8)
	.word	.LANCHOR1-(.LPIC3598+8)
	.word	.LC768-(.LPIC3600+8)
	.word	.LANCHOR1-(.LPIC3596+8)
	.word	.LANCHOR9-(.LPIC3595+8)
	.word	.LC767-(.LPIC3594+8)
	.fnend
	.size	ghsic_ctrl_set_port_name, .-ghsic_ctrl_set_port_name
	.align	2
	.global	ghsic_ctrl_setup
	.type	ghsic_ctrl_setup, %function
ghsic_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L13558
	clz	r3, r0
	strd	r6, [sp, #8]
	mov	r3, r3, lsr #5
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r10, [sp, #24]
.LPIC3603:
	add	r5, pc, r5
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	ldr	r2, [r5, #1212]
	add	r1, r0, r2
	str	r2, [sp, #36]
	cmp	r1, #4
	orrgt	r3, r3, #1
	str	r2, [sp, #44]
	cmp	r3, #0
	str	r1, [sp, #8]
	bne	.L13533
	cmp	r2, r1
	movcs	r0, r2
	bcs	.L13553
	ldr	r3, .L13558+4
	mov	r0, #104
	str	r5, [sp, #12]
	ldr	r2, .L13558+8
	ldr	r9, .L13558+12
.LPIC3609:
	add	r3, pc, r3
.LPIC3612:
	add	r2, pc, r2
	str	r3, [sp, #16]
	ldr	r3, [sp, #36]
	str	r2, [sp, #20]
	ldr	r2, .L13558+16
.LPIC3627:
	ldr	r9, [pc, r9]		@ tls_load_dot_plus_eight
	mov	r4, r3
	mov	r6, r3
	mul	r3, r0, r3
.LPIC3613:
	add	r2, pc, r2
	add	r5, r5, r3
	str	r3, [sp, #40]
	ldr	r3, .L13558+20
	add	r5, r5, #1296
	str	r2, [sp, #24]
	add	r5, r5, #4
.LPIC3614:
	add	r3, pc, r3
	str	r3, [sp, #28]
	ldr	r3, .L13558+24
.LPIC3615:
	add	r3, pc, r3
	str	r3, [sp, #32]
	b	.L13540
.L13557:
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L13537
.L13536:
	mov	r1, #10
	mov	r2, #1
	str	r7, [sp]
	movt	r1, 2
	mov	r3, r7
	ldr	r0, [sp, #16]
	str	r5, [sp, #4]
	ldr	fp, .L13558+28
	bl	__alloc_workqueue_key(PLT)
	ldr	r10, .L13558+32
	mov	r2, r0
	mov	lr, #0
	cmp	r2, lr
	mov	r3, #65024
	sub	r0, r5, #80
.LPIC3616:
	add	fp, pc, fp
	str	r2, [r4, #12]
	movt	r3, 65535
	add	ip, r4, #20
.LPIC3617:
	add	r10, pc, r10
	add	r1, r4, #36
	beq	.L13556
	ldr	r2, [sp, #20]
	str	r3, [r4, #16]
	cmp	r8, #0
	str	r6, [r4]
	add	r6, r6, #1
	str	r5, [r4, #64]
	str	r8, [r4, #48]
	strd	r2, [r4, #28]
	ldr	r3, [sp, #24]
	str	r7, [r4, #4]
	str	ip, [r4, #20]
	str	ip, [r4, #24]
	str	r3, [r4, #44]
	ldr	r3, [sp, #28]
	str	r1, [r4, #36]
	str	r1, [r4, #40]
	str	r4, [r4, #56]
	str	r3, [r4, #72]
	ldreq	r3, [sp, #32]
	streq	r3, [r4, #76]
	str	fp, [r5, #-80]
	str	r4, [r5, #-84]
	str	r10, [r5, #-76]
	str	r5, [r5, #-60]
	add	r5, r5, #104
	str	lr, [r5, #-156]
	bl	platform_driver_register(PLT)
	ldr	r2, [sp, #8]
	ldr	r3, .L13558+36
	cmp	r2, r6
.LPIC3618:
	add	r3, pc, r3
	bls	.L13545
	ldr	r4, [r3, #1212]
.L13540:
	ldr	r3, [r9, #28]
	mov	r7, #0
	add	r4, r4, #1
	ldr	r0, [sp, #12]
	movw	r1, #32976
	mov	r2, #108
	cmp	r3, r7
	str	r4, [r0, #1212]
	mov	r0, r3
	bne	.L13557
	mov	r4, #16
	b	.L13536
.L13533:
	ldr	r1, .L13558+40
	mov	r2, r0
	ldr	r0, .L13558+44
.LPIC3605:
	add	r1, pc, r1
	sub	r1, r1, #3248
.LPIC3604:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #21
.L13553:
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13545:
	ldr	r0, [sp, #36]
	b	.L13553
.L13556:
	ldr	r1, .L13558+48
	mov	r2, r5
	ldr	r0, .L13558+52
.LPIC3611:
	add	r1, pc, r1
.LPIC3610:
	add	r0, pc, r0
	sub	r1, r1, #3232
	bl	printk(PLT)
.L13537:
	ldr	r4, .L13558+56
	mov	r2, r6
	ldr	r1, .L13558+60
	ldr	r0, .L13558+64
.LPIC3621:
	add	r4, pc, r4
	ldr	r3, [r4, #1212]
.LPIC3624:
	add	r1, pc, r1
	sub	r1, r1, #3248
.LPIC3623:
	add	r0, pc, r0
	sub	r1, r1, #4
	sub	r3, r3, #1
	str	r3, [r4, #1212]
	bl	printk(PLT)
	ldr	r2, [sp, #36]
	ldr	r3, [r4, #1212]
	cmp	r2, r3
	bcs	.L13543
	ldr	r3, [sp, #40]
	add	r0, r4, r3
	add	r6, r0, #1216
	add	r6, r6, #4
.L13542:
	ldr	r3, [sp, #44]
	ldr	r5, [r6, #-4]
	add	r3, r3, #1
	ldr	r0, [r5, #12]
	str	r3, [sp, #44]
	bl	destroy_workqueue(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	cmp	r6, #0
	mov	r0, r6
	add	r6, r6, #104
	beq	.L13541
	bl	platform_driver_unregister(PLT)
.L13541:
	ldr	r3, [r4, #1212]
	ldr	r2, [sp, #44]
	cmp	r2, r3
	bcc	.L13542
.L13543:
	ldr	r3, .L13558+68
	mvn	r0, #11
	ldr	r2, [sp, #36]
.LPIC3620:
	add	r3, pc, r3
	str	r2, [r3, #1212]
	b	.L13553
.L13559:
	.align	2
.L13558:
	.word	.LANCHOR1-(.LPIC3603+8)
	.word	.LC195-(.LPIC3609+8)
	.word	ghsic_ctrl_connect_w-(.LPIC3612+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3627+8))
	.word	gctrl_disconnect_w-(.LPIC3613+8)
	.word	ghsic_ctrl_receive-(.LPIC3614+8)
	.word	ghsic_ctrl_status-(.LPIC3615+8)
	.word	ghsic_ctrl_probe-(.LPIC3616+8)
	.word	ghsic_ctrl_remove-(.LPIC3617+8)
	.word	.LANCHOR1-(.LPIC3618+8)
	.word	.LANCHOR9-(.LPIC3605+8)
	.word	.LC762-(.LPIC3604+8)
	.word	.LANCHOR9-(.LPIC3611+8)
	.word	.LC769-(.LPIC3610+8)
	.word	.LANCHOR1-(.LPIC3621+8)
	.word	.LANCHOR9-(.LPIC3624+8)
	.word	.LC749-(.LPIC3623+8)
	.word	.LANCHOR1-(.LPIC3620+8)
	.fnend
	.size	ghsic_ctrl_setup, .-ghsic_ctrl_setup
	.align	2
	.global	ghsic_data_disconnect
	.type	ghsic_data_disconnect, %function
ghsic_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13574
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	ip, #104
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
.LPIC3628:
	add	r3, pc, r3
	str	lr, [sp, #28]
	ldr	r2, [r3, #1632]
	mla	r3, ip, r1, r3
	cmp	r1, r2
	ldr	r4, [r3, #1636]
	bhi	.L13572
	cmp	r4, #0
	cmpne	r0, #0
	moveq	r5, #1
	movne	r5, #0
	beq	.L13573
	mov	r0, r4
	bl	ghsic_data_free_buffers(PLT)
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L13563
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r5, [r3]
.L13563:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L13564
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L13564:
	mov	r5, #0
	add	r8, r4, #48
	mov	r0, r8
	add	r7, r4, #164
	str	r5, [r4, #4]
	add	r6, r4, #80
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r9, r0
	mov	r1, r7
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #184]
	bl	_clear_bit(PLT)
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	mov	r1, r7
	str	r5, [r4, #12]
	mov	r0, #1
	bl	_clear_bit(PLT)
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	add	r2, r4, #104
	mov	r0, #4
	ldr	r1, [r4, #84]
	ldrd	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_work_on(PLT)
.L13572:
	ldr	r3, .L13574+4
	mov	r2, r1
	ldr	r0, .L13574+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3631:
	add	r3, pc, r3
	ldrd	r8, [sp, #16]
	sub	r1, r3, #3200
	ldr	r10, [sp, #24]
.LPIC3630:
	add	r0, pc, r0
	ldr	lr, [sp, #28]
	sub	r1, r1, #12
	add	sp, sp, #32
	b	printk(PLT)
.L13573:
	ldr	r1, .L13574+12
	ldr	r0, .L13574+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3633:
	add	r1, pc, r1
	ldrd	r8, [sp, #16]
	sub	r1, r1, #3200
	ldr	r10, [sp, #24]
.LPIC3632:
	add	r0, pc, r0
	ldr	lr, [sp, #28]
	sub	r1, r1, #12
	add	sp, sp, #32
	b	printk(PLT)
.L13575:
	.align	2
.L13574:
	.word	.LANCHOR1-(.LPIC3628+8)
	.word	.LANCHOR9-(.LPIC3631+8)
	.word	.LC89-(.LPIC3630+8)
	.word	.LANCHOR9-(.LPIC3633+8)
	.word	.LC21-(.LPIC3632+8)
	.fnend
	.size	ghsic_data_disconnect, .-ghsic_data_disconnect
	.align	2
	.global	ghsic_data_connect
	.type	ghsic_data_connect, %function
ghsic_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13590
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #104
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3634:
	add	r3, pc, r3
	ldr	r2, [r3, #1632]
	mla	r3, ip, r1, r3
	cmp	r1, r2
	ldr	r4, [r3, #1636]
	bhi	.L13585
	cmp	r4, #0
	cmpne	r0, #0
	mov	r5, r0
	beq	.L13586
	ldr	r3, [r4, #16]
	add	r7, r4, #48
	add	r6, r4, #80
	mov	r0, r7
	cmp	r3, #0
	beq	.L13587
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #84]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L13590+4
.LPIC3642:
	add	r3, pc, r3
	ldr	r2, [r3, #2552]
	ldr	r3, [r3, #2556]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r5, #84]
	str	r4, [r3]
	ldr	r3, [r5, #88]
	str	r4, [r3]
.L13581:
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L13588
	ldr	r0, [r4, #12]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L13589
	mov	r3, #1
	mov	r0, r7
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r5, [r4, #192]
	mov	r0, r7
	str	r5, [r4, #196]
	str	r5, [r4, #200]
	str	r5, [r4, #216]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r5, [r4, #188]
	mov	r0, r6
	str	r5, [r4, #212]
	str	r5, [r4, #204]
	str	r5, [r4, #208]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #4
	ldr	r1, [r4, #84]
	add	r2, r4, #88
	bl	queue_work_on(PLT)
	mov	r0, r5
.L13578:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13587:
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #92]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L13590+8
.LPIC3640:
	add	r3, pc, r3
	ldr	r2, [r3, #2544]
	ldr	r3, [r3, #2548]
	str	r2, [r4, #20]
	str	r3, [r4, #52]
	ldr	r3, [r5, #88]
	str	r4, [r3]
	ldr	r3, [r5, #92]
	str	r4, [r3]
	b	.L13581
.L13588:
	ldr	r1, .L13590+12
	ldr	r0, .L13590+16
	ldr	r2, [r4, #8]
.LPIC3645:
	add	r1, pc, r1
	sub	r1, r1, #3184
.LPIC3644:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r5
	b	.L13578
.L13589:
	ldr	r1, .L13590+20
	ldr	r0, .L13590+24
	ldr	r2, [r4, #12]
.LPIC3647:
	add	r1, pc, r1
	sub	r1, r1, #3184
.LPIC3646:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r5
	b	.L13578
.L13586:
	ldr	r1, .L13590+28
	ldr	r0, .L13590+32
.LPIC3639:
	add	r1, pc, r1
	sub	r1, r1, #3184
.LPIC3638:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L13578
.L13585:
	ldr	r3, .L13590+36
	mov	r2, r1
	ldr	r0, .L13590+40
.LPIC3637:
	add	r3, pc, r3
	sub	r1, r3, #3184
.LPIC3636:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L13578
.L13591:
	.align	2
.L13590:
	.word	.LANCHOR1-(.LPIC3634+8)
	.word	.LANCHOR2-(.LPIC3642+8)
	.word	.LANCHOR2-(.LPIC3640+8)
	.word	.LANCHOR9-(.LPIC3645+8)
	.word	.LC199-(.LPIC3644+8)
	.word	.LANCHOR9-(.LPIC3647+8)
	.word	.LC200-(.LPIC3646+8)
	.word	.LANCHOR9-(.LPIC3639+8)
	.word	.LC21-(.LPIC3638+8)
	.word	.LANCHOR9-(.LPIC3637+8)
	.word	.LC89-(.LPIC3636+8)
	.fnend
	.size	ghsic_data_connect, .-ghsic_data_connect
	.align	2
	.global	ghsic_data_set_port_name
	.type	ghsic_data_set_port_name, %function
ghsic_data_set_port_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13599
.LPIC3648:
	add	r3, pc, r3
	ldr	r3, [r3, #3936]
	cmp	r3, #3
	bhi	.L13597
	cmp	r0, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L13598
	ldr	ip, .L13599+4
	mov	lr, #104
	mov	r1, r0
	mov	r2, #20
.LPIC3652:
	add	ip, pc, ip
	mla	r0, lr, r3, ip
	add	r0, r0, #1712
	add	r0, r0, #8
	bl	strlcpy(PLT)
.L13595:
	ldr	r4, .L13599+8
	mov	ip, #104
	mov	r2, #20
	ldr	r0, .L13599+12
	ldr	r1, .L13599+16
.LPIC3654:
	add	r4, pc, r4
	ldr	r3, [r4, #3936]
.LPIC3653:
	add	r0, pc, r0
.LPIC3655:
	add	r1, pc, r1
	mla	r0, ip, r3, r0
	add	r0, r0, #1712
	add	r0, r0, #8
	bl	strlcat(PLT)
	ldr	r3, [r4, #3936]
	add	r3, r3, #1
	str	r3, [r4, #3936]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L13598:
	ldr	r0, .L13599+20
	mov	ip, #104
	mov	r2, #20
.LPIC3651:
	add	r0, pc, r0
	mla	r0, ip, r3, r0
	add	r0, r0, #1712
	add	r0, r0, #8
	bl	strlcpy(PLT)
	b	.L13595
.L13597:
	ldr	r1, .L13599+24
	mov	r2, r3
	ldr	r0, .L13599+28
.LPIC3650:
	add	r1, pc, r1
.LPIC3649:
	add	r0, pc, r0
	sub	r1, r1, #3168
	b	printk(PLT)
.L13600:
	.align	2
.L13599:
	.word	.LANCHOR4-(.LPIC3648+8)
	.word	.LANCHOR1-(.LPIC3652+8)
	.word	.LANCHOR4-(.LPIC3654+8)
	.word	.LANCHOR1-(.LPIC3653+8)
	.word	.LC770-(.LPIC3655+8)
	.word	.LANCHOR1-(.LPIC3651+8)
	.word	.LANCHOR9-(.LPIC3650+8)
	.word	.LC767-(.LPIC3649+8)
	.fnend
	.size	ghsic_data_set_port_name, .-ghsic_data_set_port_name
	.align	2
	.global	ghsic_data_setup
	.type	ghsic_data_setup, %function
ghsic_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 72
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	clz	ip, r0
	mov	ip, ip, lsr #5
	str	lr, [sp, #32]
	ldr	lr, .L13626
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	.pad #84
	sub	sp, sp, #84
.LPIC3658:
	add	lr, pc, lr
	ldr	r3, [lr, #1632]
	str	r1, [sp, #36]
	add	r2, r0, r3
	str	r3, [sp, #68]
	cmp	r2, #4
	orrgt	ip, ip, #1
	str	r3, [sp, #76]
	cmp	ip, #0
	str	r2, [sp, #32]
	bne	.L13602
	cmp	r3, r2
	movcs	r0, r3
	bcs	.L13621
	ldr	r3, .L13626+4
	mov	r0, #104
	str	lr, [sp, #44]
	ldr	r2, [sp, #68]
	mov	r1, r3
	ldr	r3, .L13626+8
	mov	r9, r2
.LPIC3684:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
.LPIC3664:
	add	r3, pc, r3
	str	r1, [sp, #40]
	str	r3, [sp, #64]
	mov	r3, r2
	mul	r2, r0, r2
	ldr	r0, .L13626+12
	str	r2, [sp, #72]
.LPIC3667:
	add	r0, pc, r0
	str	r0, [sp, #48]
	ldr	r0, .L13626+16
.LPIC3668:
	add	r0, pc, r0
	str	r0, [sp, #52]
	add	r0, lr, r2
	ldr	r2, .L13626+20
	add	fp, r0, #1712
	mov	r0, lr
	add	fp, fp, #8
	mov	r10, fp
.LPIC3669:
	add	r2, pc, r2
	str	r2, [sp, #56]
	ldr	r2, .L13626+24
.LPIC3670:
	add	r2, pc, r2
	str	r2, [sp, #60]
	mov	r2, r1
	b	.L13608
.L13625:
	bl	kmem_cache_alloc_trace(PLT)
	subs	fp, r0, #0
	beq	.L13606
.L13605:
	mov	r1, #10
	mov	r2, #1
	str	r8, [sp]
	movt	r1, 2
	mov	r3, r8
	ldr	r0, [sp, #64]
	str	r10, [sp, #4]
	add	r7, fp, #92
	add	r6, fp, #108
	bl	__alloc_workqueue_key(PLT)
	ldr	r1, .L13626+28
	add	r2, fp, #64
	str	r0, [sp, #28]
	ldr	r3, .L13626+32
	sub	r0, r10, #80
	add	r5, fp, #140
	str	r2, [sp, #8]
	ldr	r2, [sp, #28]
	add	r4, fp, #124
	add	lr, fp, #24
	add	ip, fp, #56
.LPIC3672:
	add	r1, pc, r1
.LPIC3671:
	add	r3, pc, r3
	str	r1, [sp, #16]
	ldr	r1, .L13626+36
	cmp	r2, #0
	str	r3, [sp, #12]
	mov	r3, #65024
	movt	r3, 65535
	str	r2, [fp, #84]
.LPIC3673:
	add	r1, pc, r1
	str	r1, [sp, #20]
	ldr	r1, .L13626+40
.LPIC3674:
	add	r1, pc, r1
	str	r1, [sp, #24]
	add	r1, fp, #32
	beq	.L13624
	ldr	r2, [sp, #48]
	str	r3, [fp, #88]
	str	r3, [fp, #136]
	str	r3, [fp, #120]
	str	r9, [fp]
	add	r9, r9, #1
	strd	r2, [fp, #100]
	ldr	r2, [sp, #52]
	ldr	r3, [sp, #60]
	str	lr, [fp, #24]
	str	lr, [fp, #28]
	str	ip, [fp, #56]
	str	r2, [fp, #116]
	ldr	r2, [sp, #56]
	str	r3, [fp, #132]
	ldr	r3, [sp, #8]
	str	ip, [fp, #60]
	str	r1, [fp, #32]
	str	r2, [fp, #148]
	str	r1, [fp, #36]
	str	r3, [fp, #64]
	str	r8, [fp, #80]
	str	r8, [fp, #48]
	str	r7, [fp, #92]
	str	r7, [fp, #96]
	str	r6, [fp, #108]
	str	r6, [fp, #112]
	str	r5, [fp, #140]
	str	r5, [fp, #144]
	str	r4, [fp, #124]
	str	r4, [fp, #128]
	str	r8, [fp, #44]
	str	r8, [fp, #40]
	str	r8, [fp, #76]
	str	r3, [fp, #68]
	ldr	r3, [sp, #36]
	str	r10, [fp, #160]
	str	r8, [fp, #72]
	str	fp, [fp, #152]
	str	r3, [fp, #16]
	ldr	r3, [sp, #12]
	str	r3, [fp, #168]
	ldr	r3, [sp, #16]
	str	r3, [fp, #176]
	ldr	r3, [sp, #20]
	str	fp, [r10, #-84]
	str	r10, [r10, #-60]
	add	r10, r10, #104
	str	r8, [r10, #-156]
	str	r3, [r10, #-184]
	ldr	r3, [sp, #24]
	str	r3, [r10, #-180]
	bl	platform_driver_register(PLT)
	ldr	r2, [sp, #32]
	ldr	r3, .L13626+44
	cmp	r2, r9
.LPIC3675:
	add	r3, pc, r3
	bls	.L13613
	ldr	r3, [r3, #1632]
	ldr	r2, [sp, #40]
	ldr	r0, [sp, #44]
.L13608:
	ldr	ip, [r2, #32]
	mov	r8, #0
	add	r3, r3, #1
	movw	r1, #32976
	mov	r2, #220
	str	r3, [r0, #1632]
	cmp	ip, r8
	mov	r0, ip
	bne	.L13625
	mov	fp, #16
	b	.L13605
.L13602:
	ldr	r1, .L13626+48
	mov	r2, r0
	ldr	r0, .L13626+52
.LPIC3660:
	add	r1, pc, r1
	sub	r1, r1, #3136
.LPIC3659:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #21
.L13621:
	add	sp, sp, #84
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13613:
	ldr	r0, [sp, #68]
	b	.L13621
.L13624:
	ldr	r1, .L13626+56
	mov	r3, r10
	mov	r10, fp
	ldr	r0, .L13626+60
	mov	r2, r3
.LPIC3666:
	add	r1, pc, r1
.LPIC3665:
	add	r0, pc, r0
	sub	r1, r1, #3120
	bl	printk(PLT)
	mov	r0, r10
	bl	kfree(PLT)
.L13606:
	ldr	r5, .L13626+64
	mov	r2, r9
	ldr	r1, .L13626+68
	ldr	r0, .L13626+72
.LPIC3678:
	add	r5, pc, r5
	ldr	r3, [r5, #1632]
.LPIC3681:
	add	r1, pc, r1
	sub	r1, r1, #3136
.LPIC3680:
	add	r0, pc, r0
	sub	r1, r1, #4
	sub	r3, r3, #1
	str	r3, [r5, #1632]
	bl	printk(PLT)
	ldr	r2, [sp, #68]
	ldr	r3, [r5, #1632]
	cmp	r2, r3
	bcs	.L13611
	ldr	r3, [sp, #72]
	add	r4, r5, r3
	add	r4, r4, #1632
	add	r4, r4, #8
.L13610:
	ldr	r3, [sp, #76]
	ldr	r6, [r4, #-4]
	add	r3, r3, #1
	ldr	r0, [r6, #84]
	str	r3, [sp, #76]
	bl	destroy_workqueue(PLT)
	mov	r0, r6
	bl	kfree(PLT)
	cmp	r4, #0
	mov	r0, r4
	add	r4, r4, #104
	beq	.L13609
	bl	platform_driver_unregister(PLT)
.L13609:
	ldr	r3, [r5, #1632]
	ldr	r2, [sp, #76]
	cmp	r2, r3
	bcc	.L13610
.L13611:
	ldr	r3, .L13626+76
	mvn	r0, #11
	ldr	r2, [sp, #68]
.LPIC3677:
	add	r3, pc, r3
	str	r2, [r3, #1632]
	b	.L13621
.L13627:
	.align	2
.L13626:
	.word	.LANCHOR1-(.LPIC3658+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3684+8))
	.word	.LC195-(.LPIC3664+8)
	.word	ghsic_data_connect_w-(.LPIC3667+8)
	.word	ghsic_data_disconnect_w-(.LPIC3668+8)
	.word	ghsic_data_write_tohost-(.LPIC3669+8)
	.word	ghsic_data_write_tomdm-(.LPIC3670+8)
	.word	ghsic_data_unthrottle_tx-(.LPIC3672+8)
	.word	ghsic_data_receive-(.LPIC3671+8)
	.word	ghsic_data_probe-(.LPIC3673+8)
	.word	ghsic_data_remove-(.LPIC3674+8)
	.word	.LANCHOR1-(.LPIC3675+8)
	.word	.LANCHOR9-(.LPIC3660+8)
	.word	.LC762-(.LPIC3659+8)
	.word	.LANCHOR9-(.LPIC3666+8)
	.word	.LC769-(.LPIC3665+8)
	.word	.LANCHOR1-(.LPIC3678+8)
	.word	.LANCHOR9-(.LPIC3681+8)
	.word	.LC749-(.LPIC3680+8)
	.word	.LANCHOR1-(.LPIC3677+8)
	.fnend
	.size	ghsic_data_setup, .-ghsic_data_setup
	.align	2
	.global	ghsuart_ctrl_connect
	.type	ghsuart_ctrl_connect, %function
ghsuart_ctrl_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L13638
	clz	r2, r0
	strd	r6, [sp, #8]
	mov	r2, r2, lsr #5
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3685:
	add	r4, pc, r4
	ldr	r5, [r4, #2052]
	cmp	r1, r5
	movls	r5, r2
	orrhi	r5, r2, #1
	cmp	r5, #0
	bne	.L13636
	mov	r3, #84
	mla	r1, r3, r1, r4
	ldr	r4, [r1, #2056]
	cmp	r4, #0
	beq	.L13637
	add	r7, r4, #8
	mov	r6, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, .L13638+4
	mov	r1, r0
	mov	r0, r7
	ldr	r3, .L13638+8
	ldr	ip, [r6, #92]
.LPIC3691:
	add	r2, pc, r2
.LPIC3692:
	add	r3, pc, r3
	str	ip, [r4, #68]
	strd	r2, [r6, #96]
	str	r6, [r4, #12]
	str	r5, [r4, #100]
	str	r5, [r4, #96]
	str	r5, [r4, #104]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #88]
	ubfx	r0, r0, #1, #1
	cmp	r0, #0
	beq	.L13630
	mov	r0, #4
	ldr	r1, [r4, #32]
	add	r2, r4, #36
	bl	queue_work_on(PLT)
	mov	r0, r5
.L13630:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13636:
	ldr	r3, .L13638+12
	mov	r2, r1
	ldr	r0, .L13638+16
.LPIC3687:
	add	r3, pc, r3
	sub	r1, r3, #3088
.LPIC3686:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #18
	b	.L13630
.L13637:
	ldr	r1, .L13638+20
	ldr	r0, .L13638+24
.LPIC3690:
	add	r1, pc, r1
	sub	r1, r1, #3088
.LPIC3689:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #18
	b	.L13630
.L13639:
	.align	2
.L13638:
	.word	.LANCHOR1-(.LPIC3685+8)
	.word	ghsuart_send_cpkt_tomodem-(.LPIC3691+8)
	.word	ghsuart_send_cbits_tomodem-(.LPIC3692+8)
	.word	.LANCHOR9-(.LPIC3687+8)
	.word	.LC89-(.LPIC3686+8)
	.word	.LANCHOR9-(.LPIC3690+8)
	.word	.LC21-(.LPIC3689+8)
	.fnend
	.size	ghsuart_ctrl_connect, .-ghsuart_ctrl_connect
	.align	2
	.global	ghsuart_ctrl_disconnect
	.type	ghsuart_ctrl_disconnect, %function
ghsuart_ctrl_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13646
.LPIC3693:
	add	r3, pc, r3
	ldr	r2, [r3, #2052]
	cmp	r1, r2
	bhi	.L13644
	mov	ip, #84
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mla	r1, ip, r1, r3
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r1, #2056]
	cmp	r4, #0
	cmpne	r0, #0
	moveq	r6, #1
	movne	r6, #0
	beq	.L13645
	add	r7, r4, #8
	mov	r5, r0
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r6, [r5, #96]
	mov	r0, r7
	str	r6, [r5, #100]
	str	r6, [r4, #92]
	str	r6, [r4, #12]
	str	r6, [r4, #68]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	add	r2, r4, #52
	mov	r0, #4
	ldr	r1, [r4, #32]
	ldr	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	queue_work_on(PLT)
.L13644:
	ldr	r3, .L13646+4
	mov	r2, r1
	ldr	r0, .L13646+8
.LPIC3695:
	add	r3, pc, r3
.LPIC3694:
	add	r0, pc, r0
	sub	r1, r3, #3072
	b	printk(PLT)
.L13645:
	ldr	r1, .L13646+12
	ldr	r0, .L13646+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3698:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC3697:
	add	r0, pc, r0
	sub	r1, r1, #3072
	add	sp, sp, #24
	b	printk(PLT)
.L13647:
	.align	2
.L13646:
	.word	.LANCHOR1-(.LPIC3693+8)
	.word	.LANCHOR9-(.LPIC3695+8)
	.word	.LC89-(.LPIC3694+8)
	.word	.LANCHOR9-(.LPIC3698+8)
	.word	.LC753-(.LPIC3697+8)
	.fnend
	.size	ghsuart_ctrl_disconnect, .-ghsuart_ctrl_disconnect
	.align	2
	.global	ghsuart_ctrl_setup
	.type	ghsuart_ctrl_setup, %function
ghsuart_ctrl_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L13675
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	clz	r8, r0
	mov	r8, r8, lsr #5
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
.LPIC3699:
	add	ip, pc, ip
	str	lr, [sp, #32]
	.pad #52
	sub	sp, sp, #52
	ldr	r3, [ip, #2052]
	str	r1, [sp, #20]
	add	r2, r0, r3
	str	r3, [sp, #36]
	cmp	r2, #2
	orrgt	r8, r8, #1
	str	r3, [sp, #40]
	cmp	r8, #0
	str	r2, [sp, #12]
	bne	.L13649
	cmp	r3, r2
	movcs	r6, r3
	bcs	.L13668
	ldr	r1, [sp, #36]
	mov	lr, #84
	str	ip, [sp, #16]
	ldr	r2, .L13675+4
	ldr	r0, .L13675+8
	ldr	r9, .L13675+12
	mla	ip, lr, r1, ip
	mov	r3, r1
	mov	r7, r1
	ldr	r1, .L13675+16
.LPIC3711:
	add	r2, pc, r2
.LPIC3710:
	add	r0, pc, r0
	add	r2, r2, #3552
	ldr	r8, .L13675+20
.LPIC3726:
	ldr	r9, [pc, r9]		@ tls_load_dot_plus_eight
	str	r0, [sp, #28]
	mov	r0, r2
.LPIC3705:
	add	r1, pc, r1
.LPIC3706:
	add	r8, pc, r8
	str	r1, [sp, #24]
	add	r1, ip, #2048
	add	r2, r1, #12
	add	r1, r0, #4
	mov	r5, r2
	str	r2, [sp, #44]
	str	r1, [sp, #32]
	b	.L13655
.L13674:
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L13672
.L13652:
	mov	r1, #10
	mov	r2, #1
	str	r6, [sp]
	movt	r1, 2
	mov	r3, r6
	ldr	r0, [sp, #24]
	str	r8, [sp, #4]
	bl	__alloc_workqueue_key(PLT)
	mov	r3, r0
	ldr	r1, [sp, #28]
	add	r0, r4, #20
	cmp	r3, #0
	ldr	r2, [sp, #32]
	str	r3, [r4, #32]
	beq	.L13673
	ldr	r3, [sp, #20]
	str	r7, [r4]
	add	fp, r4, #40
	str	r6, [r4, #16]
	mov	r10, #42
	stmib	r4, {r3, r6}
	bl	__init_waitqueue_head(PLT)
	mov	r3, #65024
	ldr	ip, .L13675+24
	add	lr, r4, #56
	movt	r3, 65535
	ldr	r0, .L13675+28
	str	r4, [r4, #72]
	ldr	r1, .L13675+32
	str	fp, [r4, #40]
	str	r3, [r4, #36]
	ldr	r2, .L13675+36
	str	r3, [r4, #52]
	ldr	r3, .L13675+40
.LPIC3712:
	add	ip, pc, ip
.LPIC3713:
	add	r0, pc, r0
	str	fp, [r4, #44]
.LPIC3714:
	add	r1, pc, r1
	str	ip, [r4, #48]
.LPIC3715:
	add	r2, pc, r2
	str	r0, [r4, #64]
	mov	r0, r5
.LPIC3716:
	add	r3, pc, r3
	str	r1, [r4, #84]
	add	r5, r5, #84
	str	lr, [r4, #56]
	str	lr, [r4, #60]
	str	r10, [r4, #76]
	strd	r2, [r5, #-84]
	str	r4, [r5, #-88]
	str	r8, [r5, #-64]
	str	r6, [r5, #-56]
	bl	platform_driver_register(PLT)
	ldr	r3, .L13675+44
	cmp	r0, #0
.LPIC3718:
	add	r3, pc, r3
	blt	.L13661
	ldr	r2, [sp, #12]
	add	r7, r7, #1
	cmp	r2, r7
	bls	.L13662
	ldr	r3, [r3, #2052]
.L13655:
	ldr	ip, [r9, #28]
	mov	r6, #0
	add	r3, r3, #1
	ldr	r0, [sp, #16]
	movw	r1, #32976
	mov	r2, #108
	cmp	ip, r6
	str	r3, [r0, #2052]
	mov	r0, ip
	bne	.L13674
	mov	r4, #16
	b	.L13652
.L13661:
	mov	r6, r0
.L13653:
	ldr	r4, .L13675+48
	mov	r2, r7
	ldr	r1, .L13675+52
	ldr	r0, .L13675+56
.LPIC3721:
	add	r4, pc, r4
	ldr	r3, [r4, #2052]
.LPIC3724:
	add	r1, pc, r1
	sub	r1, r1, #3040
.LPIC3723:
	add	r0, pc, r0
	sub	r1, r1, #8
	sub	r3, r3, #1
	str	r3, [r4, #2052]
	bl	printk(PLT)
	ldr	r2, [sp, #36]
	ldr	r3, [r4, #2052]
	cmp	r2, r3
	bcs	.L13658
.L13665:
	ldr	r7, [sp, #44]
	ldr	r3, [sp, #40]
	ldr	r5, [r7, #-4]
	add	r3, r3, #1
	str	r3, [sp, #40]
	ldr	r0, [r5, #32]
	bl	destroy_workqueue(PLT)
	add	r3, r7, #84
	cmp	r7, #0
	mov	r0, r7
	str	r3, [sp, #44]
	beq	.L13656
	bl	platform_driver_unregister(PLT)
.L13656:
	mov	r0, r5
	bl	kfree(PLT)
	ldr	r2, [sp, #40]
	ldr	r3, [r4, #2052]
	cmp	r2, r3
	bcc	.L13665
.L13658:
	ldr	r3, .L13675+60
	ldr	r2, [sp, #36]
.LPIC3720:
	add	r3, pc, r3
	str	r2, [r3, #2052]
.L13668:
	mov	r0, r6
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13662:
	ldr	r6, [sp, #36]
	b	.L13668
.L13672:
	mvn	r6, #11
	b	.L13653
.L13673:
	ldr	r1, .L13675+64
	mov	r2, r8
	mvn	r6, #11
	ldr	r0, .L13675+68
.LPIC3708:
	add	r1, pc, r1
	sub	r1, r1, #3024
.LPIC3707:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	b	.L13653
.L13649:
	ldr	r1, .L13675+72
	mov	r2, r0
	mvn	r6, #21
	ldr	r0, .L13675+76
.LPIC3701:
	add	r1, pc, r1
	sub	r1, r1, #3040
.LPIC3700:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L13668
.L13676:
	.align	2
.L13675:
	.word	.LANCHOR1-(.LPIC3699+8)
	.word	.LANCHOR4-(.LPIC3711+8)
	.word	.LC477-(.LPIC3710+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3726+8))
	.word	.LC195-(.LPIC3705+8)
	.word	.LC771-(.LPIC3706+8)
	.word	ghsuart_ctrl_connect_w-(.LPIC3712+8)
	.word	ghsuart_ctrl_disconnect_w-(.LPIC3713+8)
	.word	ghsuart_ctrl_receive-(.LPIC3714+8)
	.word	ghsuart_ctrl_probe-(.LPIC3715+8)
	.word	ghsuart_ctrl_remove-(.LPIC3716+8)
	.word	.LANCHOR1-(.LPIC3718+8)
	.word	.LANCHOR1-(.LPIC3721+8)
	.word	.LANCHOR9-(.LPIC3724+8)
	.word	.LC749-(.LPIC3723+8)
	.word	.LANCHOR1-(.LPIC3720+8)
	.word	.LANCHOR9-(.LPIC3708+8)
	.word	.LC769-(.LPIC3707+8)
	.word	.LANCHOR9-(.LPIC3701+8)
	.word	.LC762-(.LPIC3700+8)
	.fnend
	.size	ghsuart_ctrl_setup, .-ghsuart_ctrl_setup
	.align	2
	.global	event_string
	.type	event_string, %function
event_string:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #8
	addls	pc, pc, r0, asl #2
	b	.L13678
.L13680:
	b	.L13689
	b	.L13681
	b	.L13682
	b	.L13683
	b	.L13684
	b	.L13685
	b	.L13686
	b	.L13687
	b	.L13688
	.p2align 1
.L13689:
	ldr	r0, .L13690
.LPIC3727:
	add	r0, pc, r0
	bx	lr
.L13681:
	ldr	r0, .L13690+4
.LPIC3728:
	add	r0, pc, r0
	bx	lr
.L13682:
	ldr	r0, .L13690+8
.LPIC3729:
	add	r0, pc, r0
	bx	lr
.L13683:
	ldr	r0, .L13690+12
.LPIC3730:
	add	r0, pc, r0
	bx	lr
.L13684:
	ldr	r0, .L13690+16
.LPIC3731:
	add	r0, pc, r0
	bx	lr
.L13685:
	ldr	r0, .L13690+20
.LPIC3732:
	add	r0, pc, r0
	bx	lr
.L13686:
	ldr	r0, .L13690+24
.LPIC3735:
	add	r0, pc, r0
	bx	lr
.L13687:
	ldr	r0, .L13690+28
.LPIC3734:
	add	r0, pc, r0
	bx	lr
.L13688:
	ldr	r0, .L13690+32
.LPIC3733:
	add	r0, pc, r0
	bx	lr
.L13678:
	ldr	r0, .L13690+36
.LPIC3736:
	add	r0, pc, r0
	bx	lr
.L13691:
	.align	2
.L13690:
	.word	.LC772-(.LPIC3727+8)
	.word	.LC773-(.LPIC3728+8)
	.word	.LC774-(.LPIC3729+8)
	.word	.LC775-(.LPIC3730+8)
	.word	.LC776-(.LPIC3731+8)
	.word	.LC777-(.LPIC3732+8)
	.word	.LC780-(.LPIC3735+8)
	.word	.LC779-(.LPIC3734+8)
	.word	.LC778-(.LPIC3733+8)
	.word	.LC10-(.LPIC3736+8)
	.fnend
	.size	event_string, .-event_string
	.align	2
	.global	ghsuart_data_disconnect
	.type	ghsuart_data_disconnect, %function
ghsuart_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13708
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	ip, #84
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
.LPIC3737:
	add	r3, pc, r3
	str	lr, [sp, #28]
	ldr	r2, [r3, #2224]
	mla	r3, ip, r1, r3
	cmp	r1, r2
	ldr	r4, [r3, #2228]
	bhi	.L13705
	cmp	r4, #0
	cmpne	r0, #0
	moveq	r6, #1
	movne	r6, #0
	beq	.L13706
	mov	r5, r0
	mov	r0, r4
	bl	ghsuart_data_free_buffers(PLT)
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L13695
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #8]
	str	r6, [r3]
.L13695:
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L13696
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #12]
	mov	r2, #0
	str	r2, [r3]
.L13696:
	ldr	r6, [r4, #16]
	mov	r3, #0
	str	r3, [r4, #4]
	cmp	r6, r3
	beq	.L13707
.L13697:
	add	r8, r4, #72
	mov	r5, #0
	mov	r0, r8
	add	r7, r4, #184
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r9, r0
	mov	r1, r7
	str	r5, [r4, #8]
	mov	r0, #2
	str	r5, [r4, #192]
	add	r6, r4, #104
	bl	_clear_bit(PLT)
	mov	r1, r9
	mov	r0, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r8, r0
	mov	r1, r7
	str	r5, [r4, #12]
	mov	r0, #1
	bl	_clear_bit(PLT)
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrd	r6, [sp, #8]
	add	r2, r4, #128
	mov	r0, #4
	ldr	r1, [r4, #108]
	ldrd	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	queue_work_on(PLT)
.L13707:
	add	r7, r4, #20
	mov	r0, r7
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r6, [r5, #140]
	mov	r0, r7
	str	r6, [r4, #196]
	str	r6, [r4, #24]
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L13697
.L13706:
	ldr	r1, .L13708+4
	ldr	r0, .L13708+8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3742:
	add	r1, pc, r1
	ldrd	r8, [sp, #16]
	sub	r1, r1, #2992
	ldr	r10, [sp, #24]
.LPIC3741:
	add	r0, pc, r0
	ldr	lr, [sp, #28]
	sub	r1, r1, #12
	add	sp, sp, #32
	b	printk(PLT)
.L13705:
	ldr	r3, .L13708+12
	mov	r2, r1
	ldr	r0, .L13708+16
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC3740:
	add	r3, pc, r3
	ldrd	r8, [sp, #16]
	sub	r1, r3, #2992
	ldr	r10, [sp, #24]
.LPIC3739:
	add	r0, pc, r0
	ldr	lr, [sp, #28]
	sub	r1, r1, #12
	add	sp, sp, #32
	b	printk(PLT)
.L13709:
	.align	2
.L13708:
	.word	.LANCHOR1-(.LPIC3737+8)
	.word	.LANCHOR9-(.LPIC3742+8)
	.word	.LC21-(.LPIC3741+8)
	.word	.LANCHOR9-(.LPIC3740+8)
	.word	.LC89-(.LPIC3739+8)
	.fnend
	.size	ghsuart_data_disconnect, .-ghsuart_data_disconnect
	.align	2
	.type	frmnet_disable, %function
frmnet_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	strd	r8, [sp, #16]
	add	r8, r5, #132
	strd	r6, [sp, #8]
	add	r7, r5, #144
	str	lr, [sp, #28]
	str	r10, [sp, #24]
	ldr	r0, [r0, #136]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r5, #136]
	mov	r3, #0
	mov	r0, r8
	str	r3, [r2]
	str	r3, [r5, #120]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #144]
	mov	r9, r0
	cmp	r4, r7
	beq	.L13720
.L13719:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del(PLT)
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r6
	bl	kfree(PLT)
	ldr	r4, [r5, #144]
	cmp	r4, r7
	bne	.L13719
.L13720:
	mov	r3, #0
	mov	r0, r8
	mov	r1, r9
	str	r3, [r5, #152]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldrb	r3, [r5, #116]	@ zero_extendqisi2
	ldr	r1, .L13756
	mov	r2, r3, asl #3
	mov	r3, r3, asl #5
.LPIC3765:
	add	r1, pc, r1
	rsb	r0, r2, r3
	add	r1, r1, r0
	ldr	ip, [r1, #2512]
	ldr	r4, [r1, #2508]
	ldr	r1, [r1, #2520]
	sub	r0, ip, #3
	cmp	r0, #7
	addls	pc, pc, r0, asl #2
	b	.L13712
.L13714:
	b	.L13713
	b	.L13715
	b	.L13712
	b	.L13712
	b	.L13712
	b	.L13716
	b	.L13717
	b	.L13718
	.p2align 1
.L13715:
	mov	r0, r5
	bl	gqti_ctrl_disconnect(PLT)
	ldrb	r3, [r5, #116]	@ zero_extendqisi2
	mov	r2, r3, asl #3
	mov	r3, r3, asl #5
.L13718:
	ldr	r1, .L13756+4
	rsb	r3, r2, r3
	sub	r0, r4, #5
.LPIC3770:
	add	r1, pc, r1
	add	r3, r1, r3
	ldr	r1, [r3, #2516]
	cmp	r0, #5
	addls	pc, pc, r0, asl #2
	b	.L13733
.L13735:
	b	.L13734
	b	.L13734
	b	.L13734
	b	.L13736
	b	.L13737
	b	.L13710
	.p2align 1
.L13710:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L13734:
	mov	r0, r5
	mov	r2, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	uxtb	r1, r1
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	gbam_disconnect(PLT)
.L13736:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	ghsic_data_disconnect(PLT)
.L13737:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	ghsuart_data_disconnect(PLT)
.L13717:
	mov	r0, r5
	bl	ghsuart_ctrl_disconnect(PLT)
	ldrb	r3, [r5, #116]	@ zero_extendqisi2
	mov	r2, r3, asl #3
	mov	r3, r3, asl #5
	b	.L13718
.L13713:
	uxtb	r1, r1
	mov	r0, r5
	bl	gsmd_ctrl_disconnect(PLT)
	ldrb	r3, [r5, #116]	@ zero_extendqisi2
	mov	r2, r3, asl #3
	mov	r3, r3, asl #5
	b	.L13718
.L13716:
	mov	r0, r5
	bl	ghsic_ctrl_disconnect(PLT)
	ldrb	r3, [r5, #116]	@ zero_extendqisi2
	mov	r2, r3, asl #3
	mov	r3, r3, asl #5
	b	.L13718
.L13712:
	sub	ip, ip, #1
	cmp	ip, #9
	addls	pc, pc, ip, asl #2
	b	.L13721
.L13723:
	b	.L13751
	b	.L13724
	b	.L13725
	b	.L13726
	b	.L13727
	b	.L13728
	b	.L13729
	b	.L13730
	b	.L13731
	b	.L13732
	.p2align 1
.L13733:
	sub	r4, r4, #1
	cmp	r4, #9
	addls	pc, pc, r4, asl #2
	b	.L13739
.L13741:
	b	.L13752
	b	.L13742
	b	.L13743
	b	.L13744
	b	.L13745
	b	.L13746
	b	.L13747
	b	.L13748
	b	.L13749
	b	.L13750
	.p2align 1
.L13752:
	ldr	r2, .L13756+8
.LPIC3754:
	add	r2, pc, r2
.L13740:
	ldr	r1, .L13756+12
	ldr	r0, .L13756+16
.LPIC3772:
	add	r1, pc, r1
.LPIC3771:
	add	r0, pc, r0
.L13755:
	sub	r1, r1, #2976
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	sub	r1, r1, #4
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L13751:
	ldr	r2, .L13756+20
.LPIC3743:
	add	r2, pc, r2
.L13722:
	ldr	r1, .L13756+24
	ldr	r0, .L13756+28
.LPIC3769:
	add	r1, pc, r1
.LPIC3768:
	add	r0, pc, r0
	b	.L13755
.L13732:
	ldr	r2, .L13756+32
.LPIC3752:
	add	r2, pc, r2
	b	.L13722
.L13731:
	ldr	r2, .L13756+36
.LPIC3751:
	add	r2, pc, r2
	b	.L13722
.L13730:
	ldr	r2, .L13756+40
.LPIC3750:
	add	r2, pc, r2
	b	.L13722
.L13729:
	ldr	r2, .L13756+44
.LPIC3749:
	add	r2, pc, r2
	b	.L13722
.L13724:
	ldr	r2, .L13756+48
.LPIC3744:
	add	r2, pc, r2
	b	.L13722
.L13750:
	ldr	r2, .L13756+52
.LPIC3763:
	add	r2, pc, r2
	b	.L13740
.L13728:
	ldr	r2, .L13756+56
.LPIC3748:
	add	r2, pc, r2
	b	.L13722
.L13727:
	ldr	r2, .L13756+60
.LPIC3747:
	add	r2, pc, r2
	b	.L13722
.L13726:
	ldr	r2, .L13756+64
.LPIC3746:
	add	r2, pc, r2
	b	.L13722
.L13725:
	ldr	r2, .L13756+68
.LPIC3745:
	add	r2, pc, r2
	b	.L13722
.L13749:
	ldr	r2, .L13756+72
.LPIC3762:
	add	r2, pc, r2
	b	.L13740
.L13748:
	ldr	r2, .L13756+76
.LPIC3761:
	add	r2, pc, r2
	b	.L13740
.L13747:
	ldr	r2, .L13756+80
.LPIC3760:
	add	r2, pc, r2
	b	.L13740
.L13746:
	ldr	r2, .L13756+84
.LPIC3759:
	add	r2, pc, r2
	b	.L13740
.L13745:
	ldr	r2, .L13756+88
.LPIC3758:
	add	r2, pc, r2
	b	.L13740
.L13744:
	ldr	r2, .L13756+92
.LPIC3757:
	add	r2, pc, r2
	b	.L13740
.L13743:
	ldr	r2, .L13756+96
.LPIC3756:
	add	r2, pc, r2
	b	.L13740
.L13742:
	ldr	r2, .L13756+100
.LPIC3755:
	add	r2, pc, r2
	b	.L13740
.L13739:
	ldr	r2, .L13756+104
.LPIC3764:
	add	r2, pc, r2
	b	.L13740
.L13721:
	ldr	r2, .L13756+108
.LPIC3753:
	add	r2, pc, r2
	b	.L13722
.L13757:
	.align	2
.L13756:
	.word	.LANCHOR1-(.LPIC3765+8)
	.word	.LANCHOR1-(.LPIC3770+8)
	.word	.LC0-(.LPIC3754+8)
	.word	.LANCHOR9-(.LPIC3772+8)
	.word	.LC759-(.LPIC3771+8)
	.word	.LC0-(.LPIC3743+8)
	.word	.LANCHOR9-(.LPIC3769+8)
	.word	.LC759-(.LPIC3768+8)
	.word	.LC9-(.LPIC3752+8)
	.word	.LC8-(.LPIC3751+8)
	.word	.LC7-(.LPIC3750+8)
	.word	.LC6-(.LPIC3749+8)
	.word	.LC1-(.LPIC3744+8)
	.word	.LC9-(.LPIC3763+8)
	.word	.LC5-(.LPIC3748+8)
	.word	.LC4-(.LPIC3747+8)
	.word	.LC3-(.LPIC3746+8)
	.word	.LC2-(.LPIC3745+8)
	.word	.LC8-(.LPIC3762+8)
	.word	.LC7-(.LPIC3761+8)
	.word	.LC6-(.LPIC3760+8)
	.word	.LC5-(.LPIC3759+8)
	.word	.LC4-(.LPIC3758+8)
	.word	.LC3-(.LPIC3757+8)
	.word	.LC2-(.LPIC3756+8)
	.word	.LC1-(.LPIC3755+8)
	.word	.LC10-(.LPIC3764+8)
	.word	.LC10-(.LPIC3753+8)
	.fnend
	.size	frmnet_disable, .-frmnet_disable
	.align	2
	.global	ghsuart_data_connect
	.type	ghsuart_data_connect, %function
ghsuart_data_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L13772
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	ip, #84
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC3773:
	add	r3, pc, r3
	ldr	r2, [r3, #2224]
	mla	r3, ip, r1, r3
	cmp	r1, r2
	ldr	r4, [r3, #2228]
	bhi	.L13767
	cmp	r4, #0
	cmpne	r0, #0
	mov	r5, r0
	beq	.L13768
	ldr	r3, [r4, #16]
	add	r7, r4, #72
	add	r6, r4, #104
	mov	r0, r7
	cmp	r3, #0
	beq	.L13769
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #84]
	mov	r1, r0
	mov	r0, r7
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L13772+4
.LPIC3782:
	add	r3, pc, r3
	ldr	r2, [r3, #2568]
	ldr	r3, [r3, #2572]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r5, #84]
	str	r4, [r3]
	ldr	r3, [r5, #88]
	str	r4, [r3]
.L13763:
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L13770
	ldr	r0, [r4, #12]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L13771
	mov	r3, #1
	mov	r0, r7
	str	r3, [r4, #4]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r5, [r4, #208]
	mov	r0, r7
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r1, r0
	str	r5, [r4, #204]
	mov	r0, r6
	str	r5, [r4, #212]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #4
	ldr	r1, [r4, #108]
	add	r2, r4, #112
	bl	queue_work_on(PLT)
	mov	r0, r5
.L13760:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L13769:
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #88]
	mov	r1, r0
	mov	r0, r7
	add	r8, r4, #20
	str	r3, [r4, #8]
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r5, #92]
	mov	r1, r0
	mov	r0, r6
	str	r3, [r4, #12]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, .L13772+8
	mov	r0, r8
.LPIC3779:
	add	r3, pc, r3
	ldr	r2, [r3, #2560]
	ldr	r3, [r3, #2564]
	str	r2, [r4, #44]
	str	r3, [r4, #76]
	ldr	r3, [r5, #88]
	str	r4, [r3]
	ldr	r3, [r5, #92]
	str	r4, [r3]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, .L13772+12
	mov	r1, r0
	mov	r0, r8
.LPIC3781:
	add	r3, pc, r3
	str	r3, [r5, #140]
	str	r5, [r4, #24]
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L13763
.L13770:
	ldr	r1, .L13772+16
	ldr	r0, .L13772+20
	ldr	r2, [r4, #8]
.LPIC3785:
	add	r1, pc, r1
	sub	r1, r1, #2944
.LPIC3784:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mov	r0, r5
	b	.L13760
.L13771:
	ldr	r1, .L13772+24
	ldr	r0, .L13772+28
	ldr	r2, [r4, #12]
.LPIC3787:
	add	r1, pc, r1
	sub	r1, r1, #2944
.LPIC3786:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	r0, [r4, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r5
	b	.L13760
.L13768:
	ldr	r1, .L13772+32
	ldr	r0, .L13772+36
.LPIC3778:
	add	r1, pc, r1
	sub	r1, r1, #2944
.LPIC3777:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #18
	b	.L13760
.L13767:
	ldr	r3, .L13772+40
	mov	r2, r1
	ldr	r0, .L13772+44
.LPIC3776:
	add	r3, pc, r3
	sub	r1, r3, #2944
.LPIC3775:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #18
	b	.L13760
.L13773:
	.align	2
.L13772:
	.word	.LANCHOR1-(.LPIC3773+8)
	.word	.LANCHOR2-(.LPIC3782+8)
	.word	.LANCHOR2-(.LPIC3779+8)
	.word	ghsuart_send_controlbits_tomodem-(.LPIC3781+8)
	.word	.LANCHOR9-(.LPIC3785+8)
	.word	.LC199-(.LPIC3784+8)
	.word	.LANCHOR9-(.LPIC3787+8)
	.word	.LC200-(.LPIC3786+8)
	.word	.LANCHOR9-(.LPIC3778+8)
	.word	.LC21-(.LPIC3777+8)
	.word	.LANCHOR9-(.LPIC3776+8)
	.word	.LC89-(.LPIC3775+8)
	.fnend
	.size	ghsuart_data_connect, .-ghsuart_data_connect
	.align	2
	.type	frmnet_set_alt, %function
frmnet_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r2, [r0, #136]
	.pad #20
	sub	sp, sp, #20
	ldr	r5, [r0, #128]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L13775
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #136]
.L13775:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	subs	r8, r0, #0
	bne	.L13869
	ldr	r0, [r4, #136]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L13870
	ldr	r3, [r4, #136]
	str	r4, [r3]
	ldr	r2, [r4, #84]
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L13779
	ldr	r3, [r4, #88]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L13779
.L13780:
	mov	r3, #1
	mov	r7, r4
	str	r3, [r4, #120]
	ldr	r5, [r7, #144]!
	cmp	r5, r7
	beq	.L13839
	add	r6, r4, #132
	mvn	r9, #94
	b	.L13835
.L13868:
	mov	r1, r0
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
.L13831:
	ldr	r5, [r5]
	cmp	r5, r7
	beq	.L13839
.L13835:
	mov	r0, r6
	ldr	r10, [r4, #140]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #120]
	cmp	r10, #0
	cmpne	r2, #0
	moveq	r2, #1
	movne	r2, #0
	beq	.L13868
	ldr	r3, [r10]
	cmp	r3, #0
	beq	.L13868
	ldr	r3, [r4, #152]
	add	r3, r3, #1
	cmp	r3, #1
	str	r3, [r4, #152]
	bne	.L13868
	ldr	ip, [r10]
	mov	r1, r0
	mov	r0, r6
	strb	r2, [ip, #2]
	strb	r2, [ip, #3]
	strb	r9, [ip]
	strb	r3, [ip, #1]
	ldrh	r3, [r4, #112]
	strb	r2, [ip, #6]
	strb	r2, [ip, #7]
	strh	r3, [ip, #4]	@ unaligned
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r0, [r4, #136]
	mov	r2, #32
	ldr	r1, [r4, #140]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	beq	.L13831
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r10, [r4, #144]
	mov	fp, r0
	cmp	r10, r7
	beq	.L13833
	ldr	r3, [r4, #152]
	cmp	r3, #0
	beq	.L13833
	sub	r3, r3, #1
	sub	r2, r10, #8
	mov	r0, r10
	str	r3, [r4, #152]
	str	r2, [sp, #12]
	bl	list_del(PLT)
	ldr	r0, [r10, #-8]
	bl	kfree(PLT)
	ldr	r2, [sp, #12]
	mov	r0, r2
	bl	kfree(PLT)
.L13833:
	mov	r1, fp
	mov	r0, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r5, [r5]
	cmp	r5, r7
	bne	.L13835
.L13839:
	mov	r6, r8
.L13777:
	mov	r0, r6
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13869:
	ldr	r2, [r4, #136]
	mov	r0, #0
	mov	r3, r8
	ldr	r1, .L13873
	mov	r6, r8
	str	r0, [r2, #28]
	ldr	r0, [r5]
	ldr	r2, [r4, #136]
.LPIC3810:
	add	r1, pc, r1
	add	r0, r0, #32
	ldr	r2, [r2, #4]
	bl	dev_err(PLT)
	b	.L13777
.L13779:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L13782
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #88]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L13782
	ldrb	r1, [r4, #116]	@ zero_extendqisi2
	ldr	r3, .L13873+4
	ldr	ip, [r4, #128]
	mov	r0, r1, asl #3
	mov	r2, r1, asl #5
.LPIC3813:
	add	r3, pc, r3
	rsb	r1, r0, r2
	ldr	r5, [ip]
	add	r3, r3, r1
	ldr	r6, [r3, #2512]
	ldr	r7, [r3, #2508]
	ldr	r1, [r3, #2520]
	sub	r3, r6, #3
	cmp	r3, #7
	addls	pc, pc, r3, asl #2
	b	.L13783
.L13785:
	b	.L13784
	b	.L13786
	b	.L13783
	b	.L13783
	b	.L13783
	b	.L13787
	b	.L13788
	b	.L13789
	.p2align 1
.L13788:
	mov	r0, r4
	bl	ghsuart_ctrl_connect(PLT)
	subs	r2, r0, #0
	bne	.L13793
.L13866:
	ldrb	r1, [r4, #116]	@ zero_extendqisi2
	mov	r0, r1, asl #3
	mov	r2, r1, asl #5
.L13789:
	ldr	r3, .L13873+8
	rsb	r2, r0, r2
	sub	r1, r7, #5
.LPIC3826:
	add	r3, pc, r3
	add	r3, r3, r2
	ldr	r9, [r3, #2516]
	cmp	r1, #5
	addls	pc, pc, r1, asl #2
	b	.L13806
.L13808:
	b	.L13837
	b	.L13809
	b	.L13810
	b	.L13811
	b	.L13812
	b	.L13780
	.p2align 1
.L13787:
	mov	r0, r4
	bl	ghsic_ctrl_connect(PLT)
	subs	r2, r0, #0
	beq	.L13866
	ldr	r1, .L13873+12
	mov	r8, r2
	ldr	r0, .L13873+16
.LPIC3821:
	add	r1, pc, r1
	sub	r1, r1, #2912
.LPIC3820:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L13780
.L13784:
	mov	r0, r4
	bl	gsmd_ctrl_connect(PLT)
	subs	r2, r0, #0
	beq	.L13866
	ldr	r1, .L13873+20
	mov	r8, r2
	ldr	r0, .L13873+24
.LPIC3817:
	add	r1, pc, r1
	sub	r1, r1, #2912
.LPIC3816:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L13780
.L13786:
	mov	r0, r4
	bl	gqti_ctrl_connect(PLT)
	subs	r2, r0, #0
	beq	.L13866
	ldr	r1, .L13873+28
	mov	r8, r2
	ldr	r0, .L13873+32
.LPIC3819:
	add	r1, pc, r1
	sub	r1, r1, #2912
.LPIC3818:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L13780
.L13837:
	mov	r5, #0
	mov	r3, r5
.L13807:
	uxtb	r9, r9
	str	r5, [sp]
	mov	r2, r7
	mov	r0, r4
	mov	r1, r9
	bl	gbam_connect(PLT)
	subs	r8, r0, #0
	beq	.L13780
	ldr	r1, .L13873+36
	mov	r2, r8
	ldr	r0, .L13873+40
.LPIC3830:
	add	r1, pc, r1
	sub	r1, r1, #2912
.LPIC3829:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	mov	r1, r9
	bl	gsmd_ctrl_disconnect(PLT)
	b	.L13780
.L13810:
	mov	r1, #2
	mov	r2, #0
	ldr	r0, [r5, #28]
	mov	r3, r9
	bl	usb_bam_get_connection_idx(PLT)
	mov	r7, r0
	mov	r3, r9
	ldr	r0, [r5, #28]
	mov	r1, #2
	mov	r2, #1
	bl	usb_bam_get_connection_idx(PLT)
	orrs	r3, r7, r0
	bmi	.L13871
	uxtb	r0, r0
	uxtb	r9, r9
	uxtb	r3, r7
	mov	r1, r9
	str	r0, [sp]
	mov	r2, #7
	mov	r0, r4
	bl	gbam_connect(PLT)
	subs	r5, r0, #0
	beq	.L13780
	ldr	r1, .L13873+44
	mov	r2, r5
	ldr	r0, .L13873+48
.LPIC3834:
	add	r1, pc, r1
	sub	r1, r1, #2912
.LPIC3833:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	cmp	r6, #4
	beq	.L13872
	mov	r1, r9
	mov	r0, r4
	mov	r8, r5
	bl	gsmd_ctrl_disconnect(PLT)
	b	.L13780
.L13809:
	mov	r1, #0
	mov	r3, r9
	ldr	r0, [r5, #28]
	mov	r2, r1
	bl	usb_bam_get_connection_idx(PLT)
	mov	r6, r0
	mov	r3, r9
	ldr	r0, [r5, #28]
	mov	r1, #0
	mov	r2, #1
	bl	usb_bam_get_connection_idx(PLT)
	orrs	r3, r6, r0
	bmi	.L13813
	uxtb	r3, r6
	uxtb	r5, r0
	b	.L13807
.L13812:
	mov	r0, r4
	mov	r1, r9
	bl	ghsuart_data_connect(PLT)
	subs	r8, r0, #0
	beq	.L13780
	ldr	r1, .L13873+52
	mov	r2, r8
	ldr	r0, .L13873+56
.LPIC3838:
	add	r1, pc, r1
	sub	r1, r1, #2912
.LPIC3837:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	mov	r1, r9
	bl	ghsuart_ctrl_disconnect(PLT)
	b	.L13780
.L13811:
	mov	r0, r4
	mov	r1, r9
	bl	ghsic_data_connect(PLT)
	subs	r8, r0, #0
	beq	.L13780
	ldr	r1, .L13873+60
	mov	r2, r8
	ldr	r0, .L13873+64
.LPIC3836:
	add	r1, pc, r1
	sub	r1, r1, #2912
.LPIC3835:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	mov	r1, r9
	bl	ghsic_ctrl_disconnect(PLT)
	b	.L13780
.L13783:
	sub	r6, r6, #1
	cmp	r6, #9
	addls	pc, pc, r6, asl #2
	b	.L13794
.L13796:
	b	.L13836
	b	.L13797
	b	.L13798
	b	.L13799
	b	.L13800
	b	.L13801
	b	.L13802
	b	.L13803
	b	.L13804
	b	.L13805
	.p2align 1
.L13836:
	ldr	r2, .L13873+68
.LPIC3788:
	add	r2, pc, r2
.L13795:
	ldr	r1, .L13873+72
	mvn	r8, #18
	ldr	r0, .L13873+76
.LPIC3825:
	add	r1, pc, r1
	sub	r1, r1, #2912
.LPIC3824:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L13780
.L13805:
	ldr	r2, .L13873+80
.LPIC3797:
	add	r2, pc, r2
	b	.L13795
.L13804:
	ldr	r2, .L13873+84
.LPIC3796:
	add	r2, pc, r2
	b	.L13795
.L13803:
	ldr	r2, .L13873+88
.LPIC3795:
	add	r2, pc, r2
	b	.L13795
.L13802:
	ldr	r2, .L13873+92
.LPIC3794:
	add	r2, pc, r2
	b	.L13795
.L13801:
	ldr	r2, .L13873+96
.LPIC3793:
	add	r2, pc, r2
	b	.L13795
.L13800:
	ldr	r2, .L13873+100
.LPIC3792:
	add	r2, pc, r2
	b	.L13795
.L13799:
	ldr	r2, .L13873+104
.LPIC3791:
	add	r2, pc, r2
	b	.L13795
.L13798:
	ldr	r2, .L13873+108
.LPIC3790:
	add	r2, pc, r2
	b	.L13795
.L13797:
	ldr	r2, .L13873+112
.LPIC3789:
	add	r2, pc, r2
	b	.L13795
.L13782:
	ldr	r2, [r4, #84]
	mov	r3, #0
	mvn	r6, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #88]
	str	r3, [r2, #28]
	b	.L13777
.L13806:
	sub	r7, r7, #1
	cmp	r7, #9
	addls	pc, pc, r7, asl #2
	b	.L13817
.L13819:
	b	.L13838
	b	.L13820
	b	.L13821
	b	.L13822
	b	.L13823
	b	.L13824
	b	.L13825
	b	.L13826
	b	.L13827
	b	.L13828
	.p2align 1
.L13828:
	ldr	r2, .L13873+116
.LPIC3808:
	add	r2, pc, r2
.L13818:
	ldr	r1, .L13873+120
	mvn	r8, #18
	ldr	r0, .L13873+124
.LPIC3840:
	add	r1, pc, r1
	sub	r1, r1, #2912
.LPIC3839:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L13780
.L13827:
	ldr	r2, .L13873+128
.LPIC3807:
	add	r2, pc, r2
	b	.L13818
.L13826:
	ldr	r2, .L13873+132
.LPIC3806:
	add	r2, pc, r2
	b	.L13818
.L13825:
	ldr	r2, .L13873+136
.LPIC3805:
	add	r2, pc, r2
	b	.L13818
.L13824:
	ldr	r2, .L13873+140
.LPIC3804:
	add	r2, pc, r2
	b	.L13818
.L13823:
	ldr	r2, .L13873+144
.LPIC3803:
	add	r2, pc, r2
	b	.L13818
.L13822:
	ldr	r2, .L13873+148
.LPIC3802:
	add	r2, pc, r2
	b	.L13818
.L13821:
	ldr	r2, .L13873+152
.LPIC3801:
	add	r2, pc, r2
	b	.L13818
.L13820:
	ldr	r2, .L13873+156
.LPIC3800:
	add	r2, pc, r2
	b	.L13818
.L13838:
	ldr	r2, .L13873+160
.LPIC3799:
	add	r2, pc, r2
	b	.L13818
.L13817:
	ldr	r2, .L13873+164
.LPIC3809:
	add	r2, pc, r2
	b	.L13818
.L13794:
	ldr	r2, .L13873+168
.LPIC3798:
	add	r2, pc, r2
	b	.L13795
.L13793:
	ldr	r1, .L13873+172
	mov	r8, r2
	ldr	r0, .L13873+176
.LPIC3823:
	add	r1, pc, r1
	sub	r1, r1, #2912
.LPIC3822:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L13780
.L13870:
	ldr	r1, .L13873+180
	mov	r3, r6
	ldr	r2, [r4, #136]
	ldr	r0, .L13873+184
.LPIC3812:
	add	r1, pc, r1
	sub	r1, r1, #2928
	ldr	r2, [r2, #4]
	sub	r1, r1, #4
.LPIC3811:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L13777
.L13813:
	ldr	r1, .L13873+188
	ldr	r0, .L13873+192
.LPIC3828:
	add	r1, pc, r1
.LPIC3827:
	add	r0, pc, r0
.L13867:
	sub	r1, r1, #2912
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	uxtb	r1, r9
	bl	gsmd_ctrl_disconnect(PLT)
	b	.L13780
.L13872:
	mov	r0, r4
	mov	r8, r5
	bl	gqti_ctrl_disconnect(PLT)
	b	.L13780
.L13871:
	ldr	r1, .L13873+196
	ldr	r0, .L13873+200
.LPIC3832:
	add	r1, pc, r1
.LPIC3831:
	add	r0, pc, r0
	b	.L13867
.L13874:
	.align	2
.L13873:
	.word	.LC531-(.LPIC3810+8)
	.word	.LANCHOR1-(.LPIC3813+8)
	.word	.LANCHOR1-(.LPIC3826+8)
	.word	.LANCHOR9-(.LPIC3821+8)
	.word	.LC783-(.LPIC3820+8)
	.word	.LANCHOR9-(.LPIC3817+8)
	.word	.LC781-(.LPIC3816+8)
	.word	.LANCHOR9-(.LPIC3819+8)
	.word	.LC782-(.LPIC3818+8)
	.word	.LANCHOR9-(.LPIC3830+8)
	.word	.LC786-(.LPIC3829+8)
	.word	.LANCHOR9-(.LPIC3834+8)
	.word	.LC786-(.LPIC3833+8)
	.word	.LANCHOR9-(.LPIC3838+8)
	.word	.LC788-(.LPIC3837+8)
	.word	.LANCHOR9-(.LPIC3836+8)
	.word	.LC787-(.LPIC3835+8)
	.word	.LC0-(.LPIC3788+8)
	.word	.LANCHOR9-(.LPIC3825+8)
	.word	.LC759-(.LPIC3824+8)
	.word	.LC9-(.LPIC3797+8)
	.word	.LC8-(.LPIC3796+8)
	.word	.LC7-(.LPIC3795+8)
	.word	.LC6-(.LPIC3794+8)
	.word	.LC5-(.LPIC3793+8)
	.word	.LC4-(.LPIC3792+8)
	.word	.LC3-(.LPIC3791+8)
	.word	.LC2-(.LPIC3790+8)
	.word	.LC1-(.LPIC3789+8)
	.word	.LC9-(.LPIC3808+8)
	.word	.LANCHOR9-(.LPIC3840+8)
	.word	.LC759-(.LPIC3839+8)
	.word	.LC8-(.LPIC3807+8)
	.word	.LC7-(.LPIC3806+8)
	.word	.LC6-(.LPIC3805+8)
	.word	.LC5-(.LPIC3804+8)
	.word	.LC4-(.LPIC3803+8)
	.word	.LC3-(.LPIC3802+8)
	.word	.LC2-(.LPIC3801+8)
	.word	.LC1-(.LPIC3800+8)
	.word	.LC0-(.LPIC3799+8)
	.word	.LC10-(.LPIC3809+8)
	.word	.LC10-(.LPIC3798+8)
	.word	.LANCHOR9-(.LPIC3823+8)
	.word	.LC784-(.LPIC3822+8)
	.word	.LANCHOR9-(.LPIC3812+8)
	.word	.LC540-(.LPIC3811+8)
	.word	.LANCHOR9-(.LPIC3828+8)
	.word	.LC785-(.LPIC3827+8)
	.word	.LANCHOR9-(.LPIC3832+8)
	.word	.LC785-(.LPIC3831+8)
	.fnend
	.size	frmnet_set_alt, .-frmnet_set_alt
	.align	2
	.global	ghsuart_data_setup
	.type	ghsuart_data_setup, %function
ghsuart_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L13903
	clz	ip, r0
	strd	r8, [sp, #16]
	mov	ip, ip, lsr #5
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
.LPIC3841:
	add	r5, pc, r5
	str	lr, [sp, #32]
	.pad #60
	sub	sp, sp, #60
	ldr	r3, [r5, #2224]
	str	r1, [sp, #20]
	add	r4, r0, r3
	mov	r2, r3
	str	r3, [sp, #44]
	str	r3, [sp, #48]
	cmp	r4, #4
	movle	r3, ip
	orrgt	r3, ip, #1
	cmp	r3, #0
	bne	.L13876
	cmp	r2, r4
	movge	r0, r2
	bge	.L13898
	sub	r3, r4, #1
	mov	r1, #84
	str	r5, [sp, #16]
	ldr	lr, .L13903+4
	str	r3, [sp, #36]
	ldr	r3, [sp, #44]
	ldr	r2, .L13903+8
	ldr	r9, .L13903+12
.LPIC3845:
	add	lr, pc, lr
	mla	r5, r1, r3, r5
	ldr	r1, .L13903+16
	add	r0, lr, #580
	add	fp, r0, r3, asl #2
	mov	r7, r3
	mov	ip, r3
	ldr	r3, .L13903+20
.LPIC3852:
	add	r2, pc, r2
.LPIC3867:
	ldr	r9, [pc, r9]		@ tls_load_dot_plus_eight
.LPIC3848:
	add	r1, pc, r1
	add	r2, r2, #3552
	str	fp, [sp, #12]
	str	r1, [sp, #24]
	ldr	r1, .L13903+24
.LPIC3853:
	add	r3, pc, r3
	str	r3, [sp, #40]
.LPIC3851:
	add	r1, pc, r1
	str	r1, [sp, #28]
	add	r1, r5, #2224
	add	r3, r1, #8
	mov	r6, r3
	str	r3, [sp, #52]
	add	r3, r2, #4
	str	r3, [sp, #32]
	b	.L13883
.L13902:
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L13880
.L13879:
	ldr	r3, [sp, #12]
	mov	r1, #10
	mov	r2, #1
	movt	r1, 2
	ldr	r0, [sp, #24]
	ldr	r8, [r3], #4
	str	r5, [sp]
	str	r3, [sp, #12]
	mov	r3, r5
	str	r8, [sp, #4]
	bl	__alloc_workqueue_key(PLT)
	mov	r3, r0
	ldr	r1, [sp, #28]
	add	r0, r4, #32
	cmp	r3, #0
	ldr	r2, [sp, #32]
	str	r3, [r4, #108]
	beq	.L13901
	str	r7, [r4]
	add	r10, r4, #116
	str	r5, [r4, #20]
	str	r5, [r4, #104]
	str	r5, [r4, #72]
	str	r5, [r4, #28]
	bl	__init_waitqueue_head(PLT)
	ldr	fp, [sp, #20]
	mov	r3, #65024
	str	r10, [r4, #116]
	ldr	ip, .L13903+28
	movt	r3, 65535
	str	r10, [r4, #120]
	ldr	lr, .L13903+32
	add	r10, r4, #80
	str	r5, [r4, #68]
	ldr	r0, .L13903+36
	str	r3, [r4, #112]
	cmp	fp, #0
	ldr	r1, .L13903+40
	str	r3, [r4, #128]
	moveq	r2, #11
	movne	r2, #10
	str	r3, [r4, #160]
.LPIC3855:
	add	ip, pc, ip
.LPIC3854:
	add	lr, pc, lr
	str	r3, [r4, #144]
	str	r2, [r4, #180]
	ldr	r2, [sp, #40]
	add	r3, r4, #132
.LPIC3856:
	add	r0, pc, r0
	str	ip, [r4, #172]
	add	ip, r4, #164
.LPIC3857:
	add	r1, pc, r1
	str	lr, [r4, #140]
	add	lr, r4, #148
	str	r0, [r4, #156]
	add	r0, r4, #48
	str	r2, [r4, #124]
	ldr	r2, .L13903+44
	str	r3, [r4, #132]
	str	r3, [r4, #136]
	add	r3, r4, #56
	str	ip, [r4, #164]
.LPIC3858:
	add	r2, pc, r2
	str	ip, [r4, #168]
	add	ip, r4, #88
	str	r3, [r4, #56]
	str	r3, [r4, #60]
	str	lr, [r4, #148]
	str	lr, [r4, #152]
	str	r0, [r4, #48]
	str	r0, [r4, #52]
	mov	r0, r6
	str	ip, [r4, #88]
	str	ip, [r4, #92]
	str	r5, [r4, #64]
	str	r5, [r4, #100]
	str	r5, [r4, #96]
	str	fp, [r4, #16]
	str	r4, [r4, #176]
	str	r10, [r4, #80]
	str	r10, [r4, #84]
	str	r4, [r6, #-4]
	stmia	r6, {r1, r2}
	add	r6, r6, #84
	str	r8, [r6, #-64]
	str	r5, [r6, #-56]
	bl	platform_driver_register(PLT)
	ldr	r2, [sp, #36]
	ldr	r3, .L13903+48
	cmp	r7, r2
	add	r7, r7, #1
.LPIC3859:
	add	r3, pc, r3
	beq	.L13889
	ldr	ip, [r3, #2224]
.L13883:
	ldr	r3, [r9, #32]
	mov	r5, #0
	add	ip, ip, #1
	ldr	r0, [sp, #16]
	movw	r1, #32976
	mov	r2, #216
	cmp	r3, r5
	str	ip, [r0, #2224]
	mov	r0, r3
	bne	.L13902
	mov	r4, #16
	b	.L13879
.L13876:
	ldr	r1, .L13903+52
	mov	r2, r0
	ldr	r0, .L13903+56
.LPIC3843:
	add	r1, pc, r1
.LPIC3842:
	add	r0, pc, r0
	sub	r1, r1, #2896
	bl	printk(PLT)
	mvn	r0, #21
.L13898:
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13889:
	ldr	r0, [sp, #44]
	b	.L13898
.L13901:
	ldr	r1, .L13903+60
	mov	r2, r8
	ldr	r0, .L13903+64
.LPIC3850:
	add	r1, pc, r1
	sub	r1, r1, #2864
.LPIC3849:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mov	r0, r4
	bl	kfree(PLT)
.L13880:
	ldr	r4, .L13903+68
	mov	r2, r7
	ldr	r1, .L13903+72
	ldr	r0, .L13903+76
.LPIC3862:
	add	r4, pc, r4
	ldr	r3, [r4, #2224]
.LPIC3865:
	add	r1, pc, r1
.LPIC3864:
	add	r0, pc, r0
	sub	r1, r1, #2896
	sub	r3, r3, #1
	str	r3, [r4, #2224]
	bl	printk(PLT)
	ldr	r2, [sp, #44]
	ldr	r3, [r4, #2224]
	cmp	r2, r3
	bcs	.L13886
.L13894:
	ldr	r6, [sp, #52]
	ldr	r3, [sp, #48]
	ldr	r5, [r6, #-4]
	add	r3, r3, #1
	str	r3, [sp, #48]
	ldr	r0, [r5, #108]
	bl	destroy_workqueue(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	add	r3, r6, #84
	cmp	r6, #0
	mov	r0, r6
	str	r3, [sp, #52]
	beq	.L13884
	bl	platform_driver_unregister(PLT)
.L13884:
	ldr	r3, [r4, #2224]
	ldr	r2, [sp, #48]
	cmp	r2, r3
	bcc	.L13894
.L13886:
	ldr	r3, .L13903+80
	mvn	r0, #11
	ldr	r2, [sp, #44]
.LPIC3861:
	add	r3, pc, r3
	str	r2, [r3, #2224]
	b	.L13898
.L13904:
	.align	2
.L13903:
	.word	.LANCHOR1-(.LPIC3841+8)
	.word	.LANCHOR5-(.LPIC3845+8)
	.word	.LANCHOR4-(.LPIC3852+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC3867+8))
	.word	.LC195-(.LPIC3848+8)
	.word	ghsuart_data_connect_w-(.LPIC3853+8)
	.word	.LC477-(.LPIC3851+8)
	.word	ghsuart_data_write_tohost-(.LPIC3855+8)
	.word	ghsuart_data_disconnect_w-(.LPIC3854+8)
	.word	ghsuart_data_write_tomdm-(.LPIC3856+8)
	.word	ghsuart_data_probe-(.LPIC3857+8)
	.word	ghsuart_data_remove-(.LPIC3858+8)
	.word	.LANCHOR1-(.LPIC3859+8)
	.word	.LANCHOR9-(.LPIC3843+8)
	.word	.LC762-(.LPIC3842+8)
	.word	.LANCHOR9-(.LPIC3850+8)
	.word	.LC769-(.LPIC3849+8)
	.word	.LANCHOR1-(.LPIC3862+8)
	.word	.LANCHOR9-(.LPIC3865+8)
	.word	.LC749-(.LPIC3864+8)
	.word	.LANCHOR1-(.LPIC3861+8)
	.fnend
	.size	ghsuart_data_setup, .-ghsuart_data_setup
	.align	2
	.type	rmnet_function_bind_config, %function
rmnet_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 152
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14091
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L14091+4
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	mov	r10, r1
	strd	r8, [sp, #16]
.LPIC4037:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	lr, [sp, #32]
	.pad #156
	sub	sp, sp, #156
.LPIC3869:
	add	r5, pc, r5
	ldr	r4, [r5, #3940]
	str	r3, [sp, #12]
	ldr	r3, [r3]
	cmp	r4, #0
	str	r3, [sp, #148]
	beq	.L13906
.L13985:
	ldr	r3, .L14091+8
.LPIC3870:
	add	r3, pc, r3
	ldr	r2, [r3, #3944]
	cmp	r2, #0
	ble	.L13978
	ldr	r2, [r3, #3896]
	cmp	r2, #0
	beq	.L14073
	ldr	r3, .L14091+12
	mov	r5, #0
	ldr	r6, .L14091+16
	ldr	r8, .L14091+20
	ldr	r7, .L14091+24
.LPIC3993:
	add	r3, pc, r3
.LPIC3988:
	add	r6, pc, r6
	str	r3, [sp]
	ldr	r3, .L14091+28
.LPIC3996:
	add	r8, pc, r8
	add	r6, r6, #2496
	add	r8, r8, #2880
.LPIC3989:
	add	r7, pc, r7
	add	r6, r6, #12
	add	r8, r8, #8
.LPIC3997:
	add	r3, pc, r3
	str	r3, [sp, #4]
	ldr	r3, .L14091+32
.LPIC3998:
	add	r3, pc, r3
	str	r3, [sp, #8]
	b	.L13971
.L13977:
	ldr	r2, [r3, #3896]
	add	r6, r6, #24
	mov	r3, r5
	cmp	r2, r5
	bls	.L13909
.L13971:
	ldrb	r3, [r7, #2872]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L13973
	ldr	r0, [r10, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L14074
	strb	r0, [r7, #2872]
.L13973:
	ldr	r4, [r6, #20]
	add	r9, r4, #132
	mov	r0, r9
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	lr, [r10, #24]
	mov	fp, r0
	mov	r2, r5
	ldr	r1, [sp]
	mov	r0, #32
	str	lr, [r4, #128]
	bl	kasprintf(PLT)
	str	r0, [r4]
	mov	r1, fp
	mov	r0, r9
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r3, [r4]
	cmp	r3, #0
	beq	.L14075
	ldr	r3, [sp, #4]
	str	r8, [r4, #4]
	mov	r0, r10
	ldr	lr, .L14091+36
	mov	r1, r4
	ldr	ip, .L14091+40
	ldr	r2, .L14091+44
	str	r3, [r4, #32]
	ldr	r3, [sp, #8]
.LPIC3999:
	add	lr, pc, lr
.LPIC4000:
	add	ip, pc, ip
.LPIC4001:
	add	r2, pc, r2
	str	lr, [r4, #48]
	ldr	lr, .L14091+48
	str	r3, [r4, #36]
	ldr	r3, .L14091+52
	str	ip, [r4, #40]
	ldr	ip, .L14091+56
	str	r2, [r4, #52]
	ldr	r2, .L14091+60
.LPIC4003:
	add	lr, pc, lr
.LPIC4002:
	add	r3, pc, r3
.LPIC4004:
	add	ip, pc, ip
	str	lr, [r4, #60]
	str	r3, [r4, #56]
	ldr	r3, .L14091+64
.LPIC4005:
	add	r2, pc, r2
	str	ip, [r4, #92]
.LPIC4006:
	add	r3, pc, r3
	strd	r2, [r4, #104]
	bl	usb_add_function(PLT)
	cmp	r0, #0
	bne	.L14076
	ldr	r3, .L14091+68
	add	r5, r5, #1
.LPIC4009:
	add	r3, pc, r3
	ldr	r2, [r3, #3944]
	cmp	r2, r5
	bgt	.L13977
.L13978:
	mov	ip, #0
.L13908:
	ldr	r3, [sp, #12]
	mov	r0, ip
	ldr	r2, [sp, #148]
	ldr	r3, [r3]
	cmp	r2, r3
	bne	.L14077
	add	sp, sp, #156
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L13906:
	add	r2, sp, #48
	mov	r3, #1
	ldr	r8, .L14091+72
	mov	r0, r2
	sub	r1, r5, #1280
	ldr	r7, .L14091+76
	str	r2, [sp]
	ldr	r2, .L14091+80
	sub	r1, r1, #12
	str	r3, [r5, #3940]
.LPIC3875:
	add	r8, pc, r8
.LPIC3886:
	add	r7, pc, r7
.LPIC3878:
	add	r2, pc, r2
	str	r2, [sp, #4]
	mov	r2, #50
	bl	strlcpy(PLT)
	ldr	r3, .L14091+84
	str	r4, [sp, #20]
	ldr	r0, [sp]
.LPIC3884:
	add	r3, pc, r3
	str	r3, [sp, #16]
	bl	strim(PLT)
	add	r3, sp, #98
	str	r0, [sp, #40]
	sub	r1, r5, #1344
	mov	r0, r3
	mov	r2, #50
	str	r3, [sp]
	bl	strlcpy(PLT)
	ldr	r0, [sp]
	bl	strim(PLT)
	ldr	r3, .L14091+88
	str	r0, [sp, #44]
	str	r10, [sp, #8]
	str	r7, [sp]
.LPIC4011:
	add	r3, pc, r3
	str	r3, [sp, #24]
.L13911:
	add	r4, sp, #40
	b	.L13912
.L13941:
	mov	r1, r8
	mov	r0, r4
	bl	strsep(PLT)
	mov	fp, r0
	mov	r1, r8
	mov	r0, r4
	bl	strsep(PLT)
	cmp	r0, #0
	cmpne	fp, #0
	bne	.L14078
.L13912:
	ldr	r3, [sp, #40]
	cmp	r3, #0
	bne	.L13941
	ldr	r3, .L14091+92
	ldr	r10, [sp, #8]
.LPIC3945:
	add	r3, pc, r3
	ldr	r0, [r3, #3908]
	ldr	r1, [r3, #3912]
	cmp	r0, #0
	bne	.L13943
	cmp	r1, #0
	beq	.L13947
.L13943:
	bl	gbam_setup(PLT)
	subs	ip, r0, #0
	beq	.L13947
.L13946:
	ldr	r1, .L14091+96
	str	ip, [sp]
	ldr	r0, .L14091+100
.LPIC4022:
	add	r1, pc, r1
	sub	r1, r1, #2800
.LPIC4021:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	ip, [sp]
	b	.L13908
.L13947:
	ldr	r4, .L14091+104
.LPIC3948:
	add	r4, pc, r4
	ldr	r1, [r4, #3900]
	cmp	r1, #0
	bne	.L14079
.L13945:
	ldr	r4, .L14091+108
.LPIC3949:
	add	r4, pc, r4
	ldr	r0, [r4, #3920]
	cmp	r0, #0
	bne	.L14080
.L13949:
	ldr	r4, .L14091+112
.LPIC3954:
	add	r4, pc, r4
	ldr	r0, [r4, #3916]
	cmp	r0, #0
	bne	.L14081
.L13954:
	ldr	r4, .L14091+116
.LPIC3962:
	add	r4, pc, r4
	ldr	r0, [r4, #3928]
	cmp	r0, #0
	bne	.L14082
.L13959:
	ldr	r4, .L14091+120
.LPIC3970:
	add	r4, pc, r4
	ldr	r0, [r4, #3924]
	cmp	r0, #0
	beq	.L13985
	mov	r1, #1
	bl	ghsuart_ctrl_setup(PLT)
	subs	ip, r0, #0
	blt	.L13946
	ldr	r3, [r4, #3896]
	cmp	r3, #0
	beq	.L13985
	ldr	r2, .L14091+124
.LPIC3979:
	add	r2, pc, r2
	ldr	r1, [r2, #2512]
	cmp	r1, #9
	streq	ip, [r2, #2520]
	addeq	ip, ip, #1
	cmp	r3, #1
	bls	.L13985
	ldr	r2, .L14091+128
.LPIC3981:
	add	r2, pc, r2
	ldr	r1, [r2, #2536]
	cmp	r1, #9
	streq	ip, [r2, #2544]
	addeq	ip, ip, #1
	cmp	r3, #2
	beq	.L13985
	ldr	r3, .L14091+132
.LPIC3983:
	add	r3, pc, r3
	ldr	r2, [r3, #2560]
	cmp	r2, #9
	streq	ip, [r3, #2568]
	b	.L13985
.L14078:
	ldr	r2, [sp, #44]
	mov	r10, r0
	cmp	r2, #0
	beq	.L13913
	add	r0, sp, #44
	mov	r1, r8
	bl	strsep(PLT)
	str	r0, [sp, #20]
.L13913:
	ldr	r3, [sp, #4]
	ldr	r2, [r3, #3896]
	cmp	r2, #2
	bhi	.L14083
	ldr	r1, .L14091+136
.LPIC4038:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	ldr	r0, [r1, #8]
	cmp	r0, #0
	beq	.L13999
	movw	r1, #32976
	mov	r2, #160
	bl	kmem_cache_alloc_trace(PLT)
	subs	ip, r0, #0
	beq	.L13917
	ldr	r3, [sp, #4]
	ldr	r2, [r3, #3896]
.L13916:
	ldr	r3, [sp, #16]
	mov	r5, r2, asl #3
	mov	r7, r2, asl #5
	strb	r2, [ip, #116]
	ldr	r0, [sp]
	rsb	r4, r5, r7
	add	lr, ip, #144
	mov	r1, #0
	add	r4, r3, r4
	str	lr, [ip, #144]
	str	r1, [ip, #132]
	mov	r1, fp
	str	r2, [r4, #2524]
	mov	r2, #12
	str	ip, [r4, #2528]
	str	lr, [ip, #148]
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L14000
	ldr	r6, .L14091+140
	mov	r1, fp
	mov	r2, #12
.LPIC3887:
	add	r6, pc, r6
	mov	r0, r6
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r9, #2
	bne	.L14084
.L13918:
	ldr	r3, [sp, #24]
	rsb	r6, r5, r7
	mov	r2, #12
	ldr	r0, .L14091+144
	mov	r1, r10
	add	r6, r3, r6
	add	r6, r6, #2496
.LPIC4012:
	add	r0, pc, r0
	add	r6, r6, r2
	str	r9, [r6, #4]
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L14085
.L13980:
	ldr	r0, .L14091+148
	mov	r2, #12
	mov	r1, r10
.LPIC3893:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #2
	bne	.L14086
.L13921:
	ldr	ip, .L14091+152
	rsb	r1, r5, r7
	sub	lr, r9, #3
.LPIC3897:
	add	ip, pc, ip
	add	r1, ip, r1
	str	r2, [r1, #2508]
	cmp	lr, #7
	addls	pc, pc, lr, asl #2
	b	.L14060
.L13924:
	b	.L13923
	b	.L13925
	b	.L14060
	b	.L14060
	b	.L14060
	b	.L13926
	b	.L13927
	b	.L13928
	.p2align 1
.L13999:
	mov	ip, #16
	b	.L13916
.L14079:
	mov	r0, #0
	add	r2, sp, #39
	bl	gsmd_ctrl_setup(PLT)
	subs	ip, r0, #0
	bne	.L13946
	ldr	r2, [r4, #3896]
	cmp	r2, #0
	beq	.L13945
	ldr	r1, .L14091+156
	ldrb	r3, [sp, #39]	@ zero_extendqisi2
.LPIC3951:
	add	r1, pc, r1
	ldr	r1, [r1, #2528]
	cmp	r1, #0
	beq	.L13950
	ldrb	r0, [r1, #116]	@ zero_extendqisi2
	add	r0, r3, r0
	strb	r0, [r1, #116]
.L13950:
	cmp	r2, #1
	bls	.L13945
	ldr	r1, .L14091+160
.LPIC3952:
	add	r1, pc, r1
	ldr	r1, [r1, #2552]
	cmp	r1, #0
	beq	.L13951
	ldrb	r0, [r1, #116]	@ zero_extendqisi2
	add	r0, r3, r0
	strb	r0, [r1, #116]
.L13951:
	cmp	r2, #2
	beq	.L13945
	ldr	r2, .L14091+164
.LPIC3953:
	add	r2, pc, r2
	ldr	r2, [r2, #2576]
	cmp	r2, #0
	beq	.L13945
	ldrb	r1, [r2, #116]	@ zero_extendqisi2
	add	r3, r3, r1
	strb	r3, [r2, #116]
	b	.L13945
.L14090:
	mov	r2, #1
	str	r2, [r4, #2508]
.L13925:
	ldr	r0, .L14091+168
	rsb	r1, r5, r7
	ldr	r2, .L14091+172
.LPIC3902:
	add	r0, pc, r0
	ldr	ip, [r0, #3904]
.LPIC3903:
	add	r2, pc, r2
	add	r1, r2, r1
	ldr	r2, [r1, #2508]
	add	lr, ip, #1
	str	ip, [r1, #2520]
	str	lr, [r0, #3904]
.L13928:
	sub	r1, r2, #5
	cmp	r1, #5
	addls	pc, pc, r1, asl #2
	b	.L13930
.L13932:
	b	.L13931
	b	.L13933
	b	.L13933
	b	.L13934
	b	.L13935
	b	.L13936
	.p2align 1
.L13933:
	ldr	r2, .L14091+176
	rsb	r5, r5, r7
	ldr	r3, .L14091+180
.LPIC3928:
	add	r2, pc, r2
	ldr	r1, [r2, #3912]
.LPIC3929:
	add	r3, pc, r3
	add	r3, r3, r5
	add	r0, r1, #1
	str	r1, [r3, #2516]
	str	r0, [r2, #3912]
.L13936:
	ldr	r3, .L14091+184
.LPIC3939:
	add	r3, pc, r3
	ldr	r1, [r3, #3896]
	ldr	r2, [r3, #3944]
	add	r1, r1, #1
	add	r2, r2, #1
	str	r1, [r3, #3896]
	str	r2, [r3, #3944]
	b	.L13911
.L14000:
	mov	r9, #1
	b	.L13918
.L14085:
	mov	r3, r9
	mov	r2, #1
	mov	r9, r10
	str	r2, [r6]
.L13922:
	ldr	r1, .L14091+188
	mov	r2, r3
	ldr	r0, .L14091+192
.LPIC3915:
	add	r1, pc, r1
	sub	r1, r1, #2848
.LPIC3914:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
.L13937:
	ldr	r6, .L14091+196
.LPIC3916:
	add	r6, pc, r6
	ldr	r2, [r6, #3896]
	cmp	r2, #0
	beq	.L13940
	ldr	r4, .L14091+200
	mov	r5, #0
.LPIC3941:
	add	r4, pc, r4
	add	r4, r4, #2496
	add	r4, r4, #12
.L13939:
	ldr	r0, [r4, #20]
	add	r5, r5, #1
	add	r4, r4, #24
	bl	kfree(PLT)
	ldr	r3, [r6, #3896]
	cmp	r5, r3
	bcc	.L13939
.L13940:
	ldr	r2, .L14091+204
	mov	r1, #0
	mvn	ip, #18
.LPIC3917:
	add	r2, pc, r2
	str	r1, [r2, #3896]
	str	r1, [r2, #3900]
	str	r1, [r2, #3904]
	str	r1, [r2, #3908]
	str	r1, [r2, #3916]
	str	r1, [r2, #3920]
	str	r1, [r2, #3924]
	str	r1, [r2, #3928]
.L13915:
	ldr	r1, .L14091+208
	mov	r2, fp
	mov	r3, r9
	ldr	r0, .L14091+212
	str	ip, [sp]
.LPIC4020:
	add	r1, pc, r1
	sub	r1, r1, #2800
.LPIC4019:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	ip, [sp]
	b	.L13908
.L14084:
	ldr	r3, .L14091+216
	mov	r1, fp
	mov	r2, #12
.LPIC3888:
	add	r3, pc, r3
	mov	r0, r3
	str	r3, [sp, #28]
	bl	strncasecmp(PLT)
	cmp	r0, #0
	bne	.L14087
	mov	r9, #3
	ldr	r0, [sp]
	mov	r1, r10
	mov	r2, #12
	str	r9, [r4, #2512]
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L14088
	mov	r2, #12
	mov	r0, r6
	mov	r1, r10
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #2
	streq	r2, [r4, #2508]
	beq	.L13923
	ldr	r0, [sp, #28]
	mov	r1, r10
	mov	r2, #12
	bl	strncasecmp(PLT)
	cmp	r0, #0
	streq	r9, [r4, #2508]
	beq	.L13923
	ldr	r0, .L14091+220
	mov	r2, #12
	mov	r1, r10
.LPIC4034:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #4
	streq	r2, [r4, #2508]
	beq	.L13923
.L13995:
	ldr	r0, .L14091+224
	mov	r2, #12
	mov	r1, r10
.LPIC3896:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #5
	beq	.L13921
	mov	r0, r10
	bl	str_to_xport.part.65(PLT)
	mov	r2, r0
	b	.L13921
.L14086:
	ldr	r0, .L14091+228
	mov	r2, #12
	mov	r1, r10
.LPIC3894:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #3
	beq	.L13921
	ldr	r0, .L14091+232
	mov	r2, #12
	mov	r1, r10
.LPIC3895:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #4
	beq	.L13921
	b	.L13995
.L14080:
	mov	r1, #1
	bl	ghsic_data_setup(PLT)
	subs	ip, r0, #0
	blt	.L13946
	ldr	r3, [r4, #3896]
	cmp	r3, #0
	beq	.L13949
	ldr	r2, .L14091+236
.LPIC3956:
	add	r2, pc, r2
	ldr	r1, [r2, #2508]
	cmp	r1, #8
	streq	ip, [r2, #2516]
	addeq	ip, ip, #1
	cmp	r3, #1
	bls	.L13949
	ldr	r2, .L14091+240
.LPIC3958:
	add	r2, pc, r2
	ldr	r1, [r2, #2532]
	cmp	r1, #8
	streq	ip, [r2, #2540]
	addeq	ip, ip, #1
	cmp	r3, #2
	beq	.L13949
	ldr	r3, .L14091+244
.LPIC3960:
	add	r3, pc, r3
	ldr	r2, [r3, #2556]
	cmp	r2, #8
	streq	ip, [r3, #2564]
	b	.L13949
.L14081:
	mov	r1, #1
	bl	ghsic_ctrl_setup(PLT)
	subs	ip, r0, #0
	blt	.L13946
	ldr	r3, [r4, #3896]
	cmp	r3, #0
	beq	.L13954
	ldr	r2, .L14091+248
.LPIC3964:
	add	r2, pc, r2
	ldr	r1, [r2, #2512]
	cmp	r1, #8
	streq	ip, [r2, #2520]
	addeq	ip, ip, #1
	cmp	r3, #1
	bls	.L13954
	ldr	r2, .L14091+252
.LPIC3966:
	add	r2, pc, r2
	ldr	r1, [r2, #2536]
	cmp	r1, #8
	streq	ip, [r2, #2544]
	addeq	ip, ip, #1
	cmp	r3, #2
	beq	.L13954
	ldr	r3, .L14091+256
.LPIC3968:
	add	r3, pc, r3
	ldr	r2, [r3, #2560]
	cmp	r2, #8
	streq	ip, [r3, #2568]
	b	.L13954
.L14082:
	mov	r1, #1
	bl	ghsuart_data_setup(PLT)
	subs	ip, r0, #0
	blt	.L13946
	ldr	r3, [r4, #3896]
	cmp	r3, #0
	beq	.L13959
	ldr	r2, .L14091+260
.LPIC3972:
	add	r2, pc, r2
	ldr	r1, [r2, #2508]
	cmp	r1, #9
	streq	ip, [r2, #2516]
	addeq	ip, ip, #1
	cmp	r3, #1
	bls	.L13959
	ldr	r2, .L14091+264
.LPIC3974:
	add	r2, pc, r2
	ldr	r1, [r2, #2532]
	cmp	r1, #9
	streq	ip, [r2, #2540]
	addeq	ip, ip, #1
	cmp	r3, #2
	beq	.L13959
	ldr	r3, .L14091+268
.LPIC3976:
	add	r3, pc, r3
	ldr	r2, [r3, #2556]
	cmp	r2, #9
	streq	ip, [r3, #2564]
	b	.L13959
.L13927:
	ldr	r0, .L14091+272
	rsb	r1, r5, r7
	ldr	r2, .L14091+276
.LPIC3910:
	add	r0, pc, r0
	ldr	ip, [r0, #3924]
.LPIC3911:
	add	r2, pc, r2
	add	r1, r2, r1
	ldr	r2, [r1, #2508]
	add	lr, ip, #1
	str	ip, [r1, #2520]
	str	lr, [r0, #3924]
	b	.L13928
.L13926:
	ldr	r0, [sp, #20]
	mov	r1, fp
	bl	ghsic_ctrl_set_port_name(PLT)
	ldr	r0, .L14091+280
	rsb	r1, r5, r7
	ldr	r2, .L14091+284
.LPIC3906:
	add	r0, pc, r0
	ldr	ip, [r0, #3916]
.LPIC3907:
	add	r2, pc, r2
	add	r1, r2, r1
	ldr	r2, [r1, #2508]
	add	lr, ip, #1
	str	ip, [r1, #2520]
	str	lr, [r0, #3916]
	b	.L13928
.L14088:
	mov	r2, #1
	str	r2, [r4, #2508]
.L13923:
	ldr	r0, .L14091+288
	rsb	r1, r5, r7
	ldr	r2, .L14091+292
.LPIC3898:
	add	r0, pc, r0
	ldr	ip, [r0, #3900]
.LPIC3899:
	add	r2, pc, r2
	add	r1, r2, r1
	ldr	r2, [r1, #2508]
	add	lr, ip, #1
	str	ip, [r1, #2520]
	str	lr, [r0, #3900]
	b	.L13928
.L13935:
	ldr	r2, .L14091+296
	rsb	r5, r5, r7
	ldr	r3, .L14091+300
.LPIC3934:
	add	r2, pc, r2
	ldr	r1, [r2, #3928]
.LPIC3935:
	add	r3, pc, r3
	add	r3, r3, r5
	add	r0, r1, #1
	str	r1, [r3, #2516]
	str	r0, [r2, #3928]
	b	.L13936
.L13934:
	mov	r1, r10
	ldr	r0, [sp, #20]
	rsb	r5, r5, r7
	bl	ghsic_data_set_port_name(PLT)
	ldr	r2, .L14091+304
	ldr	r3, .L14091+308
.LPIC3931:
	add	r2, pc, r2
	ldr	r1, [r2, #3920]
.LPIC3932:
	add	r3, pc, r3
	add	r3, r3, r5
	add	r0, r1, #1
	str	r1, [r3, #2516]
	str	r0, [r2, #3920]
	b	.L13936
.L13931:
	ldr	r2, .L14091+312
	rsb	r5, r5, r7
	ldr	r3, .L14091+316
.LPIC3925:
	add	r2, pc, r2
	ldr	r1, [r2, #3908]
.LPIC3926:
	add	r3, pc, r3
	add	r3, r3, r5
	add	r0, r1, #1
	str	r1, [r3, #2516]
	str	r0, [r2, #3908]
	b	.L13936
.L14060:
	mov	r3, r9
	mov	r9, r10
	b	.L13922
.L14087:
	ldr	r9, .L14091+320
	mov	r1, fp
	mov	r2, #12
.LPIC3889:
	add	r9, pc, r9
	mov	r0, r9
	bl	strncasecmp(PLT)
	cmp	r0, #0
	bne	.L14089
	mov	r3, #4
	ldr	r0, [sp]
	mov	r1, r10
	mov	r2, #12
	str	r3, [r4, #2512]
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L14090
	mov	r2, #12
	mov	r0, r6
	mov	r1, r10
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #2
	streq	r2, [r4, #2508]
	beq	.L13925
	mov	r2, #12
	ldr	r0, [sp, #28]
	mov	r1, r10
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #3
	streq	r2, [r4, #2508]
	beq	.L13925
	mov	r0, r9
	mov	r1, r10
	mov	r2, #12
	mov	r9, #4
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #4
	streq	r3, [r4, #2508]
	beq	.L13925
	b	.L13995
.L13930:
	ldr	r1, .L14091+324
	mov	r9, r10
	ldr	r0, .L14091+328
.LPIC3938:
	add	r1, pc, r1
	sub	r1, r1, #2848
.LPIC3937:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L13937
.L14075:
	ldr	r1, .L14091+332
	mvn	ip, #11
	ldr	r0, .L14091+336
	str	ip, [sp]
.LPIC3995:
	add	r1, pc, r1
.LPIC3994:
	add	r0, pc, r0
	sub	r1, r1, #2832
	bl	printk(PLT)
	ldr	ip, [sp]
.L13972:
	ldr	r1, .L14091+340
	mov	r2, r5
	str	ip, [sp]
	ldr	r0, .L14091+344
.LPIC4024:
	add	r1, pc, r1
	sub	r1, r1, #2800
.LPIC4023:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	ip, [sp]
	b	.L13908
.L14073:
	mov	r3, r2
	mov	r5, r2
.L13909:
	ldr	r1, .L14091+348
	mvn	ip, #18
	ldr	r0, .L14091+352
	str	ip, [sp]
.LPIC3987:
	add	r1, pc, r1
.LPIC3986:
	add	r0, pc, r0
	sub	r1, r1, #2832
	bl	printk(PLT)
	ldr	ip, [sp]
	b	.L13972
.L14076:
	ldr	r1, .L14091+356
	mov	r2, r0
	str	r0, [sp]
	ldr	r0, .L14091+360
.LPIC4008:
	add	r1, pc, r1
	sub	r1, r1, #2832
.LPIC4007:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r4]
	bl	kfree(PLT)
	ldr	ip, [sp]
	b	.L13972
.L14089:
	ldr	r0, .L14091+364
	mov	r1, fp
	mov	r2, #12
.LPIC3890:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r9, #5
	beq	.L13918
	mov	r0, fp
	bl	str_to_xport.part.65(PLT)
	mov	r9, r0
	mov	r2, #12
	ldr	r0, [sp]
	mov	r1, r10
	str	r9, [r4, #2512]
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r2, #1
	bne	.L13980
	b	.L13921
.L14074:
	ldr	r1, .L14091+368
	mov	r2, r0
	str	r0, [sp]
	ldr	r0, .L14091+372
.LPIC3991:
	add	r1, pc, r1
.LPIC3990:
	add	r0, pc, r0
	sub	r1, r1, #2832
	bl	printk(PLT)
	ldr	ip, [sp]
	b	.L13972
.L13917:
	ldr	r1, .L14091+376
	mvn	ip, #11
	mov	r9, r10
	ldr	r0, .L14091+380
	str	ip, [sp]
.LPIC3883:
	add	r1, pc, r1
	sub	r1, r1, #2848
.LPIC3882:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	ldr	ip, [sp]
	b	.L13915
.L14083:
	ldr	r1, .L14091+384
	mvn	ip, #21
	mov	r2, #3
	ldr	r0, .L14091+388
	mov	r9, r10
	str	ip, [sp]
.LPIC3880:
	add	r1, pc, r1
	sub	r1, r1, #2848
.LPIC3879:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	ldr	ip, [sp]
	b	.L13915
.L14077:
	bl	__stack_chk_fail(PLT)
.L14092:
	.align	2
.L14091:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC4037+8))
	.word	.LANCHOR4-(.LPIC3869+8)
	.word	.LANCHOR4-(.LPIC3870+8)
	.word	.LC794-(.LPIC3993+8)
	.word	.LANCHOR1-(.LPIC3988+8)
	.word	.LANCHOR0-(.LPIC3996+8)
	.word	.LANCHOR0-(.LPIC3989+8)
	.word	frmnet_bind-(.LPIC3997+8)
	.word	frmnet_unbind-(.LPIC3998+8)
	.word	frmnet_disable-(.LPIC3999+8)
	.word	frmnet_set_alt-(.LPIC4000+8)
	.word	frmnet_setup-(.LPIC4001+8)
	.word	frmnet_resume-(.LPIC4003+8)
	.word	frmnet_suspend-(.LPIC4002+8)
	.word	frmnet_send_cpkt_response-(.LPIC4004+8)
	.word	frmnet_disconnect-(.LPIC4005+8)
	.word	frmnet_connect-(.LPIC4006+8)
	.word	.LANCHOR4-(.LPIC4009+8)
	.word	.LC285-(.LPIC3875+8)
	.word	.LC0-(.LPIC3886+8)
	.word	.LANCHOR4-(.LPIC3878+8)
	.word	.LANCHOR1-(.LPIC3884+8)
	.word	.LANCHOR1-(.LPIC4011+8)
	.word	.LANCHOR4-(.LPIC3945+8)
	.word	.LANCHOR9-(.LPIC4022+8)
	.word	.LC798-(.LPIC4021+8)
	.word	.LANCHOR4-(.LPIC3948+8)
	.word	.LANCHOR4-(.LPIC3949+8)
	.word	.LANCHOR4-(.LPIC3954+8)
	.word	.LANCHOR4-(.LPIC3962+8)
	.word	.LANCHOR4-(.LPIC3970+8)
	.word	.LANCHOR1-(.LPIC3979+8)
	.word	.LANCHOR1-(.LPIC3981+8)
	.word	.LANCHOR1-(.LPIC3983+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4038+8))
	.word	.LC1-(.LPIC3887+8)
	.word	.LC0-(.LPIC4012+8)
	.word	.LC1-(.LPIC3893+8)
	.word	.LANCHOR1-(.LPIC3897+8)
	.word	.LANCHOR1-(.LPIC3951+8)
	.word	.LANCHOR1-(.LPIC3952+8)
	.word	.LANCHOR1-(.LPIC3953+8)
	.word	.LANCHOR4-(.LPIC3902+8)
	.word	.LANCHOR1-(.LPIC3903+8)
	.word	.LANCHOR4-(.LPIC3928+8)
	.word	.LANCHOR1-(.LPIC3929+8)
	.word	.LANCHOR4-(.LPIC3939+8)
	.word	.LANCHOR9-(.LPIC3915+8)
	.word	.LC791-(.LPIC3914+8)
	.word	.LANCHOR4-(.LPIC3916+8)
	.word	.LANCHOR1-(.LPIC3941+8)
	.word	.LANCHOR4-(.LPIC3917+8)
	.word	.LANCHOR9-(.LPIC4020+8)
	.word	.LC797-(.LPIC4019+8)
	.word	.LC2-(.LPIC3888+8)
	.word	.LC3-(.LPIC4034+8)
	.word	.LC4-(.LPIC3896+8)
	.word	.LC2-(.LPIC3894+8)
	.word	.LC3-(.LPIC3895+8)
	.word	.LANCHOR1-(.LPIC3956+8)
	.word	.LANCHOR1-(.LPIC3958+8)
	.word	.LANCHOR1-(.LPIC3960+8)
	.word	.LANCHOR1-(.LPIC3964+8)
	.word	.LANCHOR1-(.LPIC3966+8)
	.word	.LANCHOR1-(.LPIC3968+8)
	.word	.LANCHOR1-(.LPIC3972+8)
	.word	.LANCHOR1-(.LPIC3974+8)
	.word	.LANCHOR1-(.LPIC3976+8)
	.word	.LANCHOR4-(.LPIC3910+8)
	.word	.LANCHOR1-(.LPIC3911+8)
	.word	.LANCHOR4-(.LPIC3906+8)
	.word	.LANCHOR1-(.LPIC3907+8)
	.word	.LANCHOR4-(.LPIC3898+8)
	.word	.LANCHOR1-(.LPIC3899+8)
	.word	.LANCHOR4-(.LPIC3934+8)
	.word	.LANCHOR1-(.LPIC3935+8)
	.word	.LANCHOR4-(.LPIC3931+8)
	.word	.LANCHOR1-(.LPIC3932+8)
	.word	.LANCHOR4-(.LPIC3925+8)
	.word	.LANCHOR1-(.LPIC3926+8)
	.word	.LC3-(.LPIC3889+8)
	.word	.LANCHOR9-(.LPIC3938+8)
	.word	.LC791-(.LPIC3937+8)
	.word	.LANCHOR9-(.LPIC3995+8)
	.word	.LC795-(.LPIC3994+8)
	.word	.LANCHOR9-(.LPIC4024+8)
	.word	.LC799-(.LPIC4023+8)
	.word	.LANCHOR9-(.LPIC3987+8)
	.word	.LC792-(.LPIC3986+8)
	.word	.LANCHOR9-(.LPIC4008+8)
	.word	.LC796-(.LPIC4007+8)
	.word	.LC4-(.LPIC3890+8)
	.word	.LANCHOR9-(.LPIC3991+8)
	.word	.LC793-(.LPIC3990+8)
	.word	.LANCHOR9-(.LPIC3883+8)
	.word	.LC790-(.LPIC3882+8)
	.word	.LANCHOR9-(.LPIC3880+8)
	.word	.LC789-(.LPIC3879+8)
	.fnend
	.size	rmnet_function_bind_config, .-rmnet_function_bind_config
	.align	2
	.global	notify_control_line_state
	.type	notify_control_line_state, %function
notify_control_line_state:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	ip, .L14095
	mov	r4, #1
	str	lr, [sp, #4]
	ldr	lr, .L14095+4
	mov	r1, r4
	mov	r2, r4
	mov	r3, #0
.LPIC4040:
	add	ip, pc, ip
.LPIC4039:
	add	lr, pc, lr
	str	r4, [ip], #4
	str	r0, [lr, #-1432]
	mov	r0, ip
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	__wake_up(PLT)
.L14096:
	.align	2
.L14095:
	.word	.LANCHOR1-(.LPIC4040+8)
	.word	.LANCHOR4-(.LPIC4039+8)
	.fnend
	.size	notify_control_line_state, .-notify_control_line_state
	.align	2
	.type	acm_setup, %function
acm_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	str	lr, [sp, #20]
	movw	lr, #8482
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	ldrb	r2, [r1]	@ zero_extendqisi2
	ldr	r0, [r0, #20]
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	ldrh	ip, [r1, #2]	@ unaligned
	ldrh	r7, [r1, #4]	@ unaligned
	ldr	r6, [r0, #24]
	orr	r3, r3, r2, asl #8
	ldrh	r2, [r1, #6]	@ unaligned
	cmp	r3, lr
	ldr	r4, [r6, #4]
	beq	.L14099
	movw	r1, #41249
	cmp	r3, r1
	beq	.L14100
	movw	r1, #8480
	cmp	r3, r1
	beq	.L14112
.L14108:
	mvn	r4, #94
.L14110:
	mov	r0, r4
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14112:
	cmp	r2, #7
	bne	.L14108
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L14108
	ldr	r1, [r6]
	mov	r7, r2
	ldr	r3, .L14113
	ldr	r2, [r1, #4]
.LPIC4042:
	add	r3, pc, r3
	str	r5, [r2]
	str	r3, [r4, #28]
	b	.L14102
.L14100:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L14108
	cmp	r2, #7
	ldr	r0, [r4]
	add	r1, r5, #160
	movcc	r7, r2
	movcs	r7, #7
	mov	r2, r7
	bl	memcpy(PLT)
	b	.L14102
.L14099:
	ldrb	r3, [r5, #144]	@ zero_extendqisi2
	cmp	r3, r7
	bne	.L14108
	mov	r0, ip
	strh	ip, [r5, #168]	@ movhi
	mov	r7, #0
	bl	notify_control_line_state(PLT)
.L14102:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r7, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfc	r3, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r4, r0, #0
	bge	.L14110
	ldr	r0, [r6]
	mov	r3, r4
	ldr	r1, .L14113+4
	ldrb	r2, [r5, #146]	@ zero_extendqisi2
	add	r0, r0, #32
.LPIC4043:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L14110
.L14114:
	.align	2
.L14113:
	.word	acm_complete_set_line_coding-(.LPIC4042+8)
	.word	.LC800-(.LPIC4043+8)
	.fnend
	.size	acm_setup, .-acm_setup
	.align	2
	.type	modem_ioctl, %function
modem_ioctl:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movw	r3, #21249
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r0, r1
	movt	r3, 16388
	strd	r6, [sp, #8]
	mov	r5, r2
	cmp	r1, r3
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L14117
	movw	r3, #21251
	movt	r3, 16388
	cmp	r1, r3
	beq	.L14118
	ldr	r0, .L14127
.LPIC4047:
	add	r0, pc, r0
	bl	printk(PLT)
	movw	r0, #65021
	movt	r0, 65535
.L14119:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14118:
	ldr	r0, .L14127+4
	mov	r1, r2
.LPIC4046:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r5
	bl	notify_control_line_state(PLT)
	mov	r0, #0
	b	.L14119
.L14117:
	ldr	r3, .L14127+8
.LPIC4044:
	add	r3, pc, r3
	ldr	r4, [r3, #3948]
	cmp	r4, #0
	moveq	r0, r4
	beq	.L14119
	add	r6, r4, #148
	strh	r2, [r4, #170]	@ movhi
	mov	r0, r6
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4, #156]
	mov	r5, r0
	cmp	r3, #0
	moveq	r3, #1
	streqb	r3, [r4, #147]
	bne	.L14126
.L14121:
	mov	r0, r6
	mov	r1, r5
	bl	_raw_spin_unlock_irqrestore(PLT)
	mov	r0, #0
	b	.L14119
.L14126:
	mov	r7, r4
	ldr	r0, .L14127+12
	ldrh	r2, [r7, #170]!
	ldrb	r1, [r4, #146]	@ zero_extendqisi2
.LPIC4045:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	mov	r1, r7
	bl	acm_cdc_notify.constprop.138(PLT)
	b	.L14121
.L14128:
	.align	2
.L14127:
	.word	.LC802-(.LPIC4047+8)
	.word	.LC801-(.LPIC4046+8)
	.word	.LANCHOR4-(.LPIC4044+8)
	.word	.LC384-(.LPIC4045+8)
	.fnend
	.size	modem_ioctl, .-modem_ioctl
	.align	2
	.global	modem_register
	.type	modem_register, %function
modem_register:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	subs	r2, r0, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
	beq	.L14133
	ldr	r3, .L14134
	ldr	r0, .L14134+4
.LPIC4049:
	add	r3, pc, r3
.LPIC4050:
	add	r0, pc, r0
	str	r2, [r3, #3948]
	bl	printk(PLT)
	mov	r0, #0
.L14131:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L14133:
	ldr	r0, .L14134+8
.LPIC4048:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #0
	b	.L14131
.L14135:
	.align	2
.L14134:
	.word	.LANCHOR4-(.LPIC4049+8)
	.word	.LC804-(.LPIC4050+8)
	.word	.LC803-(.LPIC4048+8)
	.fnend
	.size	modem_register, .-modem_register
	.align	2
	.type	acm_bind, %function
acm_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	str	r8, [sp, #16]
	mov	r8, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	.pad #8
	sub	sp, sp, #8
	ldr	r7, [r0, #24]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L14137
	ldr	r6, .L14176
	uxtb	r5, r5
	mov	r0, r8
	mov	r1, r4
	strb	r5, [r4, #144]
.LPIC4051:
	add	r6, pc, r6
	strb	r5, [r6, #2578]
	strb	r5, [r6, #2586]
	strb	r5, [r6, #2599]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L14137
	uxtb	r5, r5
	add	r1, r6, #2624
	strb	r5, [r4, #145]
	strb	r5, [r6, #2606]
	strb	r5, [r6, #2600]
	strb	r5, [r6, #2620]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L14139
	add	r1, r6, #2624
	str	r0, [r4, #88]
	add	r1, r1, #12
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L14139
	add	r1, r6, #2640
	str	r0, [r4, #92]
	add	r1, r1, #8
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L14139
	str	r3, [r4, #152]
	mov	r1, #10
	mov	r2, #208
	str	r7, [r3]
	bl	gs_alloc_req(PLT)
	cmp	r0, #0
	mov	r3, r0
	str	r0, [r4, #156]
	beq	.L14139
	ldr	r2, .L14176+4
	mov	r0, r4
	ldr	r1, .L14176+8
	ldrb	lr, [r6, #2626]	@ zero_extendqisi2
	ldrb	ip, [r6, #2638]	@ zero_extendqisi2
.LPIC4060:
	add	r2, pc, r2
	ldrb	r5, [r6, #2650]	@ zero_extendqisi2
.LPIC4069:
	add	r1, pc, r1
	str	r2, [r3, #28]
	ldr	r8, [r4, #156]
	add	r2, r1, #2928
	add	r3, r1, #2976
	add	r2, r2, #12
	strb	lr, [r6, #2662]
	add	r3, r3, #8
	add	r1, r1, #2896
	strb	r5, [r6, #2686]
	strb	lr, [r6, #2698]
	str	r4, [r8, #32]
	strb	ip, [r6, #2674]
	strb	ip, [r6, #2710]
	bl	usb_assign_descriptors(PLT)
	subs	r5, r0, #0
	beq	.L14175
.L14137:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L14141
	bl	kfree(PLT)
.L14141:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L14142
	bl	kfree(PLT)
.L14142:
	ldr	r1, [r4, #156]
	cmp	r1, #0
	beq	.L14143
	ldr	r0, [r4, #152]
	bl	gs_free_req(PLT)
.L14143:
	ldr	r3, [r4, #152]
	ldr	r1, .L14176+12
	cmp	r3, #0
	movne	r2, #0
.LPIC4072:
	add	r1, pc, r1
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r4
	str	r5, [sp]
	ldr	r2, [r4]
	add	r0, r0, #32
	bl	dev_err(PLT)
.L14140:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14139:
	mvn	r5, #18
	b	.L14137
.L14175:
	mov	r0, r4
	bl	modem_register(PLT)
	b	.L14140
.L14177:
	.align	2
.L14176:
	.word	.LANCHOR2-(.LPIC4051+8)
	.word	acm_cdc_notify_complete-(.LPIC4060+8)
	.word	.LANCHOR0-(.LPIC4069+8)
	.word	.LC805-(.LPIC4072+8)
	.fnend
	.size	acm_bind, .-acm_bind
	.align	2
	.global	modem_unregister
	.type	modem_unregister, %function
modem_unregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L14180
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, #1
	ldr	ip, .L14180+4
	str	lr, [sp, #4]
	mov	lr, #0
	mov	r1, r4
	mov	r2, r4
	mov	r3, lr
.LPIC4074:
	add	r0, pc, r0
.LPIC4073:
	add	ip, pc, ip
	str	r4, [r0], #4
	str	lr, [ip, #3948]
	bl	__wake_up(PLT)
	ldr	r0, .L14180+8
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC4076:
	add	r0, pc, r0
	b	printk(PLT)
.L14181:
	.align	2
.L14180:
	.word	.LANCHOR1-(.LPIC4074+8)
	.word	.LANCHOR4-(.LPIC4073+8)
	.word	.LC806-(.LPIC4076+8)
	.fnend
	.size	modem_unregister, .-modem_unregister
	.align	2
	.type	acm_unbind, %function
acm_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	bl	modem_unregister(PLT)
	mov	r0, r4
	bl	usb_free_all_descriptors(PLT)
	ldrd	r0, [r4, #152]
	bl	gs_free_req(PLT)
	ldr	r0, [r4]
	bl	kfree(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
	.fnend
	.size	acm_unbind, .-acm_unbind
	.align	2
	.global	acm_bind_config
	.type	acm_bind_config, %function
acm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	ldr	r7, .L14201
	mov	r6, r1
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC4077:
	add	r7, pc, r7
	ldrb	r3, [r7, #3040]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L14197
.L14185:
	ldr	r3, .L14201+4
.LPIC4095:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L14192
	movw	r1, #32976
	mov	r2, #172
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L14198
.L14187:
	mov	r1, #0
	strb	r6, [r4, #146]
	mov	r2, r6
	ldr	ip, .L14201+8
	mov	r0, #208
	ldr	r3, .L14201+12
	str	r1, [r4, #148]
	ldr	r6, .L14201+16
	ldr	r1, .L14201+20
.LPIC4085:
	add	ip, pc, ip
.LPIC4086:
	add	r3, pc, r3
.LPIC4087:
	add	r6, pc, r6
	str	ip, [r4, #116]
.LPIC4088:
	add	r1, pc, r1
	str	r3, [r4, #120]
	str	r6, [r4, #124]
	bl	kasprintf(PLT)
	cmp	r0, #0
	str	r0, [r4]
	beq	.L14199
	ldr	r3, .L14201+24
	mov	r0, r5
	mov	r1, r4
	ldr	r6, .L14201+28
	ldr	r5, .L14201+32
	ldr	lr, .L14201+36
	ldr	ip, .L14201+40
.LPIC4089:
	add	r3, pc, r3
	ldr	r2, .L14201+44
	add	r3, r3, #3072
.LPIC4090:
	add	r6, pc, r6
.LPIC4091:
	add	r5, pc, r5
.LPIC4092:
	add	lr, pc, lr
	str	r6, [r4, #32]
.LPIC4093:
	add	ip, pc, ip
	str	r5, [r4, #36]
.LPIC4094:
	add	r2, pc, r2
	str	r3, [r4, #4]
	str	lr, [r4, #40]
	str	ip, [r4, #52]
	str	r2, [r4, #48]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L14200
.L14186:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14197:
	ldr	r0, [r0, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L14186
	ldr	r4, .L14201+48
	uxtb	r3, r0
	ldr	r0, [r5, #24]
	strb	r3, [r7, #3040]
.LPIC4079:
	add	r4, pc, r4
	strb	r3, [r4, #2592]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L14186
	uxtb	r3, r0
	ldr	r0, [r5, #24]
	strb	r3, [r7, #3048]
	strb	r3, [r4, #2612]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L14186
	uxtb	r0, r0
	strb	r0, [r7, #3056]
	strb	r0, [r4, #2583]
	b	.L14185
.L14192:
	mov	r4, #16
	b	.L14187
.L14200:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
	b	.L14186
.L14198:
	mvn	r0, #11
	b	.L14186
.L14199:
	mov	r0, r4
	bl	kfree(PLT)
	mvn	r0, #11
	b	.L14186
.L14202:
	.align	2
.L14201:
	.word	.LANCHOR0-(.LPIC4077+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4095+8))
	.word	acm_connect-(.LPIC4085+8)
	.word	acm_disconnect-(.LPIC4086+8)
	.word	acm_send_break-(.LPIC4087+8)
	.word	.LC807-(.LPIC4088+8)
	.word	.LANCHOR0-(.LPIC4089+8)
	.word	acm_bind-(.LPIC4090+8)
	.word	acm_unbind-(.LPIC4091+8)
	.word	acm_set_alt-(.LPIC4092+8)
	.word	acm_setup-(.LPIC4093+8)
	.word	acm_disable-(.LPIC4094+8)
	.word	.LANCHOR2-(.LPIC4079+8)
	.fnend
	.size	acm_bind_config, .-acm_bind_config
	.align	2
	.type	acm_function_bind_config, %function
acm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r7, [r0, #4]
	ldr	r3, [r7]
	cmp	r3, #0
	movgt	r5, r1
	movgt	r4, #0
	ble	.L14207
.L14204:
	mov	r0, r5
	uxtb	r1, r4
	bl	acm_bind_config(PLT)
	subs	r6, r0, #0
	bne	.L14211
	ldr	r3, [r7]
	add	r4, r4, #1
	cmp	r3, r4
	bgt	.L14204
.L14207:
	mov	r6, #0
.L14205:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14211:
	ldr	r1, .L14212
	mov	r2, r4
	ldr	r0, .L14212+4
.LPIC4097:
	add	r1, pc, r1
	sub	r1, r1, #2784
.LPIC4096:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14205
.L14213:
	.align	2
.L14212:
	.word	.LANCHOR9-(.LPIC4097+8)
	.word	.LC808-(.LPIC4096+8)
	.fnend
	.size	acm_function_bind_config, .-acm_function_bind_config
	.align	2
	.global	adb_req_put
	.type	adb_req_put, %function
adb_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #88
	mov	r5, r1
	mov	r0, r4
	strd	r6, [sp, #8]
	mov	r7, r2
	str	lr, [sp, #20]
	str	r8, [sp, #16]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	ldr	r1, [r5, #4]
	add	r0, r7, #36
	mov	r2, r5
	bl	__list_add(PLT)
	ldr	r8, [sp, #16]
	mov	r0, r4
	mov	r1, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
	.fnend
	.size	adb_req_put, .-adb_req_put
	.align	2
	.type	adb_complete_in, %function
adb_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14222
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r2, r1
	str	lr, [sp, #4]
	ldr	r1, [r1, #44]
.LPIC4098:
	add	r3, pc, r3
	ldr	r4, [r3, #-1472]
	cmp	r1, #0
	movne	r3, #1
	mov	r0, r4
	strne	r3, [r4, #104]
	add	r1, r4, #120
	bl	adb_req_put(PLT)
	ldr	lr, [sp, #4]
	add	r0, r4, #140
	mov	r1, #3
	ldr	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	add	sp, sp, #8
	b	__wake_up(PLT)
.L14223:
	.align	2
.L14222:
	.word	.LANCHOR4-(.LPIC4098+8)
	.fnend
	.size	adb_complete_in, .-adb_complete_in
	.align	2
	.type	adb_function_bind, %function
adb_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r1
	strd	r10, [sp, #24]
	mov	r10, r0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	ldr	r3, [r0, #24]
	.pad #4
	sub	sp, sp, #4
	str	r3, [r1, #84]
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L14251
	ldr	r5, .L14256
	ldr	r6, [r4, #84]
.LPIC4099:
	add	r5, pc, r5
	add	r1, r5, #2720
	strb	r0, [r5, #2722]
	add	r1, r1, #12
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L14226
	add	r1, r5, #2736
	str	r4, [r0]
	add	r1, r1, #8
	str	r0, [r4, #92]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	subs	r5, r0, #0
	beq	.L14226
	str	r4, [r5]
	mov	r1, #208
	str	r5, [r4, #96]
	ldr	r3, [r5, #8]
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	beq	.L14230
	ldr	r8, .L14256+4
.LPIC4114:
	ldr	r8, [pc, r8]		@ tls_load_dot_plus_eight
	ldr	r0, [r8, #48]
	cmp	r0, #0
	beq	.L14228
	mov	r1, #208
	mov	r2, #4096
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L14254
.L14229:
	ldr	r3, .L14256+8
	mov	r5, #4
	mov	fp, #16
	ldr	r9, .L14256+12
.LPIC4111:
	add	r3, pc, r3
.LPIC4113:
	add	r9, pc, r9
	str	r3, [r6, #28]
	str	r6, [r4, #152]
.L14233:
	ldr	r7, [r4, #92]
	mov	r1, #208
	ldr	r3, [r7, #8]
	mov	r0, r7
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	mov	r1, #208
	mov	r2, #4096
	beq	.L14230
	ldr	r3, [r8, #48]
	subs	r0, r3, #0
	beq	.L14231
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r6]
	beq	.L14255
.L14232:
	str	r9, [r6, #28]
	mov	r2, r6
	mov	r0, r4
	add	r1, r4, #120
	bl	adb_req_put(PLT)
	subs	r5, r5, #1
	bne	.L14233
	ldr	r2, [r10, #24]
	ldr	r3, [r2]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L14253
	ldr	r3, .L14256+16
.LPIC4103:
	add	r3, pc, r3
	ldrb	r0, [r3, #2734]	@ zero_extendqisi2
	ldrb	r1, [r3, #2746]	@ zero_extendqisi2
	strb	r0, [r3, #2758]
	strb	r1, [r3, #2770]
	ldr	r2, [r2]
	ldr	r2, [r2, #20]
	cmp	r2, #4
	bls	.L14253
	strb	r0, [r3, #2782]
	mov	r0, r5
	strb	r1, [r3, #2794]
.L14251:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14231:
	str	fp, [r6]
	b	.L14232
.L14253:
	mov	r0, r5
	b	.L14251
.L14228:
	mov	r3, #16
	str	r3, [r6]
	b	.L14229
.L14254:
	ldr	r3, [r5, #8]
	mov	r1, r6
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L14230:
	ldr	r0, .L14256+20
.LPIC4112:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #0
	b	.L14251
.L14226:
	mvn	r0, #18
	b	.L14251
.L14255:
	ldr	r3, [r7, #8]
	mov	r1, r6
	mov	r0, r7
	ldr	r3, [r3, #12]
	blx	r3
	b	.L14230
.L14257:
	.align	2
.L14256:
	.word	.LANCHOR2-(.LPIC4099+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4114+8))
	.word	adb_complete_out-(.LPIC4111+8)
	.word	adb_complete_in-(.LPIC4113+8)
	.word	.LANCHOR2-(.LPIC4103+8)
	.word	.LC809-(.LPIC4112+8)
	.fnend
	.size	adb_function_bind, .-adb_function_bind
	.align	2
	.global	adb_req_get
	.type	adb_req_get, %function
adb_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #88
	mov	r4, r1
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4]
	mov	r6, r0
	cmp	r3, r4
	beq	.L14260
	mov	r0, r3
	sub	r4, r3, #36
	bl	list_del(PLT)
.L14259:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14260:
	mov	r4, #0
	b	.L14259
	.fnend
	.size	adb_req_get, .-adb_req_get
	.align	2
	.type	adb_function_unbind, %function
adb_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r2, #0
	strd	r6, [sp, #8]
	mov	r6, r1
	mov	r1, #1
	str	r8, [sp, #16]
	mov	r3, r2
	add	r0, r6, #128
	str	lr, [sp, #20]
	str	r2, [r6, #100]
	mov	r2, r1
	str	r1, [r6, #104]
	mov	r1, #3
	bl	__wake_up(PLT)
	ldr	r4, [r6, #152]
	ldr	r5, [r6, #96]
	cmp	r4, #0
	beq	.L14263
	ldr	r0, [r4]
	bl	kfree(PLT)
	ldr	r3, [r5, #8]
	mov	r1, r4
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L14263:
	add	r7, r6, #120
	b	.L14264
.L14265:
	ldr	r4, [r6, #92]
	ldr	r0, [r5]
	bl	kfree(PLT)
	mov	r1, r5
	ldr	r3, [r4, #8]
	mov	r0, r4
	ldr	r3, [r3, #12]
	blx	r3
.L14264:
	mov	r0, r6
	mov	r1, r7
	bl	adb_req_get(PLT)
	subs	r5, r0, #0
	bne	.L14265
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
	.fnend
	.size	adb_function_unbind, .-adb_function_unbind
	.align	2
	.type	adb_write, %function
adb_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14315
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC4115:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r3, [r3, #-1472]
	str	r1, [sp]
	ldr	r4, [r0, #124]
	cmp	r3, #0
	beq	.L14291
	mov	r6, r2
	add	r7, r4, #112
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r7]
	add	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L14307
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L14302:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14307:
	mov	r3, sp
	mov	fp, r6
	bic	r10, r3, #8128
	bic	r10, r10, #63
.L14290:
	cmp	r6, #0
	beq	.L14275
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L14286
	add	r5, r4, #120
.L14274:
	mov	r0, r4
	mov	r1, r5
	bl	adb_req_get(PLT)
	subs	r3, r0, #0
	beq	.L14308
.L14276:
	cmp	r6, #4096
	ldr	r2, [r10, #8]
	movcc	r8, r6
	movcs	r8, #4096
	ldr	ip, [sp]
#APP
@ 439 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r1, ip, r8; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	cmp	r2, #0
	ldr	r0, [r3]
	beq	.L14309
	mov	r1, r8
	str	r3, [sp]
	mvn	fp, #13
	bl	__memzero(PLT)
	ldr	r3, [sp]
.L14283:
	mov	r1, r5
	mov	r2, r3
	mov	r0, r4
	bl	adb_req_put(PLT)
.L14275:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L14310
.L14287:
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r7]
	sub	r3, r3, #1
	strex	r2, r3, [r7]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, fp
	b	.L14302
.L14308:
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L14311
	ldr	r3, [r4, #104]
	cmp	r3, #0
	beq	.L14274
.L14286:
	ldr	r3, [r4, #104]
	mvn	fp, #4
	cmp	r3, #0
	beq	.L14287
.L14310:
	add	r0, r4, #128
	mov	r1, #3
	mov	r2, #1
	mov	r3, #0
	bl	__wake_up(PLT)
	b	.L14287
.L14311:
	ldr	r2, .L14315+4
	add	r8, sp, #12
	add	r9, r4, #140
	ldr	r1, [r10, #12]
	str	r3, [sp, #12]
	add	r3, sp, #24
	str	r3, [sp, #24]
.LPIC4117:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	str	r3, [sp, #28]
	str	r1, [sp, #16]
	str	r2, [sp, #20]
	b	.L14281
.L14312:
	bl	schedule(PLT)
.L14281:
	mov	r0, r9
	mov	r1, r8
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	mov	r0, r4
	mov	r1, r5
	bl	adb_req_get(PLT)
	subs	r3, r0, #0
	bne	.L14278
	ldr	r3, [r4, #104]
	cmp	r3, #0
	bne	.L14279
	ldr	r3, [r10, #12]
	ldr	r3, [r3, #4]
	ldr	r3, [r3]
	tst	r3, #1
	beq	.L14312
	mov	r0, r9
	mov	r1, r8
	mov	fp, #65024
	bl	finish_wait(PLT)
	movt	fp, 65535
	b	.L14275
.L14278:
	mov	r0, r9
	mov	r1, r8
	str	r3, [sp, #4]
	bl	finish_wait(PLT)
	ldr	r3, [sp, #4]
	b	.L14276
.L14279:
	mov	r0, r9
	mov	r1, r8
	bl	finish_wait(PLT)
	b	.L14290
.L14309:
	mov	r1, ip
	mov	r2, r8
	str	r3, [sp, #4]
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	ldr	r3, [sp, #4]
	bne	.L14313
	str	r8, [r3, #4]
	ldr	r0, [r4, #92]
	mov	r1, r3
	mov	r2, #32
	str	r3, [sp, #4]
	ldr	ip, [r0, #8]
	ldr	ip, [ip, #16]
	blx	ip
	cmp	r0, #0
	ldr	r3, [sp, #4]
	blt	.L14314
	ldr	r3, [sp]
	rsb	r6, r8, r6
	add	r3, r3, r8
	str	r3, [sp]
	b	.L14290
.L14291:
	mvn	r0, #18
	b	.L14302
.L14314:
	mov	r2, #1
	mvn	fp, #4
	str	r2, [r4, #104]
	b	.L14283
.L14313:
	mvn	fp, #13
	b	.L14283
.L14316:
	.align	2
.L14315:
	.word	.LANCHOR4-(.LPIC4115+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC4117+8))
	.fnend
	.size	adb_write, .-adb_write
	.align	2
	.global	f_midi_bind_config
	.type	f_midi_bind_config, %function
f_midi_bind_config:
	.fnstart
	@ args = 16, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #28
	sub	sp, sp, #28
	ldr	r6, [sp, #76]
	cmp	r6, #0
	beq	.L14318
	mvn	r4, #0
	str	r4, [r6]
	str	r4, [r6, #4]
.L14318:
	ldr	ip, [sp, #64]
	cmp	ip, #16
	cmpls	r3, #16
	bhi	.L14335
	ldr	r10, .L14365
	mov	r7, r0
	mov	r5, r3
	str	r2, [sp, #12]
	mov	r9, r1
.LPIC4137:
	ldr	r10, [pc, r10]		@ tls_load_dot_plus_eight
	ldr	r0, [r10, #36]
	cmp	r0, #0
	beq	.L14336
	movw	r1, #32976
	mov	r2, #344
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L14358
.L14320:
	cmp	r5, #0
	beq	.L14321
	add	fp, r4, #228
	mov	r8, #0
	b	.L14324
.L14360:
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	beq	.L14359
.L14322:
	strb	r8, [r0, #8]
	add	r8, r8, #1
	mov	r3, #0
	cmp	r8, r5
	str	r4, [r0]
	str	r3, [r0, #4]
	str	r0, [fp, #4]!
	beq	.L14321
.L14324:
	ldr	r3, [r10, #24]
	movw	r1, #32976
	mov	r2, #12
	subs	r0, r3, #0
	bne	.L14360
	mov	r0, #16
	b	.L14322
.L14321:
	ldr	r3, [r7, #24]
	mov	r2, r4
	add	r0, r4, #300
	ldr	r1, .L14365+4
	ldr	r3, [r3]
.LPIC4119:
	add	r1, pc, r1
	str	r3, [r4, #84]
	bl	tasklet_init(PLT)
	ldr	r0, [sp, #12]
	mov	r1, #208
	bl	kstrdup(PLT)
	ldr	ip, [sp, #68]
	mov	r1, r0
	mov	r2, #0
	str	r9, [r4, #328]
	mov	r0, r9
	mov	r3, r2
	str	r1, [r4, #332]
	str	r5, [r4, #320]
	str	ip, [r4, #336]
	ldr	ip, [sp, #72]
	str	ip, [r4, #340]
	ldr	ip, [sp, #64]
	str	ip, [r4, #324]
	add	ip, sp, #16
	str	ip, [sp]
	bl	snd_card_create(PLT)
	subs	r9, r0, #0
	blt	.L14361
	ldr	r8, .L14365+8
	mov	r1, #8192
	mov	r2, r4
	ldr	r0, [sp, #16]
.LPIC4121:
	add	r8, pc, r8
	add	r3, r8, #3072
	str	r0, [r4, #96]
	add	r3, r3, #8
	bl	snd_device_new(PLT)
	subs	r9, r0, #0
	blt	.L14362
	ldr	r0, .L14365+12
	ldr	r2, .L14365+16
	ldr	r3, [sp, #16]
	ldr	r1, .L14365+20
.LPIC4123:
	add	r0, pc, r0
.LPIC4125:
	add	r2, pc, r2
	ldrd	r10, [r0]
	ldr	lr, [r0, #8]
	ldr	r0, [r2]
.LPIC4126:
	add	r1, pc, r1
	ldrh	r9, [r2, #4]
	ldrb	r2, [r2, #6]	@ zero_extendqisi2
	str	r10, [r3, #20]	@ unaligned
	str	lr, [r3, #28]	@ unaligned
	str	r0, [sp, #12]
	mov	r0, r3
	str	lr, [r3, #76]	@ unaligned
	ldr	lr, [sp, #12]
	strh	r9, [r3, #40]	@ unaligned
	strb	r2, [r3, #42]
	str	fp, [r3, #24]	@ unaligned
	str	lr, [r3, #36]	@ unaligned
	str	r10, [r3, #68]	@ unaligned
	str	fp, [r3, #72]	@ unaligned
	bl	snd_component_add(PLT)
	ldr	r0, [sp, #16]
	add	r1, sp, #20
	mov	r2, #0
	ldr	ip, [r4, #320]
	ldr	r3, [r4, #324]
	str	r1, [sp, #4]
	add	r1, r0, #68
	str	ip, [sp]
	bl	snd_rawmidi_new(PLT)
	subs	r9, r0, #0
	blt	.L14363
	ldr	r9, [sp, #20]
	add	r10, r8, #3088
	ldr	r1, [sp, #16]
	add	r10, r10, #4
	str	r9, [r4, #100]
	add	r0, r9, #84
	add	r1, r1, #36
	bl	strcpy(PLT)
	mov	r3, #7
	mov	r0, r9
	str	r4, [r9, #200]
	mov	r2, r10
	mov	r1, #0
	str	r3, [r9, #16]
	bl	snd_rawmidi_set_ops(PLT)
	ldr	r0, [sp, #20]
	add	r2, r10, #16
	mov	r1, #1
	bl	snd_rawmidi_set_ops(PLT)
	ldr	r0, [sp, #16]
	bl	snd_card_register(PLT)
	subs	r9, r0, #0
	blt	.L14364
	add	r8, r8, #3120
	mov	r0, r7
	ldr	ip, .L14365+24
	add	r8, r8, #4
	ldr	r2, .L14365+28
	mov	r1, r4
	ldr	r3, .L14365+32
	str	r8, [r4, #4]
	ldr	r7, .L14365+36
	ldr	r8, .L14365+40
.LPIC4131:
	add	ip, pc, ip
.LPIC4133:
	add	r2, pc, r2
.LPIC4134:
	add	r3, pc, r3
	str	ip, [r4]
.LPIC4135:
	add	r7, pc, r7
.LPIC4136:
	add	r8, pc, r8
	strd	r2, [r4, #32]
	str	r7, [r4, #40]
	str	r8, [r4, #48]
	bl	usb_add_function(PLT)
	subs	r9, r0, #0
	bne	.L14342
	cmp	r6, #0
	moveq	r0, r6
	beq	.L14352
	ldr	r3, [r4, #100]
	mov	r0, r9
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r6]
	ldr	r3, [r4, #100]
	ldr	r3, [r3, #12]
	str	r3, [r6, #4]
	ldr	r3, [r4, #100]
	ldr	r3, [r3]
	ldr	r3, [r3]
	str	r3, [r6]
	ldr	r3, [r4, #100]
	ldr	r3, [r3, #12]
	str	r3, [r6, #4]
	b	.L14352
.L14359:
	mvn	r9, #11
.L14323:
	subs	r5, r8, #1
	addcs	r8, r8, #58
	addcs	r8, r4, r8, asl #2
	bcc	.L14333
.L14332:
	sub	r5, r5, #1
	ldr	r0, [r8, #-4]!
	bl	kfree(PLT)
	cmn	r5, #1
	bne	.L14332
.L14333:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r9
.L14352:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14336:
	mov	r4, #16
	b	.L14320
.L14363:
	ldr	r0, [r4, #84]
	mov	r2, r9
	ldr	r1, .L14365+44
	add	r0, r0, #32
.LPIC4127:
	add	r1, pc, r1
	bl	dev_err(PLT)
.L14326:
	ldr	r0, [r4, #96]
	cmp	r0, #0
	beq	.L14342
	bl	snd_card_free(PLT)
	mov	r3, #0
	str	r3, [r4, #96]
.L14342:
	mov	r8, r5
	b	.L14323
.L14358:
	mvn	r0, #11
	b	.L14352
.L14361:
	ldr	r0, [r4, #84]
	ldr	r1, .L14365+48
	add	r0, r0, #32
.LPIC4120:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L14326
.L14362:
	ldr	r0, [r4, #84]
	mov	r2, r9
	ldr	r1, .L14365+52
	add	r0, r0, #32
.LPIC4122:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L14326
.L14335:
	mvn	r0, #21
	b	.L14352
.L14364:
	ldr	r0, [r4, #84]
	ldr	r1, .L14365+56
	add	r0, r0, #32
.LPIC4130:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L14326
.L14366:
	.align	2
.L14365:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4137+8))
	.word	f_midi_in_tasklet-(.LPIC4119+8)
	.word	.LANCHOR0-(.LPIC4121+8)
	.word	.LC812-(.LPIC4123+8)
	.word	.LC813-(.LPIC4125+8)
	.word	.LC814-(.LPIC4126+8)
	.word	.LC817-(.LPIC4131+8)
	.word	f_midi_bind-(.LPIC4133+8)
	.word	f_midi_unbind-(.LPIC4134+8)
	.word	f_midi_set_alt-(.LPIC4135+8)
	.word	f_midi_disable-(.LPIC4136+8)
	.word	.LC815-(.LPIC4127+8)
	.word	.LC810-(.LPIC4120+8)
	.word	.LC811-(.LPIC4122+8)
	.word	.LC816-(.LPIC4130+8)
	.fnend
	.size	f_midi_bind_config, .-f_midi_bind_config
	.align	2
	.type	midi_function_bind_config, %function
midi_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	mov	r2, #1
	.pad #20
	sub	sp, sp, #20
	mov	lr, #1024
	mov	ip, #32
	str	r2, [sp]
	mov	r3, r2
	mov	r2, #0
	str	lr, [sp, #4]
	str	ip, [sp, #8]
	ldr	ip, [r0, #4]
	mov	r0, r1
	mvn	r1, #0
	str	ip, [sp, #12]
	bl	f_midi_bind_config(PLT)
	add	sp, sp, #20
	@ sp needed
	ldr	pc, [sp], #4
	.fnend
	.size	midi_function_bind_config, .-midi_function_bind_config
	.align	2
	.global	rndis_signal_connect
	.type	rndis_signal_connect, %function
rndis_signal_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14376
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0, asl #6
	strd	r6, [sp, #8]
	mov	r7, r0, asl #2
	mov	r1, #0
	str	r8, [sp, #16]
	rsb	r6, r7, r4
	str	lr, [sp, #20]
.LPIC4138:
	add	r3, pc, r3
	add	r2, r3, #3472
	add	r3, r3, r6
	add	r2, r2, #4
	add	r6, r2, r6
	str	r1, [r3, #3492]
	ldr	r3, [r6, #4]
	cmp	r3, r1
	beq	.L14372
	ldr	r3, .L14376+4
.LPIC4143:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, r1
	beq	.L14373
	mov	r1, #32
	mov	r2, #40
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L14374
	add	r2, r5, #20
.L14371:
	ldr	r3, .L14376+8
	rsb	r1, r7, r4
	str	r2, [r5, #8]
	mov	r4, #0
	mov	r7, #20
	mov	r0, r5
	str	r7, [r5, #12]
.LPIC4141:
	add	r3, pc, r3
	str	r4, [r5, #16]
	add	r2, r3, r1
	mov	r3, r2
	add	r2, r2, #3520
	ldr	r1, [r3, #3532]
	add	r2, r2, #8
	bl	__list_add(PLT)
	ldr	r1, [r5, #8]
	mov	r3, #11
	mov	r2, #7
	movt	r3, 16385
	str	r7, [r1, #4]
	str	r4, [r1, #12]
	str	r4, [r1, #16]
	str	r2, [r1]
	str	r3, [r1, #8]
	ldr	r0, [r6, #48]
	ldr	r3, [r6, #44]
	blx	r3
	mov	r0, r4
.L14370:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14373:
	mov	r2, #36
	mov	r5, #16
	b	.L14371
.L14372:
	movw	r0, #65012
	movt	r0, 65535
	b	.L14370
.L14374:
	mvn	r0, #11
	b	.L14370
.L14377:
	.align	2
.L14376:
	.word	.LANCHOR4-(.LPIC4138+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4143+8))
	.word	.LANCHOR4-(.LPIC4141+8)
	.fnend
	.size	rndis_signal_connect, .-rndis_signal_connect
	.align	2
	.global	rndis_signal_disconnect
	.type	rndis_signal_disconnect, %function
rndis_signal_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14385
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0, asl #6
	strd	r6, [sp, #8]
	mov	r7, r0, asl #2
	mov	r1, #1
	str	r8, [sp, #16]
	rsb	r6, r7, r4
	str	lr, [sp, #20]
.LPIC4144:
	add	r3, pc, r3
	add	r2, r3, #3472
	add	r3, r3, r6
	add	r2, r2, #4
	add	r6, r2, r6
	str	r1, [r3, #3492]
	ldr	r3, [r6, #4]
	cmp	r3, #0
	beq	.L14381
	ldr	r3, .L14385+4
.LPIC4149:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L14382
	mov	r1, #32
	mov	r2, #40
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L14383
	add	r2, r5, #20
.L14380:
	ldr	r3, .L14385+8
	rsb	r1, r7, r4
	str	r2, [r5, #8]
	mov	r4, #0
	mov	r7, #20
	mov	r0, r5
	str	r7, [r5, #12]
.LPIC4147:
	add	r3, pc, r3
	str	r4, [r5, #16]
	add	r2, r3, r1
	mov	r3, r2
	add	r2, r2, #3520
	ldr	r1, [r3, #3532]
	add	r2, r2, #8
	bl	__list_add(PLT)
	ldr	r1, [r5, #8]
	mov	r3, #12
	mov	r2, #7
	movt	r3, 16385
	str	r7, [r1, #4]
	str	r4, [r1, #12]
	str	r4, [r1, #16]
	str	r2, [r1]
	str	r3, [r1, #8]
	ldr	r0, [r6, #48]
	ldr	r3, [r6, #44]
	blx	r3
	mov	r0, r4
.L14379:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14382:
	mov	r2, #36
	mov	r5, #16
	b	.L14380
.L14381:
	movw	r0, #65012
	movt	r0, 65535
	b	.L14379
.L14383:
	mvn	r0, #11
	b	.L14379
.L14386:
	.align	2
.L14385:
	.word	.LANCHOR4-(.LPIC4144+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4149+8))
	.word	.LANCHOR4-(.LPIC4147+8)
	.fnend
	.size	rndis_signal_disconnect, .-rndis_signal_disconnect
	.align	2
	.type	rndis_proc_write, %function
rndis_proc_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r8, [sp, #16]
	subs	r8, r2, #0
	strd	r6, [sp, #8]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r3, [r0, #12]
	ldr	r3, [r3, #32]
	ldr	r3, [r3, #-20]
	ldr	r7, [r3, #44]
	beq	.L14397
	mov	r3, sp
	mov	r6, #0
	bic	r9, r3, #8128
	mov	r4, r1
	mov	r5, r6
	bic	r9, r9, #63
	add	r10, r1, r8
.L14396:
	ldr	r1, [r9, #8]
	mov	r0, r4
	sub	r1, r1, #1
#APP
@ 1188 "/root/lol//drivers/usb/gadget/rndis.c" 1
	.ifnc r0,r0 ; .err ; .endif
	.ifnc r2,r2 ; .err ; .endif
	.ifnc r1,r1 ; .err ; .endif
	bl	__get_user_1
@ 0 "" 2
	uxtb	r2, r2
	cmp	r0, #0
	sub	r2, r2, #48
	bne	.L14398
	cmp	r2, #52
	addls	pc, pc, r2, asl #2
	b	.L14390
.L14392:
	b	.L14391
	b	.L14391
	b	.L14391
	b	.L14391
	b	.L14391
	b	.L14391
	b	.L14391
	b	.L14391
	b	.L14391
	b	.L14391
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14393
	b	.L14394
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14390
	b	.L14393
	b	.L14394
	.p2align 1
.L14394:
	ldrb	r0, [r7]	@ zero_extendqisi2
	bl	rndis_signal_disconnect(PLT)
.L14395:
	add	r4, r4, #1
	cmp	r4, r10
	bne	.L14396
.L14397:
	mov	r0, r8
.L14389:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14393:
	ldrb	r0, [r7]	@ zero_extendqisi2
	bl	rndis_signal_connect(PLT)
	b	.L14395
.L14391:
	mov	r3, r5, asl #3
	mov	r6, #1
	add	r5, r3, r5, asl #1
	add	r5, r2, r5
	b	.L14395
.L14390:
	cmp	r6, #0
	movne	r6, #1
	strne	r5, [r7, #12]
	b	.L14395
.L14398:
	mvn	r0, #13
	b	.L14389
	.fnend
	.size	rndis_proc_write, .-rndis_proc_write
	.align	2
	.global	rndis_set_host_mac
	.type	rndis_set_host_mac, %function
rndis_set_host_mac:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L14405
	mov	r2, r0, asl #2
	rsb	r0, r2, r0, asl #6
.LPIC4150:
	add	r3, pc, r3
	add	r3, r3, r0
	str	r1, [r3, #3496]
	bx	lr
.L14406:
	.align	2
.L14405:
	.word	.LANCHOR4-(.LPIC4150+8)
	.fnend
	.size	rndis_set_host_mac, .-rndis_set_host_mac
	.align	2
	.global	rndis_register
	.type	rndis_register, %function
rndis_register:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	beq	.L14409
	ldr	r3, .L14412
.LPIC4151:
	add	r3, pc, r3
	ldrb	r2, [r3, #3477]	@ zero_extendqisi2
	cmp	r2, #0
	mvnne	r0, #18
	beq	.L14411
.L14408:
	bx	lr
.L14411:
	mov	ip, #1
	str	r0, [r3, #3520]
	mov	r0, r2
	str	r1, [r3, #3524]
	strb	r2, [r3, #3513]
	strb	ip, [r3, #3477]
	strb	ip, [r3, #3512]
	bx	lr
.L14409:
	mvn	r0, #21
	b	.L14408
.L14413:
	.align	2
.L14412:
	.word	.LANCHOR4-(.LPIC4151+8)
	.fnend
	.size	rndis_register, .-rndis_register
	.align	2
	.global	rndis_deregister
	.type	rndis_deregister, %function
rndis_deregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	bgt	.L14414
	ldr	r3, .L14416
	mov	r2, r0, asl #6
	mov	r1, #0
	sub	r0, r2, r0, asl #2
.LPIC4157:
	add	r3, pc, r3
	add	r0, r3, r0
	strb	r1, [r0, #3477]
.L14414:
	bx	lr
.L14417:
	.align	2
.L14416:
	.word	.LANCHOR4-(.LPIC4157+8)
	.fnend
	.size	rndis_deregister, .-rndis_deregister
	.align	2
	.global	rndis_set_param_dev
	.type	rndis_set_param_dev, %function
rndis_set_param_dev:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L14420
	cmp	r0, #0
	mov	r3, r0
	bne	.L14421
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r4, .L14424
	str	lr, [sp, #4]
	ldr	lr, .L14424+4
	ldr	ip, .L14424+8
.LPIC4162:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
.LPIC4161:
	ldr	lr, [pc, lr]		@ tls_load_dot_plus_eight
.LPIC4158:
	add	ip, pc, ip
	str	r3, [r4]
	str	r1, [ip, #3504]
	str	r2, [ip, #3500]
	str	r3, [lr]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L14421:
	mvn	r0, #0
	bx	lr
.L14420:
	mvn	r0, #21
	bx	lr
.L14425:
	.align	2
.L14424:
	.word	rndis_ul_max_xfer_size_rcvd(GOT_PREL)+(.-(.LPIC4162+8))
	.word	rndis_ul_max_pkt_per_xfer_rcvd(GOT_PREL)+(.-(.LPIC4161+8))
	.word	.LANCHOR4-(.LPIC4158+8)
	.fnend
	.size	rndis_set_param_dev, .-rndis_set_param_dev
	.align	2
	.global	rndis_set_param_vendor
	.type	rndis_set_param_vendor, %function
rndis_set_param_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	adds	r0, r0, #0
	movne	r0, #1
	cmp	r2, #0
	orreq	r0, r0, #1
	cmp	r0, #0
	bne	.L14428
	ldr	r3, .L14429
.LPIC4163:
	add	r3, pc, r3
	str	r1, [r3, #3508]
	str	r2, [r3, #3516]
.L14427:
	bx	lr
.L14428:
	mvn	r0, #0
	b	.L14427
.L14430:
	.align	2
.L14429:
	.word	.LANCHOR4-(.LPIC4163+8)
	.fnend
	.size	rndis_set_param_vendor, .-rndis_set_param_vendor
	.align	2
	.global	rndis_set_param_medium
	.type	rndis_set_param_medium, %function
rndis_set_param_medium:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r0, #0
	bne	.L14433
	ldr	r3, .L14434
.LPIC4165:
	add	r3, pc, r3
	str	r1, [r3, #3484]
	str	r2, [r3, #3488]
.L14432:
	bx	lr
.L14433:
	mvn	r0, #0
	b	.L14432
.L14435:
	.align	2
.L14434:
	.word	.LANCHOR4-(.LPIC4165+8)
	.fnend
	.size	rndis_set_param_medium, .-rndis_set_param_medium
	.align	2
	.type	rndis_close, %function
rndis_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	mov	r2, r1
	ldrb	r0, [r0, #164]	@ zero_extendqisi2
	bl	rndis_set_param_medium(PLT)
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #164]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	rndis_signal_disconnect(PLT)
	.fnend
	.size	rndis_close, .-rndis_close
	.align	2
	.type	rndis_open, %function
rndis_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #20]
	ldrb	r0, [r0, #164]	@ zero_extendqisi2
	ldr	r3, [r3, #24]
	ldr	r3, [r3]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	bls	.L14439
	ldr	r3, [r3, #16]
	cmp	r3, #5
	beq	.L14447
.L14441:
	cmp	r3, #3
	movne	r2, #97280
	moveq	r2, #4259840
.L14440:
	mov	r1, #0
	bl	rndis_set_param_medium(PLT)
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #164]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	rndis_signal_connect(PLT)
.L14439:
	cmp	r2, #2
	movls	r2, #97280
	bls	.L14440
	ldr	r3, [r3, #16]
	b	.L14441
.L14447:
	mov	r2, #8519680
	b	.L14440
	.fnend
	.size	rndis_open, .-rndis_open
	.align	2
	.type	rndis_qc_close, %function
rndis_qc_close:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	mov	r1, #0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	mov	r2, r1
	ldrb	r0, [r0, #144]	@ zero_extendqisi2
	bl	rndis_set_param_medium(PLT)
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #144]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	rndis_signal_disconnect(PLT)
	.fnend
	.size	rndis_qc_close, .-rndis_qc_close
	.align	2
	.type	rndis_qc_open, %function
rndis_qc_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #20]
	ldrb	r0, [r0, #144]	@ zero_extendqisi2
	ldr	r3, [r3, #24]
	ldr	r3, [r3]
	ldr	r2, [r3, #20]
	cmp	r2, #4
	bls	.L14451
	ldr	r3, [r3, #16]
	cmp	r3, #5
	beq	.L14459
.L14453:
	cmp	r3, #3
	movne	r2, #97280
	moveq	r2, #4259840
.L14452:
	mov	r1, #0
	bl	rndis_set_param_medium(PLT)
	ldr	lr, [sp, #4]
	ldr	r0, [r4, #144]
	ldr	r4, [sp]
	add	sp, sp, #8
	b	rndis_signal_connect(PLT)
.L14451:
	cmp	r2, #2
	movls	r2, #97280
	bls	.L14452
	ldr	r3, [r3, #16]
	b	.L14453
.L14459:
	mov	r2, #8519680
	b	.L14452
	.fnend
	.size	rndis_qc_open, .-rndis_qc_open
	.align	2
	.global	rndis_set_max_pkt_xfer
	.type	rndis_set_max_pkt_xfer, %function
rndis_set_max_pkt_xfer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L14461
	mov	r2, r0, asl #2
	rsb	r0, r2, r0, asl #6
.LPIC4167:
	add	r3, pc, r3
	add	r3, r3, r0
	strb	r1, [r3, #3512]
	bx	lr
.L14462:
	.align	2
.L14461:
	.word	.LANCHOR4-(.LPIC4167+8)
	.fnend
	.size	rndis_set_max_pkt_xfer, .-rndis_set_max_pkt_xfer
	.align	2
	.type	rndis_bind, %function
rndis_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r1
	strd	r8, [sp, #16]
	mov	r8, r0
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r7, [r0, #24]
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L14464
	ldr	r5, .L14508
	uxtb	r4, r4
	mov	r0, r8
	mov	r1, r6
	strb	r4, [r6, #148]
.LPIC4168:
	add	r5, pc, r5
	strb	r4, [r5, #2806]
	strb	r4, [r5, #2814]
	strb	r4, [r5, #2827]
	bl	usb_interface_id(PLT)
	subs	r4, r0, #0
	blt	.L14464
	uxtb	r4, r4
	add	r1, r5, #2832
	add	r1, r1, #12
	strb	r4, [r6, #149]
	strb	r4, [r5, #2834]
	strb	r4, [r5, #2828]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L14466
	add	r1, r5, #2848
	str	r0, [r6, #88]
	add	r1, r1, #8
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L14466
	add	r1, r5, #2864
	str	r0, [r6, #92]
	add	r1, r1, #4
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L14466
	str	r3, [r6, #168]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r4, r0
	str	r0, [r6, #172]
	beq	.L14469
	ldr	r3, .L14508+4
.LPIC4195:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L14468
	mov	r1, #208
	mov	r2, #8
	bl	kmem_cache_alloc_trace(PLT)
.L14468:
	str	r0, [r4]
	ldr	r2, [r6, #172]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14469
	mov	r1, #8
	ldr	r5, .L14508+8
	mov	r0, r6
	ldr	r3, .L14508+12
	str	r1, [r2, #4]
	ldr	lr, [r6, #172]
	ldr	ip, .L14508+16
.LPIC4178:
	add	r5, pc, r5
	ldrb	r4, [r5, #2858]	@ zero_extendqisi2
.LPIC4187:
	add	r3, pc, r3
	str	r6, [lr, #32]
	ldr	r9, [r6, #172]
	add	r1, r3, #3120
	ldrb	r8, [r5, #2846]	@ zero_extendqisi2
.LPIC4177:
	add	ip, pc, ip
	add	r2, r3, #3168
	ldrb	lr, [r5, #2870]	@ zero_extendqisi2
	add	r3, r3, #3216
	add	r1, r1, #12
	add	r2, r2, #8
	add	r3, r3, #4
	strb	r4, [r5, #2894]
	str	ip, [r9, #28]
	strb	r4, [r5, #2930]
	strb	r8, [r5, #2882]
	strb	r8, [r5, #2918]
	strb	lr, [r5, #2906]
	strb	lr, [r5, #2942]
	bl	usb_assign_descriptors(PLT)
	subs	r4, r0, #0
	beq	.L14506
.L14464:
	mov	r0, r6
	bl	usb_free_all_descriptors(PLT)
	ldr	r3, [r6, #172]
	cmp	r3, #0
	beq	.L14473
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r6, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L14473:
	ldr	r3, [r6, #168]
	ldr	r1, .L14508+20
	cmp	r3, #0
	movne	r2, #0
.LPIC4194:
	add	r1, pc, r1
	strne	r2, [r3]
	ldr	r3, [r6, #92]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r6, #88]
	cmp	r3, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r0, [r7]
	mov	r3, r4
	ldr	r2, [r6]
	add	r0, r0, #32
	bl	dev_err(PLT)
	mov	r0, r4
.L14471:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14466:
	mvn	r4, #18
	b	.L14464
.L14469:
	mvn	r4, #11
	b	.L14464
.L14506:
	ldr	r2, .L14508+24
	mov	r1, r6
	ldr	r3, .L14508+28
	ldr	r0, .L14508+32
.LPIC4190:
	add	r2, pc, r2
.LPIC4191:
	add	r3, pc, r3
.LPIC4192:
	add	r0, pc, r0
	strd	r2, [r6, #136]
	bl	rndis_register(PLT)
	subs	r4, r0, #0
	blt	.L14464
	mov	r1, #0
	str	r4, [r6, #164]
	uxtb	r0, r4
	mov	r2, r1
	bl	rndis_set_param_medium(PLT)
	ldr	r0, [r6, #164]
	add	r1, r6, #150
	bl	rndis_set_host_mac(PLT)
	ldrb	r1, [r5, #2952]	@ zero_extendqisi2
	ldrb	r0, [r6, #164]	@ zero_extendqisi2
	bl	rndis_set_max_pkt_xfer(PLT)
	ldr	r2, [r6, #160]
	cmp	r2, #0
	beq	.L14472
	ldr	r1, [r6, #156]
	cmp	r1, #0
	bne	.L14507
.L14472:
	mov	r0, #0
	b	.L14471
.L14507:
	ldrb	r0, [r6, #164]	@ zero_extendqisi2
	bl	rndis_set_param_vendor(PLT)
	cmp	r0, #0
	bne	.L14464
	b	.L14472
.L14509:
	.align	2
.L14508:
	.word	.LANCHOR2-(.LPIC4168+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4195+8))
	.word	.LANCHOR2-(.LPIC4178+8)
	.word	.LANCHOR0-(.LPIC4187+8)
	.word	rndis_response_complete-(.LPIC4177+8)
	.word	.LC566-(.LPIC4194+8)
	.word	rndis_open-(.LPIC4190+8)
	.word	rndis_close-(.LPIC4191+8)
	.word	rndis_response_available-(.LPIC4192+8)
	.fnend
	.size	rndis_bind, .-rndis_bind
	.align	2
	.global	rndis_set_pkt_alignment_factor
	.type	rndis_set_pkt_alignment_factor, %function
rndis_set_pkt_alignment_factor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L14511
	mov	r2, r0, asl #2
	rsb	r0, r2, r0, asl #6
.LPIC4196:
	add	r3, pc, r3
	add	r3, r3, r0
	strb	r1, [r3, #3513]
	bx	lr
.L14512:
	.align	2
.L14511:
	.word	.LANCHOR4-(.LPIC4196+8)
	.fnend
	.size	rndis_set_pkt_alignment_factor, .-rndis_set_pkt_alignment_factor
	.align	2
	.type	rndis_qc_bind, %function
rndis_qc_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	str	r8, [sp, #16]
	mov	r8, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #20]
	ldr	r7, [r0, #24]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L14514
	ldr	r6, .L14573
	uxtb	r5, r5
	mov	r0, r8
	mov	r1, r4
	strb	r5, [r4, #120]
.LPIC4197:
	add	r6, pc, r6
	strb	r5, [r6, #2958]
	strb	r5, [r6, #2966]
	strb	r5, [r6, #2979]
	bl	usb_interface_id(PLT)
	subs	r5, r0, #0
	blt	.L14514
	uxtb	r5, r5
	add	r1, r6, #2992
	add	r1, r1, #4
	strb	r5, [r4, #121]
	strb	r5, [r6, #2986]
	strb	r5, [r6, #2980]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L14516
	str	r0, [r4, #88]
	add	r1, r6, #3008
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L14516
	add	r1, r6, #3008
	str	r0, [r4, #92]
	add	r1, r1, #12
	str	r7, [r0]
	ldr	r0, [r7]
	bl	usb_ep_autoconfig(PLT)
	subs	r3, r0, #0
	beq	.L14516
	str	r3, [r4, #156]
	ldr	r2, [r3, #8]
	mov	r1, #208
	str	r7, [r3]
	ldr	r3, [r2, #8]
	blx	r3
	cmp	r0, #0
	mov	r5, r0
	str	r0, [r4, #160]
	beq	.L14519
	ldr	r3, .L14573+4
.LPIC4227:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	moveq	r0, #16
	beq	.L14518
	mov	r1, #208
	mov	r2, #8
	bl	kmem_cache_alloc_trace(PLT)
.L14518:
	str	r0, [r5]
	ldr	r2, [r4, #160]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L14519
	mov	r1, #8
	ldr	r6, .L14573+8
	ldr	r3, .L14573+12
	str	r1, [r2, #4]
	ldr	r2, [r4, #160]
.LPIC4207:
	add	r6, pc, r6
.LPIC4206:
	add	r3, pc, r3
	add	r0, r6, #3264
	str	r4, [r2, #32]
	ldr	r2, [r4, #160]
	add	r0, r0, #12
	str	r3, [r2, #28]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #16]
	beq	.L14519
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bhi	.L14572
.L14520:
	ldr	r2, .L14573+16
	mov	r1, r4
	ldr	r3, .L14573+20
	ldr	r0, .L14573+24
.LPIC4215:
	add	r2, pc, r2
.LPIC4216:
	add	r3, pc, r3
.LPIC4217:
	add	r0, pc, r0
	strd	r2, [r4, #112]
	bl	rndis_register(PLT)
	subs	r5, r0, #0
	blt	.L14514
	mov	r1, #0
	str	r5, [r4, #144]
	uxtb	r0, r5
	mov	r2, r1
	bl	rndis_set_param_medium(PLT)
	ldr	r0, [r4, #144]
	add	r1, r4, #122
	bl	rndis_set_host_mac(PLT)
	ldrb	r0, [r4, #144]	@ zero_extendqisi2
	ldr	r1, [r4, #128]
	ldr	r2, [r4, #140]
	bl	rndis_set_param_vendor(PLT)
	subs	r6, r0, #0
	bne	.L14514
	ldrb	r0, [r4, #144]	@ zero_extendqisi2
	ldrb	r1, [r4, #132]	@ zero_extendqisi2
	bl	rndis_set_max_pkt_xfer(PLT)
	ldrb	r0, [r4, #144]	@ zero_extendqisi2
	mov	r1, #2
	bl	rndis_set_pkt_alignment_factor(PLT)
.L14524:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14572:
	ldr	r5, .L14573+28
	add	r0, r6, #3312
	add	r0, r0, #8
.LPIC4208:
	add	r5, pc, r5
	ldrb	r1, [r5, #2998]	@ zero_extendqisi2
	ldrb	r2, [r5, #3010]	@ zero_extendqisi2
	ldrb	r3, [r5, #3022]	@ zero_extendqisi2
	strb	r1, [r5, #3034]
	strb	r2, [r5, #3046]
	strb	r3, [r5, #3058]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #8]
	beq	.L14519
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L14520
	ldrb	r3, [r5, #3022]	@ zero_extendqisi2
	add	r0, r6, #3360
	ldrb	r1, [r5, #2998]	@ zero_extendqisi2
	add	r0, r0, #4
	ldrb	r2, [r5, #3010]	@ zero_extendqisi2
	strb	r3, [r5, #3094]
	strb	r1, [r5, #3070]
	strb	r2, [r5, #3082]
	bl	usb_copy_descriptors(PLT)
	cmp	r0, #0
	str	r0, [r4, #12]
	ldreq	r3, [r8, #24]
	mvneq	r5, #11
	ldreq	r3, [r3]
	ldreq	r3, [r3, #20]
	bne	.L14520
.L14523:
	cmp	r3, #2
	bhi	.L14532
.L14526:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	beq	.L14527
	bl	kfree(PLT)
.L14527:
	ldr	r3, [r4, #160]
	cmp	r3, #0
	beq	.L14528
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
.L14528:
	ldr	r3, [r4, #156]
	mov	r6, r5
	ldr	r1, .L14573+32
	ldr	r0, .L14573+36
	cmp	r3, #0
	movne	r2, #0
.LPIC4226:
	add	r1, pc, r1
	sub	r1, r1, #2752
.LPIC4225:
	add	r0, pc, r0
	strne	r2, [r3]
	ldr	r3, [r4, #92]
	sub	r1, r1, #4
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	ldr	r3, [r4, #88]
	ldr	r2, [r3, #28]
	cmp	r2, #0
	movne	r2, #0
	strne	r2, [r3]
	mov	r3, r5
	ldr	r2, [r4]
	bl	printk(PLT)
	b	.L14524
.L14519:
	mvn	r5, #11
.L14514:
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bls	.L14523
	ldr	r0, [r4, #12]
	cmp	r0, #0
	beq	.L14532
	bl	kfree(PLT)
	ldr	r3, [r8, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L14523
.L14532:
	ldr	r0, [r4, #8]
	cmp	r0, #0
	beq	.L14526
	bl	kfree(PLT)
	b	.L14526
.L14516:
	mvn	r5, #18
	b	.L14514
.L14574:
	.align	2
.L14573:
	.word	.LANCHOR2-(.LPIC4197+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4227+8))
	.word	.LANCHOR0-(.LPIC4207+8)
	.word	rndis_qc_response_complete-(.LPIC4206+8)
	.word	rndis_qc_open-(.LPIC4215+8)
	.word	rndis_qc_close-(.LPIC4216+8)
	.word	rndis_qc_response_available-(.LPIC4217+8)
	.word	.LANCHOR2-(.LPIC4208+8)
	.word	.LANCHOR9-(.LPIC4226+8)
	.word	.LC553-(.LPIC4225+8)
	.fnend
	.size	rndis_qc_bind, .-rndis_qc_bind
	.align	2
	.global	rndis_add_hdr
	.type	rndis_add_hdr, %function
rndis_add_hdr:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r0, #0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	beq	.L14575
	mov	r1, #44
	bl	skb_push(PLT)
	mov	r1, #44
	mov	r4, r0
	bl	__memzero(PLT)
	mov	r3, #0
	mov	r1, #1
	mov	r2, #36
	strb	r1, [r4]
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	ldr	r1, [r5, #80]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
	str	r1, [r4, #4]	@ unaligned
	strb	r2, [r4, #8]
	ldr	r3, [r5, #80]
	sub	r3, r3, #44
	str	r3, [r4, #12]	@ unaligned
.L14575:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_add_hdr, .-rndis_add_hdr
	.align	2
	.type	rndis_add_header, %function
rndis_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r3, [r0, #124]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L14582
	ldr	r4, [r0, #144]
	cmp	r4, #0
	beq	.L14583
	mov	r0, r4
	mov	r1, #44
	bl	__memzero(PLT)
	mov	r3, #0
	mov	r2, #1
	mov	r1, #36
	mov	r0, r5
	strb	r3, [r4, #1]
	strb	r3, [r4, #2]
	strb	r3, [r4, #3]
	strb	r2, [r4]
	ldr	r2, [r5, #80]
	strb	r3, [r4, #9]
	strb	r3, [r4, #10]
	strb	r3, [r4, #11]
	add	r2, r2, #44
	strb	r1, [r4, #8]
	str	r2, [r4, #4]	@ unaligned
	ldr	r3, [r5, #80]
	str	r3, [r4, #12]	@ unaligned
.L14584:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14582:
	mov	r0, r1
	mov	r1, #44
	bl	skb_realloc_headroom(PLT)
	subs	r6, r0, #0
	beq	.L14585
	bl	rndis_add_hdr(PLT)
.L14585:
	mov	r0, r5
	bl	dev_kfree_skb_any(PLT)
	mov	r0, r6
	b	.L14584
.L14583:
	ldr	r0, .L14590
.LPIC4228:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	b	.L14584
.L14591:
	.align	2
.L14590:
	.word	.LC818-(.LPIC4228+8)
	.fnend
	.size	rndis_add_header, .-rndis_add_header
	.align	2
	.type	rndis_qc_add_header, %function
rndis_qc_add_header:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	mov	r1, #44
	mov	r0, r4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	skb_realloc_headroom(PLT)
	subs	r5, r0, #0
	beq	.L14593
	bl	rndis_add_hdr(PLT)
.L14593:
	mov	r0, r4
	bl	dev_kfree_skb_any(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r5
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_add_header, .-rndis_qc_add_header
	.align	2
	.global	rndis_free_response
	.type	rndis_free_response, %function
rndis_free_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r3, r0, asl #2
	strd	r6, [sp, #8]
	ldr	r6, .L14609
	mov	r7, r1
	rsb	r0, r3, r0, asl #6
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC4229:
	add	r6, pc, r6
	add	r3, r6, r0
	ldr	r5, [r3, #3528]
	add	r6, r3, #3520
	add	r6, r6, #8
	cmp	r5, r6
	ldr	r4, [r5]
	bne	.L14601
	b	.L14598
.L14603:
	mov	r4, r3
.L14601:
	cmp	r5, #0
	beq	.L14600
	ldr	r3, [r5, #8]
	cmp	r3, r7
	beq	.L14608
.L14600:
	cmp	r6, r4
	ldr	r3, [r4]
	mov	r5, r4
	bne	.L14603
.L14598:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14608:
	mov	r0, r5
	bl	list_del(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	b	.L14600
.L14610:
	.align	2
.L14609:
	.word	.LANCHOR4-(.LPIC4229+8)
	.fnend
	.size	rndis_free_response, .-rndis_free_response
	.align	2
	.global	rndis_get_next_response
	.type	rndis_get_next_response, %function
rndis_get_next_response:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cmp	r1, #0
	beq	.L14617
	ldr	r2, .L14623
	mov	r3, r0, asl #6
	sub	r0, r3, r0, asl #2
.LPIC4231:
	add	r2, pc, r2
	add	r3, r2, r0
	ldr	r0, [r3, #3528]
	add	r2, r3, #3520
	add	r2, r2, #8
	cmp	r0, r2
	ldr	r3, [r0]
	beq	.L14618
	ldr	ip, [r0, #16]
	cmp	ip, #0
	bne	.L14615
	b	.L14622
.L14616:
	ldr	ip, [r3, #16]
	cmp	ip, #0
	beq	.L14613
	mov	r3, r0
.L14615:
	cmp	r2, r3
	ldr	r0, [r3]
	bne	.L14616
.L14618:
	mov	r0, #0
.L14612:
	bx	lr
.L14622:
	mov	r3, r0
.L14613:
	ldr	r2, [r3, #12]
	mov	r0, #1
	str	r0, [r3, #16]
	str	r2, [r1]
	ldr	r0, [r3, #8]
	bx	lr
.L14617:
	mov	r0, r1
	b	.L14612
.L14624:
	.align	2
.L14623:
	.word	.LANCHOR4-(.LPIC4231+8)
	.fnend
	.size	rndis_get_next_response, .-rndis_get_next_response
	.align	2
	.type	rndis_setup, %function
rndis_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrb	r0, [r1]	@ zero_extendqisi2
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	ldrh	ip, [r1, #4]	@ unaligned
	ldr	r6, [r2, #24]
	ldrh	r8, [r1, #6]	@ unaligned
	orr	r3, r3, r0, asl #8
	ldrh	r2, [r1, #2]	@ unaligned
	cmp	r3, #8448
	ldr	r4, [r6, #4]
	beq	.L14627
	movw	r1, #41217
	cmp	r3, r1
	beq	.L14628
.L14630:
	mvn	r5, #94
.L14636:
	mov	r0, r5
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14628:
	cmp	r2, #0
	bne	.L14630
	ldrb	r3, [r7, #148]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L14630
	ldr	r0, [r7, #164]
	add	r1, sp, #4
	bl	rndis_get_next_response(PLT)
	subs	r5, r0, #0
	beq	.L14630
	mov	r1, r5
	ldr	r2, [sp, #4]
	ldr	r0, [r4]
	bl	memcpy(PLT)
	ldr	r3, .L14639
	str	r7, [r4, #32]
	mov	r1, r5
.LPIC4234:
	add	r3, pc, r3
	str	r3, [r4, #28]
	ldr	r0, [r7, #164]
	bl	rndis_free_response(PLT)
	ldr	r5, [sp, #4]
	cmp	r5, #0
	blt	.L14636
	cmp	r5, r8
	movge	r7, #0
	movlt	r7, #1
	b	.L14629
.L14627:
	cmp	r2, #0
	bne	.L14630
	ldrb	r3, [r7, #148]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L14630
	ldr	r3, .L14639+4
	str	r7, [r4, #32]
	mov	r5, r8
	mov	r7, r2
.LPIC4233:
	add	r3, pc, r3
	str	r3, [r4, #28]
.L14629:
	ldrb	r3, [r4, #26]	@ zero_extendqisi2
	str	r5, [r4, #4]
	mov	r1, r4
	mov	r2, #32
	bfi	r3, r7, #1, #1
	strb	r3, [r4, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r5, r0, #0
	bge	.L14636
	ldr	r0, [r6]
	mov	r2, r5
	ldr	r1, .L14639+8
	add	r0, r0, #32
.LPIC4235:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L14636
.L14640:
	.align	2
.L14639:
	.word	rndis_response_complete-(.LPIC4234+8)
	.word	rndis_command_complete-(.LPIC4233+8)
	.word	.LC819-(.LPIC4235+8)
	.fnend
	.size	rndis_setup, .-rndis_setup
	.align	2
	.global	rndis_uninit
	.type	rndis_uninit, %function
rndis_uninit:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r0, #0
	bxgt	lr
	ldr	r3, .L14647
	mov	r2, r0, asl #6
	mov	r1, #0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r0
	sub	r2, r2, r0, asl #2
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	add	r5, sp, #4
.LPIC4236:
	add	r3, pc, r3
	add	r3, r3, r2
	str	r1, [r3, #3480]
	b	.L14643
.L14644:
	bl	rndis_free_response(PLT)
.L14643:
	mov	r1, r5
	mov	r0, r4
	bl	rndis_get_next_response(PLT)
	subs	r1, r0, #0
	mov	r0, r4
	bne	.L14644
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L14648:
	.align	2
.L14647:
	.word	.LANCHOR4-(.LPIC4236+8)
	.fnend
	.size	rndis_uninit, .-rndis_uninit
	.align	2
	.type	rndis_qc_setup, %function
rndis_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r2, [r0, #20]
	.pad #8
	sub	sp, sp, #8
	ldrb	r0, [r1]	@ zero_extendqisi2
	ldrb	r3, [r1, #1]	@ zero_extendqisi2
	ldrh	ip, [r1, #4]	@ unaligned
	ldr	r6, [r2, #24]
	ldrh	r7, [r1, #6]	@ unaligned
	orr	r3, r3, r0, asl #8
	ldrh	r2, [r1, #2]	@ unaligned
	cmp	r3, #8448
	ldr	r4, [r6, #4]
	beq	.L14651
	movw	r1, #41217
	cmp	r3, r1
	beq	.L14652
.L14654:
	mvn	r8, #94
.L14660:
	mov	r0, r8
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14652:
	cmp	r2, #0
	bne	.L14654
	ldrb	r3, [r5, #120]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L14654
	ldr	r0, [r5, #144]
	add	r1, sp, #4
	bl	rndis_get_next_response(PLT)
	subs	r8, r0, #0
	beq	.L14654
	mov	r1, r8
	ldr	r2, [sp, #4]
	ldr	r0, [r4]
	bl	memcpy(PLT)
	ldr	r3, .L14663
	mov	r1, r8
.LPIC4238:
	add	r3, pc, r3
	str	r3, [r4, #28]
	ldr	r0, [r5, #144]
	bl	rndis_free_response(PLT)
	ldr	r8, [sp, #4]
	cmp	r8, #0
	blt	.L14660
	cmp	r8, r7
	movge	r0, #0
	movlt	r0, #1
	b	.L14653
.L14651:
	cmp	r2, #0
	bne	.L14654
	ldrb	r3, [r5, #120]	@ zero_extendqisi2
	cmp	r3, ip
	bne	.L14654
	ldr	r1, .L14663+4
	mov	r8, r7
	mov	r0, r2
.LPIC4237:
	add	r1, pc, r1
	str	r1, [r4, #28]
.L14653:
	ldrb	ip, [r4, #26]	@ zero_extendqisi2
	str	r8, [r4, #4]
	mov	r1, r4
	str	r5, [r4, #32]
	mov	r2, #32
	bfi	ip, r0, #1, #1
	strb	ip, [r4, #26]
	ldr	r3, [r6]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r8, r0, #0
	bge	.L14660
	ldr	r1, .L14663+8
	mov	r2, r8
	ldr	r0, .L14663+12
.LPIC4240:
	add	r1, pc, r1
	sub	r1, r1, #2736
.LPIC4239:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L14660
.L14664:
	.align	2
.L14663:
	.word	rndis_qc_response_complete-(.LPIC4238+8)
	.word	rndis_qc_command_complete-(.LPIC4237+8)
	.word	.LANCHOR9-(.LPIC4240+8)
	.word	.LC820-(.LPIC4239+8)
	.fnend
	.size	rndis_qc_setup, .-rndis_qc_setup
	.align	2
	.global	rndis_msg_parser
	.type	rndis_msg_parser, %function
rndis_msg_parser:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L14744
	cmp	r1, #0
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
.LPIC4243:
	add	r5, pc, r5
	.pad #12
	sub	sp, sp, #12
	beq	.L14706
	ldrb	r3, [r1, #2]	@ zero_extendqisi2
	cmp	r0, #0
	ldrb	ip, [r1, #1]	@ zero_extendqisi2
	ldrb	r0, [r1]	@ zero_extendqisi2
	ldrb	r2, [r1, #3]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	ldrb	lr, [r1, #4]	@ zero_extendqisi2
	ldrb	r4, [r1, #5]	@ zero_extendqisi2
	orr	r3, r3, ip, asl #8
	ldrb	r7, [r1, #7]	@ zero_extendqisi2
	ldrb	ip, [r1, #6]	@ zero_extendqisi2
	orr	r3, r3, r0
	orr	r2, r3, r2, asl #24
	bne	.L14677
	sub	r3, r2, #2
	mov	r6, r1
	cmp	r3, #6
	addls	pc, pc, r3, asl #2
	b	.L14669
.L14671:
	b	.L14670
	b	.L14672
	b	.L14673
	b	.L14674
	b	.L14717
	b	.L14669
	b	.L14676
	.p2align 1
.L14717:
	add	r4, sp, #4
	b	.L14675
.L14692:
	bl	rndis_free_response(PLT)
.L14675:
	mov	r1, r4
	mov	r0, #0
	bl	rndis_get_next_response(PLT)
	subs	r1, r0, #0
	mov	r0, #0
	bne	.L14692
	ldr	r3, .L14744+4
	ldr	r3, [r5, r3]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L14705
	mov	r1, #32
	mov	r2, #36
	bl	kmem_cache_alloc_trace(PLT)
	subs	r6, r0, #0
	beq	.L14706
	add	r3, r6, #20
.L14693:
	ldr	r5, .L14744+8
	mov	r4, #0
	mov	r7, #16
	str	r3, [r6, #8]
	mov	r0, r6
	str	r7, [r6, #12]
	str	r4, [r6, #16]
.LPIC4278:
	add	r5, pc, r5
	add	r2, r5, #3520
	ldr	r1, [r5, #3532]
	add	r2, r2, #8
	bl	__list_add(PLT)
	ldr	r3, [r6, #8]
	mov	r1, #-2147483642
	mov	r2, #1
	str	r7, [r3, #4]
	str	r4, [r3, #8]
	str	r1, [r3]
	str	r2, [r3, #12]
	ldr	r0, [r5, #3524]
	ldr	r3, [r5, #3520]
	blx	r3
	mov	r0, r4
	b	.L14737
.L14676:
	ldr	r3, .L14744+4
	ldr	r3, [r5, r3]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L14707
	mov	r1, #32
	mov	r2, #36
	bl	kmem_cache_alloc_trace(PLT)
	subs	r7, r0, #0
	beq	.L14706
	add	r3, r7, #20
.L14695:
	ldr	r5, .L14744+12
	mov	r4, #0
	mov	r8, #16
	str	r3, [r7, #8]
	mov	r0, r7
	str	r8, [r7, #12]
	str	r4, [r7, #16]
.LPIC4282:
	add	r5, pc, r5
	add	r2, r5, #3520
	ldr	r1, [r5, #3532]
	add	r2, r2, #8
	bl	__list_add(PLT)
	ldr	r3, [r7, #8]
	mov	r2, #-2147483640
	stmia	r3, {r2, r8}
	ldr	r2, [r6, #8]
	str	r4, [r3, #12]
	str	r2, [r3, #8]
	ldr	r0, [r5, #3524]
	ldr	r3, [r5, #3520]
	blx	r3
	mov	r0, r4
.L14737:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14670:
	ldr	r3, .L14744+16
	mov	r1, #1
.LPIC4241:
	add	r3, pc, r3
	ldr	r2, [r3, #3504]
	str	r1, [r3, #3480]
	cmp	r2, #0
	beq	.L14677
	ldr	r3, .L14744+4
	ldr	r3, [r5, r3]
	ldr	r0, [r3, #28]
	cmp	r0, #0
	beq	.L14698
	mov	r1, #32
	mov	r2, #72
	bl	kmem_cache_alloc_trace(PLT)
	subs	r7, r0, #0
	beq	.L14706
	add	r3, r7, #20
.L14678:
	ldr	r5, .L14744+20
	mov	r4, #0
	mov	r8, #52
	str	r3, [r7, #8]
	mov	r0, r7
	str	r8, [r7, #12]
	str	r4, [r7, #16]
.LPIC4244:
	add	r5, pc, r5
	add	r2, r5, #3520
	ldr	r1, [r5, #3532]
	add	r2, r2, #8
	bl	__list_add(PLT)
	ldr	r3, [r7, #8]
	mov	r1, #-2147483646
	mov	r2, #1
	stmia	r3, {r1, r8}
	ldr	r1, [r6, #8]
	str	r4, [r3, #12]
	str	r4, [r3, #20]
	str	r4, [r3, #28]
	str	r1, [r3, #8]
	str	r2, [r3, #16]
	str	r2, [r3, #24]
	ldrb	r1, [r5, #3512]	@ zero_extendqisi2
	ldr	r2, [r5, #3504]
	str	r1, [r3, #32]
	ldrb	r1, [r5, #3512]	@ zero_extendqisi2
	ldr	r2, [r2, #356]
	str	r4, [r3, #44]
	str	r4, [r3, #48]
	add	r2, r2, #80
	mul	r2, r1, r2
	str	r2, [r3, #36]
	ldrb	r2, [r5, #3513]	@ zero_extendqisi2
	str	r2, [r3, #40]
	ldr	r0, [r5, #3524]
	ldr	r3, [r5, #3520]
	blx	r3
	mov	r0, r4
	b	.L14737
.L14672:
	ldr	r5, .L14744+24
	mov	r4, #0
.LPIC4252:
	add	r5, pc, r5
	ldr	r0, [r5, #3504]
	str	r4, [r5, #3480]
	cmp	r0, r4
	beq	.L14737
	bl	netif_carrier_off(PLT)
	ldr	r3, [r5, #3504]
	ldr	r5, [r3, #576]
	cmp	r5, r4
	beq	.L14741
	mov	r0, r4
	add	r1, r5, #80
	bl	_set_bit(PLT)
	mov	r0, r4
	b	.L14737
.L14673:
	ldr	r3, .L14744+28
.LPIC4257:
	add	r3, pc, r3
	ldr	r3, [r3, #3504]
	cmp	r3, #0
	beq	.L14677
	ldr	r3, .L14744+4
	ldr	r3, [r5, r3]
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L14700
	mov	r1, #32
	mov	r2, #156
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L14706
	add	r2, r4, #20
.L14681:
	ldr	r3, .L14744+32
	mov	r1, #136
	mov	r7, #0
	str	r2, [r4, #8]
	mov	r0, r4
	str	r1, [r4, #12]
	str	r7, [r4, #16]
.LPIC4258:
	add	r3, pc, r3
	add	r2, r3, #3520
	ldr	r1, [r3, #3532]
	add	r2, r2, #8
	bl	__list_add(PLT)
	ldr	r5, [r4, #8]
	mov	r3, #-2147483644
	mov	r1, r4
	str	r3, [r5]
	ldr	r3, [r6, #8]
	str	r3, [r5, #8]
	ldr	r0, [r6, #12]
	bl	gen_ndis_query_resp.constprop.124(PLT)
	cmp	r0, #0
	beq	.L14682
	mov	r0, #187
	mov	r3, #24
	str	r7, [r5, #16]
	movt	r0, 49152
	str	r7, [r5, #20]
	str	r3, [r5, #4]
.L14682:
	ldr	r3, .L14744+36
	str	r0, [r5, #12]
.LPIC4260:
	add	r3, pc, r3
	ldr	r0, [r3, #3524]
	ldr	r2, [r3, #3520]
	blx	r2
	mov	r0, #0
	b	.L14737
.L14674:
	ldr	r10, [r1, #16]
	movw	r4, #1558
	ldr	r7, [r1, #20]
	cmp	r10, r4
	bhi	.L14703
	add	r7, r7, #8
	movw	r3, #1557
	cmp	r7, r3
	bhi	.L14703
	ldr	r3, .L14744+4
	ldr	r3, [r5, r3]
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L14704
	mov	r1, #32
	mov	r2, #36
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L14706
	add	r3, r4, #20
.L14683:
	ldr	r8, .L14744+40
	mov	r9, #16
	mov	fp, #0
	str	r3, [r4, #8]
	mov	r0, r4
	str	r9, [r4, #12]
	str	fp, [r4, #16]
.LPIC4262:
	add	r8, pc, r8
	add	r2, r8, #3520
	ldr	r1, [r8, #3532]
	add	r2, r2, #8
	bl	__list_add(PLT)
	ldr	r5, [r4, #8]
	mov	r3, #-2147483643
	stmia	r5, {r3, r9}
	ldr	r3, [r6, #8]
	str	r3, [r5, #8]
	ldr	r3, [r4, #8]
	ldr	r2, [r6, #12]
	cmp	r3, fp
	beq	.L14684
	movw	r3, #270
	movt	r3, 1
	cmp	r2, r3
	beq	.L14686
	movw	r3, #259
	movt	r3, 257
	cmp	r2, r3
	bne	.L14742
.L14687:
	mov	r3, #0
	str	r3, [r5, #12]
.L14697:
	ldr	r3, .L14744+44
.LPIC4276:
	add	r3, pc, r3
	ldr	r0, [r3, #3524]
	ldr	r2, [r3, #3520]
	blx	r2
	mov	r0, #0
	b	.L14737
.L14669:
	mov	ip, ip, asl #16
	ldr	r1, .L14744+48
	ldr	r0, .L14744+52
	orr	r7, ip, r7, asl #24
	orr	ip, r7, lr
.LPIC4287:
	add	r1, pc, r1
	orr	r4, ip, r4, asl #8
.LPIC4286:
	add	r0, pc, r0
	sub	r1, r1, #2704
	mov	r3, r4
	bl	printk(PLT)
	cmp	r4, #0
	beq	.L14677
	mov	r3, #0
.L14696:
	add	r3, r3, #16
	cmp	r3, r4
	bcc	.L14696
.L14677:
	movw	r0, #65012
	movt	r0, 65535
	b	.L14737
.L14742:
	ldr	r1, .L14744+56
	mov	r3, r10
	ldr	r0, .L14744+60
.LPIC4275:
	add	r1, pc, r1
	sub	r1, r1, #2720
.LPIC4274:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
.L14684:
	mov	r3, #187
	movt	r3, 49152
	str	r3, [r5, #12]
	b	.L14697
.L14707:
	mov	r3, #36
	mov	r7, #16
	b	.L14695
.L14705:
	mov	r3, #36
	mov	r6, #16
	b	.L14693
.L14698:
	mov	r3, #36
	mov	r7, #16
	b	.L14678
.L14700:
	mov	r2, #36
	mov	r4, #16
	b	.L14681
.L14686:
	add	r1, r6, r7
	ldrb	r2, [r6, r7]	@ zero_extendqisi2
	ldrb	r3, [r1, #2]	@ zero_extendqisi2
	ldrb	r0, [r1, #1]	@ zero_extendqisi2
	ldr	r1, [r8, #3500]
	mov	r3, r3, asl #16
	orr	r3, r3, r0, asl #8
	orr	r3, r3, r2
	strh	r3, [r1]	@ movhi
	ldr	r3, [r8, #3500]
	ldrh	r4, [r3]
	cmp	r4, #0
	beq	.L14688
	mov	r3, #2
	ldr	r0, [r8, #3504]
	str	r3, [r8, #3480]
	bl	netif_carrier_on(PLT)
	ldr	r3, [r8, #3504]
	ldr	r2, [r3, #164]
	tst	r2, #1
	beq	.L14687
	ldr	r4, [r3, #576]
	mov	r0, fp
	add	r1, r4, #80
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	beq	.L14687
	ldr	r0, [r4, #4]
	bl	__netif_schedule(PLT)
	b	.L14687
.L14706:
	mvn	r0, #11
	b	.L14737
.L14704:
	mov	r3, #36
	mov	r4, #16
	b	.L14683
.L14688:
	mov	r3, #1
	ldr	r0, [r8, #3504]
	str	r3, [r8, #3480]
	bl	netif_carrier_off(PLT)
	ldr	r3, [r8, #3504]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L14743
	mov	r0, r4
	add	r1, r1, #80
	bl	_set_bit(PLT)
	b	.L14687
.L14703:
	mvn	r0, #21
	b	.L14737
.L14741:
	ldr	r0, .L14744+64
	movw	r1, #1847
.LPIC4255:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r0, .L14744+68
.LPIC4256:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r5
	b	.L14737
.L14743:
	ldr	r0, .L14744+72
	movw	r1, #1847
.LPIC4272:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r0, .L14744+76
.LPIC4273:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14687
.L14745:
	.align	2
.L14744:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC4243+8)
	.word	kmalloc_caches(GOT)
	.word	.LANCHOR4-(.LPIC4278+8)
	.word	.LANCHOR4-(.LPIC4282+8)
	.word	.LANCHOR4-(.LPIC4241+8)
	.word	.LANCHOR4-(.LPIC4244+8)
	.word	.LANCHOR4-(.LPIC4252+8)
	.word	.LANCHOR4-(.LPIC4257+8)
	.word	.LANCHOR4-(.LPIC4258+8)
	.word	.LANCHOR4-(.LPIC4260+8)
	.word	.LANCHOR4-(.LPIC4262+8)
	.word	.LANCHOR4-(.LPIC4276+8)
	.word	.LANCHOR9-(.LPIC4287+8)
	.word	.LC822-(.LPIC4286+8)
	.word	.LANCHOR9-(.LPIC4275+8)
	.word	.LC821-(.LPIC4274+8)
	.word	.LC85-(.LPIC4255+8)
	.word	.LC86-(.LPIC4256+8)
	.word	.LC85-(.LPIC4272+8)
	.word	.LC86-(.LPIC4273+8)
	.fnend
	.size	rndis_msg_parser, .-rndis_msg_parser
	.align	2
	.type	rndis_command_complete, %function
rndis_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r1, #32]
	.pad #8
	sub	sp, sp, #8
	ldr	r3, [r5, #20]
	cmp	r3, #0
	beq	.L14746
	ldr	r6, [r3, #24]
	cmp	r6, #0
	beq	.L14746
	mov	r4, r1
	ldrb	r0, [r5, #164]	@ zero_extendqisi2
	ldr	r1, [r1]
	bl	rndis_msg_parser(PLT)
	subs	r2, r0, #0
	blt	.L14755
.L14750:
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	beq	.L14756
.L14746:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14756:
	ldr	r2, .L14757
	ldr	r3, [r3, #20]
.LPIC4289:
	add	r2, pc, r2
	ldr	r2, [r2, #3104]
	cmp	r3, #2048
	movls	r3, #0
	movhi	r3, #1
	strb	r3, [r5, #124]
	cmp	r2, #1
	movls	r3, #0
	strlsb	r3, [r5, #124]
	b	.L14746
.L14755:
	ldr	r0, [r6]
	ldr	ip, [r4, #4]
	ldr	r1, .L14757+4
	ldr	r3, [r4, #48]
	add	r0, r0, #32
	str	ip, [sp]
.LPIC4288:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L14750
.L14758:
	.align	2
.L14757:
	.word	.LANCHOR2-(.LPIC4289+8)
	.word	.LC823-(.LPIC4288+8)
	.fnend
	.size	rndis_command_complete, .-rndis_command_complete
	.align	2
	.type	rndis_qc_command_complete, %function
rndis_qc_command_complete:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r1
	str	lr, [sp, #8]
	ldr	r5, [r1, #32]
	.pad #12
	sub	sp, sp, #12
	ldr	r1, [r1]
	ldrb	r0, [r5, #144]	@ zero_extendqisi2
	bl	rndis_msg_parser(PLT)
	cmp	r0, #0
	blt	.L14763
.L14760:
	ldr	r3, [r4]
	ldr	r2, [r3]
	cmp	r2, #2
	ldreq	r3, [r3, #20]
	streq	r3, [r5, #136]
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L14763:
	ldr	r1, .L14764
	mov	r2, r0
	ldr	ip, [r4, #4]
	ldr	r0, .L14764+4
	ldr	r3, [r4, #48]
.LPIC4291:
	add	r1, pc, r1
	sub	r1, r1, #2672
	str	ip, [sp]
	sub	r1, r1, #12
.LPIC4290:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14760
.L14765:
	.align	2
.L14764:
	.word	.LANCHOR9-(.LPIC4291+8)
	.word	.LC824-(.LPIC4290+8)
	.fnend
	.size	rndis_qc_command_complete, .-rndis_qc_command_complete
	.align	2
	.global	rndis_init
	.type	rndis_init, %function
rndis_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L14773
	strd	r6, [sp, #8]
	ldr	r6, .L14773+4
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	.pad #32
	sub	sp, sp, #32
.LPIC4293:
	add	r4, pc, r4
.LPIC4307:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	ldrb	r5, [r4, #3952]	@ zero_extendqisi2
	ldr	r3, [r6]
	cmp	r5, #0
	movne	r0, #0
	str	r3, [sp, #28]
	bne	.L14767
	ldr	r1, .L14773+8
	add	r8, sp, #8
	mov	r2, r5
	mov	r0, r8
	add	r7, r4, #3472
	add	r7, r7, #4
.LPIC4294:
	add	r1, pc, r1
	bl	sprintf(PLT)
	ldr	r3, .L14773+12
	mov	r0, r8
	mov	r1, #432
	mov	r2, r5
	str	r7, [sp]
.LPIC4295:
	add	r3, pc, r3
	add	r3, r3, #212
	bl	proc_create_data(PLT)
	cmp	r0, #0
	str	r0, [r4, #3956]
	mvneq	r0, #4
	beq	.L14767
	add	r7, r7, #52
	mov	r3, #1
	strb	r5, [r4, #3476]
	mov	r0, r5
	strb	r5, [r4, #3477]
	str	r7, [r4, #3528]
	str	r7, [r4, #3532]
	str	r5, [r4, #3480]
	str	r3, [r4, #3492]
	strb	r3, [r4, #3952]
.L14767:
	ldr	r2, [sp, #28]
	ldr	r3, [r6]
	cmp	r2, r3
	bne	.L14772
	add	sp, sp, #32
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L14772:
	bl	__stack_chk_fail(PLT)
.L14774:
	.align	2
.L14773:
	.word	.LANCHOR4-(.LPIC4293+8)
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC4307+8))
	.word	.LC825-(.LPIC4294+8)
	.word	.LANCHOR6-(.LPIC4295+8)
	.fnend
	.size	rndis_init, .-rndis_init
	.align	2
	.global	rndis_exit
	.type	rndis_exit, %function
rndis_exit:
	.fnstart
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L14783
	ldr	r3, .L14783+4
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #24
	sub	sp, sp, #24
.LPIC4312:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
.LPIC4309:
	add	r3, pc, r3
	ldrb	r1, [r3, #3952]	@ zero_extendqisi2
	ldr	r2, [r4]
	cmp	r1, #0
	str	r2, [sp, #20]
	beq	.L14775
	ldr	r1, .L14783+8
	mov	r6, #0
	mov	r0, sp
	mov	r2, r6
	strb	r6, [r3, #3952]
.LPIC4311:
	add	r1, pc, r1
	bl	sprintf(PLT)
	mov	r0, sp
	mov	r1, r6
	bl	remove_proc_entry(PLT)
.L14775:
	ldr	r2, [sp, #20]
	ldr	r3, [r4]
	cmp	r2, r3
	bne	.L14782
	add	sp, sp, #24
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14782:
	bl	__stack_chk_fail(PLT)
.L14784:
	.align	2
.L14783:
	.word	__stack_chk_guard(GOT_PREL)+(.-(.LPIC4312+8))
	.word	.LANCHOR4-(.LPIC4309+8)
	.word	.LC825-(.LPIC4311+8)
	.fnend
	.size	rndis_exit, .-rndis_exit
	.align	2
	.global	rndis_bind_config_vendor
	.type	rndis_bind_config_vendor, %function
rndis_bind_config_vendor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	beq	.L14790
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r7, r3
	mov	r6, r0
	strd	r8, [sp, #16]
	mov	r8, r2
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
	bl	rndis_init(PLT)
	cmp	r0, #0
	blt	.L14786
	ldr	r10, .L14803
.LPIC4313:
	add	r10, pc, r10
	ldrb	r3, [r10, #3420]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L14800
.L14787:
	ldr	r3, .L14803+4
.LPIC4332:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L14795
	movw	r1, #32976
	mov	r2, #180
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L14801
.L14788:
	ldr	r3, .L14803+8
	mov	r0, r6
	mov	lr, #0
	ldr	r10, [r5]	@ unaligned
	mov	ip, #44
	mov	r1, r4
	ldr	r6, .L14803+12
	ldr	r2, .L14803+16
.LPIC4325:
	add	r3, pc, r3
	ldr	r9, .L14803+20
	str	r10, [r4, #150]	@ unaligned
	ldrh	r10, [r5, #4]	@ unaligned
	add	r5, r3, #3440
.LPIC4321:
	add	r6, pc, r6
	add	r5, r5, #12
	str	r8, [r4, #156]
.LPIC4322:
	add	r2, pc, r2
	str	r7, [r4, #160]
	ldr	r3, .L14803+24
	ldr	r8, [r2, #2952]
	strh	lr, [r4, #98]	@ movhi
	ldr	fp, [r2, #3104]
	str	r6, [r4, #128]
	str	r5, [r4, #4]
	ldr	r7, .L14803+28
	ldr	r6, .L14803+32
.LPIC4329:
	add	r3, pc, r3
	strh	r10, [r4, #154]	@ unaligned
	ldr	lr, .L14803+36
	str	r8, [r4, #116]
	ldr	r2, .L14803+40
	str	fp, [r4, #120]
	ldr	r5, .L14803+44
.LPIC4324:
	add	r7, pc, r7
	str	r3, [r4, #52]
.LPIC4331:
	ldr	r9, [pc, r9]		@ tls_load_dot_plus_eight
.LPIC4326:
	add	r6, pc, r6
	str	ip, [r4, #100]
.LPIC4327:
	add	lr, pc, lr
	str	r7, [r4]
.LPIC4328:
	add	r2, pc, r2
	str	r6, [r4, #32]
.LPIC4330:
	add	r5, pc, r5
	str	lr, [r4, #36]
	str	r9, [r4, #132]
	str	r5, [r4, #48]
	str	r2, [r4, #40]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L14802
.L14786:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L14800:
	ldr	r0, [r6, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L14786
	ldr	r9, .L14803+48
	uxtb	r4, r0
	ldr	r0, [r6, #24]
	strb	r4, [r10, #3420]
.LPIC4315:
	add	r9, pc, r9
	strb	r4, [r9, #2820]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L14786
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [r10, #3428]
	strb	r3, [r9, #2840]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L14786
	uxtb	r0, r0
	strb	r0, [r10, #3436]
	strb	r0, [r9, #2811]
	b	.L14787
.L14795:
	mov	r4, #16
	b	.L14788
.L14802:
	mov	r0, r4
	bl	kfree(PLT)
.L14789:
	bl	rndis_exit(PLT)
	mov	r0, r5
	b	.L14786
.L14801:
	mvn	r5, #11
	b	.L14789
.L14790:
	mvn	r0, #21
	bx	lr
.L14804:
	.align	2
.L14803:
	.word	.LANCHOR0-(.LPIC4313+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4332+8))
	.word	.LANCHOR0-(.LPIC4325+8)
	.word	rndis_add_header-(.LPIC4321+8)
	.word	.LANCHOR2-(.LPIC4322+8)
	.word	rndis_rm_hdr(GOT_PREL)+(.-(.LPIC4331+8))
	.word	rndis_setup-(.LPIC4329+8)
	.word	.LC826-(.LPIC4324+8)
	.word	rndis_bind-(.LPIC4326+8)
	.word	rndis_unbind-(.LPIC4327+8)
	.word	rndis_set_alt-(.LPIC4328+8)
	.word	rndis_disable-(.LPIC4330+8)
	.word	.LANCHOR2-(.LPIC4315+8)
	.fnend
	.size	rndis_bind_config_vendor, .-rndis_bind_config_vendor
	.align	2
	.global	rndis_bind_config
	.type	rndis_bind_config, %function
rndis_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r2, #0
	mov	r3, r2
	b	rndis_bind_config_vendor(PLT)
	.fnend
	.size	rndis_bind_config, .-rndis_bind_config
	.align	2
	.type	rndis_unbind, %function
rndis_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
	ldr	r0, [r1, #164]
	bl	rndis_deregister(PLT)
	bl	rndis_exit(PLT)
	mov	r0, r4
	bl	usb_free_all_descriptors(PLT)
	ldr	r3, [r4, #172]
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	kfree(PLT)
	.fnend
	.size	rndis_unbind, .-rndis_unbind
	.align	2
	.global	ecm_ipa_init
	.type	ecm_ipa_init, %function
ecm_ipa_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	bx	lr
	.fnend
	.size	ecm_ipa_init, .-ecm_ipa_init
	.align	2
	.global	ecm_qc_get_ipa_rx_cb
	.type	ecm_qc_get_ipa_rx_cb, %function
ecm_qc_get_ipa_rx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L14810
.LPIC4333:
	add	r3, pc, r3
	ldr	r0, [r3, #3960]
	bx	lr
.L14811:
	.align	2
.L14810:
	.word	.LANCHOR4-(.LPIC4333+8)
	.fnend
	.size	ecm_qc_get_ipa_rx_cb, .-ecm_qc_get_ipa_rx_cb
	.align	2
	.global	ecm_qc_get_ipa_tx_cb
	.type	ecm_qc_get_ipa_tx_cb, %function
ecm_qc_get_ipa_tx_cb:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L14813
.LPIC4334:
	add	r3, pc, r3
	ldr	r0, [r3, #3964]
	bx	lr
.L14814:
	.align	2
.L14813:
	.word	.LANCHOR4-(.LPIC4334+8)
	.fnend
	.size	ecm_qc_get_ipa_tx_cb, .-ecm_qc_get_ipa_tx_cb
	.align	2
	.global	ecm_qc_get_ipa_priv
	.type	ecm_qc_get_ipa_priv, %function
ecm_qc_get_ipa_priv:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L14816
.LPIC4335:
	add	r3, pc, r3
	ldr	r0, [r3, #3980]
	bx	lr
.L14817:
	.align	2
.L14816:
	.word	.LANCHOR4-(.LPIC4335+8)
	.fnend
	.size	ecm_qc_get_ipa_priv, .-ecm_qc_get_ipa_priv
	.align	2
	.type	bam2bam_data_connect_work, %function
bam2bam_data_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r3, [r0, #-108]
	cmp	r3, #7
	beq	.L14862
	bl	usb_bam_reset_complete(PLT)
	ldrb	r0, [r4, #-116]	@ zero_extendqisi2
	sub	r1, r4, #124
	bl	usb_bam_connect(PLT)
	cmp	r0, #0
	bne	.L14863
	ldrb	r0, [r4, #-115]	@ zero_extendqisi2
	sub	r1, r4, #120
	bl	usb_bam_connect(PLT)
	cmp	r0, #0
	bne	.L14864
.L14825:
	ldr	r3, [r4, #-164]
	cmp	r3, #0
	beq	.L14865
	ldr	r0, [r3, #12]
	cmp	r0, #0
	beq	.L14866
	ldr	r3, [r0, #8]
	mov	r1, #208
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #-132]
	beq	.L14818
	sub	r5, r4, #168
	ldr	r3, .L14875
	mov	r6, #0
	mov	r1, #208
	str	r5, [r0, #32]
	ldr	r2, [r4, #-132]
.LPIC4356:
	add	r3, pc, r3
	str	r3, [r2, #28]
	ldr	r3, [r4, #-132]
	str	r6, [r3, #4]
	ldr	r2, [r4, #-132]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r3, [r4, #-124]
	ldr	r2, [r4, #-132]
	bic	r3, r3, #65536
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, #32
	str	r3, [r2, #52]
	ldr	r3, [r4, #-164]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, r6
	str	r0, [r4, #-128]
	beq	.L14818
	ldr	r3, .L14875+4
	str	r5, [r0, #32]
	ldr	r2, [r4, #-128]
.LPIC4357:
	add	r3, pc, r3
	str	r3, [r2, #28]
	ldr	r3, [r4, #-128]
	str	r6, [r3, #4]
	ldr	r2, [r4, #-128]
	ldrb	r3, [r2, #26]	@ zero_extendqisi2
	orr	r3, r3, #1
	strb	r3, [r2, #26]
	ldr	r3, [r4, #-120]
	ldr	r2, [r4, #-128]
	bic	r3, r3, #65536
	bic	r3, r3, #96
	orr	r3, r3, #65536
	orr	r3, r3, #32
	str	r3, [r2, #52]
	ldr	r3, [r4, #-164]
	cmp	r3, r6
	beq	.L14833
	ldr	r0, [r3, #12]
	mov	r2, #32
	ldr	r1, [r4, #-132]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L14867
.L14834:
	ldr	r3, [r4, #-164]
	cmp	r3, #0
	beq	.L14833
	ldr	r0, [r3, #8]
	mov	r2, #32
	ldr	r1, [r4, #-128]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bne	.L14868
.L14833:
	ldr	r3, [r4, #-108]
	cmp	r3, #7
	beq	.L14818
	ldr	r0, .L14875+8
	mov	r1, r5
.LPIC4362:
	add	r0, pc, r0
	bl	usb_bam_register_peer_reset_cb(PLT)
	mov	r0, #1
	bl	usb_bam_client_ready(PLT)
	cmp	r0, #0
	bne	.L14869
.L14818:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14862:
	ldr	r3, [r0, #-112]
	cmp	r3, #1
	beq	.L14870
	cmp	r3, #0
	mov	r2, #5
	mov	r3, #0
	str	r2, [r0, #-80]
	str	r3, [r0, #-92]
	beq	.L14871
.L14821:
	sub	r5, r4, #104
	mov	r0, r5
	bl	usb_bam_connect_ipa(PLT)
	cmp	r0, #0
	bne	.L14872
	ldr	r3, [r4, #-112]
	mov	r1, #17
	mov	r2, #1
	str	r1, [r4, #-80]
	str	r2, [r4, #-92]
	cmp	r3, #0
	beq	.L14873
.L14823:
	mov	r0, r5
	bl	usb_bam_connect_ipa(PLT)
	cmp	r0, #0
	bne	.L14874
	ldr	r3, [r4, #-112]
	cmp	r3, #1
	bne	.L14825
	ldr	r1, .L14875+12
	ldr	r0, .L14875+16
.LPIC4346:
	add	r1, pc, r1
.LPIC4345:
	add	r0, pc, r0
.L14858:
	sub	r1, r1, #2656
	mov	r2, r1
.L14861:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk(PLT)
.L14871:
	bl	ecm_qc_get_ipa_rx_cb(PLT)
	str	r0, [r4, #-12]
	bl	ecm_qc_get_ipa_priv(PLT)
	str	r0, [r4, #-16]
	b	.L14821
.L14873:
	bl	ecm_qc_get_ipa_tx_cb(PLT)
	str	r0, [r4, #-12]
	bl	ecm_qc_get_ipa_priv(PLT)
	str	r0, [r4, #-16]
	b	.L14823
.L14869:
	ldr	r1, .L14875+20
	mov	r3, r0
	ldr	r0, .L14875+24
.LPIC4364:
	add	r1, pc, r1
.LPIC4363:
	add	r0, pc, r0
.L14859:
	sub	r1, r1, #2656
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	mov	r2, r1
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk(PLT)
.L14865:
	ldr	r1, .L14875+28
	ldr	r0, .L14875+32
.LPIC4353:
	add	r1, pc, r1
.LPIC4352:
	add	r0, pc, r0
.L14860:
	ldrd	r4, [sp]
	sub	r1, r1, #2656
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	printk(PLT)
.L14866:
	ldr	r1, .L14875+36
	ldr	r0, .L14875+40
.LPIC4355:
	add	r1, pc, r1
.LPIC4354:
	add	r0, pc, r0
	b	.L14860
.L14874:
	ldr	r1, .L14875+44
	mov	r3, r0
	ldr	r0, .L14875+48
.LPIC4343:
	add	r1, pc, r1
.LPIC4342:
	add	r0, pc, r0
	b	.L14859
.L14872:
	ldr	r1, .L14875+52
	mov	r3, r0
	ldr	r0, .L14875+56
.LPIC4340:
	add	r1, pc, r1
.LPIC4339:
	add	r0, pc, r0
	b	.L14859
.L14870:
	ldr	r1, .L14875+60
	ldr	r0, .L14875+64
.LPIC4337:
	add	r1, pc, r1
.LPIC4336:
	add	r0, pc, r0
	b	.L14858
.L14867:
	ldr	r1, .L14875+68
	mov	r2, r0
	ldr	r0, .L14875+72
.LPIC4359:
	add	r1, pc, r1
	add	r1, r1, #2880
.LPIC4358:
	add	r0, pc, r0
	add	r1, r1, #12
	bl	printk(PLT)
	b	.L14834
.L14868:
	ldr	r1, .L14875+76
	mov	r2, r0
	ldr	r0, .L14875+80
.LPIC4361:
	add	r1, pc, r1
	add	r1, r1, #2912
.LPIC4360:
	add	r0, pc, r0
	add	r1, r1, #8
	bl	printk(PLT)
	b	.L14833
.L14863:
	ldr	r1, .L14875+84
	mov	r2, r0
	ldr	r0, .L14875+88
.LPIC4349:
	add	r1, pc, r1
.LPIC4348:
	add	r0, pc, r0
	sub	r1, r1, #2656
	b	.L14861
.L14864:
	ldr	r1, .L14875+92
	mov	r2, r0
	ldr	r0, .L14875+96
.LPIC4351:
	add	r1, pc, r1
.LPIC4350:
	add	r0, pc, r0
	sub	r1, r1, #2656
	b	.L14861
.L14876:
	.align	2
.L14875:
	.word	bam_data_endless_rx_complete-(.LPIC4356+8)
	.word	bam_data_endless_tx_complete-(.LPIC4357+8)
	.word	bam_data_peer_reset_cb-(.LPIC4362+8)
	.word	.LANCHOR9-(.LPIC4346+8)
	.word	.LC829-(.LPIC4345+8)
	.word	.LANCHOR9-(.LPIC4364+8)
	.word	.LC832-(.LPIC4363+8)
	.word	.LANCHOR9-(.LPIC4353+8)
	.word	.LC830-(.LPIC4352+8)
	.word	.LANCHOR9-(.LPIC4355+8)
	.word	.LC831-(.LPIC4354+8)
	.word	.LANCHOR9-(.LPIC4343+8)
	.word	.LC828-(.LPIC4342+8)
	.word	.LANCHOR9-(.LPIC4340+8)
	.word	.LC828-(.LPIC4339+8)
	.word	.LANCHOR9-(.LPIC4337+8)
	.word	.LC827-(.LPIC4336+8)
	.word	.LANCHOR3-(.LPIC4359+8)
	.word	.LC201-(.LPIC4358+8)
	.word	.LANCHOR3-(.LPIC4361+8)
	.word	.LC201-(.LPIC4360+8)
	.word	.LANCHOR9-(.LPIC4349+8)
	.word	.LC414-(.LPIC4348+8)
	.word	.LANCHOR9-(.LPIC4351+8)
	.word	.LC415-(.LPIC4350+8)
	.fnend
	.size	bam2bam_data_connect_work, .-bam2bam_data_connect_work
	.align	2
	.global	fmbim_free_req
	.type	fmbim_free_req, %function
fmbim_free_req:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	cmp	r1, #0
	bxeq	lr
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r0, [r1]
	bl	kfree(PLT)
	ldr	r3, [r4, #8]
	mov	r1, r5
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	ldr	r3, [r3, #12]
	bx	r3	@ indirect register sibling call
	.fnend
	.size	fmbim_free_req, .-fmbim_free_req
	.align	2
	.global	mbim_configure_params
	.type	mbim_configure_params, %function
mbim_configure_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L14882
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L14882+4
	str	lr, [sp, #4]
.LPIC4367:
	add	r1, pc, r1
	sub	r1, r1, #2624
.LPIC4366:
	add	r0, pc, r0
	sub	r1, r1, #4
	mov	r2, r1
	bl	printk(PLT)
	ldr	r4, [sp]
	add	sp, sp, #4
	mvn	r0, #0
	ldr	pc, [sp], #4
.L14883:
	.align	2
.L14882:
	.word	.LANCHOR9-(.LPIC4367+8)
	.word	.LC833-(.LPIC4366+8)
	.fnend
	.size	mbim_configure_params, .-mbim_configure_params
	.align	2
	.global	bam_data_disconnect
	.type	bam_data_disconnect, %function
bam_data_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L14904
.LPIC4369:
	add	r3, pc, r3
	ldr	r3, [r3, #3988]
	cmp	r1, r3
	bge	.L14900
	cmp	r0, #0
	beq	.L14901
	ldr	r3, .L14904+4
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC4379:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r4, [r3, r1, asl #2]
	ldr	r3, [r4, #4]
	cmp	r3, #0
	beq	.L14887
	ldr	r2, [r3, #8]
	cmp	r2, #0
	beq	.L14887
	ldr	r2, [r2]
	cmp	r2, #0
	beq	.L14887
	ldr	r0, [r3, #12]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #4]
	ldr	r0, [r3, #8]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #4]
	mov	r3, #0
	ldr	r2, [r2, #8]
	str	r3, [r2]
	ldr	r2, [r4, #4]
	ldr	r2, [r2, #12]
	str	r3, [r2]
	str	r3, [r4, #4]
.L14887:
	ldr	r3, [r4, #60]
	cmp	r3, #7
	beq	.L14902
	mov	r0, #0
	bl	usb_bam_client_ready(PLT)
	cmp	r0, #0
	bne	.L14903
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L14902:
	ldr	r3, .L14904+8
	add	r2, r4, #184
	mov	r0, #4
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC4375:
	add	r3, pc, r3
	ldr	r1, [r3, #3992]
	b	queue_work_on(PLT)
.L14900:
	ldr	r3, .L14904+12
	mov	r2, r1
	ldr	r0, .L14904+16
.LPIC4371:
	add	r3, pc, r3
	sub	r1, r3, #2592
.LPIC4370:
	add	r0, pc, r0
	sub	r1, r1, #12
	b	printk(PLT)
.L14901:
	ldr	r1, .L14904+20
	ldr	r0, .L14904+24
.LPIC4373:
	add	r1, pc, r1
	sub	r1, r1, #2592
.LPIC4372:
	add	r0, pc, r0
	sub	r1, r1, #12
	b	printk(PLT)
.L14903:
	ldr	r1, .L14904+28
	ldr	r0, .L14904+32
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC4377:
	add	r1, pc, r1
	sub	r1, r1, #2592
.LPIC4376:
	add	r0, pc, r0
	sub	r1, r1, #12
	mov	r2, r1
	b	printk(PLT)
.L14905:
	.align	2
.L14904:
	.word	.LANCHOR4-(.LPIC4369+8)
	.word	bam2bam_data_ports(GOT_PREL)+(.-(.LPIC4379+8))
	.word	.LANCHOR4-(.LPIC4375+8)
	.word	.LANCHOR9-(.LPIC4371+8)
	.word	.LC752-(.LPIC4370+8)
	.word	.LANCHOR9-(.LPIC4373+8)
	.word	.LC834-(.LPIC4372+8)
	.word	.LANCHOR9-(.LPIC4377+8)
	.word	.LC835-(.LPIC4376+8)
	.fnend
	.size	bam_data_disconnect, .-bam_data_disconnect
	.align	2
	.type	mbim_disable, %function
mbim_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L14938
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r8, [sp, #16]
	mov	r8, r0
	ldr	r0, .L14938+4
	strd	r6, [sp, #8]
	add	r9, r8, #204
	mov	r7, r8
	str	lr, [sp, #28]
.LPIC4381:
	add	r1, pc, r1
	str	r10, [sp, #24]
	sub	r1, r1, #2576
.LPIC4380:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mov	r3, #0
	mov	r0, r9
	str	r3, [r8, #88]
	strb	r3, [r8, #164]
	bl	_raw_spin_lock(PLT)
	ldr	r4, [r7, #208]!
	cmp	r4, r7
	ldr	r5, [r4]
	bne	.L14911
	b	.L14912
.L14919:
	mov	r5, r3
.L14911:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del(PLT)
	cmp	r6, #0
	beq	.L14910
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r6
	bl	kfree(PLT)
.L14910:
	cmp	r5, r7
	ldr	r3, [r5]
	mov	r4, r5
	bne	.L14919
.L14912:
	mov	r10, r8
	ldr	r4, [r10, #216]!
	cmp	r4, r10
	ldr	r5, [r4]
	bne	.L14916
	b	.L14909
.L14921:
	mov	r5, r3
.L14916:
	mov	r0, r4
	sub	r6, r4, #8
	bl	list_del(PLT)
	cmp	r6, #0
	beq	.L14915
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r0, r6
	bl	kfree(PLT)
.L14915:
	cmp	r5, r10
	ldr	r3, [r5]
	mov	r4, r5
	bne	.L14921
.L14909:
	mov	r0, r9
	bl	_raw_spin_unlock(PLT)
	mov	r0, r9
	bl	_raw_spin_lock(PLT)
	ldr	r3, .L14938+8
.LPIC4387:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L14936
	movw	r1, #32800
	mov	r2, #16
	bl	kmem_cache_alloc_trace(PLT)
	subs	r3, r0, #0
	beq	.L14937
.L14913:
	mov	r1, #16
	mov	r2, #0
	mov	r0, r3
	stmia	r3, {r1, r2}
.L14917:
	mov	r2, r7
	ldr	r1, [r8, #212]
	add	r0, r0, #8
	bl	__list_add(PLT)
	mov	r0, r9
	bl	_raw_spin_unlock(PLT)
	add	r0, r8, #108
	mov	r1, #3
	mov	r2, #1
	mov	r3, #0
	bl	__wake_up(PLT)
	ldr	r1, .L14938+12
	mov	r2, r8
	ldr	r0, .L14938+16
	ldrb	r3, [r8, #136]	@ zero_extendqisi2
.LPIC4384:
	add	r1, pc, r1
	sub	r1, r1, #2560
.LPIC4383:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	add	r0, r8, #140
	ldrb	r1, [r8, #136]	@ zero_extendqisi2
	bl	bam_data_disconnect(PLT)
	ldr	r0, [r8, #156]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L14918
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r8, #156]
	mov	r2, #0
	str	r2, [r3]
.L14918:
	ldr	r1, .L14938+20
	mov	r3, #0
	ldr	r0, .L14938+24
	str	r3, [r8, #168]
	ldrd	r4, [sp]
.LPIC4386:
	add	r1, pc, r1
	ldrd	r6, [sp, #8]
	sub	r1, r1, #2576
	ldrd	r8, [sp, #16]
.LPIC4385:
	add	r0, pc, r0
	ldr	r10, [sp, #24]
	sub	r1, r1, #8
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	printk(PLT)
.L14936:
	mov	r3, #16
	b	.L14913
.L14937:
	mvn	r0, #11
	b	.L14917
.L14939:
	.align	2
.L14938:
	.word	.LANCHOR9-(.LPIC4381+8)
	.word	.LC836-(.LPIC4380+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4387+8))
	.word	.LANCHOR9-(.LPIC4384+8)
	.word	.LC837-(.LPIC4383+8)
	.word	.LANCHOR9-(.LPIC4386+8)
	.word	.LC838-(.LPIC4385+8)
	.fnend
	.size	mbim_disable, .-mbim_disable
	.align	2
	.global	bam_data_connect
	.type	bam_data_connect, %function
bam_data_connect:
	.fnstart
	@ args = 8, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L14953
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	ldrb	r7, [sp, #32]	@ zero_extendqisi2
	strd	r8, [sp, #16]
	mov	r8, r3
	str	lr, [sp, #28]
	mov	lr, r1
.LPIC4388:
	add	ip, pc, ip
	str	r10, [sp, #24]
	ldr	r3, [ip, #3988]
	cmp	r1, r3
	bge	.L14948
	cmp	r0, #0
	mov	r5, r0
	beq	.L14949
	ldr	r0, [r0, #8]
	mov	r6, r2
	ldr	r3, .L14953+4
	ldr	r2, [r0, #8]
.LPIC4399:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r1, [r0, #28]
	ldr	r2, [r2]
	ldr	r4, [r3, lr, asl #2]
	blx	r2
	subs	r9, r0, #0
	bne	.L14950
	ldr	r3, [r5, #8]
	str	r4, [r3]
	ldr	r0, [r5, #12]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r9, r0, #0
	bne	.L14951
	ldr	r3, [r5, #12]
	cmp	r6, #7
	str	r4, [r3]
	ldr	r3, [sp, #36]
	str	r5, [r4, #4]
	strb	r8, [r4, #52]
	strb	r7, [r4, #53]
	str	r6, [r4, #60]
	str	r3, [r4, #56]
	beq	.L14952
.L14946:
	ldr	r3, .L14953+8
	add	r2, r4, #168
	mov	r0, #4
.LPIC4398:
	add	r3, pc, r3
	ldr	r1, [r3, #3992]
	bl	queue_work_on(PLT)
.L14942:
	mov	r0, r9
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14952:
	add	r2, r4, #44
	add	r3, r4, #48
	strb	r8, [r4, #64]
	strb	r7, [r4, #65]
	strd	r2, [r4, #68]
	b	.L14946
.L14951:
	ldr	r1, .L14953+12
	ldr	r0, .L14953+16
	ldr	r2, [r5, #12]
.LPIC4397:
	add	r1, pc, r1
	sub	r1, r1, #2544
.LPIC4396:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	ldr	r3, [r5, #8]
	mov	r2, #0
	str	r2, [r3]
	b	.L14942
.L14950:
	ldr	r1, .L14953+20
	ldr	r0, .L14953+24
	ldr	r2, [r5, #8]
.LPIC4395:
	add	r1, pc, r1
	sub	r1, r1, #2544
.LPIC4394:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L14942
.L14949:
	ldr	r1, .L14953+28
	mvn	r9, #18
	ldr	r0, .L14953+32
.LPIC4392:
	add	r1, pc, r1
	sub	r1, r1, #2544
.LPIC4391:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L14942
.L14948:
	ldr	r1, .L14953+36
	mov	r2, lr
	mvn	r9, #18
	ldr	r0, .L14953+40
.LPIC4390:
	add	r1, pc, r1
	sub	r1, r1, #2544
.LPIC4389:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L14942
.L14954:
	.align	2
.L14953:
	.word	.LANCHOR4-(.LPIC4388+8)
	.word	bam2bam_data_ports(GOT_PREL)+(.-(.LPIC4399+8))
	.word	.LANCHOR4-(.LPIC4398+8)
	.word	.LANCHOR9-(.LPIC4397+8)
	.word	.LC200-(.LPIC4396+8)
	.word	.LANCHOR9-(.LPIC4395+8)
	.word	.LC199-(.LPIC4394+8)
	.word	.LANCHOR9-(.LPIC4392+8)
	.word	.LC834-(.LPIC4391+8)
	.word	.LANCHOR9-(.LPIC4390+8)
	.word	.LC89-(.LPIC4389+8)
	.fnend
	.size	bam_data_connect, .-bam_data_connect
	.align	2
	.type	mbim_set_alt, %function
mbim_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldrb	r5, [r0, #196]	@ zero_extendqisi2
	.pad #8
	sub	sp, sp, #8
	ldr	r7, [r0, #84]
	cmp	r5, r1
	beq	.L14978
	ldrb	r3, [r0, #197]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L14957
	ldr	r5, .L14985
	ldr	r0, .L14985+4
.LPIC4409:
	add	r5, pc, r5
	sub	r5, r5, #2528
.LPIC4408:
	add	r0, pc, r0
	mov	r1, r5
	bl	printk(PLT)
	cmp	r6, #1
	bhi	.L14957
	ldr	r3, [r4, #148]
	ldr	r3, [r3]
	cmp	r3, #0
	bne	.L14979
.L14963:
	cmp	r6, #1
	beq	.L14980
.L14964:
	add	r5, r4, #204
	strb	r6, [r4, #198]
	mov	r0, r5
	bl	_raw_spin_lock(PLT)
	mov	r3, #3
	mov	r0, r5
	strb	r3, [r4, #164]
	bl	_raw_spin_unlock(PLT)
.L14962:
	ldr	r1, .L14985+8
	mov	r5, #1
	mov	r6, #0
	ldr	r0, .L14985+12
	str	r5, [r4, #88]
.LPIC4434:
	add	r1, pc, r1
	sub	r1, r1, #2528
.LPIC4433:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r2, r5
	add	r0, r4, #108
	mov	r1, #3
	mov	r3, r6
	bl	__wake_up(PLT)
	mov	r2, r5
	add	r0, r4, #120
	mov	r1, #3
	mov	r3, r6
	bl	__wake_up(PLT)
.L14960:
	mov	r0, r6
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L14980:
	ldr	r9, .L14985+16
	ldr	r0, .L14985+20
.LPIC4414:
	add	r9, pc, r9
	sub	r5, r9, #2528
.LPIC4413:
	add	r0, pc, r0
	mov	r1, r5
	bl	printk(PLT)
	ldr	r3, [r4, #148]
	ldr	r8, [r3, #28]
	cmp	r8, #0
	bne	.L14965
	ldr	r0, .L14985+24
	mov	r1, r5
.LPIC4415:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r7]
	mov	r1, r4
	ldr	r2, [r4, #148]
	bl	config_ep_by_speed(PLT)
	subs	r10, r0, #0
	bne	.L14981
	ldr	r3, [r4, #148]
	mov	r1, r5
	ldr	r0, .L14985+28
	ldr	r2, [r3, #28]
.LPIC4419:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r7]
	mov	r1, r4
	ldr	r2, [r4, #152]
	bl	config_ep_by_speed(PLT)
	subs	r7, r0, #0
	beq	.L14967
	ldr	r2, [r4, #152]
	mov	r1, r5
	mov	r3, r7
	ldr	r0, .L14985+32
	mov	r6, r7
	str	r10, [r2, #28]
	ldr	r2, [r4, #152]
.LPIC4421:
	add	r0, pc, r0
	ldr	r2, [r2, #4]
	bl	printk(PLT)
	b	.L14960
.L14957:
	ldr	r1, .L14985+36
	mvn	r6, #21
	ldr	r0, .L14985+40
.LPIC4436:
	add	r1, pc, r1
	sub	r1, r1, #2528
.LPIC4435:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14960
.L14981:
	ldr	r2, [r4, #148]
	mov	r1, r5
	mov	r3, r10
	ldr	r0, .L14985+44
	mov	r6, r10
	str	r8, [r2, #28]
	ldr	r2, [r4, #148]
.LPIC4417:
	add	r0, pc, r0
	ldr	r2, [r2, #4]
	bl	printk(PLT)
	b	.L14960
.L14978:
	ldr	r8, .L14985+48
	ldr	r0, .L14985+52
.LPIC4401:
	add	r8, pc, r8
	sub	r8, r8, #2528
.LPIC4400:
	add	r0, pc, r0
	mov	r1, r8
	bl	printk(PLT)
	cmp	r6, #0
	bne	.L14957
	ldr	r3, [r4, #156]
	ldr	r3, [r3]
	cmp	r3, #0
	bne	.L14982
.L14958:
	ldr	r0, [r7]
	mov	r1, r4
	ldr	r2, [r4, #156]
	bl	config_ep_by_speed(PLT)
	subs	r3, r0, #0
	bne	.L14983
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	ldreq	r3, [r4, #156]
	streq	r4, [r3]
	beq	.L14962
	ldr	r1, .L14985+56
	mov	r3, r6
	ldr	r2, [r4, #156]
	ldr	r0, .L14985+60
.LPIC4407:
	add	r1, pc, r1
	ldr	r2, [r2, #4]
	sub	r1, r1, #2528
.LPIC4406:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14960
.L14979:
	ldr	r0, .L14985+64
	mov	r1, r5
.LPIC4410:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, .L14985+68
	mov	r1, #16384
	mov	r2, #0
	str	r1, [r4, #224]
	str	r2, [r4, #88]
.LPIC4412:
	add	r3, pc, r3
	add	r3, r3, #496
	str	r3, [r4, #200]
	b	.L14963
.L14967:
	ldr	r3, [r4, #152]
	mov	r1, r5
	sub	r9, r9, #2512
	ldr	r0, .L14985+72
	ldr	r2, [r3, #28]
.LPIC4423:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	lr, [r4, #84]
	mov	r1, r9
	mov	r2, r4
	ldr	ip, [r4, #132]
	ldr	r0, .L14985+76
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	ldr	r8, [lr]
	cmp	ip, #7
	moveq	r5, #2
	movne	r5, #0
.LPIC4425:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r2, r7
	mov	r1, r5
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	ldr	r0, [r8, #28]
	bl	usb_bam_get_connection_idx(PLT)
	mov	r7, r0
	mov	r1, r5
	ldrb	r3, [r4, #136]	@ zero_extendqisi2
	mov	r2, r6
	ldr	r0, [r8, #28]
	bl	usb_bam_get_connection_idx(PLT)
	uxtb	ip, r0
	ldrb	r1, [r4, #136]	@ zero_extendqisi2
	uxtb	r3, r7
	str	r6, [sp, #4]
	ldr	r2, [r4, #132]
	add	r0, r4, #140
	str	ip, [sp]
	bl	bam_data_connect(PLT)
	subs	r2, r0, #0
	mov	r1, r9
	bne	.L14984
	ldr	r0, .L14985+80
.LPIC4429:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14964
.L14965:
	ldr	r0, .L14985+84
	mov	r1, r5
.LPIC4431:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14964
.L14984:
	ldr	r0, .L14985+88
.LPIC4427:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L14964
.L14983:
	ldr	r2, [r4, #156]
	mov	ip, #0
	mov	r6, r3
	ldr	r1, .L14985+92
	ldr	r0, .L14985+96
	str	ip, [r2, #28]
	ldr	r2, [r4, #156]
.LPIC4405:
	add	r1, pc, r1
	sub	r1, r1, #2528
.LPIC4404:
	add	r0, pc, r0
	ldr	r2, [r2, #4]
	bl	printk(PLT)
	b	.L14960
.L14982:
	ldr	r0, .L14985+100
	mov	r1, r8
	mov	r2, r5
.LPIC4402:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L14958
.L14986:
	.align	2
.L14985:
	.word	.LANCHOR9-(.LPIC4409+8)
	.word	.LC842-(.LPIC4408+8)
	.word	.LANCHOR9-(.LPIC4434+8)
	.word	.LC854-(.LPIC4433+8)
	.word	.LANCHOR9-(.LPIC4414+8)
	.word	.LC844-(.LPIC4413+8)
	.word	.LC845-(.LPIC4415+8)
	.word	.LC847-(.LPIC4419+8)
	.word	.LC848-(.LPIC4421+8)
	.word	.LANCHOR9-(.LPIC4436+8)
	.word	.LC855-(.LPIC4435+8)
	.word	.LC846-(.LPIC4417+8)
	.word	.LANCHOR9-(.LPIC4401+8)
	.word	.LC839-(.LPIC4400+8)
	.word	.LANCHOR9-(.LPIC4407+8)
	.word	.LC540-(.LPIC4406+8)
	.word	.LC843-(.LPIC4410+8)
	.word	.LANCHOR2-(.LPIC4412+8)
	.word	.LC849-(.LPIC4423+8)
	.word	.LC850-(.LPIC4425+8)
	.word	.LC852-(.LPIC4429+8)
	.word	.LC853-(.LPIC4431+8)
	.word	.LC851-(.LPIC4427+8)
	.word	.LANCHOR9-(.LPIC4405+8)
	.word	.LC841-(.LPIC4404+8)
	.word	.LC840-(.LPIC4402+8)
	.fnend
	.size	mbim_set_alt, .-mbim_set_alt
	.align	2
	.global	bam_data_destroy
	.type	bam_data_destroy, %function
bam_data_destroy:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L14993
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC4440:
	ldr	r4, [pc, r4]		@ tls_load_dot_plus_eight
	ldr	r0, [r4, r0, asl #2]
	bl	kfree(PLT)
	ldr	r3, .L14993+4
	mov	r2, #0
	str	r2, [r4, r5, asl #2]
.LPIC4438:
	add	r3, pc, r3
	ldr	r0, [r3, #3992]
	cmp	r0, r2
	beq	.L14988
	bl	destroy_workqueue(PLT)
.L14988:
	ldr	r3, .L14993+8
	mov	r2, #0
	mov	r0, r2
.LPIC4439:
	add	r3, pc, r3
	str	r2, [r3, #3992]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L14994:
	.align	2
.L14993:
	.word	bam2bam_data_ports(GOT_PREL)+(.-(.LPIC4440+8))
	.word	.LANCHOR4-(.LPIC4438+8)
	.word	.LANCHOR4-(.LPIC4439+8)
	.fnend
	.size	bam_data_destroy, .-bam_data_destroy
	.align	2
	.type	ecm_qc_unbind, %function
ecm_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	mov	r0, #0
	str	r6, [sp, #8]
	mov	r4, r1
	str	lr, [sp, #12]
	bl	bam_data_destroy(PLT)
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L14999
.L14996:
	cmp	r3, #2
	bls	.L14997
	ldr	r0, [r4, #8]
	bl	kfree(PLT)
.L14997:
	ldr	r0, [r4, #16]
	bl	kfree(PLT)
	ldr	r3, [r4, #148]
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #144]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, .L15000
	mov	r2, #0
	mov	r0, r4
.LPIC4441:
	add	r3, pc, r3
	str	r2, [r3, #3472]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	kfree(PLT)
.L14999:
	ldr	r0, [r4, #12]
	bl	kfree(PLT)
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L14996
.L15001:
	.align	2
.L15000:
	.word	.LANCHOR0-(.LPIC4441+8)
	.fnend
	.size	ecm_qc_unbind, .-ecm_qc_unbind
	.align	2
	.type	mbim_unbind, %function
mbim_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	mov	r4, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r0, [r1, #136]	@ zero_extendqisi2
	bl	bam_data_destroy(PLT)
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #4
	bhi	.L15006
.L15003:
	cmp	r3, #2
	bls	.L15004
	ldr	r0, [r4, #8]
	bl	kfree(PLT)
.L15004:
	ldr	r0, [r4, #16]
	bl	kfree(PLT)
	ldr	r3, [r4, #160]
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	ldr	r3, .L15007
	mov	r2, #0
.LPIC4442:
	add	r3, pc, r3
	strb	r2, [r3, #170]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15006:
	ldr	r0, [r4, #12]
	bl	kfree(PLT)
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	b	.L15003
.L15008:
	.align	2
.L15007:
	.word	.LANCHOR2-(.LPIC4442+8)
	.fnend
	.size	mbim_unbind, .-mbim_unbind
	.align	2
	.type	rndis_qc_unbind, %function
rndis_qc_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r1
	mov	r5, r0
	mov	r0, #0
	str	lr, [sp, #12]
	str	r6, [sp, #8]
	bl	bam_data_destroy(PLT)
	ldr	r0, [r4, #144]
	bl	rndis_deregister(PLT)
	bl	rndis_exit(PLT)
	ldr	r3, [r5, #24]
	ldr	r3, [r3]
	ldr	r3, [r3, #20]
	cmp	r3, #2
	bls	.L15010
	ldr	r0, [r4, #8]
	bl	kfree(PLT)
.L15010:
	ldr	r0, [r4, #16]
	bl	kfree(PLT)
	ldr	r3, [r4, #160]
	ldr	r5, .L15012
	ldr	r0, [r3]
	bl	kfree(PLT)
	ldrd	r0, [r4, #156]
.LPIC4443:
	add	r5, pc, r5
	add	r5, r5, #2496
	add	r5, r5, #4
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r3, .L15012+4
	mov	r2, #0
	mov	r0, r5
	mov	r1, r6
.LPIC4446:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	r2, [r3]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock_irqrestore(PLT)
.L15013:
	.align	2
.L15012:
	.word	.LANCHOR1-(.LPIC4443+8)
	.word	_rndis_qc(GOT_PREL)+(.-(.LPIC4446+8))
	.fnend
	.size	rndis_qc_unbind, .-rndis_qc_unbind
	.align	2
	.global	bam_data_setup
	.type	bam_data_setup, %function
bam_data_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r5, .L15031
	cmp	r0, #1
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
.LPIC4456:
	add	r5, pc, r5
	.pad #12
	sub	sp, sp, #12
	bne	.L15027
	ldr	r6, .L15031+4
.LPIC4449:
	add	r6, pc, r6
	ldr	r3, [r6, #3992]
	cmp	r3, #0
	movne	r0, #0
	beq	.L15028
.L15024:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15028:
	mov	r2, r0
	ldr	r0, .L15031+8
	str	r3, [sp]
	mov	r1, #10
.LPIC4450:
	add	r0, pc, r0
	bl	__alloc_workqueue_key(PLT)
	cmp	r0, #0
	str	r0, [r6, #3992]
	beq	.L15029
	ldr	r2, [r6, #3988]
	ldr	r3, .L15031+12
	add	r2, r2, #1
	str	r2, [r6, #3988]
	ldr	r3, [r5, r3]
	ldr	r0, [r3, #32]
	cmp	r0, #0
	beq	.L15023
	movw	r1, #32976
	mov	r2, #232
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L15030
.L15018:
	ldr	fp, .L15031+16
	mov	r3, #65024
	mov	r9, #0
	ldr	r10, .L15031+20
	movt	r3, 65535
	add	r8, r4, #172
	ldr	ip, .L15031+24
	add	r7, r4, #188
	add	r6, r4, #204
	ldr	r1, .L15031+28
	add	lr, r4, #220
	str	r9, [r4]
	ldr	r2, .L15031+32
.LPIC4457:
	add	fp, pc, fp
	str	r4, [r4, #16]
.LPIC4458:
	add	r10, pc, r10
	str	r3, [r4, #168]
	mov	r0, r9
.LPIC4459:
	add	ip, pc, ip
	str	r3, [r4, #184]
.LPIC4460:
	add	r1, pc, r1
	str	r3, [r4, #200]
	str	r3, [r4, #216]
	str	fp, [r4, #180]
	str	r10, [r4, #196]
	str	ip, [r4, #212]
	str	r1, [r4, #228]
	str	r8, [r4, #172]
	str	r8, [r4, #176]
	str	r7, [r4, #188]
	str	r7, [r4, #192]
	str	r6, [r4, #204]
	str	r6, [r4, #208]
	str	lr, [r4, #220]
	str	lr, [r4, #224]
	ldr	r3, [r5, r2]
	str	r4, [r3]
	b	.L15024
.L15023:
	mov	r4, #16
	b	.L15018
.L15030:
	ldr	r1, .L15031+36
	mov	r2, r4
	ldr	r3, [r6, #3988]
	ldr	r0, .L15031+40
.LPIC4465:
	add	r1, pc, r1
	sub	r3, r3, #1
	sub	r1, r1, #2480
.LPIC4464:
	add	r0, pc, r0
	sub	r1, r1, #12
	str	r3, [r6, #3988]
	bl	printk(PLT)
	ldr	r3, [r6, #3988]
	cmp	r3, #0
	ble	.L15021
	ldr	r3, .L15031+32
	ldr	r5, [r5, r3]
	ldr	r0, [r5]
	bl	kfree(PLT)
	str	r4, [r5]
.L15021:
	ldr	r3, .L15031+44
.LPIC4461:
	add	r3, pc, r3
	ldr	r0, [r3, #3992]
	bl	destroy_workqueue(PLT)
	mvn	r0, #11
	b	.L15024
.L15027:
	ldr	r1, .L15031+48
	mov	r2, r0
	ldr	r0, .L15031+52
.LPIC4448:
	add	r1, pc, r1
	sub	r1, r1, #2480
.LPIC4447:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #21
	b	.L15024
.L15029:
	ldr	r1, .L15031+56
	ldr	r0, .L15031+60
.LPIC4453:
	add	r1, pc, r1
	sub	r1, r1, #2480
.LPIC4452:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #11
	b	.L15024
.L15032:
	.align	2
.L15031:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC4456+8)
	.word	.LANCHOR4-(.LPIC4449+8)
	.word	.LC856-(.LPIC4450+8)
	.word	kmalloc_caches(GOT)
	.word	bam2bam_data_connect_work-(.LPIC4457+8)
	.word	bam2bam_data_disconnect_work-(.LPIC4458+8)
	.word	bam2bam_data_suspend_work-(.LPIC4459+8)
	.word	bam2bam_data_resume_work-(.LPIC4460+8)
	.word	bam2bam_data_ports(GOT)
	.word	.LANCHOR9-(.LPIC4465+8)
	.word	.LC858-(.LPIC4464+8)
	.word	.LANCHOR4-(.LPIC4461+8)
	.word	.LANCHOR9-(.LPIC4448+8)
	.word	.LC762-(.LPIC4447+8)
	.word	.LANCHOR9-(.LPIC4453+8)
	.word	.LC857-(.LPIC4452+8)
	.fnend
	.size	bam_data_setup, .-bam_data_setup
	.align	2
	.global	mbim_bind_config
	.type	mbim_bind_config, %function
mbim_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r0
	ldr	r0, .L15069
	strd	r6, [sp, #8]
	ldr	r7, .L15069+4
	mov	r4, r1
	strd	r8, [sp, #16]
	mov	r6, r2
	mov	r2, r1
	str	r10, [sp, #24]
.LPIC4467:
	add	r0, pc, r0
	str	lr, [sp, #28]
.LPIC4468:
	add	r7, pc, r7
	sub	r9, r7, #2464
	sub	r9, r9, #12
	mov	r1, r9
	bl	printk(PLT)
	ldr	r3, .L15069+8
.LPIC4469:
	add	r3, pc, r3
	ldr	r8, [r3, #-664]
	cmp	r4, r8
	bcs	.L15064
	ldr	r0, .L15069+12
	sub	r7, r7, #2448
	mov	r2, r8
	sub	r7, r7, #8
	mov	r1, r7
.LPIC4472:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r8
	bl	bam_data_setup(PLT)
	subs	r4, r0, #0
	bne	.L15065
	ldr	r4, .L15069+16
	mov	r1, r7
	mov	r2, r8
	ldr	r0, .L15069+20
.LPIC4480:
	add	r4, pc, r4
.LPIC4478:
	add	r0, pc, r0
	bl	printk(PLT)
	ldrb	r3, [r4, #3492]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15066
.L15037:
	ldr	r3, .L15069+24
.LPIC4486:
	add	r3, pc, r3
	ldr	r4, [r3, #-660]
	cmp	r4, #0
	beq	.L15067
	ldr	r3, .L15069+28
	mov	r0, #0
	mov	r2, #12
	ldr	r7, .L15069+32
	mov	lr, #16384
	mov	r1, r6
	ldr	r9, .L15069+36
	ldr	r8, .L15069+40
	ldr	ip, [r5, #24]
.LPIC4491:
	add	r3, pc, r3
	str	r0, [r4, #88]
	ldr	r0, .L15069+44
.LPIC4489:
	add	r7, pc, r7
	add	r3, r3, #3504
	add	r3, r3, r2
.LPIC4490:
	add	r9, pc, r9
	str	lr, [r4, #224]
.LPIC4492:
	add	r8, pc, r8
	add	r10, r7, #496
	ldr	lr, .L15069+48
	str	ip, [r4, #84]
	ldr	ip, .L15069+52
.LPIC4494:
	add	r0, pc, r0
	str	r3, [r4, #4]
	ldr	r3, .L15069+56
	str	r10, [r4, #200]
	ldr	r10, .L15069+60
	str	r9, [r4]
	ldr	r9, .L15069+64
.LPIC4493:
	add	lr, pc, lr
	str	r8, [r4, #32]
	ldr	r8, .L15069+68
.LPIC4495:
	add	ip, pc, ip
	str	r0, [r4, #40]
	ldr	r0, .L15069+72
.LPIC4496:
	add	r3, pc, r3
.LPIC4497:
	add	r10, pc, r10
	str	lr, [r4, #36]
.LPIC4498:
	add	r9, pc, r9
	str	ip, [r4, #44]
.LPIC4499:
	add	r8, pc, r8
	str	r3, [r4, #52]
.LPIC4500:
	add	r0, pc, r0
	str	r10, [r4, #48]
	str	r9, [r4, #56]
	str	r8, [r4, #60]
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L15039
	ldr	r0, .L15069+76
	mov	r1, r6
	mov	r2, #12
.LPIC4501:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	bne	.L15068
.L15039:
	mov	r3, #6
	str	r3, [r4, #132]
.L15041:
	add	r2, r4, #208
	add	r3, r4, #216
	mov	r1, r4
	mov	r0, r5
	strd	r2, [r4, #212]
	str	r2, [r4, #208]
	str	r3, [r4, #220]
	bl	usb_add_function(PLT)
	ldr	r1, .L15069+80
	mov	r4, r0
	ldr	r0, .L15069+84
	mov	r2, r4
.LPIC4508:
	add	r1, pc, r1
	sub	r1, r1, #2464
.LPIC4507:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mov	r0, r4
.L15062:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15065:
	ldr	r0, .L15069+88
	mov	r1, r7
	mov	r2, r4
.LPIC4474:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L15069+92
	mov	r1, r9
.LPIC4476:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	b	.L15062
.L15066:
	ldr	r0, [r5, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15062
	ldr	r7, .L15069+96
	uxtb	r3, r0
	ldr	r0, [r5, #24]
	strb	r3, [r4, #3492]
.LPIC4482:
	add	r7, pc, r7
	strb	r3, [r7, #1136]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15062
	uxtb	r0, r0
	strb	r0, [r4, #3500]
	strb	r0, [r7, #1156]
	strb	r0, [r7, #1168]
	b	.L15037
.L15068:
	ldr	r0, .L15069+100
	mov	r1, r6
	mov	r2, #12
.LPIC4502:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L15039
	ldr	r0, .L15069+104
	mov	r1, r6
	mov	r2, #12
.LPIC4503:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L15039
	ldr	r0, .L15069+108
	mov	r1, r6
	mov	r2, #12
.LPIC4504:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L15039
	ldr	r0, .L15069+112
	mov	r1, r6
	mov	r2, #12
.LPIC4505:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L15039
	ldr	r0, .L15069+116
	mov	r1, r6
	mov	r2, #12
.LPIC4506:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	bne	.L15039
	mov	r3, #8192
	mov	r0, #7
	mov	r1, #16
	mov	r2, #1
	str	r0, [r4, #132]
	strh	r1, [r7, #54]	@ movhi
	str	r3, [r7, #32]
	str	r3, [r7, #44]
	strh	r2, [r7, #36]	@ movhi
	b	.L15041
.L15067:
	ldr	r1, .L15069+120
	ldr	r0, .L15069+124
.LPIC4488:
	add	r1, pc, r1
	sub	r1, r1, #2464
.LPIC4487:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #11
	b	.L15062
.L15064:
	ldr	r0, .L15069+128
	mov	r1, r9
	mov	r2, r4
	mov	r3, r8
.LPIC4470:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #18
	b	.L15062
.L15070:
	.align	2
.L15069:
	.word	.LC859-(.LPIC4467+8)
	.word	.LANCHOR9-(.LPIC4468+8)
	.word	.LANCHOR4-(.LPIC4469+8)
	.word	.LC861-(.LPIC4472+8)
	.word	.LANCHOR0-(.LPIC4480+8)
	.word	.LC346-(.LPIC4478+8)
	.word	.LANCHOR4-(.LPIC4486+8)
	.word	.LANCHOR0-(.LPIC4491+8)
	.word	.LANCHOR2-(.LPIC4489+8)
	.word	.LC865-(.LPIC4490+8)
	.word	mbim_bind-(.LPIC4492+8)
	.word	mbim_set_alt-(.LPIC4494+8)
	.word	mbim_unbind-(.LPIC4493+8)
	.word	mbim_get_alt-(.LPIC4495+8)
	.word	mbim_setup-(.LPIC4496+8)
	.word	mbim_disable-(.LPIC4497+8)
	.word	mbim_suspend-(.LPIC4498+8)
	.word	mbim_resume-(.LPIC4499+8)
	.word	.LC0-(.LPIC4500+8)
	.word	.LC1-(.LPIC4501+8)
	.word	.LANCHOR9-(.LPIC4508+8)
	.word	.LC866-(.LPIC4507+8)
	.word	.LC862-(.LPIC4474+8)
	.word	.LC863-(.LPIC4476+8)
	.word	.LANCHOR2-(.LPIC4482+8)
	.word	.LC2-(.LPIC4502+8)
	.word	.LC3-(.LPIC4503+8)
	.word	.LC4-(.LPIC4504+8)
	.word	.LC5-(.LPIC4505+8)
	.word	.LC6-(.LPIC4506+8)
	.word	.LANCHOR9-(.LPIC4488+8)
	.word	.LC864-(.LPIC4487+8)
	.word	.LC860-(.LPIC4470+8)
	.fnend
	.size	mbim_bind_config, .-mbim_bind_config
	.align	2
	.type	mbim_function_bind_config, %function
mbim_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L15073
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r1
	str	lr, [sp, #4]
.LPIC4513:
	add	r0, pc, r0
	sub	r0, r0, #1232
	sub	r0, r0, #8
	bl	strim(PLT)
	mov	r2, r0
	ldr	lr, [sp, #4]
	mov	r0, r4
	mov	r1, #0
	ldr	r4, [sp]
	add	sp, sp, #8
	b	mbim_bind_config(PLT)
.L15074:
	.align	2
.L15073:
	.word	.LANCHOR4-(.LPIC4513+8)
	.fnend
	.size	mbim_function_bind_config, .-mbim_function_bind_config
	.align	2
	.global	bam_data_suspend
	.type	bam_data_suspend, %function
bam_data_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L15076
	ldr	r2, .L15076+4
.LPIC4516:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
.LPIC4514:
	add	r2, pc, r2
	ldr	r1, [r2, #3992]
	ldr	r2, [r3, r0, asl #2]
	mov	r0, #4
	add	r2, r2, #200
	b	queue_work_on(PLT)
.L15077:
	.align	2
.L15076:
	.word	bam2bam_data_ports(GOT_PREL)+(.-(.LPIC4516+8))
	.word	.LANCHOR4-(.LPIC4514+8)
	.fnend
	.size	bam_data_suspend, .-bam_data_suspend
	.align	2
	.type	ecm_qc_suspend, %function
ecm_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	b	bam_data_suspend(PLT)
	.fnend
	.size	ecm_qc_suspend, .-ecm_qc_suspend
	.align	2
	.type	mbim_suspend, %function
mbim_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L15081
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L15081+4
	str	lr, [sp, #4]
.LPIC4518:
	add	r1, pc, r1
	sub	r1, r1, #2432
.LPIC4517:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	r4, [sp]
	mov	r0, #0
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	bam_data_suspend(PLT)
.L15082:
	.align	2
.L15081:
	.word	.LANCHOR9-(.LPIC4518+8)
	.word	.LC867-(.LPIC4517+8)
	.fnend
	.size	mbim_suspend, .-mbim_suspend
	.align	2
	.type	rndis_qc_suspend, %function
rndis_qc_suspend:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	b	bam_data_suspend(PLT)
	.fnend
	.size	rndis_qc_suspend, .-rndis_qc_suspend
	.align	2
	.global	bam_data_resume
	.type	bam_data_resume, %function
bam_data_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L15085
	ldr	r2, .L15085+4
.LPIC4521:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
.LPIC4519:
	add	r2, pc, r2
	ldr	r1, [r2, #3992]
	ldr	r2, [r3, r0, asl #2]
	mov	r0, #4
	add	r2, r2, #216
	b	queue_work_on(PLT)
.L15086:
	.align	2
.L15085:
	.word	bam2bam_data_ports(GOT_PREL)+(.-(.LPIC4521+8))
	.word	.LANCHOR4-(.LPIC4519+8)
	.fnend
	.size	bam_data_resume, .-bam_data_resume
	.align	2
	.type	ecm_qc_resume, %function
ecm_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	b	bam_data_resume(PLT)
	.fnend
	.size	ecm_qc_resume, .-ecm_qc_resume
	.align	2
	.type	mbim_resume, %function
mbim_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L15090
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L15090+4
	str	lr, [sp, #4]
.LPIC4523:
	add	r1, pc, r1
	sub	r1, r1, #2416
.LPIC4522:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	r4, [sp]
	mov	r0, #0
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	bam_data_resume(PLT)
.L15091:
	.align	2
.L15090:
	.word	.LANCHOR9-(.LPIC4523+8)
	.word	.LC868-(.LPIC4522+8)
	.fnend
	.size	mbim_resume, .-mbim_resume
	.align	2
	.type	rndis_qc_resume, %function
rndis_qc_resume:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, #0
	b	bam_data_resume(PLT)
	.fnend
	.size	rndis_qc_resume, .-rndis_qc_resume
	.align	2
	.global	ecm_bind_config
	.type	ecm_bind_config, %function
ecm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	ldr	r0, .L15111
	strd	r8, [sp, #16]
	str	lr, [sp, #24]
	ldr	r8, [r6, #24]
	.pad #28
	sub	sp, sp, #28
.LPIC4524:
	add	r0, pc, r0
	ldr	r3, [r8]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L15108
.L15098:
	mvn	r0, #21
.L15094:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L15108:
	ldr	r0, .L15111+4
	mov	r1, r4
.LPIC4525:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r5, #0
	cmpne	r0, #0
	beq	.L15098
	ldr	r7, .L15111+8
.LPIC4526:
	add	r7, pc, r7
	ldrb	r3, [r7, #864]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15109
.L15095:
	ldr	r3, .L15111+12
.LPIC4547:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15103
	movw	r1, #32976
	mov	r2, #176
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L15110
.L15096:
	ldrb	r8, [r5, #1]	@ zero_extendqisi2
	add	r7, r4, #150
	mov	r1, #14
	ldrb	r2, [r5, #3]	@ zero_extendqisi2
	mov	r0, r7
	ldrb	r3, [r5]	@ zero_extendqisi2
	ldrb	r9, [r5, #2]	@ zero_extendqisi2
	ldrb	lr, [r5, #4]	@ zero_extendqisi2
	ldrb	ip, [r5, #5]	@ zero_extendqisi2
	str	r8, [sp]
	str	r2, [sp, #8]
	ldr	r8, .L15111+16
	ldr	r2, .L15111+20
	str	r9, [sp, #4]
	str	lr, [sp, #12]
	ldr	r9, .L15111+24
	str	ip, [sp, #16]
	ldr	r5, .L15111+28
.LPIC4537:
	add	r8, pc, r8
.LPIC4536:
	add	r2, pc, r2
	bl	snprintf(PLT)
	add	r3, r8, #3520
	str	r7, [r8, #876]
	mov	r0, r6
	add	r3, r3, #4
	ldr	lr, .L15111+32
	mov	ip, #15
	ldr	r2, .L15111+36
.LPIC4540:
	add	r5, pc, r5
.LPIC4538:
	add	r9, pc, r9
	str	r3, [r4, #4]
	ldr	r6, .L15111+40
	mov	r1, r4
	ldr	r3, .L15111+44
	str	r5, [r4, #32]
	ldr	r7, .L15111+48
.LPIC4541:
	add	lr, pc, lr
	str	r9, [r4]
.LPIC4542:
	add	r2, pc, r2
	strh	ip, [r4, #98]	@ movhi
.LPIC4544:
	add	r6, pc, r6
	str	lr, [r4, #36]
.LPIC4543:
	add	r3, pc, r3
.LPIC4545:
	add	r7, pc, r7
	str	r6, [r4, #52]
	strd	r2, [r4, #40]
	str	r7, [r4, #48]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	beq	.L15094
	mov	r3, #0
	mov	r0, r4
	str	r3, [r8, #876]
	bl	kfree(PLT)
	mov	r0, r5
	b	.L15094
.L15109:
	mov	r0, r8
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15094
	ldr	r4, .L15111+52
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [r7, #864]
.LPIC4528:
	add	r4, pc, r4
	strb	r3, [r4, #1308]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15094
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [r7, #880]
	strb	r3, [r4, #1340]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15094
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [r7, #872]
	strb	r3, [r4, #3111]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15094
	uxtb	r0, r0
	strb	r0, [r7, #888]
	strb	r0, [r4, #1299]
	b	.L15095
.L15103:
	mov	r4, #16
	b	.L15096
.L15110:
	mvn	r0, #11
	b	.L15094
.L15112:
	.align	2
.L15111:
	.word	.LC309-(.LPIC4524+8)
	.word	.LC454-(.LPIC4525+8)
	.word	.LANCHOR0-(.LPIC4526+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4547+8))
	.word	.LANCHOR0-(.LPIC4537+8)
	.word	.LC869-(.LPIC4536+8)
	.word	.LC870-(.LPIC4538+8)
	.word	ecm_bind-(.LPIC4540+8)
	.word	ecm_unbind-(.LPIC4541+8)
	.word	ecm_set_alt-(.LPIC4542+8)
	.word	ecm_setup-(.LPIC4544+8)
	.word	ecm_get_alt-(.LPIC4543+8)
	.word	ecm_disable-(.LPIC4545+8)
	.word	.LANCHOR2-(.LPIC4528+8)
	.fnend
	.size	ecm_bind_config, .-ecm_bind_config
	.align	2
	.global	rndis_qc_bind_config_vendor
	.type	rndis_qc_bind_config_vendor, %function
rndis_qc_bind_config_vendor:
	.fnstart
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	cmp	r1, #0
	strd	r6, [sp, #8]
	ldr	r7, .L15137
	strd	r10, [sp, #24]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #4
	sub	sp, sp, #4
.LPIC4558:
	add	r7, pc, r7
	ldrb	r10, [sp, #40]	@ zero_extendqisi2
	beq	.L15121
	mov	r9, r3
	mov	r8, r2
	mov	r6, r0
	mov	r5, r1
	bl	rndis_init(PLT)
	cmp	r0, #0
	blt	.L15129
	mov	r0, #1
	bl	bam_data_setup(PLT)
	subs	fp, r0, #0
	bne	.L15133
	ldr	fp, .L15137+4
.LPIC4569:
	add	fp, pc, fp
	ldrb	r3, [fp, #3532]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15134
.L15120:
	ldr	r3, .L15137+8
	ldr	r3, [r7, r3]
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15126
	movw	r1, #32976
	mov	r2, #184
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L15135
.L15116:
	ldr	lr, [r5]	@ unaligned
	mov	r0, r6
	cmp	r10, #0
	ldr	r6, .L15137+12
	movne	fp, r10
	moveq	fp, #15
	ldr	r3, .L15137+16
	mov	ip, #0
	mov	r2, #44
	ldr	r10, .L15137+20
	mov	r1, r4
	str	lr, [r4, #122]	@ unaligned
	ldrh	r5, [r5, #4]	@ unaligned
.LPIC4561:
	add	r6, pc, r6
	str	r9, [r4, #140]
	ldr	lr, .L15137+24
	add	r9, r6, #3552
.LPIC4559:
	add	r3, pc, r3
	strb	fp, [r4, #132]
	add	r9, r9, #12
	str	r8, [r4, #128]
	ldr	fp, .L15137+28
	strh	r5, [r4, #126]	@ unaligned
	ldr	r8, .L15137+32
	strh	ip, [r4, #98]	@ movhi
	ldr	r5, .L15137+36
.LPIC4560:
	add	lr, pc, lr
	str	r2, [r4, #100]
	ldr	r6, .L15137+40
	str	r3, [r4, #104]
	ldr	ip, .L15137+44
.LPIC4563:
	add	fp, pc, fp
	ldr	r3, [r7, r10]
	str	r9, [r4, #4]
.LPIC4562:
	add	r8, pc, r8
	ldr	r2, .L15137+48
.LPIC4564:
	add	r5, pc, r5
	str	lr, [r4]
	ldr	r9, .L15137+52
.LPIC4565:
	add	r6, pc, r6
	str	r8, [r4, #32]
.LPIC4566:
	add	ip, pc, ip
	str	r5, [r4, #40]
	str	fp, [r4, #36]
.LPIC4567:
	add	r2, pc, r2
	str	r3, [r4, #108]
.LPIC4568:
	add	r9, pc, r9
	str	r6, [r4, #52]
	str	ip, [r4, #48]
	str	r2, [r4, #56]
	str	r9, [r4, #60]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	beq	.L15136
.L15117:
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r3, .L15137+56
	mov	r2, #0
	ldr	r3, [r7, r3]
	str	r2, [r3]
	bl	rndis_exit(PLT)
	mov	r0, r5
.L15129:
	add	sp, sp, #4
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15134:
	ldr	r0, [r6, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15129
	ldr	r4, .L15137+60
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [fp, #3532]
.LPIC4553:
	add	r4, pc, r4
	strb	r3, [r4, #2972]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15129
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [fp, #3540]
	strb	r3, [r4, #2992]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15129
	uxtb	r0, r0
	strb	r0, [fp, #3548]
	strb	r0, [r4, #2963]
	b	.L15120
.L15126:
	mov	r4, #16
	b	.L15116
.L15136:
	ldr	r3, .L15137+56
	mov	r0, r5
	ldr	r3, [r7, r3]
	str	r4, [r3]
	b	.L15129
.L15135:
	mvn	r5, #11
	b	.L15117
.L15121:
	mvn	r0, #21
	b	.L15129
.L15133:
	ldr	r4, .L15137+64
	mov	r2, fp
	ldr	r0, .L15137+68
.LPIC4549:
	add	r4, pc, r4
	sub	r1, r4, #2400
.LPIC4548:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	r0, .L15137+72
	sub	r1, r4, #2384
	sub	r1, r1, #8
.LPIC4550:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, fp
	b	.L15129
.L15138:
	.align	2
.L15137:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC4558+8)
	.word	.LANCHOR0-(.LPIC4569+8)
	.word	kmalloc_caches(GOT)
	.word	.LANCHOR0-(.LPIC4561+8)
	.word	rndis_qc_add_header-(.LPIC4559+8)
	.word	rndis_qc_rm_hdr(GOT)
	.word	.LC826-(.LPIC4560+8)
	.word	rndis_qc_unbind-(.LPIC4563+8)
	.word	rndis_qc_bind-(.LPIC4562+8)
	.word	rndis_qc_set_alt-(.LPIC4564+8)
	.word	rndis_qc_setup-(.LPIC4565+8)
	.word	rndis_qc_disable-(.LPIC4566+8)
	.word	rndis_qc_suspend-(.LPIC4567+8)
	.word	rndis_qc_resume-(.LPIC4568+8)
	.word	_rndis_qc(GOT)
	.word	.LANCHOR2-(.LPIC4553+8)
	.word	.LANCHOR9-(.LPIC4549+8)
	.word	.LC862-(.LPIC4548+8)
	.word	.LC863-(.LPIC4550+8)
	.fnend
	.size	rndis_qc_bind_config_vendor, .-rndis_qc_bind_config_vendor
	.align	2
	.global	rndis_qc_bind_config
	.type	rndis_qc_bind_config, %function
rndis_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {lr}
	str	lr, [sp, #-4]!
	mov	ip, #1
	.pad #12
	sub	sp, sp, #12
	mov	r2, #0
	mov	r3, r2
	str	ip, [sp]
	bl	rndis_qc_bind_config_vendor(PLT)
	add	sp, sp, #12
	@ sp needed
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_qc_bind_config, .-rndis_qc_bind_config
	.align	2
	.global	gether_setup_name
	.type	gether_setup_name, %function
gether_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r8, [sp, #16]
	ldr	r8, .L15158
	strd	r6, [sp, #8]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #12
	sub	sp, sp, #12
.LPIC4570:
	add	r8, pc, r8
	ldr	r7, [r8, #3996]
	cmp	r7, #0
	mvnne	r0, #15
	bne	.L15142
	mov	r5, r1
	mov	r1, #1
	mov	r6, r2
	mov	r4, r0
	mov	r2, r1
	mov	r0, #132
	bl	alloc_etherdev_mqs(PLT)
	subs	r9, r0, #0
	mvneq	r0, #11
	bne	.L15157
.L15142:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15157:
	add	r10, r9, #1152
	mov	r2, #65024
	str	r7, [r9, #1152]
	add	ip, r10, #52
	movt	r2, 65535
	str	r7, [r9, #1168]
	add	lr, r10, #20
	add	r3, r10, #28
	str	r7, [r9, #1216]
	str	ip, [r9, #1204]
	add	r1, r10, #92
	add	fp, r10, #108
	str	ip, [r9, #1208]
	ldr	ip, .L15158+4
	str	r3, [r9, #1184]
	mov	r3, r6
	str	r2, [r9, #1240]
	str	r2, [r9, #1256]
	ldr	r2, .L15158+8
.LPIC4571:
	add	ip, pc, ip
	str	lr, [r9, #1172]
	str	lr, [r9, #1176]
	ldr	lr, [r9, #1184]
	str	ip, [r9, #1252]
	ldr	ip, .L15158+12
	str	r7, [r9, #1212]
.LPIC4573:
	add	r2, pc, r2
	str	r1, [r9, #1244]
	str	r1, [r9, #1248]
	mov	r1, #16
.LPIC4572:
	add	ip, pc, ip
	str	r9, [r9, #1160]
	str	fp, [r9, #1260]
	str	fp, [r9, #1264]
	str	lr, [r9, #1180]
	str	ip, [r9, #1268]
	bl	snprintf(PLT)
	ldr	r7, [r8, #4000]
	ldr	r6, [r9, #484]
	cmp	r7, #0
	beq	.L15147
	add	r1, r6, #5
	strd	r4, [sp]
	sub	r8, r6, #1
	mov	r5, r1
.L15146:
	ldrb	r3, [r7]	@ zero_extendqisi2
	mov	r4, r7
	cmp	r3, #46
	cmpne	r3, #58
	addeq	r4, r7, #1
	mov	r7, r4
	ldrb	r0, [r7], #2	@ zero_extendqisi2
	bl	hex_to_bin(PLT)
	mov	fp, r0
	ldrb	r0, [r4, #1]	@ zero_extendqisi2
	bl	hex_to_bin(PLT)
	orr	r0, r0, fp, asl #4
	strb	r0, [r8, #1]!
	cmp	r8, r5
	bne	.L15146
	ldrb	ip, [r6]	@ zero_extendqisi2
	ldrd	r4, [sp]
	tst	ip, #1
	bne	.L15147
	ldrb	r0, [r6, #1]	@ zero_extendqisi2
	ldrb	r1, [r6, #2]	@ zero_extendqisi2
	ldrb	r2, [r6, #3]	@ zero_extendqisi2
	ldrb	r3, [r6, #4]	@ zero_extendqisi2
	orr	r0, ip, r0
	ldrb	ip, [r6, #5]	@ zero_extendqisi2
	orr	r1, r0, r1
	orr	r2, r1, r2
	orr	r3, r2, r3
	orrs	r3, r3, ip
	beq	.L15147
	add	r7, r4, #32
.L15144:
	ldr	r3, [r5]	@ unaligned
	add	r6, r10, #125
	ldr	r0, .L15158+16
	str	r3, [r9, #1277]	@ unaligned
	ldrh	r3, [r5, #4]	@ unaligned
.LPIC4577:
	add	r0, pc, r0
	strh	r3, [r6, #4]	@ unaligned
	bl	printk(PLT)
	ldr	r3, .L15158+20
	str	r4, [r9, #1164]
	mov	r0, r9
	ldr	r2, .L15158+24
	str	r7, [r9, #688]
.LPIC4580:
	add	r3, pc, r3
.LPIC4578:
	add	r2, pc, r2
	add	r3, r3, #3568
	add	r1, r2, #320
	add	r3, r3, #4
	add	r2, r2, #456
	str	r3, [r9, #736]
	str	r1, [r9, #328]
	str	r2, [r9, #332]
	bl	register_netdev(PLT)
	subs	r4, r0, #0
	bge	.L15148
	mov	r0, r9
	bl	free_netdev(PLT)
	mov	r0, r4
	b	.L15142
.L15147:
	mov	r0, r6
	mov	r1, #6
	bl	get_random_bytes(PLT)
	ldrb	r3, [r6]	@ zero_extendqisi2
	add	r7, r4, #32
	ldr	r1, .L15158+28
	mov	r0, r7
	ldr	r2, .L15158+32
	bic	r3, r3, #1
	orr	r3, r3, #2
.LPIC4575:
	add	r1, pc, r1
.LPIC4576:
	add	r2, pc, r2
	strb	r3, [r6]
	bl	dev_warn(PLT)
	b	.L15144
.L15148:
	ldr	r0, .L15158+36
	ldr	r1, [r9, #1160]
	ldr	r2, [r9, #484]
.LPIC4581:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L15158+40
	mov	r2, r6
	ldr	r1, [r9, #1160]
.LPIC4582:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, .L15158+44
	mov	r0, r9
.LPIC4583:
	add	r3, pc, r3
	str	r10, [r3, #3996]
	bl	netif_carrier_off(PLT)
	mov	r0, r4
	b	.L15142
.L15159:
	.align	2
.L15158:
	.word	.LANCHOR4-(.LPIC4570+8)
	.word	eth_work-(.LPIC4571+8)
	.word	.LC871-(.LPIC4573+8)
	.word	process_rx_w-(.LPIC4572+8)
	.word	.LC874-(.LPIC4577+8)
	.word	.LANCHOR0-(.LPIC4580+8)
	.word	.LANCHOR6-(.LPIC4578+8)
	.word	.LC872-(.LPIC4575+8)
	.word	.LC873-(.LPIC4576+8)
	.word	.LC875-(.LPIC4581+8)
	.word	.LC876-(.LPIC4582+8)
	.word	.LANCHOR4-(.LPIC4583+8)
	.fnend
	.size	gether_setup_name, .-gether_setup_name
	.align	2
	.global	gether_setup
	.type	gether_setup, %function
gether_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, .L15161
.LPIC4584:
	add	r2, pc, r2
	b	gether_setup_name(PLT)
.L15162:
	.align	2
.L15161:
	.word	.LC877-(.LPIC4584+8)
	.fnend
	.size	gether_setup, .-gether_setup
	.align	2
	.type	rndis_function_bind_config, %function
rndis_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r4, [r0, #4]
	.pad #28
	sub	sp, sp, #28
	cmp	r4, #0
	beq	.L15172
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	mov	r6, r1
	ldrb	r3, [r4]	@ zero_extendqisi2
	ldr	r5, .L15174
	ldr	r0, .L15174+4
	str	r2, [sp]
	ldrb	r2, [r4, #2]	@ zero_extendqisi2
.LPIC4589:
	add	r5, pc, r5
	sub	r5, r5, #2352
.LPIC4588:
	add	r0, pc, r0
	str	r2, [sp, #4]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	sub	r5, r5, #12
	mov	r1, r5
	mov	r2, r5
	str	ip, [sp, #8]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	str	ip, [sp, #16]
	bl	printk(PLT)
	ldr	r3, [r6, #24]
	mov	r1, r4
	ldr	r2, .L15174+8
	ldr	r0, [r3]
.LPIC4591:
	add	r2, pc, r2
	bl	gether_setup_name(PLT)
	subs	r7, r0, #0
	bne	.L15173
	ldrb	r3, [r4, #269]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15167
	ldr	r3, .L15174+12
	mvn	r0, #31
	mov	r1, #1
	mov	r2, #3
.LPIC4595:
	add	r3, pc, r3
	strb	r0, [r3, #2808]
	strb	r0, [r3, #2817]
	strb	r1, [r3, #2809]
	strb	r1, [r3, #2818]
	strb	r2, [r3, #2810]
	strb	r2, [r3, #2819]
.L15167:
	ldr	r2, [r4, #8]
	mov	r0, r6
	mov	r1, r4
	add	r3, r4, #13
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	rndis_bind_config_vendor(PLT)
.L15172:
	ldr	r1, .L15174+16
	ldr	r0, .L15174+20
.LPIC4586:
	add	r1, pc, r1
	sub	r1, r1, #2352
.LPIC4585:
	add	r0, pc, r0
	sub	r1, r1, #12
	mov	r2, r1
	bl	printk(PLT)
	mvn	r0, #0
.L15165:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L15173:
	ldr	r0, .L15174+24
	mov	r1, r5
	mov	r2, r5
.LPIC4592:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r7
	b	.L15165
.L15175:
	.align	2
.L15174:
	.word	.LANCHOR9-(.LPIC4589+8)
	.word	.LC879-(.LPIC4588+8)
	.word	.LC826-(.LPIC4591+8)
	.word	.LANCHOR2-(.LPIC4595+8)
	.word	.LANCHOR9-(.LPIC4586+8)
	.word	.LC878-(.LPIC4585+8)
	.word	.LC880-(.LPIC4592+8)
	.fnend
	.size	rndis_function_bind_config, .-rndis_function_bind_config
	.align	2
	.global	gether_cleanup
	.type	gether_cleanup, %function
gether_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r4, .L15182
	str	lr, [sp, #4]
.LPIC4601:
	add	r4, pc, r4
	ldr	r3, [r4, #3996]
	cmp	r3, #0
	beq	.L15176
	ldr	r0, [r3, #8]
	bl	unregister_netdev(PLT)
	ldr	r0, [r4, #3996]
	add	r0, r0, #88
	bl	flush_work(PLT)
	ldr	r3, [r4, #3996]
	ldr	r0, [r3, #8]
	bl	free_netdev(PLT)
	mov	r3, #0
	str	r3, [r4, #3996]
.L15176:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L15183:
	.align	2
.L15182:
	.word	.LANCHOR4-(.LPIC4601+8)
	.fnend
	.size	gether_cleanup, .-gether_cleanup
	.align	2
	.type	ncm_function_unbind_config, %function
ncm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	gether_cleanup(PLT)
	.fnend
	.size	ncm_function_unbind_config, .-ncm_function_unbind_config
	.align	2
	.type	ecm_function_unbind_config, %function
ecm_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	gether_cleanup(PLT)
	.fnend
	.size	ecm_function_unbind_config, .-ecm_function_unbind_config
	.align	2
	.type	ecm_function_bind_config, %function
ecm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r5, [r0, #4]
	cmp	r5, #0
	beq	.L15192
	ldr	r3, [r1, #24]
	mov	r6, r1
	mov	r1, r5
	ldr	r2, .L15195
	ldr	r0, [r3]
.LPIC4608:
	add	r2, pc, r2
	bl	gether_setup_name(PLT)
	subs	r4, r0, #0
	bne	.L15193
	mov	r0, r6
	mov	r1, r5
	bl	ecm_bind_config(PLT)
	subs	r4, r0, #0
	moveq	r0, r4
	bne	.L15194
.L15188:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15192:
	ldr	r1, .L15195+4
	ldr	r0, .L15195+8
.LPIC4606:
	add	r1, pc, r1
	sub	r1, r1, #2336
.LPIC4605:
	add	r0, pc, r0
	mov	r2, r1
	bl	printk(PLT)
	mvn	r0, #21
	b	.L15188
.L15194:
	ldr	r1, .L15195+12
	ldr	r0, .L15195+16
.LPIC4613:
	add	r1, pc, r1
	sub	r1, r1, #2336
.LPIC4612:
	add	r0, pc, r0
	mov	r2, r1
	bl	printk(PLT)
	bl	gether_cleanup(PLT)
	mov	r0, r4
	b	.L15188
.L15193:
	ldr	r1, .L15195+20
	ldr	r0, .L15195+24
.LPIC4610:
	add	r1, pc, r1
	sub	r1, r1, #2336
.LPIC4609:
	add	r0, pc, r0
	mov	r2, r1
	bl	printk(PLT)
	mov	r0, r4
	b	.L15188
.L15196:
	.align	2
.L15195:
	.word	.LC882-(.LPIC4608+8)
	.word	.LANCHOR9-(.LPIC4606+8)
	.word	.LC881-(.LPIC4605+8)
	.word	.LANCHOR9-(.LPIC4613+8)
	.word	.LC883-(.LPIC4612+8)
	.word	.LANCHOR9-(.LPIC4610+8)
	.word	.LC880-(.LPIC4609+8)
	.fnend
	.size	ecm_function_bind_config, .-ecm_function_bind_config
	.align	2
	.type	rndis_function_unbind_config, %function
rndis_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	gether_cleanup(PLT)
	.fnend
	.size	rndis_function_unbind_config, .-rndis_function_unbind_config
	.align	2
	.global	gether_connect
	.type	gether_connect, %function
gether_connect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15231
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC4615:
	add	r3, pc, r3
	ldr	r6, [r3, #3996]
	cmp	r6, #0
	beq	.L15212
	ldr	r3, .L15231+4
	mov	r4, r0
.LPIC4620:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #24]
	cmp	r0, #0
	beq	.L15200
	movw	r1, #32800
	mov	r2, #44
	bl	kmem_cache_alloc_trace(PLT)
	cmp	r0, #0
	str	r0, [r4, #144]
	beq	.L15228
.L15201:
	ldr	r3, [r4, #88]
	str	r6, [r3]
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	beq	.L15229
.L15203:
	ldr	r0, [r4, #144]
	bl	kfree(PLT)
.L15202:
	mov	r0, r5
.L15218:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15229:
	ldr	r3, [r4, #92]
	str	r6, [r3]
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r5, r0, #0
	bne	.L15204
	ldr	r3, [r6, #12]
	ldr	r2, [r3, #20]
	cmp	r2, #2
	bhi	.L15230
.L15214:
	mov	r7, #2
.L15205:
	add	r8, r6, #16
	mov	r0, r8
	bl	_raw_spin_lock(PLT)
	add	r0, r6, #20
	ldr	r1, [r4, #88]
	mov	r2, r7
	bl	prealloc(PLT)
	subs	r5, r0, #0
	blt	.L15206
	mov	r2, r7
	ldr	r1, [r4, #92]
	add	r0, r6, #28
	bl	prealloc(PLT)
	mov	r5, r0
	mov	r0, r8
	bl	_raw_spin_unlock(PLT)
	cmp	r5, #0
	bne	.L15207
	ldrb	r3, [r4, #96]	@ zero_extendqisi2
	mov	r0, r6
	strb	r3, [r6, #124]
	ldr	r3, [r4, #100]
	str	r3, [r6, #68]
	ldr	r3, [r4, #132]
	str	r3, [r6, #84]
	ldr	r3, [r4, #128]
	str	r3, [r6, #80]
	ldr	r3, [r4, #116]
	str	r3, [r6, #72]
	ldr	r3, [r4, #120]
	str	r3, [r6, #76]
	bl	_raw_spin_lock(PLT)
	str	r5, [r6, #44]
	str	r5, [r6, #40]
	str	r5, [r6, #48]
	str	r4, [r6, #4]
	str	r6, [r4, #84]
	ldr	r3, [r6, #8]
	ldr	r3, [r3, #164]
	tst	r3, #1
	beq	.L15208
	ldr	r3, [r4, #136]
	cmp	r3, #0
	beq	.L15209
.L15226:
	mov	r0, r4
	blx	r3
.L15209:
	mov	r0, r6
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r6, #8]
	bl	netif_carrier_on(PLT)
	ldr	r0, [r6, #8]
	ldr	r3, [r0, #164]
	tst	r3, #1
	beq	.L15218
	mov	r0, r6
	mov	r1, #32
	bl	rx_fill(PLT)
	ldr	r2, [r6, #8]
	mov	r3, #0
	mov	r0, r3
	str	r3, [r6, #36]
	ldr	r4, [r2, #576]
	add	r1, r4, #80
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	beq	.L15227
	ldr	r0, [r4, #4]
	bl	__netif_schedule(PLT)
	ldr	r0, [r6, #8]
	b	.L15218
.L15206:
	mov	r0, r8
	bl	_raw_spin_unlock(PLT)
.L15207:
	ldr	r0, [r4, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
.L15204:
	ldr	r0, [r4, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	cmp	r5, #0
	blt	.L15203
.L15227:
	ldr	r0, [r6, #8]
	b	.L15218
.L15200:
	mov	r3, #16
	str	r3, [r4, #144]
	b	.L15201
.L15230:
	ldr	r3, [r3, #16]
	sub	r3, r3, #3
	bics	r3, r3, #2
	bne	.L15214
	ldr	r3, .L15231+8
.LPIC4619:
	add	r3, pc, r3
	ldr	r7, [r3, #324]
	mov	r7, r7, asl #1
	b	.L15205
.L15212:
	mvn	r0, #21
	b	.L15218
.L15208:
	ldr	r3, [r4, #140]
	cmp	r3, #0
	bne	.L15226
	b	.L15209
.L15228:
	ldr	r1, .L15231+12
	mvn	r5, #11
	ldr	r0, .L15231+16
.LPIC4618:
	add	r1, pc, r1
	sub	r1, r1, #2304
.LPIC4617:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L15202
.L15232:
	.align	2
.L15231:
	.word	.LANCHOR4-(.LPIC4615+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4620+8))
	.word	.LANCHOR2-(.LPIC4619+8)
	.word	.LANCHOR9-(.LPIC4618+8)
	.word	.LC884-(.LPIC4617+8)
	.fnend
	.size	gether_connect, .-gether_connect
	.align	2
	.global	gether_disconnect
	.type	gether_disconnect, %function
gether_disconnect:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	str	lr, [sp, #28]
	ldr	r4, [r0, #84]
	cmp	r4, #0
	beq	.L15233
	ldr	r3, [r4, #8]
	mov	r6, r0
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L15254
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit(PLT)
.L15236:
	ldr	r0, [r4, #8]
	add	r7, r4, #16
	add	r8, r4, #20
	bl	netif_carrier_off(PLT)
	ldr	r0, [r6, #88]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	ldr	r5, [r4, #20]
	cmp	r8, r5
	movne	r9, #0
	bne	.L15241
	b	.L15242
.L15240:
	ldr	r0, [r6, #88]
	mov	r1, r10
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	ldr	r5, [r4, #20]
	cmp	r5, r8
	beq	.L15242
.L15241:
	mov	r0, r5
	sub	r10, r5, #36
	bl	list_del(PLT)
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	ldrb	r3, [r6, #124]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15240
	ldr	r0, [r5, #-36]
	bl	kfree(PLT)
	str	r9, [r5, #-36]
	b	.L15240
.L15242:
	mov	r5, #0
	ldr	r0, [r6, #144]
	add	r8, r4, #28
	bl	kfree(PLT)
	mov	r0, r7
	str	r5, [r6, #144]
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r6, #88]
	str	r5, [r3]
	ldr	r3, [r6, #88]
	str	r5, [r3, #28]
	ldr	r0, [r6, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	ldr	r1, [r4, #28]
	cmp	r8, r1
	beq	.L15239
.L15245:
	mov	r0, r1
	sub	r5, r1, #36
	bl	list_del(PLT)
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	ldr	r0, [r6, #92]
	mov	r1, r5
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #12]
	blx	r3
	mov	r0, r7
	bl	_raw_spin_lock(PLT)
	ldr	r1, [r4, #28]
	cmp	r1, r8
	bne	.L15245
.L15239:
	mov	r0, r7
	add	r7, r4, #64
	bl	_raw_spin_unlock(PLT)
	mov	r0, r7
	add	r5, r4, #52
	bl	_raw_spin_lock(PLT)
	ldr	r3, [r4, #52]
	cmp	r3, r5
	cmpne	r3, #0
	movne	r8, #0
	beq	.L15244
.L15246:
	ldr	r2, [r4, #60]
	mov	r0, r3
	sub	r2, r2, #1
	str	r2, [r4, #60]
	ldmia	r3, {r1, r2}
	str	r8, [r3]
	str	r8, [r3, #4]
	str	r2, [r1, #4]
	str	r1, [r2]
	bl	dev_kfree_skb_any(PLT)
	ldr	r3, [r4, #52]
	cmp	r3, r5
	cmpne	r3, #0
	bne	.L15246
.L15244:
	mov	r0, r7
	mov	r5, #0
	bl	_raw_spin_unlock(PLT)
	ldr	r3, [r6, #92]
	mov	r0, r4
	str	r5, [r3]
	ldr	r3, [r6, #92]
	str	r5, [r3, #28]
	str	r5, [r4, #68]
	str	r5, [r4, #84]
	str	r5, [r4, #80]
	bl	_raw_spin_lock(PLT)
	str	r5, [r4, #4]
	mov	r0, r4
	str	r5, [r6, #84]
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	ldr	lr, [sp, #28]
	add	sp, sp, #32
	b	_raw_spin_unlock(PLT)
.L15254:
	ldr	r0, .L15255
	movw	r1, #1847
.LPIC4621:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r0, .L15255+4
.LPIC4622:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15236
.L15233:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15256:
	.align	2
.L15255:
	.word	.LC85-(.LPIC4621+8)
	.word	.LC86-(.LPIC4622+8)
	.fnend
	.size	gether_disconnect, .-gether_disconnect
	.align	2
	.type	rndis_disable, %function
rndis_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #168]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r0, [r0, #164]
	bl	rndis_uninit(PLT)
	mov	r0, r4
	bl	gether_disconnect(PLT)
	ldr	r0, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #168]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	rndis_disable, .-rndis_disable
	.align	2
	.type	rndis_set_alt, %function
rndis_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r2, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L15287
	ldrb	r3, [r0, #149]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L15270
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L15271
	bl	gether_disconnect(PLT)
	ldr	r2, [r4, #88]
.L15271:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L15272
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L15272
.L15273:
	mov	r5, #0
	mov	r0, r4
	strb	r5, [r4, #96]
	strh	r5, [r4, #98]	@ movhi
	bl	gether_connect(PLT)
	cmn	r0, #4096
	bhi	.L15269
	mov	r1, r0
	add	r2, r4, #98
	ldrb	r0, [r4, #164]	@ zero_extendqisi2
	bl	rndis_set_param_dev(PLT)
	mov	r0, r5
.L15269:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15287:
	ldr	r2, [r0, #168]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L15266
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #168]
.L15266:
	ldr	r1, [r2, #28]
	cmp	r1, #0
	beq	.L15288
.L15267:
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #168]
	mov	r0, #0
	str	r4, [r3]
	b	.L15269
.L15272:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15275
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	beq	.L15273
.L15275:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L15269
.L15270:
	mvn	r0, #21
	b	.L15269
.L15288:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15270
	ldr	r2, [r4, #168]
	ldr	r1, [r2, #28]
	b	.L15267
	.fnend
	.size	rndis_set_alt, .-rndis_set_alt
	.align	2
	.type	ecm_disable, %function
ecm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L15290
	bl	gether_disconnect(PLT)
.L15290:
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L15289
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #164]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #164]
	str	r3, [r2, #28]
.L15289:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ecm_disable, .-ecm_disable
	.align	2
	.type	ecm_set_alt, %function
ecm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldrb	ip, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r0, #20]
	cmp	ip, r1
	ldr	r6, [r3, #24]
	beq	.L15324
	ldrb	r3, [r0, #149]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r1, r3
	bne	.L15305
	ldr	r2, [r0, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L15306
	bl	gether_disconnect(PLT)
	ldr	r2, [r4, #88]
.L15306:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L15307
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L15307
.L15308:
	cmp	r5, #1
	beq	.L15325
.L15311:
	ldr	r6, [r4, #168]
	mov	r3, #1
	strb	r3, [r4, #172]
	cmp	r6, #0
	beq	.L15313
	ldr	r3, [r6]
	mov	r5, #0
	mov	lr, #8
	mov	ip, #2
	mvn	r0, #94
	mov	r1, r6
	mov	r2, #32
	strb	r5, [r3, #1]
	ldrb	r7, [r4, #173]	@ zero_extendqisi2
	strb	r5, [r3, #6]
	strb	r5, [r3, #7]
	strh	r7, [r3, #2]	@ unaligned
	str	lr, [r6, #4]
	strb	ip, [r4, #172]
	strb	r0, [r3]
	ldrb	r0, [r4, #148]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #164]
	str	r5, [r4, #168]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, r5
	blt	.L15326
.L15313:
	mov	r0, #0
.L15302:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15324:
	cmp	r2, #0
	bne	.L15305
	ldr	r2, [r0, #164]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L15303
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #164]
.L15303:
	ldr	r1, [r2, #28]
	cmp	r1, #0
	beq	.L15327
.L15304:
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #164]
	mov	r0, #0
	str	r4, [r3]
	b	.L15302
.L15325:
	ldr	r3, [r6]
	ldr	r0, .L15328
	ldr	r1, [r3, #28]
.LPIC4623:
	add	r0, pc, r0
	bl	strcmp(PLT)
	adds	r2, r0, #0
	mov	r3, #15
	movne	r2, #1
	mov	r0, r4
	strh	r3, [r4, #98]	@ movhi
	strb	r2, [r4, #96]
	bl	gether_connect(PLT)
	cmn	r0, #4096
	bls	.L15311
	b	.L15302
.L15307:
	ldr	r0, [r6]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15310
	ldr	r0, [r6]
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	beq	.L15308
.L15310:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L15302
.L15326:
	mov	r0, r5
	str	r6, [r4, #168]
	b	.L15302
.L15305:
	mvn	r0, #21
	b	.L15302
.L15327:
	ldr	r0, [r6]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15305
	ldr	r2, [r4, #164]
	ldr	r1, [r2, #28]
	b	.L15304
.L15329:
	.align	2
.L15328:
	.word	.LC458-(.LPIC4623+8)
	.fnend
	.size	ecm_set_alt, .-ecm_set_alt
	.align	2
	.type	ncm_disable, %function
ncm_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L15331
	bl	gether_disconnect(PLT)
.L15331:
	ldr	r0, [r4, #164]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L15330
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #164]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #164]
	str	r3, [r2, #28]
.L15330:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
	.fnend
	.size	ncm_disable, .-ncm_disable
	.align	2
	.type	ncm_set_alt, %function
ncm_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldrb	r0, [r0, #148]	@ zero_extendqisi2
	ldr	r3, [r4, #20]
	cmp	r0, r1
	ldr	r6, [r3, #24]
	beq	.L15367
	ldrb	r5, [r4, #149]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r1, r5
	movne	r5, #1
	moveq	r5, #0
	bne	.L15346
	cmp	r2, #0
	moveq	r0, r2
	beq	.L15364
	ldr	r2, [r4, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	bne	.L15368
.L15347:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L15352
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L15352
.L15348:
	ldr	r3, [r6]
	ldr	r0, .L15370
	ldr	r1, [r3, #28]
.LPIC4628:
	add	r0, pc, r0
	bl	strcmp(PLT)
	adds	r2, r0, #0
	mov	r3, #15
	movne	r2, #1
	mov	r0, r4
	strh	r3, [r4, #98]	@ movhi
	strb	r2, [r4, #96]
	bl	gether_connect(PLT)
	cmn	r0, #4096
	mov	r3, r0
	bhi	.L15364
	ldrh	r2, [r4, #182]
	str	r3, [r4, #184]
	ldr	r0, .L15370+4
	sub	r2, r2, #14
.LPIC4629:
	add	r0, pc, r0
	str	r2, [r3, #356]
	ldr	r3, [r4, #184]
	ldr	r1, [r3, #356]
	bl	printk(PLT)
	mov	r0, #0
.L15364:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15367:
	cmp	r2, #0
	bne	.L15346
	ldr	r2, [r4, #164]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L15344
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #164]
.L15344:
	ldr	r1, [r2, #28]
	cmp	r1, #0
	beq	.L15369
.L15345:
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #164]
	mov	r0, #0
	str	r4, [r3]
	b	.L15364
.L15346:
	mvn	r0, #21
	b	.L15364
.L15369:
	ldr	r0, [r6]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15346
	ldr	r2, [r4, #164]
	ldr	r1, [r2, #28]
	b	.L15345
.L15352:
	ldr	r0, [r6]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15350
	ldr	r0, [r6]
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	beq	.L15348
.L15350:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L15364
.L15368:
	ldr	r1, .L15370+8
	ldr	r0, .L15370+12
.LPIC4625:
	add	r1, pc, r1
	sub	r1, r1, #2288
.LPIC4624:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	bl	gether_disconnect(PLT)
	ldr	r3, .L15370+16
	mov	r2, #15
	strb	r5, [r4, #180]
	str	r5, [r4, #100]
	mov	r0, #16384
	movw	r1, #9014
	strh	r2, [r4, #98]	@ movhi
	ldr	r2, [r4, #88]
.LPIC4626:
	add	r3, pc, r3
	add	ip, r3, #56
	str	ip, [r4, #176]
	ldr	r3, [r3, #16]
	str	r5, [r4, #184]
	str	r0, [r4, #112]
	strh	r1, [r4, #182]	@ movhi
	str	r3, [r4, #108]
	b	.L15347
.L15371:
	.align	2
.L15370:
	.word	.LC458-(.LPIC4628+8)
	.word	.LC886-(.LPIC4629+8)
	.word	.LANCHOR9-(.LPIC4625+8)
	.word	.LC885-(.LPIC4624+8)
	.word	.LANCHOR2-(.LPIC4626+8)
	.fnend
	.size	ncm_set_alt, .-ncm_set_alt
	.align	2
	.global	gether_qc_get_macs
	.type	gether_qc_get_macs, %function
gether_qc_get_macs:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r4, .L15374
	mov	r5, r1
	str	r6, [sp, #8]
	mov	r1, r0
	str	lr, [sp, #12]
.LPIC4630:
	add	r4, pc, r4
	ldr	r0, [r4, #4004]
	bl	get_qc_ether_addr(PLT)
	ldr	r6, [sp, #8]
	mov	r1, r5
	ldr	r0, [r4, #4008]
	ldr	lr, [sp, #12]
	ldrd	r4, [sp]
	add	sp, sp, #16
	b	get_qc_ether_addr(PLT)
.L15375:
	.align	2
.L15374:
	.word	.LANCHOR4-(.LPIC4630+8)
	.fnend
	.size	gether_qc_get_macs, .-gether_qc_get_macs
	.align	2
	.global	ecm_qc_bind_config
	.type	ecm_qc_bind_config, %function
ecm_qc_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-28]!
	.save {r4, r5, r6, r7, r8, r9, lr}
	mov	r5, r1
	strd	r6, [sp, #8]
	mov	r6, r0
	ldr	r0, .L15418
	strd	r8, [sp, #16]
	mov	r7, r2
	str	lr, [sp, #24]
	ldr	r3, [r6, #24]
	.pad #28
	sub	sp, sp, #28
.LPIC4632:
	add	r0, pc, r0
	ldr	r3, [r3]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L15387
	ldr	r0, .L15418+4
	mov	r1, r4
.LPIC4633:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r5, #0
	cmpne	r0, #0
	beq	.L15387
	mov	r0, #1
	bl	bam_data_setup(PLT)
	subs	r4, r0, #0
	bne	.L15410
	ldr	r8, .L15418+8
.LPIC4673:
	add	r8, pc, r8
	ldrb	r3, [r8, #3460]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15411
.L15385:
	ldr	r3, .L15418+12
.LPIC4684:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L15391
	movw	r1, #32976
	mov	r2, #172
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L15412
.L15380:
	ldr	r0, .L15418+16
	mov	r1, r7
	mov	r2, #12
.LPIC4645:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	beq	.L15393
	ldr	r0, .L15418+20
	mov	r1, r7
	mov	r2, #12
.LPIC4646:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #2
	bne	.L15413
.L15381:
	str	r3, [r4, #124]
	ldrb	r2, [r5, #2]	@ zero_extendqisi2
	add	r8, r4, #128
	ldrb	r3, [r5]	@ zero_extendqisi2
	mov	r0, r8
	mov	r1, #14
	ldrb	r9, [r5, #1]	@ zero_extendqisi2
	ldrb	r7, [r5, #3]	@ zero_extendqisi2
	ldrb	lr, [r5, #4]	@ zero_extendqisi2
	ldrb	ip, [r5, #5]	@ zero_extendqisi2
	str	r2, [sp, #4]
	ldr	r2, .L15418+24
	str	r9, [sp]
	str	r7, [sp, #8]
	str	lr, [sp, #12]
	str	ip, [sp, #16]
.LPIC4683:
	add	r2, pc, r2
	bl	snprintf(PLT)
.L15386:
	mov	r3, #15
	ldr	r7, .L15418+28
	mov	r0, r6
	ldr	lr, .L15418+32
	mov	r1, r4
	strh	r3, [r4, #98]	@ movhi
	ldr	ip, .L15418+36
	ldr	r3, .L15418+40
.LPIC4655:
	add	r7, pc, r7
	ldr	r6, .L15418+44
	add	r2, r7, #3584
.LPIC4656:
	add	lr, pc, lr
	ldr	r5, .L15418+48
.LPIC4658:
	add	ip, pc, ip
	add	r2, r2, #12
	str	r8, [r7, #3472]
.LPIC4659:
	add	r3, pc, r3
	str	lr, [r4]
	ldr	lr, .L15418+52
	str	ip, [r4, #32]
	ldr	ip, .L15418+56
.LPIC4660:
	add	r6, pc, r6
	str	r2, [r4, #4]
	ldr	r2, .L15418+60
.LPIC4661:
	add	r5, pc, r5
	str	r3, [r4, #36]
	ldr	r3, .L15418+64
.LPIC4662:
	add	lr, pc, lr
	str	r5, [r4, #44]
.LPIC4663:
	add	ip, pc, ip
	str	r6, [r4, #40]
.LPIC4664:
	add	r2, pc, r2
	str	lr, [r4, #52]
.LPIC4665:
	add	r3, pc, r3
	str	ip, [r4, #48]
	strd	r2, [r4, #56]
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	bne	.L15414
	ldr	r3, [r4, #124]
	cmp	r3, #7
	beq	.L15415
.L15406:
	mov	r0, r5
	b	.L15404
.L15387:
	mvn	r0, #21
.L15404:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	add	sp, sp, #24
	ldr	pc, [sp], #4
.L15411:
	ldr	r0, [r6, #24]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15404
	ldr	r4, .L15418+68
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [r8, #3460]
.LPIC4639:
	add	r4, pc, r4
	strb	r3, [r4, #976]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15404
	uxtb	r3, r0
	ldr	r0, [r6, #24]
	strb	r3, [r8, #3476]
	strb	r3, [r4, #1008]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L15404
	uxtb	r0, r0
	strb	r0, [r8, #3468]
	strb	r0, [r4, #3127]
	b	.L15385
.L15393:
	mov	r3, #1
	b	.L15381
.L15391:
	mov	r4, #16
	b	.L15380
.L15413:
	ldr	r0, .L15418+72
	mov	r1, r7
	mov	r2, #12
.LPIC4647:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #3
	beq	.L15381
	ldr	r0, .L15418+76
	mov	r1, r7
	mov	r2, #12
.LPIC4648:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #4
	beq	.L15381
	ldr	r0, .L15418+80
	mov	r1, r7
	mov	r2, #12
.LPIC4649:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #5
	beq	.L15381
	ldr	r0, .L15418+84
	mov	r1, r7
	mov	r2, #12
.LPIC4650:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #6
	beq	.L15381
	ldr	r0, .L15418+88
	mov	r1, r7
	mov	r2, #12
.LPIC4651:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	bne	.L15416
	ldr	r5, .L15418+92
	mov	r3, #7
	add	r8, r4, #128
	str	r3, [r4, #124]
.LPIC4674:
	add	r5, pc, r5
	add	r0, r5, #3968
	mov	r1, r0
	add	r0, r0, #6
	bl	gether_qc_get_macs(PLT)
	ldrb	r3, [r5, #3969]	@ zero_extendqisi2
	mov	r0, r8
	mov	r1, #14
	ldrb	r2, [r5, #3971]	@ zero_extendqisi2
	ldrb	r7, [r5, #3970]	@ zero_extendqisi2
	ldrb	lr, [r5, #3972]	@ zero_extendqisi2
	ldrb	ip, [r5, #3973]	@ zero_extendqisi2
	str	r3, [sp]
	ldrb	r3, [r5, #3968]	@ zero_extendqisi2
	str	r2, [sp, #8]
	ldr	r2, .L15418+96
	str	r7, [sp, #4]
	str	lr, [sp, #12]
	str	ip, [sp, #16]
.LPIC4676:
	add	r2, pc, r2
	bl	snprintf(PLT)
	b	.L15386
.L15415:
	ldr	r0, .L15418+100
.LPIC4669:
	add	r0, pc, r0
	add	r0, r0, #3952
	add	r0, r0, #8
	bl	ecm_ipa_init(PLT)
	subs	r6, r0, #0
	bne	.L15417
.L15407:
	mov	r0, r6
	b	.L15404
.L15412:
	mvn	r0, #11
	b	.L15404
.L15416:
	ldr	r0, .L15418+104
	mov	r1, r7
	mov	r2, #12
.LPIC4652:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #8
	beq	.L15381
	ldr	r0, .L15418+108
	mov	r1, r7
	mov	r2, #12
.LPIC4653:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #9
	beq	.L15381
	ldr	r0, .L15418+112
	mov	r1, r7
	mov	r2, #12
.LPIC4654:
	add	r0, pc, r0
	bl	strncasecmp(PLT)
	cmp	r0, #0
	moveq	r3, #10
	movne	r3, #0
	b	.L15381
.L15414:
	ldr	r1, .L15418+116
	ldr	r0, .L15418+120
.LPIC4667:
	add	r1, pc, r1
	sub	r1, r1, #2256
.LPIC4666:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r3, #0
	mov	r0, r4
	str	r3, [r7, #3472]
	bl	kfree(PLT)
	b	.L15406
.L15410:
	ldr	r5, .L15418+124
	mov	r2, r4
	ldr	r0, .L15418+128
.LPIC4635:
	add	r5, pc, r5
	sub	r1, r5, #2272
.LPIC4634:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	r0, .L15418+132
	sub	r1, r5, #2256
	sub	r1, r1, #4
.LPIC4636:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r4
	b	.L15404
.L15417:
	ldr	r1, .L15418+136
	ldr	r0, .L15418+140
.LPIC4671:
	add	r1, pc, r1
	sub	r1, r1, #2256
.LPIC4670:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	str	r5, [r7, #3472]
	bl	kfree(PLT)
	b	.L15407
.L15419:
	.align	2
.L15418:
	.word	.LC309-(.LPIC4632+8)
	.word	.LC454-(.LPIC4633+8)
	.word	.LANCHOR0-(.LPIC4673+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4684+8))
	.word	.LC0-(.LPIC4645+8)
	.word	.LC1-(.LPIC4646+8)
	.word	.LC869-(.LPIC4683+8)
	.word	.LANCHOR0-(.LPIC4655+8)
	.word	.LC870-(.LPIC4656+8)
	.word	ecm_qc_bind-(.LPIC4658+8)
	.word	ecm_qc_unbind-(.LPIC4659+8)
	.word	ecm_qc_set_alt-(.LPIC4660+8)
	.word	ecm_qc_get_alt-(.LPIC4661+8)
	.word	ecm_qc_setup-(.LPIC4662+8)
	.word	ecm_qc_disable-(.LPIC4663+8)
	.word	ecm_qc_suspend-(.LPIC4664+8)
	.word	ecm_qc_resume-(.LPIC4665+8)
	.word	.LANCHOR2-(.LPIC4639+8)
	.word	.LC2-(.LPIC4647+8)
	.word	.LC3-(.LPIC4648+8)
	.word	.LC4-(.LPIC4649+8)
	.word	.LC5-(.LPIC4650+8)
	.word	.LC6-(.LPIC4651+8)
	.word	.LANCHOR4-(.LPIC4674+8)
	.word	.LC869-(.LPIC4676+8)
	.word	.LANCHOR4-(.LPIC4669+8)
	.word	.LC7-(.LPIC4652+8)
	.word	.LC8-(.LPIC4653+8)
	.word	.LC342-(.LPIC4654+8)
	.word	.LANCHOR9-(.LPIC4667+8)
	.word	.LC887-(.LPIC4666+8)
	.word	.LANCHOR9-(.LPIC4635+8)
	.word	.LC862-(.LPIC4634+8)
	.word	.LC863-(.LPIC4636+8)
	.word	.LANCHOR9-(.LPIC4671+8)
	.word	.LC888-(.LPIC4670+8)
	.fnend
	.size	ecm_qc_bind_config, .-ecm_qc_bind_config
	.align	2
	.global	gether_qc_setup_name
	.type	gether_qc_setup_name, %function
gether_qc_setup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r2
	str	r8, [sp, #16]
	mov	r8, r1
	mov	r1, #1
	strd	r6, [sp, #8]
	mov	r2, r1
	mov	r6, r0
	mov	r0, #28
	str	lr, [sp, #20]
	bl	alloc_etherdev_mqs(PLT)
	subs	r4, r0, #0
	beq	.L15427
	ldr	r2, .L15437
	mov	ip, #0
	mov	r3, r5
	mov	r1, #16
	str	r4, [r4, #1160]
	add	r7, r6, #32
	str	ip, [r4, #1152]
.LPIC4685:
	add	r2, pc, r2
	bl	snprintf(PLT)
	ldr	r3, .L15437+4
	ldr	r1, [r4, #484]
.LPIC4686:
	add	r3, pc, r3
	ldr	r0, [r3, #4004]
	bl	get_qc_ether_addr(PLT)
	cmp	r0, #0
	bne	.L15435
.L15423:
	ldr	r3, .L15437+8
	add	r5, r4, #1168
	add	r5, r5, #5
	mov	r1, r5
.LPIC4689:
	add	r3, pc, r3
	ldr	r0, [r3, #4008]
	bl	get_qc_ether_addr(PLT)
	cmp	r0, #0
	bne	.L15436
.L15424:
	cmp	r8, #0
	beq	.L15425
	ldr	r3, [r5]	@ unaligned
	str	r3, [r8]	@ unaligned
	ldrh	r3, [r5, #4]	@ unaligned
	strh	r3, [r8, #4]	@ unaligned
.L15425:
	ldr	r3, .L15437+12
	mov	r0, r4
.LPIC4692:
	add	r3, pc, r3
	add	r2, r3, #620
	add	r3, r3, #756
	str	r2, [r4, #328]
	str	r3, [r4, #332]
	bl	netif_carrier_off(PLT)
	ldr	r3, .L15437+16
	str	r6, [r4, #1164]
	mov	r0, r4
	str	r7, [r4, #688]
.LPIC4694:
	add	r3, pc, r3
	add	r3, r3, #3600
	add	r3, r3, #4
	str	r3, [r4, #736]
	bl	register_netdev(PLT)
	subs	r6, r0, #0
	bge	.L15426
	mov	r0, r4
	bl	free_netdev(PLT)
	mov	r0, r6
.L15421:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15435:
	ldr	r1, .L15437+20
	mov	r0, r7
	ldr	r2, .L15437+24
.LPIC4687:
	add	r1, pc, r1
.LPIC4688:
	add	r2, pc, r2
	bl	dev_warn(PLT)
	b	.L15423
.L15436:
	ldr	r1, .L15437+28
	mov	r0, r7
	ldr	r2, .L15437+32
.LPIC4690:
	add	r1, pc, r1
.LPIC4691:
	add	r2, pc, r2
	bl	dev_warn(PLT)
	b	.L15424
.L15427:
	mvn	r0, #11
	b	.L15421
.L15426:
	ldr	r0, .L15437+36
	ldr	r1, [r4, #1160]
	ldr	r2, [r4, #484]
.LPIC4695:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L15437+40
	mov	r2, r5
	ldr	r1, [r4, #1160]
.LPIC4696:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r6
	b	.L15421
.L15438:
	.align	2
.L15437:
	.word	.LC871-(.LPIC4685+8)
	.word	.LANCHOR4-(.LPIC4686+8)
	.word	.LANCHOR4-(.LPIC4689+8)
	.word	.LANCHOR6-(.LPIC4692+8)
	.word	.LANCHOR0-(.LPIC4694+8)
	.word	.LC872-(.LPIC4687+8)
	.word	.LC873-(.LPIC4688+8)
	.word	.LC872-(.LPIC4690+8)
	.word	.LC889-(.LPIC4691+8)
	.word	.LC875-(.LPIC4695+8)
	.word	.LC876-(.LPIC4696+8)
	.fnend
	.size	gether_qc_setup_name, .-gether_qc_setup_name
	.align	2
	.global	gether_qc_setup
	.type	gether_qc_setup, %function
gether_qc_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, .L15440
.LPIC4697:
	add	r2, pc, r2
	b	gether_qc_setup_name(PLT)
.L15441:
	.align	2
.L15440:
	.word	.LC877-(.LPIC4697+8)
	.fnend
	.size	gether_qc_setup, .-gether_qc_setup
	.align	2
	.type	rndis_qc_function_bind_config, %function
rndis_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r4, [r0, #4]
	.pad #28
	sub	sp, sp, #28
	cmp	r4, #0
	beq	.L15451
	ldrb	r2, [r4, #1]	@ zero_extendqisi2
	mov	r7, r1
	ldrb	r3, [r4]	@ zero_extendqisi2
	ldr	r5, .L15454
	ldr	r0, .L15454+4
	str	r2, [sp]
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
.LPIC4702:
	add	r5, pc, r5
	sub	r5, r5, #2240
.LPIC4701:
	add	r0, pc, r0
	str	ip, [sp, #4]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
	mov	r1, r5
	mov	r2, r5
	str	ip, [sp, #8]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #12]
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	str	ip, [sp, #16]
	bl	printk(PLT)
	ldr	r3, [r7, #24]
	mov	r1, r4
	ldr	r2, .L15454+8
	ldr	r0, [r3]
.LPIC4704:
	add	r2, pc, r2
	bl	gether_qc_setup_name(PLT)
	subs	r6, r0, #0
	bne	.L15452
	ldrb	r3, [r4, #269]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L15453
.L15446:
	ldrb	ip, [r4, #12]	@ zero_extendqisi2
	mov	r0, r7
	mov	r1, r4
	ldr	r2, [r4, #8]
	add	r3, r4, #13
	str	ip, [sp]
	bl	rndis_qc_bind_config_vendor(PLT)
.L15444:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L15453:
	ldr	r3, .L15454+12
	mvn	r0, #31
	mov	r1, #1
	mov	r2, #3
.LPIC4708:
	add	r3, pc, r3
	strb	r0, [r3, #2960]
	strb	r0, [r3, #2969]
	strb	r1, [r3, #2961]
	strb	r1, [r3, #2970]
	strb	r2, [r3, #2962]
	strb	r2, [r3, #2971]
	b	.L15446
.L15451:
	ldr	r1, .L15454+16
	ldr	r0, .L15454+20
.LPIC4699:
	add	r1, pc, r1
	sub	r1, r1, #2240
.LPIC4698:
	add	r0, pc, r0
	mov	r2, r1
	bl	printk(PLT)
	mvn	r0, #21
	b	.L15444
.L15452:
	ldr	r0, .L15454+24
	mov	r1, r5
	mov	r2, r5
.LPIC4705:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r6
	b	.L15444
.L15455:
	.align	2
.L15454:
	.word	.LANCHOR9-(.LPIC4702+8)
	.word	.LC879-(.LPIC4701+8)
	.word	.LC826-(.LPIC4704+8)
	.word	.LANCHOR2-(.LPIC4708+8)
	.word	.LANCHOR9-(.LPIC4699+8)
	.word	.LC878-(.LPIC4698+8)
	.word	.LC880-(.LPIC4705+8)
	.fnend
	.size	rndis_qc_function_bind_config, .-rndis_qc_function_bind_config
	.align	2
	.type	ecm_qc_function_bind_config, %function
ecm_qc_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r4, [r0, #4]
	cmp	r4, #0
	beq	.L15466
	ldr	r0, .L15468
	mov	r6, r1
.LPIC4717:
	add	r0, pc, r0
	sub	r0, r0, #1424
	sub	r0, r0, #4
	bl	strim(PLT)
	mov	r5, r0
	ldr	r0, .L15468+4
	mov	r1, r5
.LPIC4718:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L15460
	ldr	r3, [r6, #24]
	mov	r1, r4
	ldr	r2, .L15468+8
	ldr	r0, [r3]
.LPIC4719:
	add	r2, pc, r2
	bl	gether_qc_setup_name(PLT)
	subs	r7, r0, #0
	bne	.L15467
.L15460:
	mov	r0, r6
	mov	r1, r4
	ldrd	r6, [sp, #8]
	mov	r2, r5
	ldr	r8, [sp, #16]
	ldrd	r4, [sp]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	ecm_qc_bind_config(PLT)
.L15467:
	ldr	r1, .L15468+12
	ldr	r0, .L15468+16
.LPIC4721:
	add	r1, pc, r1
	sub	r1, r1, #2208
.LPIC4720:
	add	r0, pc, r0
	mov	r2, r1
	bl	printk(PLT)
	mov	r0, r7
.L15458:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15466:
	ldr	r1, .L15468+20
	ldr	r0, .L15468+24
.LPIC4715:
	add	r1, pc, r1
	sub	r1, r1, #2208
.LPIC4714:
	add	r0, pc, r0
	mov	r2, r1
	bl	printk(PLT)
	mvn	r0, #21
	b	.L15458
.L15469:
	.align	2
.L15468:
	.word	.LANCHOR4-(.LPIC4717+8)
	.word	.LC6-(.LPIC4718+8)
	.word	.LC882-(.LPIC4719+8)
	.word	.LANCHOR9-(.LPIC4721+8)
	.word	.LC880-(.LPIC4720+8)
	.word	.LANCHOR9-(.LPIC4715+8)
	.word	.LC881-(.LPIC4714+8)
	.fnend
	.size	ecm_qc_function_bind_config, .-ecm_qc_function_bind_config
	.align	2
	.global	gether_qc_cleanup_name
	.type	gether_qc_cleanup_name, %function
gether_qc_cleanup_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15473
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r1, r0
	str	lr, [sp, #4]
.LPIC4725:
	ldr	r0, [pc, r3]		@ tls_load_dot_plus_eight
	bl	dev_get_by_name(PLT)
	subs	r4, r0, #0
	beq	.L15470
#APP
@ 17 "/root/lol//arch/arm/include/asm/irqflags.h" 1
		mrs	ip, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	ldr	r2, .L15473+4
	mov	r3, sp
	bic	r1, r3, #8128
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
.LPIC4724:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	ldr	r1, [r2, r1, asl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
#APP
@ 142 "/root/lol//arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, ip	@ local_irq_restore
@ 0 "" 2
	bl	unregister_netdev(PLT)
	ldr	lr, [sp, #4]
	mov	r0, r4
	ldr	r4, [sp]
	add	sp, sp, #8
	b	free_netdev(PLT)
.L15470:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L15474:
	.align	2
.L15473:
	.word	init_net(GOT_PREL)+(.-(.LPIC4725+8))
	.word	__per_cpu_offset(GOT_PREL)+(.-(.LPIC4724+8))
	.fnend
	.size	gether_qc_cleanup_name, .-gether_qc_cleanup_name
	.align	2
	.type	rndis_qc_function_unbind_config, %function
rndis_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, .L15476
.LPIC4726:
	add	r0, pc, r0
	b	gether_qc_cleanup_name(PLT)
.L15477:
	.align	2
.L15476:
	.word	.LC890-(.LPIC4726+8)
	.fnend
	.size	rndis_qc_function_unbind_config, .-rndis_qc_function_unbind_config
	.align	2
	.type	ecm_qc_function_unbind_config, %function
ecm_qc_function_unbind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L15482
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC4727:
	add	r0, pc, r0
	sub	r0, r0, #1424
	sub	r0, r0, #4
	bl	strim(PLT)
	mov	r1, r0
	ldr	r0, .L15482+4
.LPIC4728:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L15481
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L15481:
	ldr	r0, .L15482+8
	ldr	r4, [sp]
	ldr	lr, [sp, #4]
	add	sp, sp, #8
.LPIC4729:
	add	r0, pc, r0
	b	gether_qc_cleanup_name(PLT)
.L15483:
	.align	2
.L15482:
	.word	.LANCHOR4-(.LPIC4727+8)
	.word	.LC6-(.LPIC4728+8)
	.word	.LC891-(.LPIC4729+8)
	.fnend
	.size	ecm_qc_function_unbind_config, .-ecm_qc_function_unbind_config
	.align	2
	.global	gether_qc_connect_name
	.type	gether_qc_connect_name, %function
gether_qc_connect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15511
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC4732:
	ldr	r0, [pc, r3]		@ tls_load_dot_plus_eight
	bl	dev_get_by_name(PLT)
	subs	r4, r0, #0
	beq	.L15487
#APP
@ 17 "/root/lol//arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	ldr	r2, .L15511+4
	mov	r3, sp
	bic	r1, r3, #8128
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
.LPIC4731:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	ldr	r1, [r2, r1, asl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
#APP
@ 142 "/root/lol//arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	adds	r7, r4, #1152
	beq	.L15487
	ldrb	r3, [r5, #96]	@ zero_extendqisi2
	mov	r0, r7
	strb	r3, [r4, #1172]
	ldr	r3, [r5, #100]
	str	r3, [r4, #1168]
	bl	_raw_spin_lock(PLT)
	str	r5, [r4, #1156]
	str	r7, [r5, #84]
	ldr	r3, [r4, #1160]
	ldr	r3, [r3, #164]
	tst	r3, #1
	bne	.L15508
	ldr	r3, [r5, #116]
	cmp	r3, #0
	beq	.L15489
.L15506:
	mov	r0, r5
	blx	r3
.L15489:
	mov	r0, r7
	bl	_raw_spin_unlock(PLT)
	cmp	r6, #0
	ldr	r0, [r4, #1160]
	bne	.L15509
.L15486:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15508:
	ldr	r3, [r5, #112]
	cmp	r3, #0
	bne	.L15506
	b	.L15489
.L15487:
	mvn	r0, #21
	b	.L15486
.L15509:
	bl	netif_carrier_on(PLT)
	ldr	r0, [r4, #1160]
	ldr	r3, [r0, #164]
	tst	r3, #1
	beq	.L15486
	ldr	r5, [r0, #576]
	mov	r0, #0
	add	r1, r5, #80
	bl	_test_and_clear_bit(PLT)
	cmp	r0, #0
	bne	.L15510
.L15507:
	ldr	r0, [r4, #1160]
	b	.L15486
.L15510:
	ldr	r0, [r5, #4]
	bl	__netif_schedule(PLT)
	b	.L15507
.L15512:
	.align	2
.L15511:
	.word	init_net(GOT_PREL)+(.-(.LPIC4732+8))
	.word	__per_cpu_offset(GOT_PREL)+(.-(.LPIC4731+8))
	.fnend
	.size	gether_qc_connect_name, .-gether_qc_connect_name
	.align	2
	.global	gether_qc_disconnect_name
	.type	gether_qc_disconnect_name, %function
gether_qc_disconnect_name:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15524
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC4737:
	ldr	r0, [pc, r3]		@ tls_load_dot_plus_eight
	bl	dev_get_by_name(PLT)
	subs	r4, r0, #0
	beq	.L15513
#APP
@ 17 "/root/lol//arch/arm/include/asm/irqflags.h" 1
		mrs	r0, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	ldr	r2, .L15524+4
	mov	r3, sp
	bic	r1, r3, #8128
	ldr	r3, [r4, #640]
	bic	r1, r1, #63
	ldr	r1, [r1, #20]
.LPIC4736:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
	ldr	r1, [r2, r1, asl #2]
	ldr	r2, [r3, r1]
	sub	r2, r2, #1
	str	r2, [r3, r1]
#APP
@ 142 "/root/lol//arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r0	@ local_irq_restore
@ 0 "" 2
	adds	r6, r4, #1152
	beq	.L15513
	ldr	r3, [r4, #1160]
	ldr	r1, [r3, #576]
	cmp	r1, #0
	beq	.L15523
	add	r1, r1, #80
	mov	r0, #0
	bl	_set_bit(PLT)
.L15518:
	ldr	r0, [r4, #1160]
	bl	netif_carrier_off(PLT)
	mov	r0, r6
	bl	_raw_spin_lock(PLT)
	mov	r3, #0
	mov	r0, r6
	str	r3, [r4, #1156]
	str	r3, [r5, #84]
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	_raw_spin_unlock(PLT)
.L15513:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15523:
	ldr	r0, .L15524+8
	movw	r1, #1847
.LPIC4734:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	ldr	r0, .L15524+12
.LPIC4735:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15518
.L15525:
	.align	2
.L15524:
	.word	init_net(GOT_PREL)+(.-(.LPIC4737+8))
	.word	__per_cpu_offset(GOT_PREL)+(.-(.LPIC4736+8))
	.word	.LC85-(.LPIC4734+8)
	.word	.LC86-(.LPIC4735+8)
	.fnend
	.size	gether_qc_disconnect_name, .-gether_qc_disconnect_name
	.align	2
	.type	ecm_qc_disable, %function
ecm_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	str	lr, [sp, #4]
	ldr	r3, [r0, #88]
	ldr	r3, [r3]
	cmp	r3, #0
	beq	.L15528
	add	r0, r0, #156
	mov	r1, #0
	bl	bam_data_disconnect(PLT)
	ldr	r3, [r4, #124]
	cmp	r3, #7
	beq	.L15528
	ldr	r1, .L15538
	mov	r0, r4
.LPIC4738:
	add	r1, pc, r1
	bl	gether_qc_disconnect_name(PLT)
.L15528:
	ldr	r0, [r4, #144]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L15526
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #144]
	mov	r3, #0
	str	r3, [r2]
	ldr	r2, [r4, #144]
	str	r3, [r2, #28]
.L15526:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L15539:
	.align	2
.L15538:
	.word	.LC891-(.LPIC4738+8)
	.fnend
	.size	ecm_qc_disable, .-ecm_qc_disable
	.align	2
	.type	ecm_qc_set_alt, %function
ecm_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	mov	r5, r2
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldrb	r0, [r0, #120]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r4, #20]
	cmp	r0, r1
	ldr	r6, [r3, #24]
	beq	.L15578
	ldrb	r3, [r4, #121]	@ zero_extendqisi2
	cmp	r2, #1
	cmpls	r1, r3
	movne	r1, #1
	moveq	r1, #0
	bne	.L15577
	ldr	r2, [r4, #88]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L15547
	add	r0, r4, #156
	bl	bam_data_disconnect(PLT)
	ldr	r3, [r4, #124]
	cmp	r3, #7
	beq	.L15576
	ldr	r1, .L15582
	mov	r0, r4
.LPIC4739:
	add	r1, pc, r1
	bl	gether_qc_disconnect_name(PLT)
.L15576:
	ldr	r2, [r4, #88]
.L15547:
	ldr	r3, [r2, #28]
	cmp	r3, #0
	beq	.L15549
	ldr	r3, [r4, #92]
	ldr	r3, [r3, #28]
	cmp	r3, #0
	beq	.L15549
.L15550:
	cmp	r5, #1
	beq	.L15579
.L15553:
	ldr	r6, [r4, #148]
.L15562:
	mov	r3, #1
	cmp	r6, #0
	strb	r3, [r4, #152]
	beq	.L15561
	ldr	r3, [r6]
	mov	r5, #0
	mov	lr, #8
	mov	ip, #2
	mvn	r0, #94
	mov	r1, r6
	mov	r2, #32
	strb	r5, [r3, #1]
	ldrb	r7, [r4, #153]	@ zero_extendqisi2
	strb	r5, [r3, #6]
	strb	r5, [r3, #7]
	strh	r7, [r3, #2]	@ unaligned
	str	lr, [r6, #4]
	strb	ip, [r4, #152]
	strb	r0, [r3]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r3, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	r5, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, r5
	movlt	r0, r5
	strlt	r6, [r4, #148]
	blt	.L15574
.L15561:
	mov	r0, #0
.L15574:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L15579:
	ldr	r3, [r6]
	ldr	r0, .L15582+4
	ldr	r1, [r3, #28]
.LPIC4740:
	add	r0, pc, r0
	bl	strcmp(PLT)
	ldr	r3, [r4, #124]
	adds	r0, r0, #0
	mov	r2, #15
	movne	r0, #1
	strh	r2, [r4, #98]	@ movhi
	strb	r0, [r4, #96]
	cmp	r3, #7
	beq	.L15554
	ldr	r1, .L15582+8
	mov	r2, r5
	mov	r0, r4
.LPIC4741:
	add	r1, pc, r1
	bl	gether_qc_connect_name(PLT)
	cmn	r0, #4096
	bhi	.L15574
	ldr	r3, [r4, #20]
	ldr	r2, [r4, #124]
	ldr	r3, [r3, #24]
	cmp	r2, #7
	moveq	r6, #2
	movne	r6, #0
	ldr	r5, [r3]
.L15556:
	ldr	ip, [r4, #88]
	mov	r2, #0
	str	r3, [r4, #156]
	ldr	r0, [r4, #92]
	mov	r3, r2
	str	r4, [r4, #160]
	mov	r1, r6
	str	ip, [r4, #164]
	str	r0, [r4, #168]
	ldr	r0, [r5, #28]
	bl	usb_bam_get_connection_idx(PLT)
	mov	r7, r0
	mov	r1, r6
	ldr	r0, [r5, #28]
	mov	r2, #1
	mov	r3, #0
	bl	usb_bam_get_connection_idx(PLT)
	uxtb	r0, r0
	mov	r1, #0
	ldr	r2, [r4, #124]
	uxtb	r3, r7
	strd	r0, [sp]
	add	r0, r4, #156
	bl	bam_data_connect(PLT)
	subs	r3, r0, #0
	bne	.L15580
	ldr	r6, [r4, #148]
	mov	r2, #1
	strb	r2, [r4, #153]
	strb	r2, [r4, #152]
	cmp	r6, #0
	beq	.L15562
	ldr	r5, [r6]
	mov	lr, #8
	mov	ip, #2
	mvn	r0, #94
	mov	r1, r6
	mov	r2, #32
	strb	r3, [r5, #1]
	ldrb	r7, [r4, #153]	@ zero_extendqisi2
	strb	r3, [r5, #6]
	strb	r3, [r5, #7]
	strh	r7, [r5, #2]	@ unaligned
	str	lr, [r6, #4]
	strb	ip, [r4, #152]
	strb	r0, [r5]
	ldrb	r0, [r4, #120]	@ zero_extendqisi2
	strh	r0, [r5, #4]	@ unaligned
	ldr	r0, [r4, #144]
	str	r3, [r4, #148]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	strlt	r6, [r4, #148]
	bge	.L15553
	b	.L15562
.L15578:
	cmp	r2, #0
	bne	.L15577
	ldr	r2, [r4, #144]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L15544
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #144]
.L15544:
	ldr	r1, [r2, #28]
	cmp	r1, #0
	beq	.L15581
.L15545:
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #144]
	mov	r0, #0
	str	r4, [r3]
	b	.L15574
.L15549:
	ldr	r0, [r6]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15552
	ldr	r0, [r6]
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	beq	.L15550
.L15552:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L15574
.L15554:
	ldr	r3, [r4, #20]
	mov	r6, #2
	ldr	r3, [r3, #24]
	ldr	r5, [r3]
	b	.L15556
.L15580:
	ldr	r1, .L15582+12
	mov	r2, r3
	ldr	r0, .L15582+16
.LPIC4743:
	add	r1, pc, r1
	sub	r1, r1, #2176
.LPIC4742:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
.L15577:
	mvn	r0, #21
	b	.L15574
.L15581:
	ldr	r0, [r6]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15577
	ldr	r2, [r4, #144]
	ldr	r1, [r2, #28]
	b	.L15545
.L15583:
	.align	2
.L15582:
	.word	.LC891-(.LPIC4739+8)
	.word	.LC458-(.LPIC4740+8)
	.word	.LC891-(.LPIC4741+8)
	.word	.LANCHOR9-(.LPIC4743+8)
	.word	.LC892-(.LPIC4742+8)
	.fnend
	.size	ecm_qc_set_alt, .-ecm_qc_set_alt
	.align	2
	.type	rndis_qc_disable, %function
rndis_qc_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #156]
	ldr	r3, [r3]
	cmp	r3, #0
	bxeq	lr
	ldr	r1, .L15591
	.save {r4, lr}
	str	r4, [sp, #-8]!
	mov	r4, r0
	ldr	r0, .L15591+4
	str	lr, [sp, #4]
.LPIC4745:
	add	r1, pc, r1
	sub	r1, r1, #2160
.LPIC4744:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, [r4, #144]
	bl	rndis_uninit(PLT)
	add	r0, r4, #168
	mov	r1, #0
	bl	bam_data_disconnect(PLT)
	ldr	r1, .L15591+8
	mov	r0, r4
.LPIC4746:
	add	r1, pc, r1
	bl	gether_qc_disconnect_name(PLT)
	ldr	r0, [r4, #156]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r3, [r4, #156]
	mov	r2, #0
	str	r2, [r3]
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L15592:
	.align	2
.L15591:
	.word	.LANCHOR9-(.LPIC4745+8)
	.word	.LC893-(.LPIC4744+8)
	.word	.LC890-(.LPIC4746+8)
	.fnend
	.size	rndis_qc_disable, .-rndis_qc_disable
	.align	2
	.type	rndis_qc_set_alt, %function
rndis_qc_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldrb	r2, [r0, #120]	@ zero_extendqisi2
	.pad #12
	sub	sp, sp, #12
	ldr	r3, [r0, #20]
	cmp	r2, r1
	ldr	r5, [r3, #24]
	beq	.L15618
	ldrb	r3, [r0, #121]	@ zero_extendqisi2
	cmp	r3, r1
	bne	.L15617
	ldr	r0, [r0, #88]
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L15600
	add	r0, r4, #168
	mov	r1, #0
	bl	bam_data_disconnect(PLT)
	ldr	r1, .L15621
	mov	r0, r4
.LPIC4747:
	add	r1, pc, r1
	bl	gether_qc_disconnect_name(PLT)
	ldr	r0, [r4, #88]
.L15600:
	ldr	r3, [r0, #28]
	cmp	r3, #0
	beq	.L15601
	ldr	ip, [r4, #92]
	ldr	r3, [ip, #28]
	cmp	r3, #0
	beq	.L15601
.L15602:
	ldr	lr, [r4, #20]
	mov	r5, #0
	mov	r1, r5
	mov	r2, r5
	strb	r5, [r4, #96]
	mov	r3, r5
	strh	r5, [r4, #98]	@ movhi
	ldr	lr, [lr, #24]
	ldr	r6, [lr]
	str	lr, [r4, #168]
	str	ip, [r4, #180]
	str	r4, [r4, #172]
	str	r0, [r4, #176]
	ldr	r0, [r6, #28]
	bl	usb_bam_get_connection_idx(PLT)
	mov	r7, r0
	mov	r1, r5
	ldr	r0, [r6, #28]
	mov	r3, r5
	mov	r2, #1
	bl	usb_bam_get_connection_idx(PLT)
	uxtb	r2, r0
	mov	r0, #2
	mov	r1, r5
	str	r0, [sp, #4]
	uxtb	r3, r7
	add	r0, r4, #168
	str	r2, [sp]
	mov	r2, #6
	bl	bam_data_connect(PLT)
	subs	r5, r0, #0
	bne	.L15619
	ldr	r1, .L15621+4
	ldr	r0, .L15621+8
.LPIC4751:
	add	r1, pc, r1
	sub	r1, r1, #2128
.LPIC4750:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	r1, .L15621+12
	mov	r0, r4
	mov	r2, r5
.LPIC4752:
	add	r1, pc, r1
	bl	gether_qc_connect_name(PLT)
	cmn	r0, #4096
	bhi	.L15598
	mov	r1, r0
	add	r2, r4, #98
	ldrb	r0, [r4, #144]	@ zero_extendqisi2
	bl	rndis_set_param_dev(PLT)
	mov	r0, r5
.L15598:
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L15619:
	ldr	r1, .L15621+16
	mov	r2, r5
	ldr	r0, .L15621+20
.LPIC4749:
	add	r1, pc, r1
	sub	r1, r1, #2128
.LPIC4748:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
.L15617:
	mvn	r0, #21
	b	.L15598
.L15618:
	ldr	r2, [r0, #156]
	ldr	r3, [r2]
	cmp	r3, #0
	beq	.L15595
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3, #4]
	blx	r3
	ldr	r2, [r4, #156]
.L15595:
	ldr	r1, [r2, #28]
	cmp	r1, #0
	beq	.L15620
.L15596:
	ldr	r3, [r2, #8]
	mov	r0, r2
	ldr	r3, [r3]
	blx	r3
	ldr	r3, [r4, #156]
	mov	r0, #0
	str	r4, [r3]
	b	.L15598
.L15601:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [r5]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15604
	ldr	r0, [r5]
	mov	r1, r4
	ldr	r2, [r4, #92]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15604
	ldr	r0, [r4, #88]
	ldr	ip, [r4, #92]
	b	.L15602
.L15620:
	ldr	r0, [r5]
	mov	r1, r4
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	bne	.L15617
	ldr	r2, [r4, #156]
	ldr	r1, [r2, #28]
	b	.L15596
.L15604:
	ldr	r2, [r4, #88]
	mov	r3, #0
	mvn	r0, #21
	str	r3, [r2, #28]
	ldr	r2, [r4, #92]
	str	r3, [r2, #28]
	b	.L15598
.L15622:
	.align	2
.L15621:
	.word	.LC890-(.LPIC4747+8)
	.word	.LANCHOR9-(.LPIC4751+8)
	.word	.LC894-(.LPIC4750+8)
	.word	.LC890-(.LPIC4752+8)
	.word	.LANCHOR9-(.LPIC4749+8)
	.word	.LC892-(.LPIC4748+8)
	.fnend
	.size	rndis_qc_set_alt, .-rndis_qc_set_alt
	.align	2
	.global	pcm_buffer_size
	.type	pcm_buffer_size, %function
pcm_buffer_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #380]
	bx	lr
	.fnend
	.size	pcm_buffer_size, .-pcm_buffer_size
	.align	2
	.global	pcm_period_size
	.type	pcm_period_size, %function
pcm_period_size:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r0, [r0, #332]
	bx	lr
	.fnend
	.size	pcm_period_size, .-pcm_period_size
	.align	2
	.type	gaudio_open_streams, %function
gaudio_open_streams:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15676
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
.LPIC4753:
	add	r3, pc, r3
	ldr	r4, [r3, #4012]
	cmp	r4, #0
	beq	.L15665
	ldr	r6, .L15676+4
	mov	r3, #2
	mov	r1, #3
	mov	r2, #8000
	ldr	r7, [r4, #124]
	str	r1, [r4, #128]
	str	r3, [r4, #132]
.LPIC4783:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	str	r3, [r4, #136]
	str	r2, [r4, #140]
	ldr	r0, [r6, #40]
	cmp	r0, #0
	beq	.L15650
	movw	r1, #32976
	mov	r2, #604
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L15666
.L15628:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any(PLT)
	ldr	r1, [r4, #128]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.113(PLT)
	ldr	r1, [r4, #132]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.114(PLT)
	ldr	r1, [r4, #136]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.115(PLT)
	ldr	r1, [r4, #140]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.116(PLT)
	mov	r0, r7
	movw	r1, #16707
	mov	r2, #0
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	blt	.L15667
.L15630:
	movw	r1, #16657
	mov	r0, r7
	movt	r1, 49756
	mov	r2, r5
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	blt	.L15668
	mov	r0, r7
	movw	r1, #16704
	mov	r2, #0
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	blt	.L15669
.L15632:
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L15652
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r2, #1
	bne	.L15633
.L15634:
	str	r3, [r4, #128]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L15654
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r2, #1
	bne	.L15635
.L15636:
	str	r3, [r4, #132]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #136]
	ldr	r3, [r5, #296]
	str	r3, [r4, #140]
	bl	kfree(PLT)
	ldr	r3, .L15676+8
	mov	lr, #3
	mov	ip, #2
	ldr	r0, [r6, #40]
	mov	r1, #1
	mov	r2, #8000
.LPIC4764:
	add	r3, pc, r3
	ldr	r5, [r3, #4012]
	cmp	r0, #0
	ldr	r7, [r5, #152]
	ldr	r8, [r7, #212]
	str	lr, [r5, #156]
	str	ip, [r5, #160]
	str	r1, [r5, #164]
	str	r2, [r5, #168]
	beq	.L15656
	movw	r1, #32976
	mov	r2, #604
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L15670
.L15637:
	mov	r0, r4
	bl	_snd_pcm_hw_params_any(PLT)
	ldr	r1, [r5, #156]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.113(PLT)
	ldr	r1, [r5, #160]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.114(PLT)
	ldr	r1, [r5, #164]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.115(PLT)
	ldr	r1, [r5, #168]
	mov	r0, r4
	bl	_snd_pcm_hw_param_set.constprop.116(PLT)
	mov	r0, r7
	movw	r1, #16707
	mov	r2, #0
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	blt	.L15671
.L15639:
	movw	r1, #16657
	mov	r0, r7
	movt	r1, 49756
	mov	r2, r4
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	blt	.L15672
	mov	r0, r7
	movw	r1, #16704
	mov	r2, #0
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	blt	.L15673
.L15641:
	ldr	r3, [r4, #4]
	cmp	r3, #0
	bne	.L15657
	ldr	r3, [r4, #8]
	cmp	r3, #0
	movne	r2, #1
	bne	.L15642
.L15643:
	str	r3, [r5, #156]
	ldr	r3, [r4, #36]
	cmp	r3, #0
	bne	.L15659
	ldr	r3, [r4, #40]
	cmp	r3, #0
	movne	r2, #1
	bne	.L15644
.L15645:
	str	r3, [r5, #160]
	ldr	r3, [r4, #284]
	str	r3, [r5, #164]
	ldr	r3, [r4, #296]
	str	r3, [r5, #168]
	ldr	r0, [r8, #44]
	bl	snd_pcm_format_physical_width(PLT)
	str	r0, [r8, #80]
	mov	r0, r4
	bl	kfree(PLT)
	ldr	r0, [r6, #28]
	cmp	r0, #0
	beq	.L15661
	movw	r1, #32976
	mov	r2, #104
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L15674
.L15646:
	mov	r0, r4
	bl	pcm_buffer_size(PLT)
	mov	r0, r4
	bl	pcm_period_size(PLT)
	mov	r2, r0, lsr #1
	mov	r3, #0
	mov	ip, #1
	mvn	lr, #-2147483648
	movw	r1, #16659
	str	r3, [r5]
	str	r2, [r5, #12]
	mov	r0, r7
	movt	r1, 49256
	str	r2, [r5, #16]
	mov	r2, r5
	str	r3, [r5, #32]
	str	r3, [r5, #28]
	str	ip, [r5, #4]
	str	ip, [r5, #20]
	str	lr, [r5, #24]
	bl	snd_pcm_kernel_ioctl(PLT)
	subs	r6, r0, #0
	blt	.L15675
	mov	r0, r5
	bl	kfree(PLT)
	cmp	r6, #0
	bne	.L15648
	ldr	r1, .L15676+12
	ldr	r0, .L15676+16
.LPIC4780:
	add	r1, pc, r1
	sub	r1, r1, #2112
.LPIC4779:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
.L15662:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15670:
	ldr	r1, .L15676+20
	mvn	r6, #11
	ldr	r0, .L15676+24
.LPIC4766:
	add	r1, pc, r1
	sub	r1, r1, #2064
.LPIC4765:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
.L15648:
	ldr	r1, .L15676+28
	mov	r2, r6
	ldr	r0, .L15676+32
.LPIC4778:
	add	r1, pc, r1
	sub	r1, r1, #2112
.LPIC4777:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L15662
.L15656:
	mov	r4, #16
	b	.L15637
.L15650:
	mov	r5, #16
	b	.L15628
.L15661:
	mov	r5, #16
	b	.L15646
.L15659:
	mov	r2, #0
.L15644:
	rsb	r1, r3, #0
	and	r3, r3, r1
#APP
@ 268 "/root/lol//arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2, asl #5
	b	.L15645
.L15657:
	mov	r2, #0
.L15642:
	rsb	r1, r3, #0
	and	r3, r3, r1
#APP
@ 268 "/root/lol//arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2, asl #5
	b	.L15643
.L15652:
	mov	r2, #0
.L15633:
	rsb	r1, r3, #0
	and	r3, r3, r1
#APP
@ 268 "/root/lol//arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2, asl #5
	b	.L15634
.L15654:
	mov	r2, #0
.L15635:
	rsb	r1, r3, #0
	and	r3, r3, r1
#APP
@ 268 "/root/lol//arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2, asl #5
	b	.L15636
.L15666:
	mvn	r6, #11
.L15629:
	ldr	r1, .L15676+36
	mov	r2, r6
	ldr	r0, .L15676+40
.LPIC4782:
	add	r1, pc, r1
	sub	r1, r1, #2112
.LPIC4781:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L15662
.L15672:
	ldr	r1, .L15676+44
	mov	r2, r0
	mov	r6, r0
	ldr	r0, .L15676+48
.LPIC4770:
	add	r1, pc, r1
	sub	r1, r1, #2064
.LPIC4769:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r4
	bl	kfree(PLT)
	b	.L15648
.L15671:
	ldr	r1, .L15676+52
	mov	r2, r0
	ldr	r0, .L15676+56
.LPIC4768:
	add	r1, pc, r1
	sub	r1, r1, #2064
.LPIC4767:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L15639
.L15673:
	ldr	r1, .L15676+60
	mov	r2, r0
	ldr	r0, .L15676+64
.LPIC4772:
	add	r1, pc, r1
	sub	r1, r1, #2064
.LPIC4771:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L15641
.L15667:
	ldr	r1, .L15676+68
	mov	r2, r0
	ldr	r0, .L15676+72
.LPIC4759:
	add	r1, pc, r1
	sub	r1, r1, #2096
.LPIC4758:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15630
.L15665:
	ldr	r1, .L15676+76
	mvn	r6, #18
	ldr	r0, .L15676+80
.LPIC4755:
	add	r1, pc, r1
	sub	r1, r1, #2112
.LPIC4754:
	add	r0, pc, r0
	sub	r1, r1, #4
	mov	r2, r1
	bl	printk(PLT)
	b	.L15662
.L15675:
	ldr	r1, .L15676+84
	mov	r2, r6
	ldr	r0, .L15676+88
.LPIC4776:
	add	r1, pc, r1
	sub	r1, r1, #2064
.LPIC4775:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	b	.L15648
.L15674:
	ldr	r1, .L15676+92
	mvn	r6, #11
	ldr	r0, .L15676+96
.LPIC4774:
	add	r1, pc, r1
	sub	r1, r1, #2064
.LPIC4773:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L15648
.L15669:
	ldr	r1, .L15676+100
	mov	r2, r0
	ldr	r0, .L15676+104
.LPIC4763:
	add	r1, pc, r1
	sub	r1, r1, #2096
.LPIC4762:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15632
.L15668:
	ldr	r1, .L15676+108
	mov	r2, r0
	mov	r6, r0
	ldr	r0, .L15676+112
.LPIC4761:
	add	r1, pc, r1
	sub	r1, r1, #2096
.LPIC4760:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r5
	bl	kfree(PLT)
	b	.L15629
.L15677:
	.align	2
.L15676:
	.word	.LANCHOR4-(.LPIC4753+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4783+8))
	.word	.LANCHOR4-(.LPIC4764+8)
	.word	.LANCHOR9-(.LPIC4780+8)
	.word	.LC904-(.LPIC4779+8)
	.word	.LANCHOR9-(.LPIC4766+8)
	.word	.LC899-(.LPIC4765+8)
	.word	.LANCHOR9-(.LPIC4778+8)
	.word	.LC903-(.LPIC4777+8)
	.word	.LANCHOR9-(.LPIC4782+8)
	.word	.LC905-(.LPIC4781+8)
	.word	.LANCHOR9-(.LPIC4770+8)
	.word	.LC897-(.LPIC4769+8)
	.word	.LANCHOR9-(.LPIC4768+8)
	.word	.LC896-(.LPIC4767+8)
	.word	.LANCHOR9-(.LPIC4772+8)
	.word	.LC900-(.LPIC4771+8)
	.word	.LANCHOR9-(.LPIC4759+8)
	.word	.LC896-(.LPIC4758+8)
	.word	.LANCHOR9-(.LPIC4755+8)
	.word	.LC895-(.LPIC4754+8)
	.word	.LANCHOR9-(.LPIC4776+8)
	.word	.LC902-(.LPIC4775+8)
	.word	.LANCHOR9-(.LPIC4774+8)
	.word	.LC901-(.LPIC4773+8)
	.word	.LANCHOR9-(.LPIC4763+8)
	.word	.LC898-(.LPIC4762+8)
	.word	.LANCHOR9-(.LPIC4761+8)
	.word	.LC897-(.LPIC4760+8)
	.fnend
	.size	gaudio_open_streams, .-gaudio_open_streams
	.align	2
	.type	f_audio_capture_work, %function
f_audio_capture_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	ldr	r4, .L15695
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC4784:
	add	r4, pc, r4
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	ldr	r0, [r4, #232]
	bl	f_audio_buffer_alloc(PLT)
	subs	r9, r0, #0
	beq	.L15691
	ldr	r5, .L15695+4
	ldr	r3, [r9]
	ldr	r8, [r6, #-68]
	ldr	r7, [r4, #232]
.LPIC4789:
	add	r5, pc, r5
	str	r3, [sp]
	ldrb	r3, [r5, #4016]	@ zero_extendqisi2
	ldr	fp, [r8, #212]
	cmp	r3, #0
	beq	.L15692
.L15680:
	mov	r3, r7, asl #3
	ldr	r4, .L15695+8
	mov	r7, fp
	str	r3, [sp, #4]
	mov	r3, sp
	bic	r3, r3, #8128
.LPIC4798:
	add	r4, pc, r4
	sub	r4, r4, #2016
	str	r3, [sp, #8]
	ldr	r3, .L15695+12
	sub	r4, r4, #8
.LPIC4797:
	add	r3, pc, r3
	str	r3, [sp, #12]
.L15686:
	ldr	r2, [r7, #160]
	ldr	r3, [sp, #8]
	ldr	r1, [r2]
	bic	fp, r3, #63
	cmp	r1, #4
	cmpne	r1, #7
	moveq	r2, #1
	movne	r2, #0
	cmp	r1, #1
	orreq	r2, r2, #1
	cmp	r2, #0
	bne	.L15693
.L15683:
	ldr	r5, [r7, #80]
	mov	r2, #0
	mov	r0, r8
	ldr	r3, [sp, #4]
	ldr	r10, [fp, #8]
	str	r2, [fp, #8]
	ldr	r1, [sp]
	udiv	r5, r3, r5
	mov	r2, r5
	bl	snd_pcm_lib_read(PLT)
	cmp	r5, r0
	bne	.L15694
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	str	r10, [r3, #8]
.L15684:
	sub	r4, r6, #8
	mov	r0, r4
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r5, r0
	ldr	r1, [r6, #20]
	add	r0, r9, #8
	add	r2, r6, #16
	bl	__list_add(PLT)
	mov	r0, r4
	mov	r1, r5
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L15693:
	mov	r0, r8
	movw	r1, #16704
	mov	r2, #0
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	bge	.L15683
	ldr	r4, .L15695+16
	mov	r2, r0
	ldr	r0, .L15695+20
.LPIC4794:
	add	r4, pc, r4
	sub	r1, r4, #2016
.LPIC4793:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	r0, .L15695+24
	sub	r1, r4, #2048
.LPIC4795:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15684
.L15692:
	bl	gaudio_open_streams(PLT)
	cmp	r0, #0
	moveq	r3, #1
	streqb	r3, [r5, #4016]
	beq	.L15680
	ldr	r1, .L15695+28
	mov	r2, r0
	ldr	r0, .L15695+32
.LPIC4791:
	add	r1, pc, r1
	sub	r1, r1, #2016
.LPIC4790:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L15684
.L15691:
	ldr	r1, .L15695+36
	ldr	r0, .L15695+40
.LPIC4786:
	add	r1, pc, r1
	sub	r1, r1, #2048
.LPIC4785:
	add	r0, pc, r0
	mov	r2, r1
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	printk(PLT)
.L15694:
	mov	r2, r0
	mov	r1, r4
	ldr	r0, [sp, #12]
	bl	printk(PLT)
	str	r10, [fp, #8]
	b	.L15686
.L15696:
	.align	2
.L15695:
	.word	.LANCHOR2-(.LPIC4784+8)
	.word	.LANCHOR4-(.LPIC4789+8)
	.word	.LANCHOR9-(.LPIC4798+8)
	.word	.LC909-(.LPIC4797+8)
	.word	.LANCHOR9-(.LPIC4794+8)
	.word	.LC900-(.LPIC4793+8)
	.word	.LC908-(.LPIC4795+8)
	.word	.LANCHOR9-(.LPIC4791+8)
	.word	.LC907-(.LPIC4790+8)
	.word	.LANCHOR9-(.LPIC4786+8)
	.word	.LC906-(.LPIC4785+8)
	.fnend
	.size	f_audio_capture_work, .-f_audio_capture_work
	.align	2
	.type	f_audio_playback_work, %function
f_audio_playback_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r0
	strd	r6, [sp, #8]
	sub	r6, r0, #8
	strd	r8, [sp, #16]
	mov	r0, r6
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r4, [r5, #16]
	add	r3, r5, #16
	mov	r8, r0
	cmp	r4, r3
	beq	.L15713
	mov	r0, r4
	sub	r7, r4, #8
	bl	list_del(PLT)
	mov	r0, r6
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [r4, #-4]
	ldr	r8, [r5, #-64]
	ldr	r9, [r4, #-8]
	cmp	r6, #0
	ldr	fp, [r8, #212]
	beq	.L15714
	ldr	r10, .L15719
.LPIC4803:
	add	r10, pc, r10
	ldrb	r3, [r10, #4016]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L15715
.L15701:
	ldr	r3, .L15719+4
	mov	r6, r6, asl #3
	str	r8, [sp, #4]
	ldr	r2, .L15719+8
.LPIC4813:
	add	r3, pc, r3
.LPIC4814:
	add	r2, pc, r2
	str	r3, [sp, #8]
	sub	r3, r2, #1984
	str	r3, [sp, #12]
.L15707:
	ldr	r3, [fp, #160]
	ldr	r2, [r3]
	cmp	r2, #4
	cmpne	r2, #7
	moveq	r3, #1
	movne	r3, #0
	cmp	r2, #1
	orreq	r3, r3, #1
	cmp	r3, #0
	bne	.L15716
.L15703:
	ldr	r2, [fp, #80]
	mov	lr, #0
	mov	r3, sp
	bic	r3, r3, #8128
	mov	r1, r9
	bic	r3, r3, #63
	cmp	r2, lr
	beq	.L15717
	udiv	r10, r6, r2
	ldr	r0, [r5, #-64]
	ldr	r8, [r3, #8]
	str	lr, [r3, #8]
	mov	r2, r10
	bl	snd_pcm_lib_write(PLT)
	cmp	r10, r0
	bne	.L15718
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	str	r8, [r3, #8]
.L15704:
	cmp	r7, #0
	beq	.L15697
	ldr	r0, [r4, #-8]
	bl	kfree(PLT)
	mov	r3, #0
	mov	r0, r7
	str	r3, [r4, #-8]
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	kfree(PLT)
.L15716:
	ldr	r0, [sp, #4]
	movw	r1, #16704
	mov	r2, #0
	bl	snd_pcm_kernel_ioctl(PLT)
	cmp	r0, #0
	bge	.L15703
	ldr	r5, .L15719+12
	mov	r2, r0
	ldr	r0, .L15719+16
.LPIC4808:
	add	r5, pc, r5
	sub	r1, r5, #1984
.LPIC4807:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L15719+20
	sub	r1, r5, #2000
	sub	r1, r1, #8
.LPIC4809:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15704
.L15715:
	bl	gaudio_open_streams(PLT)
	cmp	r0, #0
	moveq	r3, #1
	streqb	r3, [r10, #4016]
	beq	.L15701
	ldr	r1, .L15719+24
	ldr	r0, .L15719+28
.LPIC4805:
	add	r1, pc, r1
	sub	r1, r1, #1984
.LPIC4804:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15704
.L15697:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15713:
	ldr	r1, .L15719+32
	ldr	r0, .L15719+36
.LPIC4800:
	add	r1, pc, r1
	sub	r1, r1, #2000
.LPIC4799:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r6
	mov	r1, r8
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	ldr	lr, [sp, #32]
	add	sp, sp, #36
	b	_raw_spin_unlock_irqrestore(PLT)
.L15717:
	ldr	r1, .L15719+40
	ldr	r0, .L15719+44
.LPIC4812:
	add	r1, pc, r1
	sub	r1, r1, #1984
.LPIC4811:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15704
.L15718:
	mov	r2, r0
	ldrd	r0, [sp, #8]
	bl	printk(PLT)
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	str	r8, [r3, #8]
	b	.L15707
.L15714:
	ldr	r1, .L15719+48
	ldr	r0, .L15719+52
.LPIC4802:
	add	r1, pc, r1
	sub	r1, r1, #1984
.LPIC4801:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L15704
.L15720:
	.align	2
.L15719:
	.word	.LANCHOR4-(.LPIC4803+8)
	.word	.LC914-(.LPIC4813+8)
	.word	.LANCHOR9-(.LPIC4814+8)
	.word	.LANCHOR9-(.LPIC4808+8)
	.word	.LC898-(.LPIC4807+8)
	.word	.LC908-(.LPIC4809+8)
	.word	.LANCHOR9-(.LPIC4805+8)
	.word	.LC912-(.LPIC4804+8)
	.word	.LANCHOR9-(.LPIC4800+8)
	.word	.LC910-(.LPIC4799+8)
	.word	.LANCHOR9-(.LPIC4812+8)
	.word	.LC913-(.LPIC4811+8)
	.word	.LANCHOR9-(.LPIC4802+8)
	.word	.LC911-(.LPIC4801+8)
	.fnend
	.size	f_audio_playback_work, .-f_audio_playback_work
	.align	2
	.global	u_audio_clear
	.type	u_audio_clear, %function
u_audio_clear:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, .L15722
	mov	r2, #0
.LPIC4815:
	add	r3, pc, r3
	strb	r2, [r3, #4016]
	bx	lr
.L15723:
	.align	2
.L15722:
	.word	.LANCHOR4-(.LPIC4815+8)
	.fnend
	.size	u_audio_clear, .-u_audio_clear
	.align	2
	.type	f_audio_disable, %function
f_audio_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	b	u_audio_clear(PLT)
	.fnend
	.size	f_audio_disable, .-f_audio_disable
	.align	2
	.global	gaudio_setup
	.type	gaudio_setup, %function
gaudio_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	subs	r4, r0, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	beq	.L15762
	ldr	r6, .L15768
	mov	r1, #2
	mov	r2, #0
.LPIC4819:
	add	r6, pc, r6
	ldr	r0, [r6, #3628]
	bl	filp_open(PLT)
	cmn	r0, #4096
	mov	r5, r0
	str	r0, [r4, #92]
	bhi	.L15763
	str	r4, [r4, #88]
	ldr	r0, [r6, #3632]
	mov	r1, #1
	mov	r2, #0
	bl	filp_open(PLT)
	cmn	r0, #4096
	str	r0, [r4, #120]
	bhi	.L15764
	ldr	r6, .L15768+4
	mov	r3, #2
	mov	ip, #3
	ldr	r1, [r0, #124]
	mov	r2, #8000
.LPIC4840:
	ldr	r6, [pc, r6]		@ tls_load_dot_plus_eight
	ldr	r1, [r1]
	str	r4, [r4, #116]
	str	ip, [r4, #128]
	str	r3, [r4, #132]
	ldr	r0, [r6, #40]
	str	r3, [r4, #136]
	str	r1, [r4, #124]
	str	r2, [r4, #140]
	cmp	r0, #0
	beq	.L15747
	movw	r1, #32976
	mov	r2, #604
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L15765
.L15732:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any(PLT)
	ldr	r1, [r4, #128]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.113(PLT)
	ldr	r1, [r4, #132]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.114(PLT)
	ldr	r1, [r4, #136]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.115(PLT)
	mov	r0, r5
	ldr	r1, [r4, #140]
	bl	_snd_pcm_hw_param_set.constprop.116(PLT)
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L15748
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r2, #1
	bne	.L15734
.L15735:
	str	r3, [r4, #128]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L15750
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r2, #1
	bne	.L15736
.L15737:
	str	r3, [r4, #132]
	ldr	r3, [r5, #284]
	mov	r0, r5
	ldr	r7, .L15768+8
	str	r3, [r4, #136]
	ldr	r3, [r5, #296]
.LPIC4828:
	add	r7, pc, r7
	str	r3, [r4, #140]
	bl	kfree(PLT)
	mov	r1, #0
	ldr	r0, [r7, #3636]
	mov	r2, r1
	bl	filp_open(PLT)
	cmn	r0, #4096
	str	r0, [r4, #148]
	bhi	.L15766
	ldr	r2, [r0, #124]
	mov	lr, #3
	mov	ip, #2
	ldr	r0, [r6, #40]
	mov	r1, #1
	mov	r3, #8000
	ldr	r2, [r2]
	str	r4, [r4, #144]
	cmp	r0, #0
	str	lr, [r4, #156]
	str	ip, [r4, #160]
	str	r1, [r4, #164]
	str	r2, [r4, #152]
	str	r3, [r4, #168]
	beq	.L15752
	movw	r1, #32976
	mov	r2, #604
	bl	kmem_cache_alloc_trace(PLT)
	subs	r5, r0, #0
	beq	.L15767
.L15739:
	mov	r0, r5
	bl	_snd_pcm_hw_params_any(PLT)
	ldr	r1, [r4, #156]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.113(PLT)
	ldr	r1, [r4, #160]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.114(PLT)
	ldr	r1, [r4, #164]
	mov	r0, r5
	bl	_snd_pcm_hw_param_set.constprop.115(PLT)
	mov	r0, r5
	ldr	r1, [r4, #168]
	bl	_snd_pcm_hw_param_set.constprop.116(PLT)
	ldr	r3, [r5, #4]
	cmp	r3, #0
	bne	.L15753
	ldr	r3, [r5, #8]
	cmp	r3, #0
	movne	r2, #1
	bne	.L15741
.L15742:
	str	r3, [r4, #156]
	ldr	r3, [r5, #36]
	cmp	r3, #0
	bne	.L15755
	ldr	r3, [r5, #40]
	cmp	r3, #0
	movne	r2, #1
	bne	.L15743
.L15744:
	str	r3, [r4, #160]
	ldr	r3, [r5, #284]
	mov	r0, r5
	str	r3, [r4, #164]
	ldr	r3, [r5, #296]
	str	r3, [r4, #168]
	bl	kfree(PLT)
.L15730:
	ldr	r3, .L15768+12
.LPIC4834:
	add	r3, pc, r3
	ldr	r5, [r3, #4012]
	cmp	r5, #0
	movne	r5, #0
	streq	r4, [r3, #4012]
.L15758:
	mov	r0, r5
	ldrd	r6, [sp, #8]
	ldrd	r4, [sp]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15747:
	mov	r5, #16
	b	.L15732
.L15752:
	mov	r5, #16
	b	.L15739
.L15763:
	ldr	r1, .L15768+16
	ldr	r0, .L15768+20
	ldr	r2, [r6, #3628]
.LPIC4821:
	add	r1, pc, r1
	sub	r1, r1, #1952
.LPIC4820:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mov	r3, #0
	cmp	r5, #0
	str	r3, [r4, #92]
	beq	.L15730
	b	.L15729
.L15764:
	ldr	r1, .L15768+24
	mvn	r5, #21
	ldr	r0, .L15768+28
	ldr	r2, [r6, #3632]
.LPIC4825:
	add	r1, pc, r1
	sub	r1, r1, #1952
.LPIC4824:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mov	r3, #0
	str	r3, [r4, #120]
.L15729:
	ldr	r1, .L15768+32
	ldr	r0, .L15768+36
.LPIC4833:
	add	r1, pc, r1
	sub	r1, r1, #1936
.LPIC4832:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L15758
.L15766:
	ldr	r1, .L15768+40
	mvn	r5, #21
	ldr	r0, .L15768+44
	ldr	r2, [r7, #3636]
.LPIC4830:
	add	r1, pc, r1
	sub	r1, r1, #1952
.LPIC4829:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mov	r3, #0
	str	r3, [r4, #152]
	str	r3, [r4, #144]
	str	r3, [r4, #148]
	b	.L15729
.L15750:
	mov	r2, #0
.L15736:
	rsb	r1, r3, #0
	and	r3, r3, r1
#APP
@ 268 "/root/lol//arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2, asl #5
	b	.L15737
.L15748:
	mov	r2, #0
.L15734:
	rsb	r1, r3, #0
	and	r3, r3, r1
#APP
@ 268 "/root/lol//arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2, asl #5
	b	.L15735
.L15755:
	mov	r2, #0
.L15743:
	rsb	r1, r3, #0
	and	r3, r3, r1
#APP
@ 268 "/root/lol//arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2, asl #5
	b	.L15744
.L15753:
	mov	r2, #0
.L15741:
	rsb	r1, r3, #0
	and	r3, r3, r1
#APP
@ 268 "/root/lol//arch/arm/include/asm/bitops.h" 1
	clz	r3, r3
@ 0 "" 2
	rsb	r3, r3, #31
	add	r3, r3, r2, asl #5
	b	.L15742
.L15767:
	ldr	r1, .L15768+48
	mvn	r2, #11
	ldr	r0, .L15768+52
	mov	r5, r2
.LPIC4839:
	add	r1, pc, r1
	sub	r1, r1, #1952
.LPIC4838:
	add	r0, pc, r0
	add	r1, r1, r2
	bl	printk(PLT)
	b	.L15729
.L15765:
	ldr	r1, .L15768+56
	mvn	r2, #11
	ldr	r0, .L15768+60
	mov	r5, r2
.LPIC4837:
	add	r1, pc, r1
	sub	r1, r1, #1952
.LPIC4836:
	add	r0, pc, r0
	add	r1, r1, r2
	bl	printk(PLT)
	b	.L15729
.L15762:
	ldr	r1, .L15768+64
	mvn	r5, #18
	ldr	r0, .L15768+68
.LPIC4817:
	add	r1, pc, r1
	sub	r1, r1, #1952
.LPIC4816:
	add	r0, pc, r0
	sub	r1, r1, #12
	mov	r2, r1
	bl	printk(PLT)
	b	.L15729
.L15769:
	.align	2
.L15768:
	.word	.LANCHOR0-(.LPIC4819+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4840+8))
	.word	.LANCHOR0-(.LPIC4828+8)
	.word	.LANCHOR4-(.LPIC4834+8)
	.word	.LANCHOR9-(.LPIC4821+8)
	.word	.LC915-(.LPIC4820+8)
	.word	.LANCHOR9-(.LPIC4825+8)
	.word	.LC916-(.LPIC4824+8)
	.word	.LANCHOR9-(.LPIC4833+8)
	.word	.LC918-(.LPIC4832+8)
	.word	.LANCHOR9-(.LPIC4830+8)
	.word	.LC917-(.LPIC4829+8)
	.word	.LANCHOR9-(.LPIC4839+8)
	.word	.LC920-(.LPIC4838+8)
	.word	.LANCHOR9-(.LPIC4837+8)
	.word	.LC919-(.LPIC4836+8)
	.word	.LANCHOR9-(.LPIC4817+8)
	.word	.LC895-(.LPIC4816+8)
	.fnend
	.size	gaudio_setup, .-gaudio_setup
	.align	2
	.global	gaudio_cleanup
	.type	gaudio_cleanup, %function
gaudio_cleanup:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15788
	.save {r4, lr}
	str	r4, [sp, #-8]!
	str	lr, [sp, #4]
.LPIC4841:
	add	r3, pc, r3
	ldr	r4, [r3, #4012]
	cmp	r4, #0
	beq	.L15770
	ldr	r0, [r4, #92]
	cmp	r0, #0
	beq	.L15772
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1008]
	bl	filp_close(PLT)
.L15772:
	ldr	r0, [r4, #120]
	cmp	r0, #0
	beq	.L15773
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1008]
	bl	filp_close(PLT)
.L15773:
	ldr	r0, [r4, #148]
	cmp	r0, #0
	beq	.L15774
	mov	r3, sp
	bic	r3, r3, #8128
	bic	r3, r3, #63
	ldr	r3, [r3, #12]
	ldr	r1, [r3, #1008]
	bl	filp_close(PLT)
.L15774:
	ldr	r3, .L15788+4
	mov	r2, #0
.LPIC4842:
	add	r3, pc, r3
	str	r2, [r3, #4012]
.L15770:
	ldr	r4, [sp]
	add	sp, sp, #4
	ldr	pc, [sp], #4
.L15789:
	.align	2
.L15788:
	.word	.LANCHOR4-(.LPIC4841+8)
	.word	.LANCHOR4-(.LPIC4842+8)
	.fnend
	.size	gaudio_cleanup, .-gaudio_cleanup
	.align	2
	.global	control_selector_init
	.type	control_selector_init, %function
control_selector_init:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	ldr	r4, .L15792
	add	r5, r0, #252
	strd	r6, [sp, #8]
	mov	r7, r0
	mov	r1, r5
	str	lr, [sp, #28]
	mov	r2, r5
	strd	r8, [sp, #16]
	add	r8, r0, #260
.LPIC4843:
	add	r4, pc, r4
	str	r10, [sp, #24]
	str	r5, [r0, #252]
	add	r0, r4, #3632
	add	r6, r4, #3648
	str	r5, [r7, #256]
	add	r0, r0, #8
	add	r9, r4, #3680
	bl	__list_add(PLT)
	add	r0, r4, #3664
	mov	r1, r5
	ldr	r2, [r7, #252]
	add	r0, r0, #8
	add	r5, r4, #1664
	bl	__list_add(PLT)
	add	r0, r4, #3696
	mov	r1, r6
	str	r6, [r4, #3648]
	mov	r2, r6
	str	r6, [r4, #3652]
	add	r0, r0, #8
	bl	__list_add(PLT)
	add	r0, r4, #3744
	mov	r1, r6
	ldr	r2, [r4, #3648]
	add	r0, r0, #4
	add	r5, r5, #4
	bl	__list_add(PLT)
	mov	r1, r9
	mov	r2, r9
	str	r9, [r4, #3680]
	add	r0, r4, #3792
	str	r9, [r4, #3684]
	add	r6, r4, #1632
	bl	__list_add(PLT)
	add	r0, r4, #3824
	mov	r1, r9
	ldr	r2, [r4, #3680]
	add	r0, r0, #12
	movw	r9, #65472
	bl	__list_add(PLT)
	movw	lr, #58272
	movw	ip, #65520
	str	r8, [r7, #260]
	mov	r3, #48
	str	r8, [r7, #264]
	mov	r0, r5
	mov	r1, r8
	mov	r2, r8
	str	lr, [r4, #3772]
	add	r6, r6, #4
	str	lr, [r4, #3860]
	add	r5, r5, #8
	str	ip, [r4, #3776]
	str	ip, [r4, #3864]
	str	r3, [r4, #3780]
	str	r3, [r4, #3868]
	str	r9, [r4, #3768]
	str	r9, [r4, #3856]
	bl	__list_add(PLT)
	mov	r1, r8
	ldr	r2, [r7, #260]
	mov	r0, r6
	add	r6, r6, #8
	bl	__list_add(PLT)
	add	r0, r4, #3872
	mov	r1, r6
	str	r6, [r4, #1644]
	mov	r2, r6
	str	r6, [r4, #1648]
	add	r0, r0, #8
	bl	__list_add(PLT)
	add	r0, r4, #3920
	mov	r1, r5
	str	r5, [r4, #1676]
	add	r0, r0, #4
	mov	r2, r5
	str	r5, [r4, #1680]
	bl	__list_add(PLT)
	ldrd	r4, [sp]
	mov	r0, #0
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15793:
	.align	2
.L15792:
	.word	.LANCHOR0-(.LPIC4843+8)
	.fnend
	.size	control_selector_init, .-control_selector_init
	.align	2
	.global	audio_bind_config
	.type	audio_bind_config, %function
audio_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L15806
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	strd	r6, [sp, #8]
	mov	r6, r0
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
.LPIC4903:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	str	lr, [sp, #28]
	ldr	r0, [r3, #36]
	cmp	r0, #0
	beq	.L15799
	movw	r1, #32976
	mov	r2, #276
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L15804
.L15795:
	ldr	r3, .L15806+4
	add	r1, r4, #204
	mov	ip, #0
	ldr	lr, .L15806+8
	add	r2, r4, #236
	mov	r0, r4
	ldr	r5, [r6, #24]
	ldr	r7, .L15806+12
.LPIC4891:
	add	r3, pc, r3
	ldr	r9, .L15806+16
.LPIC4890:
	add	lr, pc, lr
	add	r3, r3, #3968
	ldr	r8, [r5]
	str	r1, [r4, #204]
	str	r1, [r4, #208]
	ldr	r5, .L15806+20
.LPIC4892:
	add	r7, pc, r7
	str	lr, [r4]
	ldr	r1, .L15806+24
.LPIC4894:
	add	r9, pc, r9
	str	r3, [r4, #4]
	ldr	lr, .L15806+28
	ldr	r3, .L15806+32
	str	ip, [r4, #180]
.LPIC4893:
	add	r5, pc, r5
	str	ip, [r4, #212]
.LPIC4896:
	add	r1, pc, r1
	str	r2, [r4, #236]
.LPIC4895:
	add	lr, pc, lr
	str	r5, [r4, #36]
.LPIC4897:
	add	r3, pc, r3
	str	r1, [r4, #52]
	str	lr, [r4, #40]
	str	r3, [r4, #48]
	str	r2, [r4, #240]
	str	r8, [r4, #84]
	str	r7, [r4, #32]
	str	r9, [r4, #44]
	bl	control_selector_init(PLT)
	ldr	r2, .L15806+36
	mov	r1, #65024
	add	lr, r4, #192
	ldr	r3, .L15806+40
	movt	r1, 65535
	add	ip, r4, #224
	str	lr, [r4, #192]
	mov	r0, r4
	str	r1, [r4, #188]
.LPIC4898:
	add	r2, pc, r2
	str	r1, [r4, #220]
.LPIC4899:
	add	r3, pc, r3
	str	lr, [r4, #196]
	str	r2, [r4, #200]
	str	r3, [r4, #232]
	str	ip, [r4, #224]
	str	ip, [r4, #228]
	bl	gaudio_setup(PLT)
	subs	r5, r0, #0
	blt	.L15797
	mov	r0, r6
	mov	r1, r4
	bl	usb_add_function(PLT)
	subs	r5, r0, #0
	moveq	r0, r5
	bne	.L15805
.L15796:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15799:
	mov	r4, #16
	b	.L15795
.L15797:
	bl	gaudio_cleanup(PLT)
.L15798:
	mov	r0, r4
	bl	kfree(PLT)
	mov	r0, r5
	b	.L15796
.L15804:
	mvn	r0, #11
	b	.L15796
.L15805:
	ldr	r1, .L15806+44
	mov	r3, r5
	ldr	r0, .L15806+48
.LPIC4901:
	add	r1, pc, r1
	sub	r1, r1, #1920
.LPIC4900:
	add	r0, pc, r0
	sub	r1, r1, #8
	mov	r2, r1
	bl	printk(PLT)
	b	.L15798
.L15807:
	.align	2
.L15806:
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC4903+8))
	.word	.LANCHOR0-(.LPIC4891+8)
	.word	.LC921-(.LPIC4890+8)
	.word	f_audio_bind-(.LPIC4892+8)
	.word	f_audio_get_alt-(.LPIC4894+8)
	.word	f_audio_unbind-(.LPIC4893+8)
	.word	f_audio_setup-(.LPIC4896+8)
	.word	f_audio_set_alt-(.LPIC4895+8)
	.word	f_audio_disable-(.LPIC4897+8)
	.word	f_audio_playback_work-(.LPIC4898+8)
	.word	f_audio_capture_work-(.LPIC4899+8)
	.word	.LANCHOR9-(.LPIC4901+8)
	.word	.LC922-(.LPIC4900+8)
	.fnend
	.size	audio_bind_config, .-audio_bind_config
	.align	2
	.type	audio_function_bind_config, %function
audio_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	mov	r0, r1
	b	audio_bind_config(PLT)
	.fnend
	.size	audio_function_bind_config, .-audio_function_bind_config
	.align	2
	.global	conn_gadget_req_put
	.type	conn_gadget_req_put, %function
conn_gadget_req_put:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r4, r0, #88
	mov	r5, r1
	mov	r0, r4
	strd	r6, [sp, #8]
	mov	r7, r2
	str	lr, [sp, #20]
	str	r8, [sp, #16]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r6, r0
	ldr	r1, [r5, #4]
	add	r0, r7, #36
	mov	r2, r5
	bl	__list_add(PLT)
	ldr	r8, [sp, #16]
	mov	r0, r4
	mov	r1, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
	.fnend
	.size	conn_gadget_req_put, .-conn_gadget_req_put
	.align	2
	.type	conn_gadget_complete_in, %function
conn_gadget_complete_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r3, .L15818
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r2, [r1, #44]
.LPIC4904:
	add	r3, pc, r3
	ldr	r4, [r3, #2492]
	cmp	r2, #0
	bne	.L15817
.L15812:
	mov	r2, r5
	mov	r0, r4
	add	r1, r4, #120
	bl	conn_gadget_req_put(PLT)
	ldr	r6, [sp, #8]
	add	r0, r4, #156
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up(PLT)
.L15817:
	ldr	r1, .L15818+4
	mov	r3, #1
	ldr	r0, .L15818+8
	str	r3, [r4, #104]
	ldr	r2, [r5, #44]
.LPIC4906:
	add	r1, pc, r1
	sub	r1, r1, #1904
.LPIC4905:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L15812
.L15819:
	.align	2
.L15818:
	.word	.LANCHOR1-(.LPIC4904+8)
	.word	.LANCHOR9-(.LPIC4906+8)
	.word	.LC923-(.LPIC4905+8)
	.fnend
	.size	conn_gadget_complete_in, .-conn_gadget_complete_in
	.align	2
	.type	conn_gadget_function_bind, %function
conn_gadget_function_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r7, r0
	ldr	r0, .L15869
	str	lr, [sp, #28]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
	ldr	r3, [r7, #24]
	.pad #8
	sub	sp, sp, #8
.LPIC4911:
	add	r0, pc, r0
	str	r3, [r1, #84]
	bl	printk(PLT)
	mov	r0, r7
	mov	r1, r4
	bl	usb_interface_id(PLT)
	cmp	r0, #0
	blt	.L15858
	ldr	r5, .L15869+4
	ldr	r6, [r4, #84]
.LPIC4912:
	add	r5, pc, r5
	add	r1, r5, #3152
	strb	r0, [r5, #3142]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L15862
	add	r1, r5, #3152
	str	r4, [r0]
	add	r1, r1, #12
	str	r0, [r4, #92]
	ldr	r0, [r6]
	bl	usb_ep_autoconfig(PLT)
	cmp	r0, #0
	beq	.L15863
	ldr	r10, .L15869+8
	mov	r8, r0
	mov	r9, #4
	str	r4, [r0]
	str	r0, [r4, #96]
.LPIC4926:
	add	r10, pc, r10
.L15834:
	ldr	r5, [r4, #192]
	mov	r0, r8
	mov	r1, #208
	ldr	r3, [r8, #8]
	cmp	r5, #0
	beq	.L15864
	mov	r0, r8
	mov	r1, #208
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	mov	r0, r5
	beq	.L15828
.L15837:
	mov	r1, #208
	bl	__kmalloc(PLT)
	mov	r3, r0
	add	r1, r4, #128
	cmp	r3, #0
	mov	r0, r4
	mov	r2, r6
	str	r3, [r6]
	beq	.L15865
	str	r10, [r6, #28]
	bl	conn_gadget_req_put(PLT)
	subs	r9, r9, #1
	beq	.L15844
	ldr	r8, [r4, #96]
	b	.L15834
.L15864:
	ldr	r3, [r3, #8]
	blx	r3
	subs	r6, r0, #0
	mov	r0, #4096
	bne	.L15837
.L15828:
	ldr	r1, .L15869+12
	ldr	r0, .L15869+16
.LPIC4928:
	add	r1, pc, r1
	sub	r1, r1, #1872
.LPIC4927:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	mvn	r0, #0
.L15858:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L15844:
	ldr	r10, .L15869+20
	mov	r9, #4
.LPIC4929:
	add	r10, pc, r10
.L15833:
	ldr	r5, [r4, #192]
	mov	r1, #208
	ldr	r6, [r4, #92]
	cmp	r5, #0
	ldr	r3, [r6, #8]
	mov	r0, r6
	beq	.L15866
	mov	r1, #208
	ldr	r3, [r3, #8]
	blx	r3
	subs	r8, r0, #0
	mov	r0, r5
	beq	.L15828
.L15839:
	mov	r1, #208
	bl	__kmalloc(PLT)
	mov	r3, r0
	add	r1, r4, #120
	cmp	r3, #0
	mov	r0, r4
	mov	r2, r8
	str	r3, [r8]
	beq	.L15867
	str	r10, [r8, #28]
	bl	conn_gadget_req_put(PLT)
	subs	r9, r9, #1
	bne	.L15833
	ldr	r3, [r7, #24]
	ldr	r2, [r3]
	ldr	r2, [r2, #20]
	cmp	r2, #2
	bls	.L15868
	ldr	r2, .L15869+24
.LPIC4917:
	add	r2, pc, r2
	ldrb	ip, [r2, #3154]	@ zero_extendqisi2
	ldrb	r0, [r2, #3166]	@ zero_extendqisi2
	strb	ip, [r2, #3178]
	strb	r0, [r2, #3190]
	ldr	r1, [r3]
	ldr	r1, [r1, #20]
	cmp	r1, #4
	bls	.L15831
	strb	ip, [r2, #3202]
	strb	r0, [r2, #3214]
	ldr	r3, [r3]
	ldr	r1, [r3, #20]
	cmp	r1, #4
	bls	.L15831
	ldr	r1, .L15869+28
.LPIC4907:
	add	r1, pc, r1
	b	.L15832
.L15866:
	ldr	r3, [r3, #8]
	blx	r3
	subs	r8, r0, #0
	mov	r0, #4096
	bne	.L15839
	b	.L15828
.L15868:
	ldr	r1, .L15869+32
.LPIC4910:
	add	r1, pc, r1
.L15832:
	ldr	ip, [r4, #96]
	ldr	r3, [r4, #92]
	ldr	r0, .L15869+36
	ldr	r2, [r4]
	ldr	ip, [ip, #4]
.LPIC4925:
	add	r0, pc, r0
	str	ip, [sp]
	ldr	r3, [r3, #4]
	bl	printk(PLT)
	mov	r0, #0
	b	.L15858
.L15865:
	ldr	r3, [r8, #8]
	mov	r1, r6
	mov	r0, r8
	ldr	r3, [r3, #12]
	blx	r3
	b	.L15828
.L15867:
	ldr	r3, [r6, #8]
	mov	r1, r8
	mov	r0, r6
	ldr	r3, [r3, #12]
	blx	r3
	b	.L15828
.L15831:
	cmp	r1, #2
	bhi	.L15843
	ldr	r1, .L15869+40
.LPIC4908:
	add	r1, pc, r1
	b	.L15832
.L15863:
	ldr	r0, .L15869+44
.LPIC4916:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #18
	b	.L15858
.L15862:
	ldr	r0, .L15869+48
.LPIC4914:
	add	r0, pc, r0
	bl	printk(PLT)
	mvn	r0, #18
	b	.L15858
.L15843:
	ldr	r1, .L15869+52
.LPIC4909:
	add	r1, pc, r1
	b	.L15832
.L15870:
	.align	2
.L15869:
	.word	.LC925-(.LPIC4911+8)
	.word	.LANCHOR2-(.LPIC4912+8)
	.word	conn_gadget_complete_out-(.LPIC4926+8)
	.word	.LANCHOR9-(.LPIC4928+8)
	.word	.LC929-(.LPIC4927+8)
	.word	conn_gadget_complete_in-(.LPIC4929+8)
	.word	.LANCHOR2-(.LPIC4917+8)
	.word	.LC924-(.LPIC4907+8)
	.word	.LC555-(.LPIC4910+8)
	.word	.LC928-(.LPIC4925+8)
	.word	.LC555-(.LPIC4908+8)
	.word	.LC927-(.LPIC4916+8)
	.word	.LC926-(.LPIC4914+8)
	.word	.LC554-(.LPIC4909+8)
	.fnend
	.size	conn_gadget_function_bind, .-conn_gadget_function_bind
	.align	2
	.global	conn_gadget_req_get
	.type	conn_gadget_req_get, %function
conn_gadget_req_get:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #88
	mov	r4, r1
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4]
	mov	r6, r0
	cmp	r3, r4
	beq	.L15873
	mov	r0, r3
	sub	r4, r3, #36
	bl	list_del(PLT)
.L15872:
	mov	r0, r5
	mov	r1, r6
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15873:
	mov	r4, #0
	b	.L15872
	.fnend
	.size	conn_gadget_req_get, .-conn_gadget_req_get
	.section	.text.unlikely
	.align	2
	.type	conn_gadget_request_ep_out, %function
conn_gadget_request_ep_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	stmfd	sp!, {r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	add	r6, r0, #128
	add	r7, r0, #136
.L15876:
	mov	r1, r6
	mov	r0, r4
	bl	conn_gadget_req_get(PLT)
	subs	r5, r0, #0
	mov	r2, #32
	mov	r1, r5
	beq	.L15878
	ldr	r3, [r4, #192]
	str	r3, [r5, #4]
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	mov	r1, r7
	mov	r0, r4
	mov	r2, r5
	bge	.L15877
	ldr	r1, .L15881
	ldr	r0, .L15881+4
.LPIC4931:
	add	r1, pc, r1
	sub	r1, r1, #1840
.LPIC4930:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r4
	mov	r1, r6
	mov	r2, r5
	bl	conn_gadget_req_put(PLT)
	b	.L15878
.L15877:
	bl	conn_gadget_req_put(PLT)
	b	.L15876
.L15878:
	mov	r0, #0
	ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
.L15882:
	.align	2
.L15881:
	.word	.LANCHOR9-(.LPIC4931+8)
	.word	.LC930-(.LPIC4930+8)
	.fnend
	.size	conn_gadget_request_ep_out, .-conn_gadget_request_ep_out
	.text
	.align	2
	.type	conn_gadget_function_set_alt, %function
conn_gadget_function_set_alt:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	ldr	r4, .L15891
	mov	r5, r0
	strd	r6, [sp, #8]
	mov	r3, r2
	mov	r2, r1
	str	lr, [sp, #20]
	str	r8, [sp, #16]
	ldr	ip, [r0, #20]
	ldr	r0, .L15891+4
.LPIC4933:
	add	r4, pc, r4
	sub	r4, r4, #1808
	sub	r4, r4, #12
	ldr	r7, [ip, #24]
	mov	r1, r4
.LPIC4932:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r1, r5
	ldr	r2, [r5, #92]
	ldr	r0, [r7]
	bl	config_ep_by_speed(PLT)
	cmp	r0, #0
	movne	r6, r0
	beq	.L15890
.L15884:
	mov	r0, r6
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15890:
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	bne	.L15884
	ldr	r0, [r7]
	mov	r1, r5
	ldr	r2, [r5, #96]
	bl	config_ep_by_speed(PLT)
	subs	r6, r0, #0
	bne	.L15889
	ldr	r0, [r5, #96]
	ldr	r3, [r0, #8]
	ldr	r1, [r0, #28]
	ldr	r3, [r3]
	blx	r3
	subs	r6, r0, #0
	beq	.L15886
.L15889:
	ldr	r0, [r5, #92]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #4]
	blx	r3
	b	.L15884
.L15886:
	ldr	r3, [r5, #100]
	mov	r7, #1
	mov	r1, r4
	ldr	r0, .L15891+8
	str	r6, [r5, #104]
	str	r7, [r5, #100]
	str	r3, [r5, #212]
.LPIC4934:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, .L15891+12
.LPIC4936:
	add	r3, pc, r3
	ldr	r3, [r3, #2492]
	str	r6, [r3, #172]
	mov	r0, r3
	str	r6, [r3, #168]
	bl	conn_gadget_request_ep_out(PLT)
	mov	r2, r7
	add	r0, r5, #200
	mov	r3, r6
	mov	r1, #3
	bl	__wake_up(PLT)
	mov	r2, r7
	add	r0, r5, #144
	mov	r1, #3
	mov	r3, r6
	bl	__wake_up(PLT)
	b	.L15884
.L15892:
	.align	2
.L15891:
	.word	.LANCHOR9-(.LPIC4933+8)
	.word	.LC931-(.LPIC4932+8)
	.word	.LC932-(.LPIC4934+8)
	.word	.LANCHOR1-(.LPIC4936+8)
	.fnend
	.size	conn_gadget_function_set_alt, .-conn_gadget_function_set_alt
	.align	2
	.type	conn_gadget_open, %function
conn_gadget_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r0, .L15906
	ldr	r5, .L15906+4
	str	r6, [sp, #8]
	mov	r6, r1
	str	lr, [sp, #12]
.LPIC4937:
	add	r0, pc, r0
.LPIC4938:
	add	r5, pc, r5
	bl	printk(PLT)
	ldr	r3, [r5, #2492]
	cmp	r3, #0
	beq	.L15903
	ldr	r4, [r3, #216]
	cmp	r4, #0
	bne	.L15904
	add	r2, r3, #116
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r1, [r2]
	add	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r1, #1
	beq	.L15897
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L15906+8
	mvn	r4, #15
	ldr	r0, .L15906+12
.LPIC4944:
	add	r1, pc, r1
	sub	r1, r1, #1776
.LPIC4943:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
.L15900:
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L15897:
	ldr	r3, [r5, #2492]
	str	r3, [r6, #124]
	ldr	r2, [r3, #100]
	str	r4, [r3, #104]
	cmp	r2, #0
	bne	.L15905
.L15899:
	str	r2, [r3, #212]
	b	.L15900
.L15904:
	ldr	r1, .L15906+16
	mvn	r4, #10
	ldr	r0, .L15906+20
.LPIC4942:
	add	r1, pc, r1
	sub	r1, r1, #1776
.LPIC4941:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L15900
.L15903:
	ldr	r1, .L15906+24
	mvn	r4, #18
	ldr	r0, .L15906+28
.LPIC4940:
	add	r1, pc, r1
	sub	r1, r1, #1776
.LPIC4939:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	b	.L15900
.L15905:
	ldr	r1, .L15906+32
	ldr	r0, .L15906+36
.LPIC4946:
	add	r1, pc, r1
	sub	r1, r1, #1776
.LPIC4945:
	add	r0, pc, r0
	sub	r1, r1, #12
	bl	printk(PLT)
	ldr	r0, [r5, #2492]
	bl	conn_gadget_request_ep_out(PLT)
	ldr	r3, [r5, #2492]
	ldr	r2, [r3, #100]
	b	.L15899
.L15907:
	.align	2
.L15906:
	.word	.LC933-(.LPIC4937+8)
	.word	.LANCHOR1-(.LPIC4938+8)
	.word	.LANCHOR9-(.LPIC4944+8)
	.word	.LC935-(.LPIC4943+8)
	.word	.LANCHOR9-(.LPIC4942+8)
	.word	.LC934-(.LPIC4941+8)
	.word	.LANCHOR9-(.LPIC4940+8)
	.word	.LC254-(.LPIC4939+8)
	.word	.LANCHOR9-(.LPIC4946+8)
	.word	.LC255-(.LPIC4945+8)
	.fnend
	.size	conn_gadget_open, .-conn_gadget_open
	.align	2
	.type	conn_gadget_function_unbind, %function
conn_gadget_function_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r0, .L15916
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r1
	strd	r6, [sp, #8]
	mov	r5, #0
	mov	r6, #1
	str	lr, [sp, #20]
	add	r7, r4, #128
	str	r8, [sp, #16]
.LPIC4950:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	ip, [r4, #100]
	add	r0, r4, #200
	mov	r2, r6
	mov	r3, r5
	str	r5, [r4, #100]
	mov	r1, #3
	str	r6, [r4, #104]
	str	ip, [r4, #212]
	bl	__wake_up(PLT)
	mov	r2, r6
	mov	r3, r5
	add	r0, r4, #144
	mov	r1, #3
	bl	__wake_up(PLT)
	b	.L15909
.L15910:
	ldr	r5, [r4, #96]
	ldr	r0, [r6]
	bl	kfree(PLT)
	mov	r1, r6
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L15909:
	mov	r0, r4
	mov	r1, r7
	bl	conn_gadget_req_get(PLT)
	subs	r6, r0, #0
	bne	.L15910
	add	r7, r4, #136
	b	.L15911
.L15912:
	ldr	r5, [r4, #96]
	ldr	r0, [r6]
	bl	kfree(PLT)
	mov	r1, r6
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L15911:
	mov	r0, r4
	mov	r1, r7
	bl	conn_gadget_req_get(PLT)
	subs	r6, r0, #0
	bne	.L15912
	add	r7, r4, #120
	b	.L15913
.L15914:
	ldr	r5, [r4, #92]
	ldr	r0, [r6]
	bl	kfree(PLT)
	mov	r1, r6
	ldr	r3, [r5, #8]
	mov	r0, r5
	ldr	r3, [r3, #12]
	blx	r3
.L15913:
	mov	r0, r4
	mov	r1, r7
	bl	conn_gadget_req_get(PLT)
	subs	r6, r0, #0
	bne	.L15914
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L15917:
	.align	2
.L15916:
	.word	.LC936-(.LPIC4950+8)
	.fnend
	.size	conn_gadget_function_unbind, .-conn_gadget_function_unbind
	.align	2
	.type	conn_gadget_write, %function
conn_gadget_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	ip, .L15957
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC4951:
	add	ip, pc, ip
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r2, [ip, #2492]
	str	r1, [sp]
	ldr	r9, [r0, #124]
	cmp	r2, #0
	beq	.L15948
	add	r3, r9, #112
	str	r3, [sp, #4]
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #1
	beq	.L15949
	ldr	r3, [sp, #4]
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L15957+4
	ldr	r0, .L15957+8
.LPIC4955:
	add	r1, pc, r1
	sub	r1, r1, #1760
.LPIC4954:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #15
.L15945:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15949:
	mov	r3, sp
	mov	r10, r5
	bic	r8, r3, #8128
	bic	r8, r8, #63
.L15937:
	cmp	r5, #0
	beq	.L15923
.L15954:
	ldr	r2, [r9, #104]
	cmp	r2, #0
	bne	.L15924
	add	r4, r9, #120
	mov	r0, r9
	mov	r1, r4
	bl	conn_gadget_req_get(PLT)
	subs	fp, r0, #0
	beq	.L15950
.L15936:
	ldr	r1, [r9, #192]
	ldr	r2, [r8, #8]
	ldr	r3, [sp]
	ldr	r0, [fp]
	cmp	r5, r1
	movcc	r6, r5
	movcs	r6, r1
#APP
@ 439 "/root/lol//arch/arm/include/asm/uaccess.h" 1
	adds r1, r3, r6; sbcccs r1, r1, r2; movcc r2, #0
@ 0 "" 2
	cmp	r2, #0
	beq	.L15951
	cmp	r6, #0
	bne	.L15952
.L15932:
	str	r6, [fp, #4]
	ldr	r0, [r9, #92]
	mov	r2, #32
	mov	r1, fp
	ldr	lr, [r0, #8]
	ldr	r7, [lr, #16]
	blx	r7
	subs	r2, r0, #0
	blt	.L15953
	ldr	r3, [sp]
	rsb	r5, r6, r5
	cmp	r5, #0
	add	r3, r3, r6
	str	r3, [sp]
	bne	.L15954
.L15923:
	ldr	r3, [sp, #4]
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	mov	r0, r10
	b	.L15945
.L15950:
	ldr	r2, [r9, #104]
	cmp	r2, #0
	beq	.L15955
.L15924:
	ldr	r1, .L15957+12
	mvn	r10, #4
	ldr	r0, .L15957+16
.LPIC4957:
	add	r1, pc, r1
	sub	r1, r1, #1760
.LPIC4956:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L15923
.L15955:
	ldr	r1, .L15957+20
	add	r6, sp, #12
	add	r7, r9, #156
	ldr	r0, [r8, #12]
	str	r2, [sp, #12]
	add	r2, sp, #24
	str	r2, [sp, #24]
.LPIC4965:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	str	r2, [sp, #28]
	strd	r0, [sp, #16]
	b	.L15928
.L15956:
	bl	schedule(PLT)
.L15928:
	mov	r0, r7
	mov	r1, r6
	mov	r2, #1
	bl	prepare_to_wait(PLT)
	mov	r0, r9
	mov	r1, r4
	bl	conn_gadget_req_get(PLT)
	subs	fp, r0, #0
	bne	.L15925
	ldr	r2, [r9, #104]
	cmp	r2, #0
	bne	.L15926
	ldr	r2, [r8, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	beq	.L15956
	mov	r0, r7
	mov	r1, r6
	bl	finish_wait(PLT)
	ldr	r1, .L15957+24
	mov	r2, #65024
	ldr	r0, .L15957+28
	mov	r10, r2
	movt	r2, 65535
	movt	r10, 65535
.LPIC4964:
	add	r1, pc, r1
	sub	r1, r1, #1760
.LPIC4963:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L15923
.L15925:
	mov	r0, r7
	mov	r1, r6
	bl	finish_wait(PLT)
	b	.L15936
.L15926:
	mov	r0, r7
	mov	r1, r6
	bl	finish_wait(PLT)
	b	.L15937
.L15951:
	mov	r1, r3
	mov	r2, r6
	bl	__copy_from_user(PLT)
	cmp	r0, #0
	beq	.L15932
	b	.L15931
.L15952:
	mov	r1, r6
	bl	__memzero(PLT)
.L15931:
	ldr	r1, .L15957+32
	mvn	r10, #13
	ldr	r0, .L15957+36
.LPIC4960:
	add	r1, pc, r1
	sub	r1, r1, #1760
.LPIC4959:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
.L15933:
	mov	r1, r4
	mov	r2, fp
	mov	r0, r9
	bl	conn_gadget_req_put(PLT)
	b	.L15923
.L15948:
	ldr	r1, .L15957+40
	ldr	r0, .L15957+44
.LPIC4953:
	add	r1, pc, r1
	sub	r1, r1, #1760
.LPIC4952:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mvn	r0, #18
	b	.L15945
.L15953:
	ldr	r1, .L15957+48
	mov	lr, #1
	mvn	r10, #4
	ldr	r0, .L15957+52
	str	lr, [r9, #104]
.LPIC4962:
	add	r1, pc, r1
	sub	r1, r1, #1760
.LPIC4961:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	b	.L15933
.L15958:
	.align	2
.L15957:
	.word	.LANCHOR1-(.LPIC4951+8)
	.word	.LANCHOR9-(.LPIC4955+8)
	.word	.LC937-(.LPIC4954+8)
	.word	.LANCHOR9-(.LPIC4957+8)
	.word	.LC938-(.LPIC4956+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC4965+8))
	.word	.LANCHOR9-(.LPIC4964+8)
	.word	.LC941-(.LPIC4963+8)
	.word	.LANCHOR9-(.LPIC4960+8)
	.word	.LC939-(.LPIC4959+8)
	.word	.LANCHOR9-(.LPIC4953+8)
	.word	.LC254-(.LPIC4952+8)
	.word	.LANCHOR9-(.LPIC4962+8)
	.word	.LC940-(.LPIC4961+8)
	.fnend
	.size	conn_gadget_write, .-conn_gadget_write
	.align	2
	.type	conn_gadget_read, %function
conn_gadget_read:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16000
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r5, r2
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
.LPIC4966:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #36
	sub	sp, sp, #36
	ldr	r3, [r3, #2492]
	ldr	r4, [r0, #124]
	str	r2, [sp, #8]
	cmp	r3, #0
	beq	.L15995
	ldr	r3, [r4, #192]
	cmp	r2, r3
	bcs	.L15996
	add	r6, r4, #108
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r3, [r6]
	add	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #1
	beq	.L15997
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r1, .L16000+4
	ldr	r0, .L16000+8
.LPIC4972:
	add	r1, pc, r1
	sub	r1, r1, #1744
.LPIC4971:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #15
.L15989:
	add	sp, sp, #36
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L15997:
	ldr	r7, .L16000+12
	mov	r8, r1
	mov	r3, sp
	ldr	r9, .L16000+16
	bic	fp, r3, #8128
	ldr	r2, [r4, #100]
	ldr	r1, [r4, #104]
.LPIC4974:
	add	r7, pc, r7
	sub	r7, r7, #1744
.LPIC4973:
	add	r9, pc, r9
	sub	r7, r7, #4
.L15963:
	cmp	r2, #0
	bne	.L15968
.L15987:
	cmp	r1, #0
	beq	.L15998
.L15970:
	ldr	r1, .L16000+20
	mvn	r3, #4
	ldr	r0, .L16000+24
	str	r3, [sp, #8]
.LPIC4977:
	add	r1, pc, r1
	sub	r1, r1, #1744
.LPIC4976:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
.L15972:
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	ldr	r0, [sp, #8]
	b	.L15989
.L15968:
	cmp	r1, #0
	bne	.L15970
	ldr	r3, [r4, #168]
	ldr	r2, [r4, #172]
	subs	r3, r3, r2
	bne	.L15973
.L15975:
	ldr	r1, .L16000+28
	mov	r3, #0
	ldr	r0, .L16000+32
	str	r3, [sp, #8]
.LPIC4979:
	add	r1, pc, r1
	sub	r1, r1, #1744
.LPIC4978:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
.L15974:
	add	r7, r4, #128
	add	r8, r4, #136
	b	.L15977
.L15979:
	bl	conn_gadget_req_put(PLT)
.L15977:
	mov	r1, r7
	mov	r0, r4
	bl	conn_gadget_req_get(PLT)
	subs	r5, r0, #0
	mov	r2, #32
	mov	r1, r5
	beq	.L15972
	ldr	r3, [r4, #192]
	str	r3, [r5, #4]
	ldr	r0, [r4, #96]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r3, r0, #0
	mov	r1, r8
	mov	r0, r4
	mov	r2, r5
	bge	.L15979
	ldr	r1, .L16000+36
	ldr	r0, .L16000+40
.LPIC4983:
	add	r1, pc, r1
	sub	r1, r1, #1840
.LPIC4982:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	mov	r0, r4
	mov	r1, r7
	mov	r2, r5
	bl	conn_gadget_req_put(PLT)
	b	.L15972
.L15973:
	cmp	r5, r3
	mov	r1, r8
	movcs	r5, r3
	add	r0, r4, #168
	mov	r2, r5
	add	r3, sp, #8
	bl	__kfifo_to_user(PLT)
	cmp	r5, #0
	beq	.L15975
	cmp	r0, #0
	blt	.L15999
	ldr	r3, [r4, #196]
	ldr	r2, [r4, #168]
	ldr	r1, [r4, #172]
	add	r3, r3, r3, lsr #31
	rsb	r2, r1, r2
	cmp	r2, r3, asr #1
	bls	.L15974
	b	.L15972
.L15996:
	ldr	r1, .L16000+44
	ldr	r0, .L16000+48
.LPIC4970:
	add	r1, pc, r1
	sub	r1, r1, #1744
.LPIC4969:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #21
	b	.L15989
.L15995:
	ldr	r1, .L16000+52
	ldr	r0, .L16000+56
.LPIC4968:
	add	r1, pc, r1
	sub	r1, r1, #1744
.LPIC4967:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #18
	b	.L15989
.L15998:
	mov	r1, r7
	mov	r0, r9
	bl	printk(PLT)
	ldr	r2, [r4, #100]
	ldr	r1, [r4, #104]
	cmp	r2, #0
	bne	.L15963
	cmp	r1, #0
	bne	.L15987
	add	r3, sp, #12
	mov	r2, #20
	mov	r0, r3
	bic	r10, fp, #63
	str	r3, [sp]
	bl	memset(PLT)
	ldr	r1, .L16000+60
	add	r2, sp, #24
	str	r10, [sp, #4]
	ldr	r0, [r10, #12]
	add	r10, r4, #144
	str	r2, [sp, #24]
	str	r2, [sp, #28]
.LPIC4986:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	strd	r0, [sp, #16]
.L15967:
	mov	r2, #1
	mov	r0, r10
	ldr	r1, [sp]
	bl	prepare_to_wait(PLT)
	ldr	r2, [r4, #100]
	cmp	r2, #0
	bne	.L15965
	ldr	r2, [r4, #104]
	cmp	r2, #0
	bne	.L15965
	ldr	r3, [sp, #4]
	ldr	r2, [r3, #12]
	ldr	r2, [r2, #4]
	ldr	r2, [r2]
	tst	r2, #1
	bne	.L15966
	bl	schedule(PLT)
	b	.L15967
.L15999:
	ldr	r1, .L16000+64
	mov	r2, r0
	mvn	r3, #13
	ldr	r0, .L16000+68
	str	r3, [sp, #8]
.LPIC4981:
	add	r1, pc, r1
	sub	r1, r1, #1744
.LPIC4980:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L15972
.L15966:
	mov	r0, r10
	ldr	r1, [sp]
	bl	finish_wait(PLT)
	ldr	r1, .L16000+72
	mov	r2, #65024
	ldr	r0, .L16000+76
	movt	r2, 65535
.LPIC4985:
	add	r1, pc, r1
	sub	r1, r1, #1744
.LPIC4984:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	mov	r0, #65024
	movt	r0, 65535
	b	.L15989
.L15965:
	ldr	r1, [sp]
	mov	r0, r10
	bl	finish_wait(PLT)
	ldr	r2, [r4, #100]
	ldr	r1, [r4, #104]
	b	.L15963
.L16001:
	.align	2
.L16000:
	.word	.LANCHOR1-(.LPIC4966+8)
	.word	.LANCHOR9-(.LPIC4972+8)
	.word	.LC943-(.LPIC4971+8)
	.word	.LANCHOR9-(.LPIC4974+8)
	.word	.LC944-(.LPIC4973+8)
	.word	.LANCHOR9-(.LPIC4977+8)
	.word	.LC945-(.LPIC4976+8)
	.word	.LANCHOR9-(.LPIC4979+8)
	.word	.LC946-(.LPIC4978+8)
	.word	.LANCHOR9-(.LPIC4983+8)
	.word	.LC930-(.LPIC4982+8)
	.word	.LANCHOR9-(.LPIC4970+8)
	.word	.LC942-(.LPIC4969+8)
	.word	.LANCHOR9-(.LPIC4968+8)
	.word	.LC254-(.LPIC4967+8)
	.word	autoremove_wake_function(GOT_PREL)+(.-(.LPIC4986+8))
	.word	.LANCHOR9-(.LPIC4981+8)
	.word	.LC947-(.LPIC4980+8)
	.word	.LANCHOR9-(.LPIC4985+8)
	.word	.LC948-(.LPIC4984+8)
	.fnend
	.size	conn_gadget_read, .-conn_gadget_read
	.align	2
	.global	conn_gadget_req_move
	.type	conn_gadget_req_move, %function
conn_gadget_req_move:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	add	r5, r0, #88
	add	r4, r3, #36
	mov	r0, r5
	str	lr, [sp, #20]
	strd	r6, [sp, #8]
	mov	r6, r2
	str	r8, [sp, #16]
	bl	_raw_spin_lock_irqsave(PLT)
	mov	r7, r0
	mov	r0, r4
	bl	__list_del_entry(PLT)
	mov	r0, r4
	ldr	r1, [r6, #4]
	mov	r2, r6
	bl	__list_add(PLT)
	ldr	r8, [sp, #16]
	mov	r0, r5
	mov	r1, r7
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	_raw_spin_unlock_irqrestore(PLT)
	.fnend
	.size	conn_gadget_req_move, .-conn_gadget_req_move
	.align	2
	.type	conn_gadget_complete_out, %function
conn_gadget_complete_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16017
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r1
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	ldr	r1, [r1, #44]
.LPIC4987:
	add	r3, pc, r3
	ldr	r4, [r3, #2492]
	cmp	r1, #0
	ldr	r3, [r4, #192]
	ldr	r2, [r4, #196]
	add	r3, r3, r3, asl #2
	rsb	r6, r3, r2
	bne	.L16014
	ldr	r2, [r5, #48]
	add	r0, r4, #168
	ldr	r1, [r5]
	bl	__kfifo_in(PLT)
	ldr	r3, [r4, #168]
	ldr	r2, [r4, #172]
	rsb	r3, r2, r3
	cmp	r3, r6
	bcs	.L16015
	ldr	r0, [r4, #96]
	mov	r1, r5
	mov	r2, #32
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	blt	.L16016
.L16007:
	add	r0, r4, #144
	ldr	r6, [sp, #8]
	mov	r1, #3
	ldrd	r4, [sp]
	mov	r2, #1
	mov	r3, #0
	ldr	lr, [sp, #12]
	add	sp, sp, #16
	b	__wake_up(PLT)
.L16015:
	mov	r3, r5
	mov	r0, r4
	add	r1, r4, #136
	add	r2, r4, #128
	bl	conn_gadget_req_move(PLT)
	b	.L16007
.L16014:
	cmn	r1, #104
	ldr	r1, .L16017+4
	ldr	r0, .L16017+8
	movne	r3, #1
	strne	r3, [r4, #104]
	ldr	r2, [r5, #44]
.LPIC4989:
	add	r1, pc, r1
.LPIC4988:
	add	r0, pc, r0
	sub	r1, r1, #1728
	bl	printk(PLT)
.L16013:
	mov	r0, r4
	mov	r3, r5
	add	r1, r4, #136
	add	r2, r4, #128
	bl	conn_gadget_req_move(PLT)
	b	.L16007
.L16016:
	ldr	r1, .L16017+12
	mov	r3, r0
	mov	r2, r5
	ldr	r0, .L16017+16
.LPIC4991:
	add	r1, pc, r1
	sub	r1, r1, #1728
.LPIC4990:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L16013
.L16018:
	.align	2
.L16017:
	.word	.LANCHOR1-(.LPIC4987+8)
	.word	.LANCHOR9-(.LPIC4989+8)
	.word	.LC923-(.LPIC4988+8)
	.word	.LANCHOR9-(.LPIC4991+8)
	.word	.LC930-(.LPIC4990+8)
	.fnend
	.size	conn_gadget_complete_out, .-conn_gadget_complete_out
	.align	2
	.global	conn_gadget_empty
	.type	conn_gadget_empty, %function
conn_gadget_empty:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	add	r5, r0, #88
	mov	r4, r1
	mov	r0, r5
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r3, [r4]
	mov	r1, r0
	mov	r0, r5
	rsb	r4, r4, r3
	clz	r4, r4
	mov	r4, r4, lsr #5
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r6, [sp, #8]
	mov	r0, r4
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
	.fnend
	.size	conn_gadget_empty, .-conn_gadget_empty
	.align	2
	.type	conn_gadget_poll, %function
conn_gadget_poll:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	subs	r5, r1, #0
	str	r6, [sp, #8]
	mov	r6, r0
	str	lr, [sp, #12]
	ldr	r4, [r0, #124]
	add	r1, r4, #144
	beq	.L16023
	ldr	r3, [r5]
	adds	r2, r3, #0
	movne	r2, #1
	cmp	r1, #0
	cmpne	r3, #0
	beq	.L16024
	mov	r2, r5
	blx	r3
	ldr	r3, [r5]
	adds	r2, r3, #0
	movne	r2, #1
.L16024:
	adds	r0, r4, #156
	add	r1, r4, #156
	movne	r0, #1
	tst	r2, r0
	beq	.L16023
	mov	r0, r6
	mov	r2, r5
	blx	r3
.L16023:
	ldr	r3, .L16042
.LPIC4992:
	add	r3, pc, r3
	ldr	r3, [r3, #2492]
	cmp	r3, #0
	beq	.L16040
	ldr	r5, [r3, #100]
	cmp	r5, #0
	beq	.L16041
	add	r3, r4, #108
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #1
	beq	.L16028
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	mov	r5, #0
.L16029:
	mov	r0, r4
	add	r1, r4, #120
	bl	conn_gadget_empty(PLT)
	cmp	r0, #0
	orreq	r0, r5, #260
	movne	r0, r5
.L16038:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16028:
	ldr	r5, [r4, #172]
	ldr	r2, [r4, #168]
	cmp	r2, r5
	movne	r5, #65
	moveq	r5, #0
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r2, [r3]
	sub	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	b	.L16029
.L16041:
	ldr	r1, .L16042+4
	ldr	r0, .L16042+8
.LPIC4996:
	add	r1, pc, r1
	sub	r1, r1, #1696
.LPIC4995:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r5
	b	.L16038
.L16040:
	ldr	r1, .L16042+12
	ldr	r0, .L16042+16
.LPIC4994:
	add	r1, pc, r1
	sub	r1, r1, #1696
.LPIC4993:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, #40
	b	.L16038
.L16043:
	.align	2
.L16042:
	.word	.LANCHOR1-(.LPIC4992+8)
	.word	.LANCHOR9-(.LPIC4996+8)
	.word	.LC949-(.LPIC4995+8)
	.word	.LANCHOR9-(.LPIC4994+8)
	.word	.LC254-(.LPIC4993+8)
	.fnend
	.size	conn_gadget_poll, .-conn_gadget_poll
	.align	2
	.global	ncm_bind_config
	.type	ncm_bind_config, %function
ncm_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r0
	ldr	r0, .L16062
	strd	r8, [sp, #16]
	mov	r8, r1
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r6, [r7, #24]
	.pad #28
	sub	sp, sp, #28
.LPIC4997:
	add	r0, pc, r0
	ldr	r3, [r6]
	ldr	r4, [r3, #28]
	mov	r1, r4
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L16059
.L16049:
	mvn	r0, #21
.L16045:
	add	sp, sp, #28
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16059:
	ldr	r0, .L16062+4
	mov	r1, r4
.LPIC4998:
	add	r0, pc, r0
	bl	strcmp(PLT)
	cmp	r8, #0
	cmpne	r0, #0
	beq	.L16049
	ldr	r5, .L16062+8
.LPIC4999:
	add	r5, pc, r5
	ldrb	r3, [r5, #904]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L16060
.L16046:
	ldr	r3, .L16062+12
.LPIC5025:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r0, [r3, #8]
	cmp	r0, #0
	beq	.L16054
	movw	r1, #32976
	mov	r2, #192
	bl	kmem_cache_alloc_trace(PLT)
	subs	r4, r0, #0
	beq	.L16061
.L16047:
	ldrb	r2, [r8, #2]	@ zero_extendqisi2
	add	r6, r4, #150
	mov	r1, #14
	ldrb	r3, [r8]	@ zero_extendqisi2
	mov	r0, r6
	mov	r5, #0
	ldrb	r10, [r8, #1]	@ zero_extendqisi2
	mov	fp, #16384
	ldrb	r9, [r8, #3]	@ zero_extendqisi2
	ldrb	lr, [r8, #4]	@ zero_extendqisi2
	ldrb	ip, [r8, #5]	@ zero_extendqisi2
	str	r2, [sp, #4]
	ldr	r2, .L16062+16
	str	r10, [sp]
	str	r9, [sp, #8]
	ldr	r8, .L16062+20
	str	lr, [sp, #12]
	str	ip, [sp, #16]
.LPIC5010:
	add	r2, pc, r2
	bl	snprintf(PLT)
	ldr	r3, .L16062+24
.LPIC5011:
	add	r8, pc, r8
	mov	r2, #15
	str	r5, [r4, #188]
	ldr	lr, .L16062+28
	add	r9, r8, #3968
	str	r6, [r8, #916]
	add	r9, r9, #8
	mov	r0, r7
	strh	r2, [r4, #98]	@ movhi
	ldr	ip, .L16062+32
.LPIC5012:
	add	r3, pc, r3
	strb	r5, [r4, #180]
	ldr	r1, .L16062+36
	add	r10, r3, #56
	str	r5, [r4, #100]
.LPIC5014:
	add	lr, pc, lr
	ldr	r2, .L16062+40
	str	r10, [r4, #176]
	ldr	r3, [r3, #16]
.LPIC5016:
	add	ip, pc, ip
	str	r9, [r4, #4]
	ldr	r7, .L16062+44
.LPIC5017:
	add	r1, pc, r1
	str	lr, [r4]
	ldr	r6, .L16062+48
	mov	r10, #1
	ldr	r9, .L16062+52
.LPIC5018:
	add	r2, pc, r2
	str	r1, [r4, #36]
	str	r3, [r4, #108]
	ldr	r3, .L16062+56
	mov	r1, r4
	ldr	lr, .L16062+60
.LPIC5019:
	add	r7, pc, r7
	str	r5, [r4, #184]
.LPIC5020:
	add	r6, pc, r6
	str	ip, [r4, #32]
.LPIC5022:
	add	r9, pc, r9
	str	r2, [r4, #40]
.LPIC5021:
	add	r3, pc, r3
	str	r6, [r4, #52]
.LPIC5023:
	add	lr, pc, lr
	str	r7, [r4, #44]
	str	r3, [r4, #48]
	movw	r3, #9014
	str	r9, [r4, #128]
	str	lr, [r4, #132]
	str	fp, [r4, #112]
	strh	r3, [r4, #182]	@ movhi
	strb	r10, [r4, #104]
	bl	usb_add_function(PLT)
	subs	r6, r0, #0
	moveq	r0, r6
	beq	.L16045
	mov	r0, r4
	str	r5, [r8, #916]
	bl	kfree(PLT)
	mov	r0, r6
	b	.L16045
.L16060:
	mov	r0, r6
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L16045
	ldr	r4, .L16062+64
	uxtb	r3, r0
	ldr	r0, [r7, #24]
	strb	r3, [r5, #904]
.LPIC5001:
	add	r4, pc, r4
	strb	r3, [r4, #1576]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L16045
	uxtb	r3, r0
	ldr	r0, [r7, #24]
	strb	r3, [r5, #920]
	strb	r3, [r4, #1596]
	strb	r3, [r4, #1608]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L16045
	uxtb	r3, r0
	ldr	r0, [r7, #24]
	strb	r3, [r5, #912]
	strb	r3, [r4, #3227]
	bl	usb_string_id(PLT)
	cmp	r0, #0
	blt	.L16045
	uxtb	r0, r0
	strb	r0, [r5, #928]
	strb	r0, [r4, #1567]
	b	.L16046
.L16054:
	mov	r4, #16
	b	.L16047
.L16061:
	mvn	r0, #11
	b	.L16045
.L16063:
	.align	2
.L16062:
	.word	.LC309-(.LPIC4997+8)
	.word	.LC454-(.LPIC4998+8)
	.word	.LANCHOR0-(.LPIC4999+8)
	.word	kmalloc_caches(GOT_PREL)+(.-(.LPIC5025+8))
	.word	.LC869-(.LPIC5010+8)
	.word	.LANCHOR0-(.LPIC5011+8)
	.word	.LANCHOR2-(.LPIC5012+8)
	.word	.LC500-(.LPIC5014+8)
	.word	ncm_bind-(.LPIC5016+8)
	.word	ncm_unbind-(.LPIC5017+8)
	.word	ncm_set_alt-(.LPIC5018+8)
	.word	ncm_get_alt-(.LPIC5019+8)
	.word	ncm_setup-(.LPIC5020+8)
	.word	ncm_wrap_ntb-(.LPIC5022+8)
	.word	ncm_disable-(.LPIC5021+8)
	.word	ncm_unwrap_ntb-(.LPIC5023+8)
	.word	.LANCHOR2-(.LPIC5001+8)
	.fnend
	.size	ncm_bind_config, .-ncm_bind_config
	.align	2
	.type	ncm_function_bind_config, %function
ncm_function_bind_config:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-20]!
	.save {r4, r5, r6, r7, lr}
	strd	r6, [sp, #8]
	str	lr, [sp, #16]
	ldr	r4, [r0, #4]
	.pad #20
	sub	sp, sp, #20
	cmp	r4, #0
	beq	.L16076
	ldr	lr, .L16078
	mov	r2, #0
	mov	r6, r1
	movw	r1, #26215
	add	r3, r4, #2
	mov	r0, #2
	mov	ip, r2
	strb	r2, [r4, #1]
	movt	r1, 26214
	strb	r2, [r3], #1
.LPIC5036:
	add	lr, pc, lr
	strb	r2, [r3], #1
	strb	r2, [r3], #1
	strb	r2, [r3]
	strb	r0, [r4]
.L16067:
	add	r0, lr, #28
	smull	r3, r2, r1, ip
	mov	r3, ip, asr #31
	ldrb	r0, [ip, r0]	@ zero_extendqisi2
	rsb	r3, r3, r2, asr #1
	cmp	r0, #0
	add	r3, r3, r3, asl #2
	beq	.L16071
	rsb	r3, r3, ip
	add	ip, ip, #1
	add	r3, r3, #1
	cmp	ip, #256
	ldrb	r2, [r4, r3]	@ zero_extendqisi2
	eor	r2, r2, r0
	strb	r2, [r4, r3]
	bne	.L16067
.L16071:
	ldrb	r1, [r4, #2]	@ zero_extendqisi2
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldr	r7, .L16078+4
	str	r1, [sp]
	ldrb	r1, [r4, #3]	@ zero_extendqisi2
	ldr	r0, .L16078+8
.LPIC5030:
	add	r7, pc, r7
	str	r1, [sp, #4]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	sub	r7, r7, #1680
	mov	r1, r7
.LPIC5029:
	add	r0, pc, r0
	str	ip, [sp, #8]
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	str	ip, [sp, #12]
	bl	printk(PLT)
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	mov	r1, r7
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldr	r0, .L16078+12
	str	ip, [sp]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
.LPIC5031:
	add	r0, pc, r0
	str	ip, [sp, #4]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	str	ip, [sp, #12]
	bl	printk(PLT)
	ldr	r3, [r6, #24]
	mov	r1, r4
	ldr	r2, .L16078+16
	ldr	r0, [r3]
.LPIC5033:
	add	r2, pc, r2
	bl	gether_setup_name(PLT)
	ldrb	ip, [r4, #2]	@ zero_extendqisi2
	mov	r5, r0
	mov	r1, r7
	ldrb	r2, [r4]	@ zero_extendqisi2
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	ldr	r0, .L16078+20
	str	ip, [sp]
	ldrb	ip, [r4, #3]	@ zero_extendqisi2
.LPIC5034:
	add	r0, pc, r0
	str	ip, [sp, #4]
	ldrb	ip, [r4, #4]	@ zero_extendqisi2
	str	ip, [sp, #8]
	ldrb	ip, [r4, #5]	@ zero_extendqisi2
	str	ip, [sp, #12]
	bl	printk(PLT)
	cmp	r5, #0
	bne	.L16077
	mov	r0, r6
	mov	r1, r4
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	lr, [sp, #16]
	add	sp, sp, #20
	b	ncm_bind_config(PLT)
.L16076:
	ldr	r1, .L16078+24
	ldr	r0, .L16078+28
.LPIC5027:
	add	r1, pc, r1
	sub	r1, r1, #1680
.LPIC5026:
	add	r0, pc, r0
	mov	r2, r1
	bl	printk(PLT)
	mvn	r0, #0
.L16066:
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	add	sp, sp, #16
	ldr	pc, [sp], #4
.L16077:
	ldr	r0, .L16078+32
	mov	r1, r7
	mov	r2, r7
.LPIC5037:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r0, r5
	b	.L16066
.L16079:
	.align	2
.L16078:
	.word	.LANCHOR1-(.LPIC5036+8)
	.word	.LANCHOR9-(.LPIC5030+8)
	.word	.LC951-(.LPIC5029+8)
	.word	.LC952-(.LPIC5031+8)
	.word	.LC500-(.LPIC5033+8)
	.word	.LC953-(.LPIC5034+8)
	.word	.LANCHOR9-(.LPIC5027+8)
	.word	.LC950-(.LPIC5026+8)
	.word	.LC880-(.LPIC5037+8)
	.fnend
	.size	ncm_function_bind_config, .-ncm_function_bind_config
	.align	2
	.global	is_ncm_ready
	.type	is_ncm_ready, %function
is_ncm_ready:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L16092
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r5, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC5040:
	add	r1, pc, r1
	bl	strcmp(PLT)
	cmp	r0, #0
	beq	.L16081
	ldr	r1, .L16092+4
	mov	r0, r5
.LPIC5041:
	add	r1, pc, r1
	bl	strcmp(PLT)
	cmp	r0, #0
	movne	r4, #0
	bne	.L16082
.L16081:
	ldr	r3, .L16092+8
.LPIC5042:
	add	r3, pc, r3
	ldrb	r4, [r3, #-652]	@ zero_extendqisi2
	cmp	r4, #0
	bne	.L16091
.L16082:
	mov	r0, r4
	ldr	r6, [sp, #8]
	ldrd	r4, [sp]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16091:
	ldr	r1, .L16092+12
	mov	r2, r5
	ldr	r0, .L16092+16
.LPIC5044:
	add	r1, pc, r1
	sub	r1, r1, #1648
.LPIC5043:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L16082
.L16093:
	.align	2
.L16092:
	.word	.LC826-(.LPIC5040+8)
	.word	.LC500-(.LPIC5041+8)
	.word	.LANCHOR4-(.LPIC5042+8)
	.word	.LANCHOR9-(.LPIC5044+8)
	.word	.LC954-(.LPIC5043+8)
	.fnend
	.size	is_ncm_ready, .-is_ncm_ready
	.align	2
	.global	set_ncm_device_descriptor
	.type	set_ncm_device_descriptor, %function
set_ncm_device_descriptor:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L16096
	mov	ip, r0
	.save {r4, lr}
	str	r4, [sp, #-8]!
	ldr	r0, .L16096+4
	str	lr, [sp, #4]
	mov	r3, #93
	mov	lr, #2
	mov	r4, #104
	strb	r3, [ip, #10]
	movw	r2, #26717
	mov	r3, lr
.LPIC5046:
	add	r1, pc, r1
	strb	r4, [ip, #11]
	strb	lr, [ip, #4]
	sub	r1, r1, #1632
.LPIC5045:
	add	r0, pc, r0
	ldr	r4, [sp]
	sub	r1, r1, #4
	ldr	lr, [sp, #4]
	add	sp, sp, #8
	b	printk(PLT)
.L16097:
	.align	2
.L16096:
	.word	.LANCHOR9-(.LPIC5046+8)
	.word	.LC955-(.LPIC5045+8)
	.fnend
	.size	set_ncm_device_descriptor, .-set_ncm_device_descriptor
	.align	2
	.global	set_ncm_ready
	.type	set_ncm_ready, %function
set_ncm_ready:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	ldr	r5, .L16103
	mov	r4, r0
	str	r6, [sp, #8]
	str	lr, [sp, #12]
.LPIC5047:
	add	r5, pc, r5
	ldrb	r2, [r5, #-652]	@ zero_extendqisi2
	cmp	r0, r2
	bne	.L16102
.L16099:
	cmp	r4, #0
	bne	.L16098
	ldr	r2, .L16103+4
	ldr	r3, .L16103+8
.LPIC5054:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
.LPIC5053:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	strh	r4, [r2]	@ movhi
	strh	r4, [r3]	@ movhi
.L16098:
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16102:
	ldr	r1, .L16103+12
	mov	r3, r0
	ldr	r0, .L16103+16
.LPIC5049:
	add	r1, pc, r1
	sub	r1, r1, #1600
.LPIC5048:
	add	r0, pc, r0
	sub	r1, r1, #8
	bl	printk(PLT)
	ldr	r3, .L16103+20
	mov	r0, #4
	strb	r4, [r5, #-652]
	ldr	r2, [r5, #-668]
.LPIC5055:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	b	.L16099
.L16104:
	.align	2
.L16103:
	.word	.LANCHOR4-(.LPIC5047+8)
	.word	terminal_mode_version(GOT_PREL)+(.-(.LPIC5054+8))
	.word	terminal_mode_vendor_id(GOT_PREL)+(.-(.LPIC5053+8))
	.word	.LANCHOR9-(.LPIC5049+8)
	.word	.LC956-(.LPIC5048+8)
	.word	system_wq(GOT_PREL)+(.-(.LPIC5055+8))
	.fnend
	.size	set_ncm_ready, .-set_ncm_ready
	.align	2
	.type	terminal_version_store, %function
terminal_version_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L16109
	strd	r4, [sp, #-12]!
	.save {r4, r5, lr}
	mov	r4, r2
	str	lr, [sp, #8]
	.pad #12
	sub	sp, sp, #12
	mov	r0, r4
	add	r2, sp, #4
	mov	r5, r3
.LPIC5056:
	add	r1, pc, r1
	bl	sscanf(PLT)
	ldr	r3, .L16109+4
	mov	r2, r4
	ldr	r1, .L16109+8
	ldr	r0, .L16109+12
	ldr	ip, [sp, #4]
.LPIC5060:
	ldr	r3, [pc, r3]		@ tls_load_dot_plus_eight
.LPIC5059:
	add	r1, pc, r1
	sub	r1, r1, #1584
.LPIC5058:
	add	r0, pc, r0
	sub	r1, r1, #8
	strh	ip, [r3]	@ movhi
	bl	printk(PLT)
	ldr	r0, [sp, #4]
	cmp	r0, #0
	movne	r0, #1
	bl	set_ncm_ready(PLT)
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	ldrd	r4, [sp]
	add	sp, sp, #8
	ldr	pc, [sp], #4
.L16110:
	.align	2
.L16109:
	.word	.LC957-(.LPIC5056+8)
	.word	terminal_mode_version(GOT_PREL)+(.-(.LPIC5060+8))
	.word	.LANCHOR9-(.LPIC5059+8)
	.word	.LC192-(.LPIC5058+8)
	.fnend
	.size	terminal_version_store, .-terminal_version_store
	.align	2
	.type	android_setup, %function
android_setup:
	.fnstart
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16239
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	mov	r7, r1
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	mov	fp, r0
	add	r0, r0, #32
.LPIC5065:
	add	r3, pc, r3
	str	lr, [sp, #32]
	.pad #20
	sub	sp, sp, #20
	str	r3, [sp]
	bl	dev_get_drvdata(PLT)
	ldr	r2, .L16239+4
	mov	r6, r0
.LPIC5061:
	add	r2, pc, r2
	ldr	r3, [r2, #16]!
	cmp	r3, r2
	sub	r9, r3, #520
	bne	.L16115
	b	.L16112
.L16229:
	ldr	r3, [r9, #520]
	cmp	r3, r2
	sub	r9, r3, #520
	beq	.L16112
.L16115:
	ldr	r3, [r3, #-512]
	cmp	r6, r3
	bne	.L16229
.L16112:
	ldr	r3, [r6, #4]
	mov	r0, #0
	mov	r10, r9
	ldr	r2, .L16239+8
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	str	r0, [r3, #4]
.LPIC5064:
	add	r2, pc, r2
	str	r2, [r3, #28]
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [fp, #4]
	str	r6, [r3]
	ldr	r8, [r10, #508]!
	cmp	r10, r8
	sub	r8, r8, #120
	beq	.L16116
	mvn	ip, #94
.L16120:
	mov	r5, r8
	ldr	r4, [r5, #112]!
	cmp	r5, r4
	sub	r4, r4, #4
	beq	.L16117
.L16119:
	ldr	r0, [r4]
	mov	r1, r6
	mov	r2, r7
	ldr	r3, [r0, #48]
	cmp	r3, #0
	beq	.L16118
	blx	r3
	subs	ip, r0, #0
	bge	.L16117
.L16118:
	ldr	r4, [r4, #4]
	cmp	r5, r4
	sub	r4, r4, #4
	bne	.L16119
.L16117:
	ldr	r8, [r8, #120]
	cmp	r10, r8
	sub	r8, r8, #120
	bne	.L16120
	ldr	r4, [r6, #12]
	adds	r3, r4, #0
	movne	r3, #1
	cmp	ip, #0
	str	r3, [sp, #8]
	blt	.L16179
.L16121:
	add	r5, r6, #60
	str	ip, [sp, #4]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldrb	r3, [r9, #48]	@ zero_extendqisi2
	mov	r1, r0
	ldr	ip, [sp, #4]
	cmp	r3, #0
	moveq	r3, #1
	streqb	r3, [r9, #48]
	beq	.L16174
	ldrb	r3, [r7, #1]	@ zero_extendqisi2
	cmp	r3, #9
	beq	.L16230
.L16175:
	mov	r0, r5
	str	ip, [sp]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	ip, [sp]
	b	.L16214
.L16230:
	ldr	r3, [r6, #12]
	ldr	r4, [sp, #8]
	cmp	r3, #0
	orreq	r4, r4, #1
	cmp	r4, #0
	bne	.L16175
.L16174:
	mov	r0, r5
	str	ip, [sp, #4]
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, [sp]
	add	r2, r9, #180
	mov	r0, #4
	ldr	r3, .L16239+12
	ldr	r3, [r1, r3]
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	ldr	ip, [sp, #4]
.L16214:
	mov	r0, ip
	add	sp, sp, #20
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16116:
	ldr	r4, [r6, #12]
	adds	r3, r4, #0
	movne	r3, #1
	str	r3, [sp, #8]
.L16179:
	ldrb	r0, [r7]	@ zero_extendqisi2
	ldrh	r1, [r7, #4]	@ unaligned
	ldrh	ip, [r7, #2]	@ unaligned
	ldrb	r2, [r7, #1]	@ zero_extendqisi2
	and	r3, r0, #96
	cmp	r3, #64
	mov	r5, r1
	mov	r3, ip
	bne	.L16123
	cmp	r2, #240
	beq	.L16231
.L16123:
	ldr	r1, .L16239+16
	cmp	r0, #64
	ldrh	r8, [r7, #6]	@ unaligned
.LPIC5075:
	add	r1, pc, r1
	ldr	r4, [r1, #2496]
	beq	.L16232
	cmp	r2, #51
	cmpeq	r0, #192
	beq	.L16233
.L16164:
	mov	r0, fp
	mov	r1, r7
	bl	composite_setup(PLT)
	mov	ip, r0
	b	.L16121
.L16232:
	cmp	r2, #53
	beq	.L16234
	cmp	r2, #52
	beq	.L16235
	cmp	r2, #58
	cmpeq	r5, #0
	bne	.L16128
	cmp	r8, #0
	bne	.L16129
.L16226:
	str	r3, [r4, #1648]
.L16126:
	ldr	r3, [r6, #4]
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r6, #4]
	str	r8, [r3, #4]
	ldr	r3, [r6]
	ldr	r1, [r6, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	ip, r0, #0
	bge	.L16121
	ldr	r2, .L16239+20
	ldr	r0, [r6]
	ldr	r1, .L16239+24
.LPIC5074:
	add	r2, pc, r2
	add	r2, r2, #3456
	add	r0, r0, #32
.LPIC5073:
	add	r1, pc, r1
	bl	dev_err(PLT)
	b	.L16164
.L16235:
	str	r5, [r4, #1640]
	ldr	r2, [r6]
	ldr	r3, .L16239+28
	ldr	r2, [r2, #4]
.LPIC5070:
	add	r3, pc, r3
	str	r4, [r2]
	ldr	r2, [r6, #4]
	str	r3, [r2, #28]
	b	.L16126
.L16129:
	cmp	r2, #57
	bne	.L16164
	add	r10, r4, #88
	str	r3, [sp, #4]
	mov	r0, r10
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r5, [r4, #1768]
	add	ip, r4, #1760
	mov	r1, r0
	add	ip, ip, #8
	cmp	ip, r5
	beq	.L16167
	ldr	r2, [r5, #16]
	ldr	r3, [sp, #4]
	cmp	r3, r2
	bne	.L16170
	b	.L16168
.L16172:
	ldr	r2, [r5, #16]
	cmp	r3, r2
	beq	.L16168
.L16170:
	ldr	r5, [r5]
	cmp	ip, r5
	bne	.L16172
.L16167:
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L16164
.L16128:
	cmp	r2, #54
	beq	.L16236
	cmp	r2, #55
	bne	.L16147
	add	r5, r4, #88
	str	r3, [sp, #4]
	mov	r0, r5
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #1768]
	add	r1, r4, #1760
	mov	r8, r0
	add	r1, r1, #8
	ldr	r3, [sp, #4]
	cmp	r1, r2
	mov	r10, r2
	bne	.L16153
	b	.L16148
.L16151:
	ldr	r2, [r2]
	cmp	r1, r2
	mov	r10, r2
	beq	.L16148
.L16153:
	ldr	r0, [r2, #16]
	cmp	r3, r0
	bne	.L16151
	cmp	r2, #0
	beq	.L16148
.L16152:
	mov	r0, r10
	bl	__list_del_entry(PLT)
	add	r1, r4, #1776
	mov	r0, r10
	ldr	r2, [r4, #1784]
	add	r1, r1, #8
	bl	__list_add(PLT)
	mov	r0, r5
	mov	r1, r8
.L16227:
	bl	_raw_spin_unlock_irqrestore(PLT)
	ldr	r1, [sp]
	add	r2, r4, #1744
	mov	r0, #4
	ldr	r3, .L16239+12
	add	r2, r2, #8
	mov	r8, #0
	ldr	r3, [r1, r3]
	ldr	r1, [r3]
	bl	queue_work_on(PLT)
	b	.L16126
.L16234:
	mov	r3, #1
	mov	r0, #200
	mov	r8, #0
	str	r3, [r4, #1644]
	bl	msecs_to_jiffies(PLT)
	ldr	ip, [sp]
	mov	r3, r0
	add	r2, r4, #1696
	ldr	r1, .L16239+12
	mov	r0, #4
	add	r2, r2, r0
	ldr	r1, [ip, r1]
	ldr	r1, [r1]
	bl	queue_delayed_work_on(PLT)
	b	.L16126
.L16148:
	ldr	r2, [r4, #1776]
	add	r1, r4, #1776
	cmp	r1, r2
	mov	r10, r2
	bne	.L16158
	b	.L16154
.L16237:
	ldr	r2, [r2]
	cmp	r1, r2
	mov	r10, r2
	beq	.L16154
.L16158:
	ldr	r0, [r2, #16]
	cmp	r3, r0
	bne	.L16237
	cmp	r2, #0
	bne	.L16152
.L16154:
	mov	r0, r5
	mov	r1, r8
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L16164
.L16147:
	cmp	r2, #56
	bne	.L16129
	add	r2, r4, #88
	str	r3, [sp, #12]
	mov	r0, r2
	str	r2, [sp, #4]
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r10, [r4, #1776]
	add	ip, r4, #1776
	mov	r1, r0
	ldr	r2, [sp, #4]
	cmp	ip, r10
	beq	.L16159
	ldr	r0, [r10, #16]
	ldr	r3, [sp, #12]
	cmp	r3, r0
	bne	.L16162
	b	.L16160
.L16165:
	ldr	r0, [r10, #16]
	cmp	r3, r0
	beq	.L16160
.L16162:
	ldr	r10, [r10]
	cmp	ip, r10
	bne	.L16165
.L16159:
	mov	r0, r2
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L16164
.L16236:
	cmp	r5, #0
	str	r3, [sp, #4]
	beq	.L16164
	add	r8, r4, #88
	mov	r0, r8
	bl	_raw_spin_lock_irqsave(PLT)
	ldr	r2, [r4, #1768]
	mov	r10, r0
	add	r0, r4, #1760
	add	r0, r0, #8
	ldr	r3, [sp, #4]
	cmp	r0, r2
	mov	r1, r2
	beq	.L16132
	ldr	lr, [r2, #16]
	cmp	r3, lr
	bne	.L16135
	b	.L16133
.L16137:
	ldr	ip, [r2, #16]
	cmp	r3, ip
	beq	.L16133
.L16135:
	ldr	r2, [r2]
	cmp	r0, r2
	mov	r1, r2
	bne	.L16137
.L16132:
	ldr	r2, [r4, #1776]
	add	r0, r4, #1776
	cmp	r0, r2
	mov	r1, r2
	beq	.L16138
	ldr	lr, [r2, #16]
	cmp	r3, lr
	beq	.L16139
.L16141:
	ldr	r2, [r2]
	cmp	r0, r2
	mov	r1, r2
	beq	.L16138
	ldr	ip, [r2, #16]
	cmp	r3, ip
	bne	.L16141
.L16139:
	cmp	r2, #0
	beq	.L16138
	b	.L16136
.L16160:
	mov	r0, r2
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r10, #0
	beq	.L16164
	ldr	r3, [r10, #28]
	cmp	r5, r3
	bne	.L16164
	ldr	r3, [r10, #24]
	add	r5, r5, r8
	cmp	r5, r3
	bgt	.L16164
	ldr	r2, [r6, #4]
	ldr	r3, .L16239+32
	str	r10, [r2, #32]
	ldr	r2, [r6, #4]
.LPIC5071:
	add	r3, pc, r3
	str	r3, [r2, #28]
	b	.L16126
.L16233:
	ldr	r3, [r6, #4]
	mov	r8, #2
	add	r0, r4, #101
	mov	r1, #256
	ldr	r3, [r3]
	strh	r8, [r3]	@ movhi
	bl	__memzero(PLT)
	add	r0, r4, #356
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero(PLT)
	add	r0, r4, #612
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero(PLT)
	add	r0, r4, #868
	mov	r1, #256
	add	r0, r0, #1
	bl	__memzero(PLT)
	add	r0, r4, #1120
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero(PLT)
	add	r0, r4, #1376
	mov	r1, #256
	add	r0, r0, #5
	bl	__memzero(PLT)
	mov	r3, #0
	str	r3, [r4, #1644]
	b	.L16226
.L16231:
	ldr	lr, [sp]
	mov	r0, #1
	ldr	r2, .L16239+36
	ldr	r3, .L16239+40
	ldr	r5, .L16239+44
	ldr	r8, [lr, r2]
.LPIC5067:
	add	r5, pc, r5
	sub	r5, r5, #1568
	strh	ip, [r8]	@ movhi
	ldr	r10, [lr, r3]
	strh	r1, [r10]	@ movhi
	bl	set_ncm_ready(PLT)
	ldr	r0, .L16239+48
	mov	r1, r5
	ldrh	r3, [r10]
	ldrh	r2, [r8]
.LPIC5066:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [r6, #4]
	mov	r0, #0
	mov	r2, #32
	ldrb	r1, [r3, #26]	@ zero_extendqisi2
	bfc	r1, #1, #1
	strb	r1, [r3, #26]
	ldr	r3, [r6, #4]
	str	r0, [r3, #4]
	ldr	r3, [r6]
	ldr	r1, [r6, #4]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	cmp	r0, #0
	bge	.L16124
	ldr	r0, .L16239+52
	mov	r1, r5
.LPIC5068:
	add	r0, pc, r0
	bl	printk(PLT)
.L16124:
	mov	ip, #0
	b	.L16121
.L16168:
	mov	r0, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	cmp	r5, #0
	beq	.L16164
	ldr	r2, [r6, #4]
	ldr	r3, .L16239+56
	str	r5, [r2, #32]
	ldr	r2, [r6, #4]
.LPIC5072:
	add	r3, pc, r3
	str	r3, [r2, #28]
	b	.L16126
.L16133:
	cmp	r2, #0
	beq	.L16132
.L16136:
	mov	r0, r1
	str	r3, [sp, #12]
	str	r1, [sp, #4]
	bl	__list_del_entry(PLT)
	ldr	r1, [sp, #4]
	ldr	r2, [r4, #1784]
	mov	r0, r1
	add	r1, r4, #1776
	add	r1, r1, #8
	bl	__list_add(PLT)
	ldr	r3, [sp, #12]
.L16138:
	ldr	r2, .L16239+60
	ldr	r1, [sp]
	ldr	r2, [r1, r2]
	ldr	r0, [r2, #24]
	cmp	r0, #0
	beq	.L16143
	mov	r2, #32
	movw	r1, #32800
	str	r3, [sp, #4]
	bl	kmem_cache_alloc_trace(PLT)
	subs	r2, r0, #0
	ldr	r3, [sp, #4]
	beq	.L16144
.L16180:
	mov	r0, r5
	movw	r1, #32800
	str	r2, [sp, #12]
	str	r3, [sp, #4]
	bl	__kmalloc(PLT)
	ldr	r2, [sp, #12]
	cmp	r0, #0
	ldr	r3, [sp, #4]
	str	r0, [r2, #20]
	beq	.L16238
	mov	r0, r2
	str	r4, [r2, #12]
	add	r1, r4, #1776
	str	r3, [r2, #16]
	str	r5, [r2, #24]
	ldr	r2, [r4, #1776]
	bl	__list_add(PLT)
	mov	r0, r8
	mov	r1, r10
	b	.L16227
.L16238:
	mov	r0, r2
	bl	kfree(PLT)
.L16144:
	mov	r0, r8
	mov	r1, r10
	bl	_raw_spin_unlock_irqrestore(PLT)
	b	.L16164
.L16143:
	mov	r2, #16
	b	.L16180
.L16240:
	.align	2
.L16239:
	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC5065+8)
	.word	.LANCHOR1-(.LPIC5061+8)
	.word	composite_setup_complete-(.LPIC5064+8)
	.word	system_wq(GOT)
	.word	.LANCHOR1-(.LPIC5075+8)
	.word	.LANCHOR3-(.LPIC5074+8)
	.word	.LC483-(.LPIC5073+8)
	.word	acc_complete_set_string-(.LPIC5070+8)
	.word	acc_complete_set_hid_report_desc-(.LPIC5071+8)
	.word	terminal_mode_version(GOT)
	.word	terminal_mode_vendor_id(GOT)
	.word	.LANCHOR9-(.LPIC5067+8)
	.word	.LC958-(.LPIC5066+8)
	.word	.LC959-(.LPIC5068+8)
	.word	acc_complete_send_hid_event-(.LPIC5072+8)
	.word	kmalloc_caches(GOT)
	.fnend
	.size	android_setup, .-android_setup
	.align	2
	.global	schedule_usb_gadget_connect_work
	.type	schedule_usb_gadget_connect_work, %function
schedule_usb_gadget_connect_work:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16254
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r2, #0
	str	r6, [sp, #8]
	cmp	r0, #0
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
.LPIC5076:
	add	r3, pc, r3
	str	r2, [sp, #4]
	str	r3, [sp]
	bne	.L16252
.L16241:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16252:
	ldr	r5, .L16254+4
	add	r6, r0, #452
	mov	r4, r0
	ldr	r0, .L16254+8
.LPIC5078:
	add	r5, pc, r5
	sub	r5, r5, #1536
.LPIC5077:
	add	r0, pc, r0
	sub	r5, r5, #8
	mov	r1, r5
	mov	r2, r5
	bl	printk(PLT)
	mov	r0, r6
	bl	work_busy(PLT)
	cmp	r0, #0
	bne	.L16253
.L16243:
	ldr	r0, [r4, #12]
	mov	r1, #2
	mov	r2, sp
	add	r0, r0, #8
	bl	kobject_uevent_env(PLT)
	mov	r3, #0
	mov	r0, #1
	str	r3, [r4, #504]
	bl	msecs_to_jiffies(PLT)
	ldr	r1, .L16254+12
	mov	r3, r0
	mov	r2, r6
	mov	r0, #4
.LPIC5084:
	ldr	r1, [pc, r1]		@ tls_load_dot_plus_eight
	ldr	r1, [r1]
	bl	queue_delayed_work_on(PLT)
	b	.L16241
.L16253:
	mov	r0, r6
	bl	cancel_delayed_work(PLT)
	ldr	r0, .L16254+16
	mov	r1, r5
	mov	r2, r5
.LPIC5080:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L16243
.L16255:
	.align	2
.L16254:
	.word	.LC960-(.LPIC5076+8)
	.word	.LANCHOR9-(.LPIC5078+8)
	.word	.LC961-(.LPIC5077+8)
	.word	system_wq(GOT_PREL)+(.-(.LPIC5084+8))
	.word	.LC962-(.LPIC5080+8)
	.fnend
	.size	schedule_usb_gadget_connect_work, .-schedule_usb_gadget_connect_work
	.align	2
	.type	usb30en_store, %function
usb30en_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-16]!
	.save {r4, r5, r6, lr}
	mov	r4, r3
	mov	r5, r2
	str	r6, [sp, #8]
	str	lr, [sp, #12]
	.pad #8
	sub	sp, sp, #8
	bl	dev_get_drvdata(PLT)
	mov	r6, r0
	bl	get_host_os_type(PLT)
	subs	r3, r0, #0
	beq	.L16276
	ldr	r1, .L16278
	mov	r0, r5
	add	r2, sp, #4
.LPIC5088:
	add	r1, pc, r1
	bl	sscanf(PLT)
	cmp	r0, #1
	bne	.L16259
	ldr	r3, [r6, #8]
	cmp	r3, #0
	beq	.L16259
	ldr	r5, .L16278+4
	ldr	r1, [sp, #4]
.LPIC5097:
	ldr	r5, [pc, r5]		@ tls_load_dot_plus_eight
	ldrb	r2, [r5]	@ zero_extendqisi2
	cmp	r2, r1
	bne	.L16260
	ldr	r1, .L16278+8
	mov	r3, r2
	ldr	r0, .L16278+12
.LPIC5090:
	add	r1, pc, r1
	sub	r1, r1, #1504
.LPIC5089:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
.L16258:
	add	sp, sp, #8
	@ sp needed
	ldrd	r4, [sp]
	ldr	r6, [sp, #8]
	add	sp, sp, #12
	ldr	pc, [sp], #4
.L16259:
	ldr	r1, .L16278+16
	ldr	r0, .L16278+20
.LPIC5096:
	add	r1, pc, r1
	sub	r1, r1, #1504
.LPIC5095:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mvn	r0, #0
	b	.L16258
.L16276:
	ldr	r2, .L16278+24
	ldr	r1, .L16278+28
	ldr	r0, .L16278+32
.LPIC5098:
	ldr	r2, [pc, r2]		@ tls_load_dot_plus_eight
.LPIC5087:
	add	r1, pc, r1
	sub	r1, r1, #1504
.LPIC5086:
	add	r0, pc, r0
	sub	r1, r1, #4
	strb	r3, [r2]
	bl	printk(PLT)
	mov	r0, r4
	b	.L16258
.L16260:
	strb	r1, [r5]
	ldr	r0, [r3]
	ldr	r2, [r0]
	ldr	r2, [r2, #20]
	cmp	r2, #0
	beq	.L16261
	mov	r1, #0
	blx	r2
	ldr	r3, [r6, #8]
.L16261:
	ldrb	r2, [r5]	@ zero_extendqisi2
	ldr	r0, [r3]
	cmp	r2, #0
	movne	r1, #5
	moveq	r1, #3
	bl	sec_set_speedlimit(PLT)
	ldr	r1, .L16278+36
	ldr	r0, .L16278+40
.LPIC5092:
	add	r1, pc, r1
	sub	r1, r1, #1504
.LPIC5091:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, #200
	bl	msleep(PLT)
	ldrb	r3, [r5]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L16277
	ldr	r3, [r6, #8]
	ldr	r0, [r3]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L16264
	mov	r1, #1
	blx	r3
.L16264:
	ldr	r1, .L16278+44
	ldr	r0, .L16278+48
.LPIC5094:
	add	r1, pc, r1
	sub	r1, r1, #1504
.LPIC5093:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	mov	r0, r4
	b	.L16258
.L16277:
	mov	r0, r6
	bl	schedule_usb_gadget_connect_work(PLT)
	b	.L16264
.L16279:
	.align	2
.L16278:
	.word	.LC256-(.LPIC5088+8)
	.word	usb30en(GOT_PREL)+(.-(.LPIC5097+8))
	.word	.LANCHOR9-(.LPIC5090+8)
	.word	.LC964-(.LPIC5089+8)
	.word	.LANCHOR9-(.LPIC5096+8)
	.word	.LC967-(.LPIC5095+8)
	.word	usb30en(GOT_PREL)+(.-(.LPIC5098+8))
	.word	.LANCHOR9-(.LPIC5087+8)
	.word	.LC963-(.LPIC5086+8)
	.word	.LANCHOR9-(.LPIC5092+8)
	.word	.LC965-(.LPIC5091+8)
	.word	.LANCHOR9-(.LPIC5094+8)
	.word	.LC966-(.LPIC5093+8)
	.fnend
	.size	usb30en_store, .-usb30en_store
	.align	2
	.type	enable_store, %function
enable_store:
	.fnstart
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	mov	r4, r3
	strd	r6, [sp, #8]
	mov	r6, r2
	strd	r10, [sp, #24]
	strd	r8, [sp, #16]
	str	lr, [sp, #32]
	.pad #60
	sub	sp, sp, #60
	bl	dev_get_drvdata(PLT)
	ldr	r10, [r0, #8]
	mov	r3, #0
	mov	r5, r0
	str	r3, [sp, #52]
	cmp	r10, r3
	mvneq	r0, #18
	bne	.L16346
.L16344:
	add	sp, sp, #60
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16346:
	add	r3, r5, #24
	mov	r0, r3
	str	r3, [sp, #12]
	bl	mutex_lock(PLT)
	ldr	r1, .L16358
	add	r2, sp, #52
	mov	r0, r6
.LPIC5101:
	add	r1, pc, r1
	bl	sscanf(PLT)
	ldr	r0, .L16358+4
	ldr	r1, [sp, #52]
	ldrb	r2, [r5, #16]	@ zero_extendqisi2
.LPIC5102:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r3, [sp, #52]
	cmp	r3, #0
	beq	.L16282
	ldrb	r3, [r5, #16]	@ zero_extendqisi2
	cmp	r3, #0
	beq	.L16347
	ldr	r0, .L16358+8
	ldr	r1, .L16358+12
.LPIC5139:
	add	r0, pc, r0
.LPIC5140:
	add	r1, pc, r1
	add	r0, r0, #3232
	sub	r1, r1, #1488
	add	r0, r0, #8
	sub	r1, r1, #4
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L16348
.L16316:
	ldr	r0, [sp, #12]
	bl	mutex_unlock(PLT)
	mov	r0, r4
	b	.L16344
.L16282:
	ldrb	r1, [r5, #16]	@ zero_extendqisi2
	cmp	r1, #0
	bne	.L16349
	ldr	r0, [r10]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L16317
	blx	r3
.L16317:
	mov	r3, #0
	strb	r3, [r5, #16]
	b	.L16316
.L16349:
	ldr	r1, [r5, #20]
	ldr	r8, [r5, #8]
	add	r3, r1, #1
	cmp	r1, #0
	str	r3, [r5, #20]
	bne	.L16350
	ldr	r0, [r8]
	ldr	r3, [r0]
	ldr	r3, [r3, #20]
	cmp	r3, #0
	beq	.L16306
	blx	r3
	ldr	r0, [r8]
.L16306:
	ldr	r0, [r0, #4]
	mov	r6, r5
	ldr	r1, [r8, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	ldr	r7, [r6, #508]!
	sub	r7, r7, #120
	b	.L16307
.L16308:
	bl	usb_remove_config(PLT)
	ldr	r7, [r7, #120]
	sub	r7, r7, #120
.L16307:
	add	r3, r7, #120
	mov	r1, r7
	cmp	r3, r6
	mov	r0, r8
	bne	.L16308
.L16309:
	ldr	r8, [r5, #508]
	sub	r8, r8, #120
.L16305:
	add	r3, r8, #120
	cmp	r3, r6
	beq	.L16317
	mov	r9, r8
	ldr	r7, [r9, #112]!
	cmp	r9, r7
	sub	r7, r7, #4
	beq	.L16311
.L16313:
	ldr	r0, [r7]
	ldr	r3, [r0, #36]
	cmp	r3, #0
	beq	.L16312
	blx	r3
.L16312:
	ldr	r7, [r7, #4]
	cmp	r9, r7
	sub	r7, r7, #4
	bne	.L16313
.L16311:
	ldr	r8, [r8, #120]
	sub	r8, r8, #120
	b	.L16305
.L16350:
	add	r6, r5, #508
	b	.L16309
.L16348:
	ldrb	r3, [r5, #16]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L16320
	ldr	r2, .L16358+16
.LPIC5100:
	add	r2, pc, r2
.L16318:
	ldr	r1, .L16358+20
	ldr	r0, .L16358+24
.LPIC5142:
	add	r1, pc, r1
	sub	r1, r1, #1488
.LPIC5141:
	add	r0, pc, r0
	sub	r1, r1, #4
	bl	printk(PLT)
	b	.L16316
.L16347:
	ldr	r3, .L16358+28
	mov	r2, #255
	mov	r6, r5
	ldr	ip, .L16358+32
	ldr	r7, .L16358+36
	ldr	r1, .L16358+40
.LPIC5112:
	add	r3, pc, r3
	ldr	r9, .L16358+44
.LPIC5118:
	add	ip, pc, ip
	str	r3, [sp, #16]
	ldr	r3, .L16358+48
.LPIC5103:
	add	r7, pc, r7
	str	ip, [sp, #24]
	ldr	ip, .L16358+52
.LPIC5105:
	add	r1, pc, r1
	sub	r0, r7, #928
.LPIC5113:
	add	r9, pc, r9
	sub	r9, r9, #1488
.LPIC5114:
	add	r3, pc, r3
	sub	r9, r9, #4
.LPIC5119:
	add	ip, pc, ip
	str	r3, [sp, #20]
	ldr	r3, [r7, #3632]
	str	ip, [sp, #28]
	ldr	ip, .L16358+56
	strb	r3, [r10, #48]
	ldr	r3, .L16358+60
.LPIC5117:
	add	ip, pc, ip
	str	ip, [sp, #32]
.LPIC5115:
	add	r3, pc, r3
	str	r3, [sp, #36]
	bl	strncpy(PLT)
	ldr	r1, .L16358+64
	mov	r2, #255
	sub	r0, r7, #1184
.LPIC5107:
	add	r1, pc, r1
	bl	strncpy(PLT)
	ldr	r2, .L16358+68
	ldr	r3, .L16358+72
.LPIC5116:
	add	r2, pc, r2
.LPIC5108:
	add	r3, pc, r3
	str	r2, [sp, #40]
	add	r2, r3, #392
	ldrb	r1, [r3, #396]	@ zero_extendqisi2
	ldrh	r3, [r2, #8]
	strh	r3, [r10, #25]	@ unaligned
	ldrh	r3, [r2, #10]
	strh	r3, [r10, #27]	@ unaligned
	ldrh	r3, [r2, #12]
	strb	r1, [r10, #21]
	strh	r3, [r10, #29]	@ unaligned
	ldr	r8, [r6, #508]!
	sub	r8, r8, #120
.L16284:
	add	r3, r8, #120
	cmp	r6, r3
	beq	.L16351
	mov	fp, r8
	ldr	r7, [fp, #112]!
	sub	r7, r7, #4
.L16285:
	add	r3, r7, #4
	cmp	r3, fp
	bne	.L16290
	ldr	r8, [r8, #120]
	sub	r8, r8, #120
	b	.L16284
.L16320:
	ldr	r2, .L16358+76
.LPIC5099:
	add	r2, pc, r2
	b	.L16318
.L16290:
	ldr	r3, [r7]
	mov	r1, r9
	ldr	r0, [sp, #16]
	ldr	r2, [r3]
	bl	printk(PLT)
	ldr	r3, [r7]
	ldr	r1, [sp, #20]
	ldr	r3, [r3]
	mov	r0, r3
	str	r3, [sp, #44]
	bl	strcmp(PLT)
	ldr	r3, [sp, #44]
	subs	r2, r0, #0
	ldr	r1, [sp, #24]
	mov	r0, r3
	beq	.L16352
	bl	strcmp(PLT)
	subs	r2, r0, #0
	bne	.L16288
	str	r2, [sp, #44]
	ldrh	r3, [r10, #29]	@ unaligned
	ldr	r0, [sp, #28]
	cmp	r3, #1024
	beq	.L16287
	bl	printk(PLT)
	ldr	r2, [sp, #44]
	mov	r3, #8
	strb	r3, [r10, #30]
	strb	r2, [r10, #29]
.L16288:
	ldr	r7, [r7, #4]
	sub	r7, r7, #4
	b	.L16285
.L16352:
	ldr	r0, [sp, #36]
	str	r2, [sp, #44]
	bl	printk(PLT)
	ldr	r2, [sp, #44]
	mov	r3, #4
	ldr	r1, [sp, #40]
	strb	r3, [r10, #30]
	strb	r2, [r10, #29]
	ldr	r3, [r7]
	ldr	r0, [r3]
	bl	strcmp(PLT)
	cmp	r0, #0
	bne	.L16288
.L16287:
	ldr	r0, [sp, #32]
	bl	printk(PLT)
	mov	r2, #0
	mov	r3, #12
	strb	r2, [r10, #29]
	strb	r3, [r10, #30]
	b	.L16288
.L16351:
	ldr	r7, .L16358+80
	mov	r2, #255
	ldr	r1, .L16358+84
.LPIC5120:
	add	r7, pc, r7
.LPIC5121:
	add	r1, pc, r1
	sub	r0, r7, #928
	bl	strncpy(PLT)
	ldr	r1, .L16358+88
	sub	r0, r7, #1184
	mov	r2, #255
	ldr	r7, .L16358+92
.LPIC5123:
	add	r1, pc, r1
	bl	strncpy(PLT)
	ldr	r1, .L16358+96
.LPIC5127:
	add	r7, pc, r7
	ldrh	lr, [r10, #29]	@ unaligned
	sub	r7, r7, #1488
	ldr	r0, .L16358+100
	sub	r7, r7, #4
	ldrh	r2, [r10, #25]	@ unaligned
.LPIC5124:
	add	r1, pc, r1
	ldrh	r3, [r10, #27]	@ unaligned
	ldrb	r8, [r1, #397]	@ zero_extendqisi2
	ldrb	r9, [r1, #398]	@ zero_extendqisi2
.LPIC5126:
	add	r0, pc, r0
	mov	r1, r7
	strb	r8, [r10, #22]
	strb	r9, [r10, #23]
	str	lr, [sp]
	bl	printk(PLT)
	ldr	r0, .L16358+104
	ldrb	r1, [r10, #21]	@ zero_extendqisi2
	ldrb	r2, [r10, #22]	@ zero_extendqisi2
	ldrb	r3, [r10, #23]	@ zero_extendqisi2
.LPIC5128:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r0, .L16358+108
	mov	r1, r7
.LPIC5129:
	add	r0, pc, r0
	bl	printk(PLT)
	ldr	r7, [r5, #508]
	sub	r7, r7, #120
.L16292:
	add	r3, r7, #120
	cmp	r6, r3
	beq	.L16353
	mov	r9, r7
	ldr	r8, [r9, #112]!
	sub	r8, r8, #4
.L16293:
	add	r3, r8, #4
	cmp	r3, r9
	beq	.L16354
	ldr	r0, [r8]
	ldr	r3, [r0, #32]
	cmp	r3, #0
	beq	.L16321
	blx	r3
.L16321:
	ldr	r8, [r8, #4]
	sub	r8, r8, #4
	b	.L16293
.L16354:
	ldr	r7, [r7, #120]
	sub	r7, r7, #120
	b	.L16292
.L16353:
	ldr	r3, [r5, #20]
	ldr	r8, [r5, #8]
	cmp	r3, #0
	beq	.L16355
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r5, #20]
	bne	.L16298
	ldr	r7, [r5, #508]
	ldr	r9, .L16358+112
	sub	r7, r7, #120
.LPIC5132:
	add	r9, pc, r9
.L16299:
	add	r3, r7, #120
	mov	r1, r7
	cmp	r6, r3
	mov	r0, r8
	mov	r2, r9
	beq	.L16356
	bl	usb_add_config(PLT)
	cmp	r0, #0
	blt	.L16357
	ldr	r7, [r7, #120]
	sub	r7, r7, #120
	b	.L16299
.L16355:
	ldr	r0, .L16358+116
	mov	r1, #500
.LPIC5131:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
.L16298:
	mov	r3, #1
	strb	r3, [r5, #16]
	b	.L16316
.L16356:
	mov	r0, r5
	bl	schedule_usb_gadget_connect_work(PLT)
	b	.L16298
.L16357:
	ldr	r6, .L16358+120
	mov	r3, r0
	ldr	r0, .L16358+124
.LPIC5134:
	add	r6, pc, r6
	sub	r1, r6, #1472
.LPIC5133:
	add	r0, pc, r0
	sub	r1, r1, #4
	mov	r2, r1
	bl	printk(PLT)
	ldr	r0, .L16358+128
	sub	r1, r6, #1488
	sub	r1, r1, #4
	mov	r2, r1
.LPIC5136:
	add	r0, pc, r0
	bl	printk(PLT)
	mov	r3, #0
	ldr	r0, [sp, #12]
	strb	r3, [r5, #48]
	strb	r3, [r5, #16]
	bl	mutex_unlock(PLT)
	mov	r0, r4
	b	.L16344
.L16359:
	.align	2
.L16358:
	.word	.LC256-(.LPIC5101+8)
	.word	.LC970-(.LPIC5102+8)
	.word	.LANCHOR2-(.LPIC5139+8)
	.word	.LANCHOR9-(.LPIC5140+8)
	.word	.LC969-(.LPIC5100+8)
	.word	.LANCHOR9-(.LPIC5142+8)
	.word	.LC983-(.LPIC5141+8)
	.word	.LC972-(.LPIC5112+8)
	.word	.LC548-(.LPIC5118+8)
	.word	.LANCHOR4-(.LPIC5103+8)
	.word	.LC476-(.LPIC5105+8)
	.word	.LANCHOR9-(.LPIC5113+8)
	.word	.LC973-(.LPIC5114+8)
	.word	.LC976-(.LPIC5119+8)
	.word	.LC975-(.LPIC5117+8)
	.word	.LC974-(.LPIC5115+8)
	.word	.LC971-(.LPIC5107+8)
	.word	.LC548-(.LPIC5116+8)
	.word	.LANCHOR2-(.LPIC5108+8)
	.word	.LC968-(.LPIC5099+8)
	.word	.LANCHOR4-(.LPIC5120+8)
	.word	.LC476-(.LPIC5121+8)
	.word	.LC971-(.LPIC5123+8)
	.word	.LANCHOR9-(.LPIC5127+8)
	.word	.LANCHOR2-(.LPIC5124+8)
	.word	.LC977-(.LPIC5126+8)
	.word	.LC978-(.LPIC5128+8)
	.word	.LC979-(.LPIC5129+8)
	.word	android_bind_config-(.LPIC5132+8)
	.word	.LC980-(.LPIC5131+8)
	.word	.LANCHOR9-(.LPIC5134+8)
	.word	.LC981-(.LPIC5133+8)
	.word	.LC982-(.LPIC5136+8)
	.fnend
	.size	enable_store, .-enable_store
	.align	2
	.type	ffs_function_disable, %function
ffs_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #4]
	ldr	r8, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L16372
.L16360:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16372:
	ldr	r3, [r8, #20]
	ldr	r6, [r8, #8]
	cmp	r3, r1
	beq	.L16373
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r8, #20]
	bne	.L16360
	mov	r5, r8
	ldr	r4, [r5, #508]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L16367
	ldr	r7, .L16375
.LPIC5144:
	add	r7, pc, r7
.L16366:
	mov	r0, r6
	mov	r1, r4
	mov	r2, r7
	bl	usb_add_config(PLT)
	cmp	r0, #0
	blt	.L16374
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L16366
.L16367:
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	schedule_usb_gadget_connect_work(PLT)
.L16373:
	ldr	r0, .L16375+4
	mov	r1, #500
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC5143:
	add	r0, pc, r0
	add	sp, sp, #24
	b	warn_slowpath_null(PLT)
.L16374:
	ldr	r1, .L16375+8
	mov	r3, r0
	ldr	r0, .L16375+12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC5146:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	sub	r1, r1, #1472
	ldr	lr, [sp, #20]
.LPIC5145:
	add	r0, pc, r0
	sub	r1, r1, #4
	add	sp, sp, #24
	mov	r2, r1
	b	printk(PLT)
.L16376:
	.align	2
.L16375:
	.word	android_bind_config-(.LPIC5144+8)
	.word	.LC980-(.LPIC5143+8)
	.word	.LANCHOR9-(.LPIC5146+8)
	.word	.LC981-(.LPIC5145+8)
	.fnend
	.size	ffs_function_disable, .-ffs_function_disable
	.align	2
	.type	adb_android_function_disable, %function
adb_android_function_disable:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-24]!
	.save {r4, r5, r6, r7, r8, lr}
	mov	r1, #0
	strd	r6, [sp, #8]
	str	r8, [sp, #16]
	str	lr, [sp, #20]
	ldr	r3, [r0, #4]
	ldr	r8, [r0, #20]
	ldrb	r2, [r3]	@ zero_extendqisi2
	strb	r1, [r3, #1]
	cmp	r2, r1
	beq	.L16389
.L16377:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	add	sp, sp, #20
	ldr	pc, [sp], #4
.L16389:
	ldr	r3, [r8, #20]
	ldr	r6, [r8, #8]
	cmp	r3, r1
	beq	.L16390
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r8, #20]
	bne	.L16377
	mov	r5, r8
	ldr	r4, [r5, #508]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L16384
	ldr	r7, .L16392
.LPIC5149:
	add	r7, pc, r7
.L16383:
	mov	r0, r6
	mov	r1, r4
	mov	r2, r7
	bl	usb_add_config(PLT)
	cmp	r0, #0
	blt	.L16391
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L16383
.L16384:
	mov	r0, r8
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
	add	sp, sp, #24
	b	schedule_usb_gadget_connect_work(PLT)
.L16390:
	ldr	r0, .L16392+4
	mov	r1, #500
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldr	r8, [sp, #16]
	ldr	lr, [sp, #20]
.LPIC5148:
	add	r0, pc, r0
	add	sp, sp, #24
	b	warn_slowpath_null(PLT)
.L16391:
	ldr	r1, .L16392+8
	mov	r3, r0
	ldr	r0, .L16392+12
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
.LPIC5151:
	add	r1, pc, r1
	ldr	r8, [sp, #16]
	sub	r1, r1, #1472
	ldr	lr, [sp, #20]
.LPIC5150:
	add	r0, pc, r0
	sub	r1, r1, #4
	add	sp, sp, #24
	mov	r2, r1
	b	printk(PLT)
.L16393:
	.align	2
.L16392:
	.word	android_bind_config-(.LPIC5149+8)
	.word	.LC980-(.LPIC5148+8)
	.word	.LANCHOR9-(.LPIC5151+8)
	.word	.LC981-(.LPIC5150+8)
	.fnend
	.size	adb_android_function_disable, .-adb_android_function_disable
	.align	2
	.type	adb_open, %function
adb_open:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, .L16423
	strd	r4, [sp, #-32]!
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r4, r1
	ldr	r0, .L16423+4
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	str	r10, [sp, #24]
.LPIC5154:
	add	r3, pc, r3
	str	lr, [sp, #28]
	sub	r1, r3, #1456
.LPIC5153:
	add	r0, pc, r0
	sub	r1, r1, #4
	add	r0, r0, #3264
	bl	___ratelimit(PLT)
	cmp	r0, #0
	bne	.L16419
.L16395:
	ldr	r1, .L16423+8
.LPIC5156:
	add	r1, pc, r1
	ldr	r3, [r1, #-1472]
	cmp	r3, #0
	beq	.L16409
	add	r2, r3, #116
#APP
@ 61 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
@ 63 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add_return
1:	ldrex	r5, [r2]
	add	r5, r5, #1
	strex	r0, r5, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
@ 73 "/root/lol//arch/arm/include/asm/atomic.h" 1
	dmb
@ 0 "" 2
	cmp	r5, #1
	beq	.L16397
#APP
@ 83 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r1, [r2]
	sub	r1, r1, #1
	strex	r0, r1, [r2]
	teq	r0, #0
	bne	1b
@ 0 "" 2
	mvn	r0, #15
.L16416:
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldr	r10, [sp, #24]
	add	sp, sp, #28
	ldr	pc, [sp], #4
.L16397:
	ldr	r3, [r1, #-1472]
	mov	r2, #0
	str	r3, [r4, #124]
	ldrb	r1, [r3, #161]	@ zero_extendqisi2
	str	r2, [r3, #104]
	cmp	r1, r2
	bne	.L16420
.L16408:
	mov	r2, #1
	mov	r0, #0
	strb	r2, [r3, #160]
	b	.L16416
.L16420:
	ldr	r1, .L16423+12
	strb	r2, [r3, #161]
.LPIC5157:
	add	r1, pc, r1
	ldr	r6, [r1, #1932]
	ldr	r4, [r1, #1916]
	cmp	r6, #0
	beq	.L16398
	add	r7, r6, #24
	mov	r0, r7
	bl	mutex_lock(PLT)
	ldrb	r3, [r4, #1]	@ zero_extendqisi2
	str	r6, [r4, #4]
	strb	r5, [r4]
	cmp	r3, #0
	beq	.L16401
	ldr	r3, [r6, #20]
	ldr	r8, [r6, #8]
	cmp	r3, #0
	beq	.L16421
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r6, #20]
	bne	.L16401
	mov	r5, r6
	ldr	r4, [r5, #508]!
	cmp	r5, r4
	sub	r4, r4, #120
	beq	.L16405
	ldr	r9, .L16423+16
.LPIC5160:
	add	r9, pc, r9
.L16404:
	mov	r0, r8
	mov	r1, r4
	mov	r2, r9
	bl	usb_add_config(PLT)
	cmp	r0, #0
	blt	.L16422
	ldr	r4, [r4, #120]
	cmp	r5, r4
	sub	r4, r4, #120
	bne	.L16404
.L16405:
	mov	r0, r6
	bl	schedule_usb_gadget_connect_work(PLT)
.L16401:
	mov	r0, r7
	bl	mutex_unlock(PLT)
	ldr	r3, .L16423+20
.LPIC5164:
	add	r3, pc, r3
	ldr	r3, [r3, #-1472]
	b	.L16408
.L16398:
	str	r6, [r4, #4]
	strb	r5, [r4]
	b	.L16408
.L16409:
	mvn	r0, #18
	b	.L16416
.L16421:
	ldr	r0, .L16423+24
	mov	r1, #500
.LPIC5159:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L16401
.L16419:
	ldr	r0, .L16423+28
.LPIC5155:
	add	r0, pc, r0
	bl	printk(PLT)
	b	.L16395
.L16422:
	ldr	r1, .L16423+32
	mov	r3, r0
	ldr	r0, .L16423+36
.LPIC5162:
	add	r1, pc, r1
	sub	r1, r1, #1472
.LPIC5161:
	add	r0, pc, r0
	sub	r1, r1, #4
	mov	r2, r1
	bl	printk(PLT)
	b	.L16401
.L16424:
	.align	2
.L16423:
	.word	.LANCHOR9-(.LPIC5154+8)
	.word	.LANCHOR2-(.LPIC5153+8)
	.word	.LANCHOR4-(.LPIC5156+8)
	.word	.LANCHOR0-(.LPIC5157+8)
	.word	android_bind_config-(.LPIC5160+8)
	.word	.LANCHOR4-(.LPIC5164+8)
	.word	.LC980-(.LPIC5159+8)
	.word	.LC984-(.LPIC5155+8)
	.word	.LANCHOR9-(.LPIC5162+8)
	.word	.LC981-(.LPIC5161+8)
	.fnend
	.size	adb_open, .-adb_open
	.align	2
	.type	ffs_ep0_write, %function
ffs_ep0_write:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	strd	r4, [sp, #-36]!
	.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
	strd	r6, [sp, #8]
	strd	r8, [sp, #16]
	strd	r10, [sp, #24]
	str	lr, [sp, #32]
	ldr	r4, [r0, #124]
	.pad #52
	sub	sp, sp, #52
	add	r5, r4, #96
#APP
@ 193 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	mov	r6, #0
.L16426:
#APP
@ 170 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r3, [r5]
	mov	ip, #0
	teq	r3, #2
	strexeq ip, r6, [r5]

@ 0 "" 2
	cmp	ip, #0
	bne	.L16426
#APP
@ 195 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #2
	beq	.L16501
	ldr	r3, [r0, #32]
	add	r6, r4, #4
	mov	r10, r2
	mov	r9, r1
	mov	r0, r6
	tst	r3, #2048
	bne	.L16579
	bl	mutex_lock_interruptible(PLT)
	subs	r7, r0, #0
	blt	.L16526
.L16432:
	ldr	r3, [r4, #92]
	cmp	r3, #1
	bls	.L16430
	cmp	r3, #2
	bne	.L16580
	add	fp, r4, #116
	mov	r0, fp
	bl	_raw_spin_lock_irq(PLT)
#APP
@ 193 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	mov	r7, #0
.L16484:
#APP
@ 170 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r3, [r5]
	mov	r8, #0
	teq	r3, #2
	strexeq r8, r7, [r5]

@ 0 "" 2
	cmp	r8, #0
	bne	.L16484
#APP
@ 195 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r3, #0
	beq	.L16486
	cmp	r3, #2
	bne	.L16581
	mov	r10, r8
.L16572:
	mvn	r7, #42
.L16487:
	mov	r0, fp
	bl	_raw_spin_unlock_irq(PLT)
.L16492:
	mov	r0, r10
	bl	kfree(PLT)
.L16429:
	mov	r0, r6
	bl	mutex_unlock(PLT)
.L16526:
	mov	r0, r7
	add	sp, sp, #52
	@ sp needed
	ldrd	r4, [sp]
	ldrd	r6, [sp, #8]
	ldrd	r8, [sp, #16]
	ldrd	r10, [sp, #24]
	add	sp, sp, #32
	ldr	pc, [sp], #4
.L16579:
	bl	mutex_trylock(PLT)
	cmp	r0, #0
	bne	.L16432
	mvn	r7, #10
	b	.L16526
.L16430:
	cmp	r10, #15
	bls	.L16504
	mov	r0, r9
	mov	r1, r10
	bl	ffs_prepare_buffer(PLT)
	cmn	r0, #4096
	mov	r5, r0
	movhi	r7, r0
	bhi	.L16429
	ldr	r3, [r4, #92]
	cmp	r3, #0
	bne	.L16434
	ldr	r0, .L16594
.LPIC5167:
	add	r0, pc, r0
	bl	printk(PLT)
	ldrb	r2, [r5, #2]	@ zero_extendqisi2
	ldrb	r0, [r5, #1]	@ zero_extendqisi2
	ldrb	r3, [r5]	@ zero_extendqisi2
	ldrb	r1, [r5, #3]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	orr	r2, r2, r0, asl #8
	orr	r3, r2, r3
	orr	r3, r3, r1, asl #24
	cmp	r3, #1
	bne	.L16435
	ldrb	r2, [r5, #6]	@ zero_extendqisi2
	ldrb	r0, [r5, #5]	@ zero_extendqisi2
	ldrb	r3, [r5, #4]	@ zero_extendqisi2
	ldrb	r1, [r5, #7]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	orr	r2, r2, r0, asl #8
	orr	r3, r2, r3
	orr	r3, r3, r1, asl #24
	cmp	r10, r3
	bne	.L16435
	ldrb	r8, [r5, #10]	@ zero_extendqisi2
	add	fp, r5, #16
	sub	r9, r10, #16
	ldrb	ip, [r5, #9]	@ zero_extendqisi2
	ldrb	r7, [r5, #14]	@ zero_extendqisi2
	ldrb	r0, [r5, #8]	@ zero_extendqisi2
	mov	r8, r8, asl #16
	ldrb	r2, [r5, #11]	@ zero_extendqisi2
	ldrb	r1, [r5, #13]	@ zero_extendqisi2
	orr	ip, r8, ip, asl #8
	mov	r7, r7, asl #16
	ldrb	r3, [r5, #12]	@ zero_extendqisi2
	ldrb	r8, [r5, #15]	@ zero_extendqisi2
	orr	r0, ip, r0
	orrs	r2, r0, r2, asl #24
	orr	r1, r7, r1, asl #8
	orr	r3, r1, r3
	str	r2, [sp, #8]
	orr	r8, r3, r8, asl #24
	beq	.L16505
	ldr	r3, .L16594+4
	mov	r0, r2
	str	r4, [sp]
	mov	r1, fp
	mov	r2, r9
.LPIC5168:
	add	r3, pc, r3
	bl	ffs_do_descs.constprop.151(PLT)
	subs	r7, r0, #0
	blt	.L16437
	add	fp, fp, r7
	rsb	r9, r7, r9
.L16436:
	cmp	r8, #0
	beq	.L16506
	ldr	r3, .L16594+8
	str	r4, [sp]
	mov	r0, r8
	mov	r1, fp
	mov	r2, r9
.LPIC5169:
	add	r3, pc, r3
	bl	ffs_do_descs.constprop.151(PLT)
	subs	ip, r0, #0
	blt	.L16507
	add	r2, ip, #8
	mov	r3, ip
.L16438:
	cmp	r9, r2
	bcc	.L16439
	ldrb	r2, [fp, r3]	@ zero_extendqisi2
	add	r1, fp, r3
	ldrb	lr, [r1, #1]	@ zero_extendqisi2
	ldrb	r0, [r1, #3]	@ zero_extendqisi2
	str	r2, [sp, #12]
	ldrb	r2, [r1, #2]	@ zero_extendqisi2
	movw	r1, #56924
	movt	r1, 85
	mov	r2, r2, asl #16
	orr	r2, r2, lr, asl #8
	ldr	lr, [sp, #12]
	orr	r2, r2, lr
	orr	r0, r2, r0, asl #24
	cmp	r0, r1
	bne	.L16435
	add	r2, r3, #4
	add	r0, fp, r2
	ldrb	r1, [fp, r2]	@ zero_extendqisi2
	ldrb	r2, [r0, #2]	@ zero_extendqisi2
	ldrb	lr, [r0, #1]	@ zero_extendqisi2
	ldrb	r0, [r0, #3]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	orr	r2, r2, lr, asl #8
	orr	r1, r2, r1
	orr	r2, r1, r0, asl #24
	ldr	r1, [sp, #8]
	str	r2, [sp, #12]
	orr	r1, r8, r1
	orrs	r2, r1, r2
	beq	.L16435
	ldr	r2, [sp, #12]
	sub	r9, r9, #8
	rsb	r9, r3, r9
	cmp	r2, #0
	beq	.L16441
	add	r1, r3, #8
	ldr	r3, .L16594+12
	mov	r0, r2
	str	r4, [sp]
	add	r1, fp, r1
	mov	r2, r9
	str	ip, [sp, #16]
.LPIC5170:
	add	r3, pc, r3
	bl	ffs_do_descs.constprop.151(PLT)
	cmp	r0, #0
	blt	.L16508
	cmp	r9, r0
	ldr	ip, [sp, #16]
	bne	.L16435
	add	r7, ip, r7
	str	r9, [r4, #160]
	add	r3, r7, #24
	add	r9, r9, r7
	str	r5, [r4, #144]
	str	r7, [r4, #152]
	str	r3, [r4, #156]
	ldr	r3, [sp, #8]
	str	r9, [r4, #148]
	str	r8, [r4, #168]
	str	r3, [r4, #164]
	ldr	r3, [sp, #12]
	str	r3, [r4, #172]
	b	.L16499
.L16580:
	mov	r0, r6
	mvn	r7, #76
	bl	mutex_unlock(PLT)
	b	.L16526
.L16434:
	ldr	r0, .L16594+16
.LPIC5171:
	add	r0, pc, r0
	bl	printk(PLT)
	ldrb	r2, [r5, #2]	@ zero_extendqisi2
	ldrb	r0, [r5, #1]	@ zero_extendqisi2
	ldrb	r3, [r5]	@ zero_extendqisi2
	ldrb	r1, [r5, #3]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	orr	r2, r2, r0, asl #8
	orr	r3, r2, r3
	orr	r3, r3, r1, asl #24
	cmp	r3, #2
	bne	.L16443
	ldrb	r2, [r5, #6]	@ zero_extendqisi2
	ldrb	r0, [r5, #5]	@ zero_extendqisi2
	ldrb	r3, [r5, #4]	@ zero_extendqisi2
	ldrb	r1, [r5, #7]	@ zero_extendqisi2
	mov	r2, r2, asl #16
	orr	r2, r2, r0, asl #8
	orr	r3, r2, r3
	orr	r3, r3, r1, asl #24
	cmp	r10, r3
	bne	.L16443
	ldrb	r3, [r5, #10]	@ zero_extendqisi2
	ldrb	r2, [r5, #9]	@ zero_extendqisi2
	ldrb	r8, [r5, #14]	@ zero_extendqisi2
	ldrb	r1, [r5, #8]	@ zero_extendqisi2
	mov	r3, r3, asl #16
	ldrb	r0, [r5, #13]	@ zero_extendqisi2
	ldrb	r7, [r5, #11]	@ zero_extendqisi2
	orr	r3, r3, r2, asl #8
	mov	r8, r8, asl #16
	ldrb	r2, [r5, #12]	@ zero_extendqisi2
	ldrb	r9, [r5, #15]	@ zero_extendqisi2
	orr	r3, r3, r1
	orr	r8, r8, r0, asl #8
	orrs	r7, r3, r7, asl #24
	orr	r3, r8, r2
	moveq	r2, #1
	movne	r2, #0
	orrs	r3, r3, r9, asl #24
	str	r3, [sp, #8]
	moveq	r3, #1
	movne	r3, #0
	cmp	r2, r3
	bne	.L16443
	ldrh	r3, [r4, #176]
	cmp	r7, r3
	str	r3, [sp, #16]
	bcc	.L16443
	cmp	r3, #0
	beq	.L16582
	ldr	r0, [sp, #8]
	mov	r1, #208
	ldr	r2, [sp, #16]
	add	r3, r0, #1
	mla	r2, r2, r0, r0
	add	r8, r3, r0, asl #1
	mov	r9, r3, asl #2
	mov	r8, r8, asl #2
	add	r2, r2, r0
	add	r0, r3, r2, asl #1
	mov	r0, r0, asl #2
	bl	__kmalloc(PLT)
	subs	r3, r0, #0
	str	r3, [sp, #12]
	beq	.L16583
	ldr	r1, [sp, #8]
	add	r0, r3, r9
	mov	r2, r3
	mov	r3, r0
.L16448:
	subs	r1, r1, #1
	str	r3, [r2], #4
	add	r3, r3, #8
	bne	.L16448
	ldr	r3, [sp, #12]
	sub	fp, r10, #16
	cmp	fp, #2
	add	ip, r3, r9
	add	r9, r3, r8
	add	r8, r5, #16
	str	r1, [ip, #-4]
	bls	.L16449
	add	r3, r0, #8
	str	r4, [sp, #20]
	mov	r4, r3
	mov	r3, r9
	str	r10, [sp, #24]
	mov	r9, r8
	mov	r8, r3
.L16450:
	ldrb	r0, [r9, #1]	@ zero_extendqisi2
	sub	fp, fp, #2
	ldrb	r1, [r9], #2	@ zero_extendqisi2
	str	r8, [r4, #-4]
	ldr	r10, [sp, #16]
	orr	r1, r1, r0, asl #8
	strh	r1, [r4, #-8]	@ movhi
	b	.L16452
.L16585:
	cmp	r10, #0
	beq	.L16451
	str	r9, [r8, #4]
	sub	r10, r10, #1
	add	r8, r8, #8
.L16451:
	subs	r7, r7, #1
	rsb	fp, r0, fp
	add	r0, r0, #1
	sub	fp, fp, #1
	add	r9, r9, r0
	beq	.L16584
.L16452:
	mov	r0, r9
	mov	r1, fp
	bl	strnlen(PLT)
	cmp	fp, r0
	bne	.L16585
.L16449:
	ldr	r0, [sp, #12]
	bl	kfree(PLT)
.L16443:
	mov	r0, r5
	mvn	r7, #21
	bl	kfree(PLT)
	b	.L16429
.L16486:
	mov	r10, r3
	mvn	r7, #2
	b	.L16487
.L16581:
	ldrsb	r3, [r4, #108]
	cmp	r3, #0
	blt	.L16488
	mov	r0, fp
	bl	_raw_spin_unlock_irq(PLT)
	ldrh	r3, [r4, #106]
	cmp	r3, #0
	mvneq	r7, #2
	beq	.L16429
	ldr	r3, [r4]
	mov	r1, #1
	mvn	r7, #50
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #24]
	blx	r3
	str	r8, [r4, #96]
	b	.L16429
.L16435:
	mvn	r7, #21
.L16437:
	mov	r0, r5
	bl	kfree(PLT)
	b	.L16429
.L16439:
	ldr	r2, [sp, #8]
	orrs	r2, r8, r2
	rsbne	r9, r3, r9
	beq	.L16435
.L16441:
	cmp	r9, #0
	bne	.L16435
	ldr	r3, [sp, #8]
	add	ip, ip, r7
	str	r9, [r4, #160]
	str	r5, [r4, #144]
	str	ip, [r4, #152]
	str	ip, [r4, #148]
	str	r3, [r4, #164]
	strd	r8, [r4, #168]
.L16499:
	mov	r3, #1
	mov	r0, r6
	mov	r7, r10
	str	r3, [r4, #92]
	bl	mutex_unlock(PLT)
	b	.L16526
.L16501:
	mvn	r7, #42
	b	.L16526
.L16504:
	mvn	r7, #21
	b	.L16429
.L16488:
	ldrh	r3, [r4, #114]
	mov	r0, fp
	cmp	r10, r3
	movcc	r7, r10
	movcs	r7, r3
	bl	_raw_spin_unlock_irq(PLT)
	mov	r1, r7
	mov	r0, r9
	bl	ffs_prepare_buffer(PLT)
	cmn	r0, #4096
	mov	r10, r0
	movhi	r7, r0
	bhi	.L16429
	mov	r0, fp
	bl	_raw_spin_lock_irq(PLT)
#APP
@ 193 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
.L16490:
#APP
@ 170 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	@ __cmpxchg4
	ldrex	r2, [r5]
	mov	r3, #0
	teq	r2, #2
	strexeq r3, r8, [r5]

@ 0 "" 2
	cmp	r3, #0
	bne	.L16490
#APP
@ 195 "/root/lol//arch/arm/include/asm/cmpxchg.h" 1
	dmb
@ 0 "" 2
	cmp	r2, #2
	beq	.L16572
	ldr	r5, [r4, #28]
	mov	r0, fp
	ldrh	r3, [r4, #114]
	ldrb	r2, [r5, #26]	@ zero_extendqisi2
	cmp	r7, r3
	movcs	r3, #0
	movcc	r3, #1
	bfi	r2, r3, #1, #1
	strb	r2, [r5, #26]
	bl	_raw_spin_unlock_irq(PLT)
	cmp	r10, #0
	str	r10, [r5]
	str	r7, [r5, #4]
	beq	.L16586
.L16493:
	ldr	r3, [r4]
	mov	r0, #0
	mov	r1, r5
	mov	r2, #32
	str	r0, [r4, #32]
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #16]
	blx	r3
	subs	r7, r0, #0
	blt	.L16492
	add	r0, r4, #32
	bl	wait_for_completion_interruptible(PLT)
	cmp	r0, #0
	bne	.L16587
	ldr	r7, [r4, #48]
	str	r0, [r4, #96]
	b	.L16492
.L16584:
	ldr	r3, [sp, #8]
	strb	r7, [r8]
	add	r8, r8, #8
	str	r7, [r8, #-4]
	subs	r3, r3, #1
	str	r3, [sp, #8]
	beq	.L16588
	cmp	fp, #2
	add	r4, r4, #8
	bhi	.L16450
	b	.L16449
.L16582:
	mov	r0, r5
	bl	kfree(PLT)
.L16445:
	ldrh	r9, [r4, #180]
	movw	r1, #32976
	mov	r0, r9, asl #6
	sub	r0, r0, r9, asl #3
	bl	__kmalloc(PLT)
	subs	r3, r0, #0
	str	r3, [sp, #8]
	beq	.L16463
	cmp	r9, #0
	beq	.L16454
	ldr	r3, [sp, #8]
	mov	r5, #1
	str	r6, [sp, #32]
	ldr	r7, .L16594+20
	str	r10, [sp, #36]
	add	r2, r3, #48
	mov	r8, r3
	ldr	r3, .L16594+24
.LPIC5173:
	add	r7, pc, r7
	str	r2, [sp, #12]
	ldr	r2, .L16594+28
	add	r7, r7, #4016
	add	r7, r7, #4
.LPIC5177:
	add	r3, pc, r3
	add	r3, r3, #920
.LPIC5172:
	add	r2, pc, r2
	str	r3, [sp, #28]
	str	r2, [sp, #16]
	ldr	r2, .L16594+32
.LPIC5174:
	add	r2, pc, r2
	str	r2, [sp, #20]
	ldr	r2, .L16594+36
.LPIC5176:
	add	r2, pc, r2
	str	r2, [sp, #24]
.L16498:
	mov	r0, r8
	ldr	r1, [sp, #16]
	mov	r2, r7
	str	r4, [r8, #36]
	bl	__mutex_init(PLT)
	ldr	r1, [sp, #20]
	add	r0, r8, #20
	mov	r2, r7
	bl	__init_waitqueue_head(PLT)
	ldr	r10, [sp, #12]
	mov	r2, r5
	ldr	r1, [sp, #24]
	mov	r0, r10
	bl	sprintf(PLT)
	ldr	r6, [r4, #192]
	mov	r1, r10
	ldr	r0, [r6, #60]
	ldr	r10, [r6, #616]
	bl	d_alloc_name(PLT)
	subs	fp, r0, #0
	beq	.L16570
	mov	r0, r6
	bl	new_inode(PLT)
	subs	r6, r0, #0
	beq	.L16456
	add	r0, sp, #40
	add	r5, r5, #1
	bl	current_kernel_time(PLT)
	bl	get_next_ino(PLT)
	str	r0, [r6, #40]
	ldrh	r0, [r10, #196]
	ldr	r1, [sp, #28]
	ldrd	r2, [sp, #40]
	strh	r0, [r6]	@ movhi
	ldr	r0, [r10, #200]
	cmp	r1, #0
	str	r0, [r6, #4]
	ldr	r0, [r10, #204]
	strd	r2, [r6, #52]
	strd	r2, [r6, #60]
	strd	r2, [r6, #68]
	movne	r3, r1
	mov	r1, r6
	str	r8, [r6, #328]
	strne	r3, [r6, #200]
	str	r0, [r6, #8]
	mov	r0, fp
	bl	d_instantiate(PLT)
	mov	r0, fp
	bl	d_rehash(PLT)
	cmn	r8, #44
	add	r8, r8, #56
	strne	fp, [r8, #-12]
	cmp	r9, r5
	bcs	.L16498
	ldr	r6, [sp, #32]
	ldr	r10, [sp, #36]
.L16454:
	ldr	r2, [sp, #8]
	mov	r3, #2
	mov	r0, r6
	str	r3, [r4, #92]
	str	r2, [r4, #208]
	bl	mutex_unlock(PLT)
	ldr	r3, .L16594+40
.LPIC5179:
	add	r3, pc, r3
	ldr	r5, [r3, #1984]
	ldr	r6, [r3, #1968]
	cmp	r5, #0
	beq	.L16509
	add	r8, r5, #24
	mov	r0, r8
	bl	mutex_lock(PLT)
	ldr	r3, [r4, #92]
	ldr	fp, [r5, #8]
	cmp	r3, #2
	beq	.L16589
.L16465:
	ldr	r0, .L16594+44
	movw	r1, #1461
	mvn	r7, #76
.LPIC5182:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
.L16467:
	mov	r0, r8
	bl	mutex_unlock(PLT)
.L16464:
	mov	r3, #3
	str	r3, [r4, #92]
	b	.L16526
.L16496:
	ldr	r0, [sp, #8]
	bl	kfree(PLT)
.L16463:
	mov	r3, #3
	mvn	r7, #11
	str	r3, [r4, #92]
	b	.L16429
.L16570:
	ldr	r6, [sp, #32]
.L16455:
	subs	r5, r5, #1
	beq	.L16496
	ldr	r7, [sp, #8]
	ldr	r3, [r7]
	cmp	r3, #1
	bne	.L16459
	ldr	r2, [r7, #24]
	add	r3, r7, #24
	cmp	r2, r3
	bne	.L16459
	mov	r8, #0
	b	.L16460
.L16590:
	ldr	r2, [r7, #24]
	add	r3, r7, #24
	cmp	r2, r3
	bne	.L16459
.L16460:
	ldr	r0, [r7, #44]
	cmp	r0, #0
	beq	.L16461
	bl	d_delete(PLT)
	ldr	r0, [r7, #44]
	bl	dput(PLT)
	str	r8, [r7, #44]
.L16461:
	subs	r5, r5, #1
	add	r7, r7, #56
	beq	.L16496
	ldr	r3, [r7]
	cmp	r3, #1
	beq	.L16590
.L16459:
#APP
@ 1539 "/root/lol//drivers/usb/gadget/f_fs.c" 1
	1:	.word 0xe7f001f2
.pushsection .rodata.str, "aMS", %progbits, 1
2:	.asciz "/root/lol//drivers/usb/gadget/f_fs.c"
.popsection
.pushsection __bug_table,"a"
3:	.word 1b, 2b
	.hword 1540, 0
.popsection
@ 0 "" 2
.L16456:
	mov	r0, fp
	ldr	r6, [sp, #32]
	bl	dput(PLT)
	b	.L16455
.L16505:
	mov	r7, r2
	b	.L16436
.L16506:
	mov	r3, r8
	mov	r2, #8
	mov	ip, r8
	b	.L16438
.L16507:
	mov	r7, ip
	b	.L16437
.L16583:
	mov	r0, r5
	mvn	r7, #11
	bl	kfree(PLT)
	b	.L16429
.L16586:
	movw	r3, #47806
	movt	r3, 57005
	str	r3, [r5]
	b	.L16493
.L16589:
	add	r9, r4, #128
	mov	r0, #1
	mov	r1, r9
	bl	_test_and_set_bit(PLT)
	cmp	r0, #0
	bne	.L16465
	mov	r0, fp
	ldrh	r1, [r4, #176]
	bl	usb_string_ids_n(PLT)
	subs	r7, r0, #0
	blt	.L16467
	ldr	r3, [fp]
	mov	r1, #208
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #8]
	blx	r3
	cmp	r0, #0
	str	r0, [r4, #28]
	beq	.L16510
	ldr	r3, .L16594+48
.LPIC5181:
	add	r3, pc, r3
	str	r3, [r0, #28]
	ldr	r3, [r4, #28]
	str	r4, [r3, #32]
	ldr	r0, [r4, #188]
	cmp	r0, #0
	beq	.L16471
	ldr	r3, [r0]
	cmp	r3, #0
	beq	.L16471
.L16473:
	ldr	r3, [r3, #4]
	ldr	r2, [r3, #4]
	cmp	r2, #0
	addne	r3, r3, #8
	movne	r2, r7
	beq	.L16475
.L16474:
	strb	r2, [r3, #-8]
	add	r3, r3, #8
	ldr	r1, [r3, #-4]
	add	r2, r2, #1
	cmp	r1, #0
	bne	.L16474
.L16475:
	ldr	r3, [r0, #4]!
	cmp	r3, #0
	bne	.L16473
.L16471:
	ldr	r2, [fp]
	mov	r3, r4
	str	r2, [r3], #84
#APP
@ 45 "/root/lol//arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r2, [r3]
	add	r2, r2, #1
	strex	r1, r2, [r3]
	teq	r1, #0
	bne	1b
@ 0 "" 2
	ldrb	r3, [r6, #1]	@ zero_extendqisi2
	mov	r2, #1
	strd	r4, [r6, #4]
	strb	r2, [r6]
	cmp	r3, #0
	bne	.L16591
.L16476:
	mov	r0, r8
	mov	r7, r10
	bl	mutex_unlock(PLT)
	mov	r1, r9
	mov	r0, #0
	bl	_set_bit(PLT)
	b	.L16526
.L16591:
	ldr	r3, [r5, #20]
	ldr	r6, [r5, #8]
	cmp	r3, #0
	beq	.L16592
	sub	r3, r3, #1
	cmp	r3, #0
	str	r3, [r5, #20]
	bne	.L16476
	mov	fp, r5
	ldr	r4, [fp, #508]!
	cmp	fp, r4
	sub	r4, r4, #120
	beq	.L16482
	ldr	r7, .L16594+52
.LPIC5184:
	add	r7, pc, r7
.L16481:
	mov	r0, r6
	mov	r1, r4
	mov	r2, r7
	bl	usb_add_config(PLT)
	cmp	r0, #0
	blt	.L16593
	ldr	r4, [r4, #120]
	cmp	fp, r4
	sub	r4, r4, #120
	bne	.L16481
.L16482:
	mov	r0, r5
	bl	schedule_usb_gadget_connect_work(PLT)
	b	.L16476
.L16587:
	ldr	r3, [r4]
	mov	r1, r5
	mvn	r7, #3
	ldr	r0, [r3, #4]
	ldr	r3, [r0, #8]
	ldr	r3, [r3, #20]
	blx	r3
	b	.L16492
.L16588:
	cmp	fp, #0
	ldr	r4, [sp, #20]
	ldr	r10, [sp, #24]
	bne	.L16449
	ldr	r3, [sp, #12]
	str	r5, [r4, #184]
	str	r3, [r4, #188]
	b	.L16445
.L16508:
	mov	r7, r0
	b	.L16437
.L16510:
	mvn	r7, #11
	b	.L16467
.L16593:
	ldr	r1, .L16594+56
	mov	r3, r0
	ldr	r0, .L16594+60
.LPIC5186:
	add	r1, pc, r1
	sub	r1, r1, #1472
.LPIC5185:
	add	r0, pc, r0
	sub	r1, r1, #4
	mov	r2, r1
	bl	printk(PLT)
	b	.L16476
.L16592:
	ldr	r0, .L16594+64
	mov	r1, #500
.LPIC5183:
	add	r0, pc, r0
	bl	warn_slowpath_null(PLT)
	b	.L16476
.L16509:
	mvn	r7, #18
	b	.L16464
.L16595:
	.align	2
.L16594:
	.word	.LC985-(.LPIC5167+8)
	.word	__ffs_data_do_entity-(.LPIC5168+8)
	.word	__ffs_data_do_entity-(.LPIC5169+8)
	.word	__ffs_data_do_entity-(.LPIC5170+8)
	.word	.LC986-(.LPIC5171+8)
	.word	.LANCHOR4-(.LPIC5173+8)
	.word	.LANCHOR6-(.LPIC5177+8)
	.word	.LC987-(.LPIC5172+8)
	.word	.LC988-(.LPIC5174+8)
	.word	.LC989-(.LPIC5176+8)
	.word	.LANCHOR0-(.LPIC5179+8)
	.word	.LC185-(.LPIC5182+8)
	.word	ffs_ep0_complete-(.LPIC5181+8)
	.word	android_bind_config-(.LPIC5184+8)
	.word	.LANCHOR9-(.LPIC5186+8)
	.word	.LC981-(.LPIC5185+8)
	.word	.LC980-(.LPIC5183+8)
	.fnend
	.size	ffs_ep0_write, .-ffs_ep0_write
	.global	terminal_mode_vendor_id
	.global	terminal_mode_version
	.global	diag_dload
	.global	conn_gadget_function
	.global	usb30en
	.global	speaker_output_terminal_desc
	.global	speaker_input_terminal_desc
	.global	uac1_ac_header_desc
	.global	uac1_ac_interface_desc
	.global	_rndis_qc
	.global	bam2bam_data_ports
	.global	rndis_ul_max_xfer_size_rcvd
	.global	rndis_ul_max_pkt_per_xfer_rcvd
	.global	mtp_ext_config_desc
	.global	mtp_tx_reqs
	.global	mtp_tx_req_len
	.global	mtp_rx_req_len
	.global	ghsuart_data_stats_ops
	.global	ghsuart_data_tx_intr_thld
	.global	ghsic_stats_ops
	.global	gdata_timestamp_ops
	.global	ghsic_data_tx_intr_thld
	.global	gctrl_dfile
	.global	gctrl_dent
	.global	gctrl_stats_ops
	.global	smd_ctrl_dfile
	.global	smd_ctrl_dent
	.global	gsmd_ctrl_stats_ops
	.global	online_clients
	.global	gbam_dent
	.global	gbam_stats_ops
	.global	bam2bam_ports
	.global	smd_pi
	.global	sport_info
	.global	gs_dent
	.global	debug_adb_ops
	.global	debug_rst_ops
	.global	dent_rmnet_mux
	.global	rmnet_mux_svlte_debug_stats_ops
	.global	debug_rmnet_sdio_stats_ops
	.global	sdio_rx_fctrl_dis_thld
	.global	sdio_rx_fctrl_en_thld
	.global	sdio_tx_pkt_drop_thld
	.global	dent_smd
	.global	rmnet_smd_debug_stats_ops
	.global	dent_diag
	.section	.rodata
	.align	3
.LANCHOR3 = . + 0
.LANCHOR9 = . + 8184
	.type	__func__.38471, %object
	.size	__func__.38471, 24
__func__.38471:
	.ascii	"usb_rmnet_mux_ctrl_open\000"
	.type	__func__.49264, %object
	.size	__func__.49264, 14
__func__.49264:
	.ascii	"gsmd_start_rx\000"
	.space	2
	.type	__func__.49945, %object
	.size	__func__.49945, 21
__func__.49945:
	.ascii	"gbam_stop_endless_rx\000"
	.space	3
	.type	__func__.49951, %object
	.size	__func__.49951, 21
__func__.49951:
	.ascii	"gbam_stop_endless_tx\000"
	.space	3
	.type	__func__.51553, %object
	.size	__func__.51553, 24
__func__.51553:
	.ascii	"ghsic_send_cpkt_tomodem\000"
	.type	__func__.56712, %object
	.size	__func__.56712, 13
__func__.56712:
	.ascii	"ecm_qc_setup\000"
	.space	3
	.type	__func__.57029, %object
	.size	__func__.57029, 21
__func__.57029:
	.ascii	"mbim_ep0out_complete\000"
	.space	3
	.type	__func__.57290, %object
	.size	__func__.57290, 25
__func__.57290:
	.ascii	"bam_data_stop_endless_rx\000"
	.space	3
	.type	__func__.57296, %object
	.size	__func__.57296, 25
__func__.57296:
	.ascii	"bam_data_stop_endless_tx\000"
	.space	3
	.type	__func__.57674, %object
	.size	__func__.57674, 27
__func__.57674:
	.ascii	"rndis_qc_response_complete\000"
	.space	1
	.type	__func__.57666, %object
	.size	__func__.57666, 28
__func__.57666:
	.ascii	"rndis_qc_response_available\000"
	.type	__func__.61601, %object
	.size	__func__.61601, 21
__func__.61601:
	.ascii	"f_audio_buffer_alloc\000"
	.space	3
	.type	__func__.61771, %object
	.size	__func__.61771, 23
__func__.61771:
	.ascii	"audio_set_endpoint_req\000"
	.space	1
	.type	__func__.61847, %object
	.size	__func__.61847, 14
__func__.61847:
	.ascii	"f_audio_setup\000"
	.space	2
	.type	__func__.62909, %object
	.size	__func__.62909, 10
__func__.62909:
	.ascii	"ncm_setup\000"
	.space	2
	.type	__func__.62865, %object
	.size	__func__.62865, 22
__func__.62865:
	.ascii	"ncm_setdgram_complete\000"
	.space	2
	.type	__func__.63979, %object
	.size	__func__.63979, 31
__func__.63979:
	.ascii	"android_bind_enabled_functions\000"
	.space	1
	.type	__func__.64024, %object
	.size	__func__.64024, 24
__func__.64024:
	.ascii	"android_enable_function\000"
	.type	__func__.63864, %object
	.size	__func__.63864, 23
__func__.63864:
	.ascii	"sua_version_info_store\000"
	.space	1
	.type	__func__.57805, %object
	.size	__func__.57805, 21
__func__.57805:
	.ascii	"rndis_qc_release_dev\000"
	.space	3
	.type	__func__.57795, %object
	.size	__func__.57795, 18
__func__.57795:
	.ascii	"rndis_qc_open_dev\000"
	.space	2
	.type	__func__.38898, %object
	.size	__func__.38898, 23
__func__.38898:
	.ascii	"frmnet_notify_complete\000"
	.space	1
	.type	__func__.57080, %object
	.size	__func__.57080, 17
__func__.57080:
	.ascii	"mbim_ctrlrequest\000"
	.space	3
	.type	__func__.57192, %object
	.size	__func__.57192, 13
__func__.57192:
	.ascii	"mbim_release\000"
	.space	3
	.type	__func__.49068, %object
	.size	__func__.49068, 16
__func__.49068:
	.ascii	"gsdio_open_work\000"
	.type	dirletter.46785, %object
	.size	dirletter.46785, 4
dirletter.46785:
	.byte	117
	.byte	111
	.byte	105
	.byte	110
	.type	__func__.63854, %object
	.size	__func__.63854, 22
__func__.63854:
	.ascii	"sua_version_info_show\000"
	.space	2
	.type	__func__.52540, %object
	.size	__func__.52540, 26
__func__.52540:
	.ascii	"ghsuart_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.48976, %object
	.size	__func__.48976, 21
__func__.48976:
	.ascii	"gsdio_write_complete\000"
	.space	3
	.type	__func__.49044, %object
	.size	__func__.49044, 24
__func__.49044:
	.ascii	"gsdio_ctrl_notify_modem\000"
	.type	__func__.61650, %object
	.size	__func__.61650, 29
__func__.61650:
	.ascii	"f_audio_playback_ep_complete\000"
	.space	3
	.type	__func__.61672, %object
	.size	__func__.61672, 28
__func__.61672:
	.ascii	"f_audio_capture_ep_complete\000"
	.type	__func__.61689, %object
	.size	__func__.61689, 17
__func__.61689:
	.ascii	"f_audio_complete\000"
	.space	3
	.type	__func__.53047, %object
	.size	__func__.53047, 19
__func__.53047:
	.ascii	"ghsuart_data_probe\000"
	.space	1
	.type	__func__.50342, %object
	.size	__func__.50342, 24
__func__.50342:
	.ascii	"grmnet_ctrl_smd_write_w\000"
	.type	__func__.50314, %object
	.size	__func__.50314, 23
__func__.50314:
	.ascii	"grmnet_ctrl_smd_read_w\000"
	.space	1
	.type	__func__.54948, %object
	.size	__func__.54948, 16
__func__.54948:
	.ascii	"mtp_ctrlrequest\000"
	.type	__func__.37392, %object
	.size	__func__.37392, 24
__func__.37392:
	.ascii	"rmnet_sdio_data_rx_work\000"
	.type	__func__.49812, %object
	.size	__func__.49812, 23
__func__.49812:
	.ascii	"gbam_write_data_tohost\000"
	.space	1
	.type	__func__.49879, %object
	.size	__func__.49879, 19
__func__.49879:
	.ascii	"gbam_epin_complete\000"
	.space	1
	.type	__func__.52877, %object
	.size	__func__.52877, 25
__func__.52877:
	.ascii	"ghsuart_data_write_tomdm\000"
	.space	3
	.type	__func__.52920, %object
	.size	__func__.52920, 22
__func__.52920:
	.ascii	"ghsuart_data_start_rx\000"
	.space	2
	.type	__func__.50411, %object
	.size	__func__.50411, 26
__func__.50411:
	.ascii	"grmnet_ctrl_smd_connect_w\000"
	.space	2
	.type	__func__.49925, %object
	.size	__func__.49925, 14
__func__.49925:
	.ascii	"gbam_start_rx\000"
	.space	2
	.type	__func__.49894, %object
	.size	__func__.49894, 20
__func__.49894:
	.ascii	"gbam_epout_complete\000"
	.type	__func__.57821, %object
	.size	__func__.57821, 15
__func__.57821:
	.ascii	"rndis_qc_ioctl\000"
	.space	1
	.type	__func__.57200, %object
	.size	__func__.57200, 11
__func__.57200:
	.ascii	"mbim_ioctl\000"
	.space	1
	.type	__func__.38494, %object
	.size	__func__.38494, 24
__func__.38494:
	.ascii	"usb_rmnet_mux_ctrl_read\000"
	.type	__func__.38517, %object
	.size	__func__.38517, 25
__func__.38517:
	.ascii	"usb_rmnet_mux_ctrl_write\000"
	.space	3
	.type	audio_hw_info, %object
	.size	audio_hw_info, 64
audio_hw_info:
	.word	65811
	.space	4
	.word	4
	.word	0
	.space	4
	.word	44100
	.word	44100
	.word	2
	.word	2
	.word	1048576
	.word	64
	.word	524288
	.word	2
	.word	1024
	.space	8
	.type	__func__.49319, %object
	.size	__func__.49319, 13
__func__.49319:
	.ascii	"gsmd_tx_pull\000"
	.space	3
	.type	__func__.49286, %object
	.size	__func__.49286, 13
__func__.49286:
	.ascii	"gsmd_rx_push\000"
	.space	3
	.type	__func__.64217, %object
	.size	__func__.64217, 11
__func__.64217:
	.ascii	"state_show\000"
	.space	1
	.type	__func__.64132, %object
	.size	__func__.64132, 12
__func__.64132:
	.ascii	"enable_show\000"
	.type	__func__.51639, %object
	.size	__func__.51639, 18
__func__.51639:
	.ascii	"ghsic_ctrl_remove\000"
	.space	2
	.type	__func__.49402, %object
	.size	__func__.49402, 18
__func__.49402:
	.ascii	"gsmd_notify_modem\000"
	.space	2
	.type	__func__.50078, %object
	.size	__func__.50078, 19
__func__.50078:
	.ascii	"gbam_peer_reset_cb\000"
	.space	1
	.type	__func__.49933, %object
	.size	__func__.49933, 22
__func__.49933:
	.ascii	"gbam_start_endless_rx\000"
	.space	2
	.type	__func__.49939, %object
	.size	__func__.49939, 22
__func__.49939:
	.ascii	"gbam_start_endless_tx\000"
	.space	2
	.type	__func__.57303, %object
	.size	__func__.57303, 23
__func__.57303:
	.ascii	"bam_data_peer_reset_cb\000"
	.space	1
	.type	__func__.57836, %object
	.size	__func__.57836, 14
__func__.57836:
	.ascii	"rndis_qc_init\000"
	.space	2
	.type	__func__.38538, %object
	.size	__func__.38538, 27
__func__.38538:
	.ascii	"rmnet_mux_ctrl_device_init\000"
	.space	1
	.type	__func__.57841, %object
	.size	__func__.57841, 17
__func__.57841:
	.ascii	"rndis_qc_cleanup\000"
	.space	3
	.type	__func__.57228, %object
	.size	__func__.57228, 14
__func__.57228:
	.ascii	"fmbim_cleanup\000"
	.space	2
	.type	__func__.58044, %object
	.size	__func__.58044, 12
__func__.58044:
	.ascii	"tx_complete\000"
	.type	__func__.56403, %object
	.size	__func__.56403, 13
__func__.56403:
	.ascii	"rndis_rm_hdr\000"
	.space	3
	.type	__func__.62652, %object
	.size	__func__.62652, 29
__func__.62652:
	.ascii	"conn_gadget_function_cleanup\000"
	.space	3
	.type	__func__.62643, %object
	.size	__func__.62643, 20
__func__.62643:
	.ascii	"conn_gadget_cleanup\000"
	.type	__func__.62648, %object
	.size	__func__.62648, 26
__func__.62648:
	.ascii	"conn_gadget_function_init\000"
	.space	2
	.type	__func__.62590, %object
	.size	__func__.62590, 18
__func__.62590:
	.ascii	"conn_gadget_setup\000"
	.space	2
	.type	__func__.62610, %object
	.size	__func__.62610, 34
__func__.62610:
	.ascii	"conn_gadget_usb_buffer_size_store\000"
	.space	2
	.type	__func__.63844, %object
	.size	__func__.63844, 27
__func__.63844:
	.ascii	"mass_storage_product_store\000"
	.space	1
	.type	__func__.63827, %object
	.size	__func__.63827, 26
__func__.63827:
	.ascii	"mass_storage_vendor_store\000"
	.space	2
	.type	__func__.62957, %object
	.size	__func__.62957, 13
__func__.62957:
	.ascii	"ncm_wrap_ntb\000"
	.space	3
	.type	__func__.63039, %object
	.size	__func__.63039, 9
__func__.63039:
	.ascii	"ncm_work\000"
	.space	3
	.type	__func__.64373, %object
	.size	__func__.64373, 11
__func__.64373:
	.ascii	"macos_show\000"
	.space	1
	.type	__func__.64363, %object
	.size	__func__.64363, 23
__func__.64363:
	.ascii	"ss_host_available_show\000"
	.space	1
	.type	__func__.64511, %object
	.size	__func__.64511, 21
__func__.64511:
	.ascii	"alloc_android_config\000"
	.space	3
	.type	__func__.64115, %object
	.size	__func__.64115, 16
__func__.64115:
	.ascii	"functions_store\000"
	.type	__func__.63153, %object
	.size	__func__.63153, 13
__func__.63153:
	.ascii	"android_work\000"
	.space	3
	.type	__func__.46341, %object
	.size	__func__.46341, 13
__func__.46341:
	.ascii	"send_message\000"
	.space	3
	.type	__func__.48966, %object
	.size	__func__.48966, 20
__func__.48966:
	.ascii	"gsdio_read_complete\000"
	.type	__func__.49035, %object
	.size	__func__.49035, 14
__func__.49035:
	.ascii	"gsdio_ctrl_wq\000"
	.space	2
	.type	__func__.50714, %object
	.size	__func__.50714, 16
__func__.50714:
	.ascii	"rmnet_ctrl_poll\000"
	.type	__func__.51560, %object
	.size	__func__.51560, 25
__func__.51560:
	.ascii	"ghsic_send_cbits_tomodem\000"
	.space	3
	.type	__func__.52549, %object
	.size	__func__.52549, 27
__func__.52549:
	.ascii	"ghsuart_send_cbits_tomodem\000"
	.space	1
	.type	__func__.57382, %object
	.size	__func__.57382, 17
__func__.57382:
	.ascii	"bam_data_wake_cb\000"
	.space	3
	.type	__func__.38862, %object
	.size	__func__.38862, 15
__func__.38862:
	.ascii	"frmnet_connect\000"
	.space	1
	.type	__func__.38869, %object
	.size	__func__.38869, 18
__func__.38869:
	.ascii	"frmnet_disconnect\000"
	.space	2
	.type	__func__.38889, %object
	.size	__func__.38889, 20
__func__.38889:
	.ascii	"frmnet_cmd_complete\000"
	.type	__func__.57184, %object
	.size	__func__.57184, 10
__func__.57184:
	.ascii	"mbim_open\000"
	.space	2
	.type	__func__.62633, %object
	.size	__func__.62633, 36
__func__.62633:
	.ascii	"conn_gadget_in_max_packet_size_show\000"
	.type	__func__.62621, %object
	.size	__func__.62621, 37
__func__.62621:
	.ascii	"conn_gadget_out_max_packet_size_show\000"
	.space	3
	.type	__func__.62600, %object
	.size	__func__.62600, 33
__func__.62600:
	.ascii	"conn_gadget_usb_buffer_size_show\000"
	.space	3
	.type	__func__.63089, %object
	.size	__func__.63089, 22
__func__.63089:
	.ascii	"terminal_version_show\000"
	.space	2
	.type	__func__.51572, %object
	.size	__func__.51572, 21
__func__.51572:
	.ascii	"ghsic_ctrl_connect_w\000"
	.space	3
	.type	__func__.58219, %object
	.size	__func__.58219, 12
__func__.58219:
	.ascii	"gether_init\000"
	.type	__func__.50371, %object
	.size	__func__.50371, 29
__func__.50371:
	.ascii	"gsmd_ctrl_send_cbits_tomodem\000"
	.space	3
	.type	__func__.64576, %object
	.size	__func__.64576, 5
__func__.64576:
	.ascii	"init\000"
	.space	3
	.type	__func__.62483, %object
	.size	__func__.62483, 18
__func__.62483:
	.ascii	"conn_gadget_flush\000"
	.space	2
	.type	__func__.52862, %object
	.size	__func__.52862, 26
__func__.52862:
	.ascii	"ghsuart_data_write_tohost\000"
	.space	2
	.type	__func__.63162, %object
	.size	__func__.63162, 24
__func__.63162:
	.ascii	"usb_gadget_connect_work\000"
	.type	__func__.49091, %object
	.size	__func__.49091, 15
__func__.49091:
	.ascii	"gsdio_ch_probe\000"
	.space	1
	.type	__func__.49385, %object
	.size	__func__.49385, 18
__func__.49385:
	.ascii	"gsmd_connect_work\000"
	.space	2
	.type	__func__.50015, %object
	.size	__func__.50015, 25
__func__.50015:
	.ascii	"gbam2bam_disconnect_work\000"
	.space	3
	.type	__func__.57312, %object
	.size	__func__.57312, 29
__func__.57312:
	.ascii	"bam2bam_data_disconnect_work\000"
	.space	3
	.type	__func__.63047, %object
	.size	__func__.63047, 18
__func__.63047:
	.ascii	"ncm_function_init\000"
	.space	2
	.type	__func__.52101, %object
	.size	__func__.52101, 21
__func__.52101:
	.ascii	"ghsic_data_connect_w\000"
	.space	3
	.type	__func__.52557, %object
	.size	__func__.52557, 23
__func__.52557:
	.ascii	"ghsuart_ctrl_connect_w\000"
	.space	1
	.type	__func__.53019, %object
	.size	__func__.53019, 23
__func__.53019:
	.ascii	"ghsuart_data_connect_w\000"
	.space	1
	.type	__func__.57213, %object
	.size	__func__.57213, 10
__func__.57213:
	.ascii	"mbim_init\000"
	.space	2
	.type	oid_supported_list, %object
	.size	oid_supported_list, 112
oid_supported_list:
	.word	65793
	.word	65794
	.word	65795
	.word	65796
	.word	65798
	.word	65799
	.word	65802
	.word	65803
	.word	65804
	.word	65805
	.word	65814
	.word	65806
	.word	65809
	.word	65812
	.word	66050
	.word	131329
	.word	131330
	.word	131331
	.word	131332
	.word	131333
	.word	16843009
	.word	16843010
	.word	16843011
	.word	16843013
	.word	16843012
	.word	16908545
	.word	16908546
	.word	16908547
	.type	__func__.56172, %object
	.size	__func__.56172, 20
__func__.56172:
	.ascii	"gen_ndis_query_resp\000"
	.type	__func__.54021, %object
	.size	__func__.54021, 22
__func__.54021:
	.ascii	"ccid_ctrl_device_init\000"
	.space	2
	.type	__func__.54032, %object
	.size	__func__.54032, 11
__func__.54032:
	.ascii	"ccid_setup\000"
	.space	1
	.type	__func__.53965, %object
	.size	__func__.53965, 22
__func__.53965:
	.ascii	"ccid_bulk_device_init\000"
	.space	2
	.type	__func__.53072, %object
	.size	__func__.53072, 33
__func__.53072:
	.ascii	"ghsuart_send_controlbits_tomodem\000"
	.space	3
	.type	__func__.50357, %object
	.size	__func__.50357, 34
__func__.50357:
	.ascii	"grmnet_ctrl_smd_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.38878, %object
	.size	__func__.38878, 26
__func__.38878:
	.ascii	"frmnet_send_cpkt_response\000"
	.space	2
	.type	__func__.61870, %object
	.size	__func__.61870, 16
__func__.61870:
	.ascii	"f_audio_set_alt\000"
	.type	__func__.52138, %object
	.size	__func__.52138, 17
__func__.52138:
	.ascii	"ghsic_data_probe\000"
	.space	3
	.type	__func__.51627, %object
	.size	__func__.51627, 17
__func__.51627:
	.ascii	"ghsic_ctrl_probe\000"
	.space	3
	.type	__func__.53057, %object
	.size	__func__.53057, 20
__func__.53057:
	.ascii	"ghsuart_data_remove\000"
	.type	__func__.52146, %object
	.size	__func__.52146, 18
__func__.52146:
	.ascii	"ghsic_data_remove\000"
	.space	2
	.type	__func__.49334, %object
	.size	__func__.49334, 19
__func__.49334:
	.ascii	"gsmd_read_complete\000"
	.space	1
	.type	__func__.49340, %object
	.size	__func__.49340, 20
__func__.49340:
	.ascii	"gsmd_write_complete\000"
	.type	__func__.57278, %object
	.size	__func__.57278, 26
__func__.57278:
	.ascii	"bam_data_start_endless_rx\000"
	.space	2
	.type	__func__.57284, %object
	.size	__func__.57284, 26
__func__.57284:
	.ascii	"bam_data_start_endless_tx\000"
	.space	2
	.type	__func__.57016, %object
	.size	__func__.57016, 21
__func__.57016:
	.ascii	"mbim_notify_complete\000"
	.space	3
	.type	__func__.57006, %object
	.size	__func__.57006, 15
__func__.57006:
	.ascii	"mbim_do_notify\000"
	.space	1
	.type	__func__.51979, %object
	.size	__func__.51979, 24
__func__.51979:
	.ascii	"ghsic_data_write_tohost\000"
	.type	__func__.52008, %object
	.size	__func__.52008, 23
__func__.52008:
	.ascii	"ghsic_data_write_tomdm\000"
	.space	1
	.type	__func__.52057, %object
	.size	__func__.52057, 20
__func__.52057:
	.ascii	"ghsic_data_start_rx\000"
	.type	__func__.62523, %object
	.size	__func__.62523, 18
__func__.62523:
	.ascii	"conn_gadget_ioctl\000"
	.space	2
	.type	__func__.62512, %object
	.size	__func__.62512, 37
__func__.62512:
	.ascii	"conn_gadget_bind_status_copy_to_user\000"
	.space	3
	.type	__func__.37416, %object
	.size	__func__.37416, 26
__func__.37416:
	.ascii	"rmnet_sdio_complete_epout\000"
	.space	2
	.type	__func__.50594, %object
	.size	__func__.50594, 24
__func__.50594:
	.ascii	"rmnet_ctrl_queue_notify\000"
	.type	__func__.57051, %object
	.size	__func__.57051, 11
__func__.57051:
	.ascii	"mbim_setup\000"
	.space	1
	.type	__func__.25421, %object
	.size	__func__.25421, 21
__func__.25421:
	.ascii	"composite_disconnect\000"
	.space	3
	.type	__func__.37338, %object
	.size	__func__.37338, 20
__func__.37338:
	.ascii	"rmnet_sdio_start_rx\000"
	.type	__func__.37561, %object
	.size	__func__.37561, 21
__func__.37561:
	.ascii	"rmnet_open_sdio_work\000"
	.space	3
	.type	__func__.57143, %object
	.size	__func__.57143, 10
__func__.57143:
	.ascii	"mbim_read\000"
	.space	2
	.type	__func__.46435, %object
	.size	__func__.46435, 10
__func__.46435:
	.ascii	"fsg_setup\000"
	.space	2
	.type	__func__.50042, %object
	.size	__func__.50042, 22
__func__.50042:
	.ascii	"gbam2bam_connect_work\000"
	.space	2
	.type	__func__.38346, %object
	.size	__func__.38346, 16
__func__.38346:
	.ascii	"transport_store\000"
	.type	__func__.49241, %object
	.size	__func__.49241, 15
__func__.49241:
	.ascii	"gsmd_alloc_req\000"
	.space	1
	.type	__func__.49345, %object
	.size	__func__.49345, 14
__func__.49345:
	.ascii	"gsmd_start_io\000"
	.space	2
	.type	__func__.50028, %object
	.size	__func__.50028, 18
__func__.50028:
	.ascii	"gbam_connect_work\000"
	.space	2
	.type	__func__.49969, %object
	.size	__func__.49969, 14
__func__.49969:
	.ascii	"gbam_start_io\000"
	.space	2
	.type	__func__.53942, %object
	.size	__func__.53942, 16
__func__.53942:
	.ascii	"ccid_bulk_write\000"
	.type	__func__.46457, %object
	.size	__func__.46457, 18
__func__.46457:
	.ascii	"start_in_transfer\000"
	.space	2
	.type	__func__.46462, %object
	.size	__func__.46462, 19
__func__.46462:
	.ascii	"start_out_transfer\000"
	.space	1
	.type	__func__.64417, %object
	.size	__func__.64417, 19
__func__.64417:
	.ascii	"android_usb_unbind\000"
	.space	1
	.type	__func__.55416, %object
	.size	__func__.55416, 16
__func__.55416:
	.ascii	"acc_ctrlrequest\000"
	.type	__func__.57038, %object
	.size	__func__.57038, 19
__func__.57038:
	.ascii	"fmbim_cmd_complete\000"
	.space	1
	.type	__func__.50606, %object
	.size	__func__.50606, 34
__func__.50606:
	.ascii	"grmnet_ctrl_qti_send_cpkt_tomodem\000"
	.space	2
	.type	__func__.38199, %object
	.size	__func__.38199, 27
__func__.38199:
	.ascii	"rmnet_mux_command_complete\000"
	.space	1
	.type	__func__.53912, %object
	.size	__func__.53912, 15
__func__.53912:
	.ascii	"ccid_bulk_read\000"
	.space	1
	.type	__func__.58014, %object
	.size	__func__.58014, 13
__func__.58014:
	.ascii	"process_rx_w\000"
	.space	3
	.type	f_midi_cin_length, %object
	.size	f_midi_cin_length, 16
f_midi_cin_length:
	.byte	0
	.byte	0
	.byte	2
	.byte	3
	.byte	3
	.byte	1
	.byte	2
	.byte	3
	.byte	3
	.byte	3
	.byte	3
	.byte	3
	.byte	2
	.byte	2
	.byte	3
	.byte	1
	.type	__func__.57179, %object
	.size	__func__.57179, 11
__func__.57179:
	.ascii	"mbim_write\000"
	.space	1
	.type	__func__.56943, %object
	.size	__func__.56943, 25
__func__.56943:
	.ascii	"fmbim_send_cpkt_response\000"
	.space	3
	.type	__func__.56933, %object
	.size	__func__.56933, 30
__func__.56933:
	.ascii	"fmbim_ctrl_response_available\000"
	.space	2
	.type	__func__.37500, %object
	.size	__func__.37500, 22
__func__.37500:
	.ascii	"rmnet_close_sdio_work\000"
	.space	2
	.type	__func__.25073, %object
	.size	__func__.25073, 11
__func__.25073:
	.ascii	"config_buf\000"
	.space	1
	.type	__func__.25164, %object
	.size	__func__.25164, 11
__func__.25164:
	.ascii	"set_config\000"
	.space	1
	.type	__func__.25381, %object
	.size	__func__.25381, 16
__func__.25381:
	.ascii	"composite_setup\000"
	.type	__func__.37572, %object
	.size	__func__.37572, 19
__func__.37572:
	.ascii	"rmnet_sdio_set_alt\000"
	.space	1
	.type	__func__.53855, %object
	.size	__func__.53855, 22
__func__.53855:
	.ascii	"ccid_function_set_alt\000"
	.space	2
	.type	__func__.62657, %object
	.size	__func__.62657, 33
__func__.62657:
	.ascii	"conn_gadget_function_bind_config\000"
	.space	3
	.type	__func__.56768, %object
	.size	__func__.56768, 12
__func__.56768:
	.ascii	"ecm_qc_bind\000"
	.type	__func__.57118, %object
	.size	__func__.57118, 10
__func__.57118:
	.ascii	"mbim_bind\000"
	.space	2
	.type	__func__.61902, %object
	.size	__func__.61902, 13
__func__.61902:
	.ascii	"f_audio_bind\000"
	.space	3
	.type	__func__.53879, %object
	.size	__func__.53879, 19
__func__.53879:
	.ascii	"ccid_function_bind\000"
	.space	1
	.type	__func__.25225, %object
	.size	__func__.25225, 18
__func__.25225:
	.ascii	"usb_remove_config\000"
	.space	2
	.type	__func__.53613, %object
	.size	__func__.53613, 12
__func__.53613:
	.ascii	"adb_release\000"
	.type	__func__.63300, %object
	.size	__func__.63300, 20
__func__.63300:
	.ascii	"adb_closed_callback\000"
	.type	__func__.63257, %object
	.size	__func__.63257, 27
__func__.63257:
	.ascii	"functionfs_closed_callback\000"
	.space	1
	.type	__func__.45446, %object
	.size	__func__.45446, 13
__func__.45446:
	.ascii	"ffs_data_put\000"
	.space	3
	.type	__func__.25457, %object
	.size	__func__.25457, 15
__func__.25457:
	.ascii	"composite_bind\000"
	.space	1
	.type	__func__.64405, %object
	.size	__func__.64405, 13
__func__.64405:
	.ascii	"android_bind\000"
	.space	3
	.type	__func__.63953, %object
	.size	__func__.63953, 23
__func__.63953:
	.ascii	"android_init_functions\000"
	.space	1
	.type	longname, %object
	.size	longname, 15
longname:
	.ascii	"Gadget Android\000"
	.space	1
	.type	__func__.63578, %object
	.size	__func__.63578, 26
__func__.63578:
	.ascii	"qdss_function_bind_config\000"
	.space	2
	.type	__func__.64541, %object
	.size	__func__.64541, 14
__func__.64541:
	.ascii	"android_probe\000"
	.space	2
	.type	__func__.63103, %object
	.size	__func__.63103, 26
__func__.63103:
	.ascii	"create_terminal_attribute\000"
	.space	2
	.type	__func__.25501, %object
	.size	__func__.25501, 29
__func__.25501:
	.ascii	"usb_composite_setup_continue\000"
	.space	3
	.type	__func__.46937, %object
	.size	__func__.46937, 17
__func__.46937:
	.ascii	"handle_exception\000"
	.space	3
	.type	__func__.46867, %object
	.size	__func__.46867, 17
__func__.46867:
	.ascii	"get_next_command\000"
	.space	3
	.type	__func__.46349, %object
	.size	__func__.46349, 14
__func__.46349:
	.ascii	"do_timer_stop\000"
	.space	2
	.type	__func__.46353, %object
	.size	__func__.46353, 15
__func__.46353:
	.ascii	"do_timer_reset\000"
	.space	1
	.type	__func__.46360, %object
	.size	__func__.46360, 17
__func__.46360:
	.ascii	"get_version_info\000"
	.space	3
	.type	__func__.46756, %object
	.size	__func__.46756, 13
__func__.46756:
	.ascii	"finish_reply\000"
	.space	3
	.type	__func__.25982, %object
	.size	__func__.25982, 14
__func__.25982:
	.ascii	"usb_diag_read\000"
	.space	2
	.type	__func__.26000, %object
	.size	__func__.26000, 15
__func__.26000:
	.ascii	"usb_diag_write\000"
	.space	1
	.type	__func__.63561, %object
	.size	__func__.63561, 26
__func__.63561:
	.ascii	"diag_function_bind_config\000"
	.space	2
	.type	__func__.30923, %object
	.size	__func__.30923, 25
__func__.30923:
	.ascii	"usb_qdss_disconnect_work\000"
	.space	3
	.type	__func__.38951, %object
	.size	__func__.38951, 12
__func__.38951:
	.ascii	"frmnet_bind\000"
	.type	__func__.48002, %object
	.size	__func__.48002, 12
__func__.48002:
	.ascii	"gs_start_tx\000"
	.type	__func__.48064, %object
	.size	__func__.48064, 18
__func__.48064:
	.ascii	"gs_write_complete\000"
	.space	2
	.type	__func__.48102, %object
	.size	__func__.48102, 12
__func__.48102:
	.ascii	"gs_start_io\000"
	.type	__func__.48281, %object
	.size	__func__.48281, 14
__func__.48281:
	.ascii	"gserial_setup\000"
	.space	2
	.type	__func__.48889, %object
	.size	__func__.48889, 16
__func__.48889:
	.ascii	"gsdio_alloc_req\000"
	.type	__func__.48921, %object
	.size	__func__.48921, 15
__func__.48921:
	.ascii	"gsdio_start_rx\000"
	.space	1
	.type	__func__.48938, %object
	.size	__func__.48938, 12
__func__.48938:
	.ascii	"gsdio_write\000"
	.type	__func__.48948, %object
	.size	__func__.48948, 14
__func__.48948:
	.ascii	"gsdio_rx_push\000"
	.space	2
	.type	__func__.48990, %object
	.size	__func__.48990, 19
__func__.48990:
	.ascii	"gsdio_read_pending\000"
	.space	1
	.type	__func__.49001, %object
	.size	__func__.49001, 14
__func__.49001:
	.ascii	"gsdio_tx_pull\000"
	.space	2
	.type	__func__.49019, %object
	.size	__func__.49019, 15
__func__.49019:
	.ascii	"gsdio_start_io\000"
	.space	1
	.type	__func__.49028, %object
	.size	__func__.49028, 16
__func__.49028:
	.ascii	"gsdio_port_free\000"
	.type	__func__.49102, %object
	.size	__func__.49102, 17
__func__.49102:
	.ascii	"gsdio_port_alloc\000"
	.space	3
	.type	__func__.49115, %object
	.size	__func__.49115, 14
__func__.49115:
	.ascii	"gsdio_connect\000"
	.space	2
	.type	__func__.49125, %object
	.size	__func__.49125, 17
__func__.49125:
	.ascii	"gsdio_disconnect\000"
	.space	3
	.type	__func__.49182, %object
	.size	__func__.49182, 12
__func__.49182:
	.ascii	"gsdio_setup\000"
	.type	__func__.49411, %object
	.size	__func__.49411, 13
__func__.49411:
	.ascii	"gsmd_connect\000"
	.space	3
	.type	__func__.49421, %object
	.size	__func__.49421, 16
__func__.49421:
	.ascii	"gsmd_disconnect\000"
	.type	__func__.49518, %object
	.size	__func__.49518, 11
__func__.49518:
	.ascii	"gsmd_setup\000"
	.space	1
	.type	__func__.49830, %object
	.size	__func__.49830, 18
__func__.49830:
	.ascii	"gbam_data_recv_cb\000"
	.space	2
	.type	__func__.50198, %object
	.size	__func__.50198, 16
__func__.50198:
	.ascii	"gbam_disconnect\000"
	.type	__func__.50213, %object
	.size	__func__.50213, 13
__func__.50213:
	.ascii	"gbam_connect\000"
	.space	3
	.type	__func__.50223, %object
	.size	__func__.50223, 11
__func__.50223:
	.ascii	"gbam_setup\000"
	.space	1
	.type	__func__.38799, %object
	.size	__func__.38799, 15
__func__.38799:
	.ascii	"frmnet_suspend\000"
	.space	1
	.type	__func__.38814, %object
	.size	__func__.38814, 14
__func__.38814:
	.ascii	"frmnet_resume\000"
	.space	2
	.type	__func__.50422, %object
	.size	__func__.50422, 18
__func__.50422:
	.ascii	"gsmd_ctrl_connect\000"
	.space	2
	.type	__func__.50443, %object
	.size	__func__.50443, 21
__func__.50443:
	.ascii	"gsmd_ctrl_disconnect\000"
	.space	3
	.type	__func__.50506, %object
	.size	__func__.50506, 16
__func__.50506:
	.ascii	"gsmd_ctrl_setup\000"
	.type	__func__.50621, %object
	.size	__func__.50621, 18
__func__.50621:
	.ascii	"gqti_ctrl_connect\000"
	.space	2
	.type	__func__.50631, %object
	.size	__func__.50631, 21
__func__.50631:
	.ascii	"gqti_ctrl_disconnect\000"
	.space	3
	.type	__func__.51584, %object
	.size	__func__.51584, 19
__func__.51584:
	.ascii	"ghsic_ctrl_connect\000"
	.space	1
	.type	__func__.51602, %object
	.size	__func__.51602, 22
__func__.51602:
	.ascii	"ghsic_ctrl_disconnect\000"
	.space	2
	.type	__func__.51665, %object
	.size	__func__.51665, 25
__func__.51665:
	.ascii	"ghsic_ctrl_set_port_name\000"
	.space	3
	.type	__func__.51674, %object
	.size	__func__.51674, 17
__func__.51674:
	.ascii	"ghsic_ctrl_setup\000"
	.space	3
	.type	__func__.51656, %object
	.size	__func__.51656, 17
__func__.51656:
	.ascii	"gctrl_port_alloc\000"
	.space	3
	.type	__func__.52172, %object
	.size	__func__.52172, 22
__func__.52172:
	.ascii	"ghsic_data_disconnect\000"
	.space	2
	.type	__func__.52188, %object
	.size	__func__.52188, 19
__func__.52188:
	.ascii	"ghsic_data_connect\000"
	.space	1
	.type	__func__.52323, %object
	.size	__func__.52323, 25
__func__.52323:
	.ascii	"ghsic_data_set_port_name\000"
	.space	3
	.type	__func__.52332, %object
	.size	__func__.52332, 17
__func__.52332:
	.ascii	"ghsic_data_setup\000"
	.space	3
	.type	__func__.52159, %object
	.size	__func__.52159, 22
__func__.52159:
	.ascii	"ghsic_data_port_alloc\000"
	.space	2
	.type	__func__.52565, %object
	.size	__func__.52565, 21
__func__.52565:
	.ascii	"ghsuart_ctrl_connect\000"
	.space	3
	.type	__func__.52582, %object
	.size	__func__.52582, 24
__func__.52582:
	.ascii	"ghsuart_ctrl_disconnect\000"
	.type	__func__.52630, %object
	.size	__func__.52630, 19
__func__.52630:
	.ascii	"ghsuart_ctrl_setup\000"
	.space	1
	.type	__func__.52618, %object
	.size	__func__.52618, 24
__func__.52618:
	.ascii	"ghsuart_ctrl_port_alloc\000"
	.type	__func__.53095, %object
	.size	__func__.53095, 24
__func__.53095:
	.ascii	"ghsuart_data_disconnect\000"
	.type	__func__.38757, %object
	.size	__func__.38757, 23
__func__.38757:
	.ascii	"gport_rmnet_disconnect\000"
	.space	1
	.type	__func__.53114, %object
	.size	__func__.53114, 21
__func__.53114:
	.ascii	"ghsuart_data_connect\000"
	.space	3
	.type	__func__.38837, %object
	.size	__func__.38837, 15
__func__.38837:
	.ascii	"frmnet_set_alt\000"
	.space	1
	.type	__func__.38735, %object
	.size	__func__.38735, 20
__func__.38735:
	.ascii	"gport_rmnet_connect\000"
	.type	__func__.53196, %object
	.size	__func__.53196, 19
__func__.53196:
	.ascii	"ghsuart_data_setup\000"
	.space	1
	.type	__func__.53080, %object
	.size	__func__.53080, 24
__func__.53080:
	.ascii	"ghsuart_data_port_alloc\000"
	.type	__func__.38984, %object
	.size	__func__.38984, 17
__func__.38984:
	.ascii	"frmnet_init_port\000"
	.space	3
	.type	__func__.38964, %object
	.size	__func__.38964, 19
__func__.38964:
	.ascii	"frmnet_bind_config\000"
	.space	1
	.type	__func__.63407, %object
	.size	__func__.63407, 27
__func__.63407:
	.ascii	"rmnet_function_bind_config\000"
	.space	1
	.type	__func__.63341, %object
	.size	__func__.63341, 25
__func__.63341:
	.ascii	"acm_function_bind_config\000"
	.space	3
	.type	__func__.57760, %object
	.size	__func__.57760, 14
__func__.57760:
	.ascii	"rndis_qc_bind\000"
	.space	2
	.type	__func__.57709, %object
	.size	__func__.57709, 15
__func__.57709:
	.ascii	"rndis_qc_setup\000"
	.space	1
	.type	__func__.56221, %object
	.size	__func__.56221, 18
__func__.56221:
	.ascii	"gen_ndis_set_resp\000"
	.space	2
	.type	__func__.56301, %object
	.size	__func__.56301, 17
__func__.56301:
	.ascii	"rndis_msg_parser\000"
	.space	3
	.type	__func__.57688, %object
	.size	__func__.57688, 26
__func__.57688:
	.ascii	"rndis_qc_command_complete\000"
	.space	2
	.type	__func__.57325, %object
	.size	__func__.57325, 26
__func__.57325:
	.ascii	"bam2bam_data_connect_work\000"
	.space	2
	.type	__func__.56957, %object
	.size	__func__.56957, 22
__func__.56957:
	.ascii	"mbim_configure_params\000"
	.space	2
	.type	__func__.57345, %object
	.size	__func__.57345, 20
__func__.57345:
	.ascii	"bam_data_disconnect\000"
	.type	__func__.57101, %object
	.size	__func__.57101, 13
__func__.57101:
	.ascii	"mbim_disable\000"
	.space	3
	.type	__func__.56970, %object
	.size	__func__.56970, 20
__func__.56970:
	.ascii	"mbim_bam_disconnect\000"
	.type	__func__.57357, %object
	.size	__func__.57357, 17
__func__.57357:
	.ascii	"bam_data_connect\000"
	.space	3
	.type	__func__.57090, %object
	.size	__func__.57090, 13
__func__.57090:
	.ascii	"mbim_set_alt\000"
	.space	3
	.type	__func__.56966, %object
	.size	__func__.56966, 17
__func__.56966:
	.ascii	"mbim_bam_connect\000"
	.space	3
	.type	__func__.57369, %object
	.size	__func__.57369, 15
__func__.57369:
	.ascii	"bam_data_setup\000"
	.space	1
	.type	__func__.57132, %object
	.size	__func__.57132, 17
__func__.57132:
	.ascii	"mbim_bind_config\000"
	.space	3
	.type	__func__.56951, %object
	.size	__func__.56951, 15
__func__.56951:
	.ascii	"mbim_bam_setup\000"
	.space	1
	.type	__func__.57105, %object
	.size	__func__.57105, 13
__func__.57105:
	.ascii	"mbim_suspend\000"
	.space	3
	.type	__func__.57109, %object
	.size	__func__.57109, 12
__func__.57109:
	.ascii	"mbim_resume\000"
	.type	__func__.57634, %object
	.size	__func__.57634, 19
__func__.57634:
	.ascii	"rndis_qc_bam_setup\000"
	.space	1
	.type	__func__.57787, %object
	.size	__func__.57787, 28
__func__.57787:
	.ascii	"rndis_qc_bind_config_vendor\000"
	.type	__func__.63647, %object
	.size	__func__.63647, 27
__func__.63647:
	.ascii	"rndis_function_bind_config\000"
	.space	1
	.type	__func__.63763, %object
	.size	__func__.63763, 25
__func__.63763:
	.ascii	"ecm_function_bind_config\000"
	.space	3
	.type	__func__.58193, %object
	.size	__func__.58193, 15
__func__.58193:
	.ascii	"gether_connect\000"
	.space	1
	.type	__func__.62925, %object
	.size	__func__.62925, 12
__func__.62925:
	.ascii	"ncm_set_alt\000"
	.type	__func__.56657, %object
	.size	__func__.56657, 17
__func__.56657:
	.ascii	"ecm_qc_bam_setup\000"
	.space	3
	.type	__func__.56782, %object
	.size	__func__.56782, 19
__func__.56782:
	.ascii	"ecm_qc_bind_config\000"
	.space	1
	.type	__func__.63654, %object
	.size	__func__.63654, 30
__func__.63654:
	.ascii	"rndis_qc_function_bind_config\000"
	.space	2
	.type	__func__.63458, %object
	.size	__func__.63458, 28
__func__.63458:
	.ascii	"ecm_qc_function_bind_config\000"
	.type	__func__.56667, %object
	.size	__func__.56667, 19
__func__.56667:
	.ascii	"ecm_qc_bam_connect\000"
	.space	1
	.type	__func__.57728, %object
	.size	__func__.57728, 17
__func__.57728:
	.ascii	"rndis_qc_disable\000"
	.space	3
	.type	__func__.57643, %object
	.size	__func__.57643, 21
__func__.57643:
	.ascii	"rndis_qc_bam_connect\000"
	.space	3
	.type	__func__.61395, %object
	.size	__func__.61395, 20
__func__.61395:
	.ascii	"gaudio_open_streams\000"
	.type	__func__.61368, %object
	.size	__func__.61368, 24
__func__.61368:
	.ascii	"playback_prepare_params\000"
	.type	__func__.61379, %object
	.size	__func__.61379, 23
__func__.61379:
	.ascii	"capture_prepare_params\000"
	.space	1
	.type	__func__.61660, %object
	.size	__func__.61660, 21
__func__.61660:
	.ascii	"f_audio_capture_work\000"
	.space	3
	.type	__func__.61425, %object
	.size	__func__.61425, 16
__func__.61425:
	.ascii	"u_audio_capture\000"
	.type	__func__.61640, %object
	.size	__func__.61640, 22
__func__.61640:
	.ascii	"f_audio_playback_work\000"
	.space	2
	.type	__func__.61411, %object
	.size	__func__.61411, 17
__func__.61411:
	.ascii	"u_audio_playback\000"
	.space	3
	.type	__func__.61449, %object
	.size	__func__.61449, 20
__func__.61449:
	.ascii	"gaudio_open_snd_dev\000"
	.type	__func__.61460, %object
	.size	__func__.61460, 13
__func__.61460:
	.ascii	"gaudio_setup\000"
	.space	3
	.type	__func__.61931, %object
	.size	__func__.61931, 18
__func__.61931:
	.ascii	"audio_bind_config\000"
	.space	2
	.type	__func__.62372, %object
	.size	__func__.62372, 24
__func__.62372:
	.ascii	"conn_gadget_complete_in\000"
	.type	__func__.62400, %object
	.size	__func__.62400, 34
__func__.62400:
	.ascii	"conn_gadget_create_bulk_endpoints\000"
	.space	2
	.type	__func__.62344, %object
	.size	__func__.62344, 27
__func__.62344:
	.ascii	"conn_gadget_request_ep_out\000"
	.space	1
	.type	__func__.62568, %object
	.size	__func__.62568, 29
__func__.62568:
	.ascii	"conn_gadget_function_set_alt\000"
	.space	3
	.type	__func__.62477, %object
	.size	__func__.62477, 17
__func__.62477:
	.ascii	"conn_gadget_open\000"
	.space	3
	.type	__func__.62463, %object
	.size	__func__.62463, 18
__func__.62463:
	.ascii	"conn_gadget_write\000"
	.space	2
	.type	__func__.62428, %object
	.size	__func__.62428, 17
__func__.62428:
	.ascii	"conn_gadget_read\000"
	.space	3
	.type	__func__.62380, %object
	.size	__func__.62380, 25
__func__.62380:
	.ascii	"conn_gadget_complete_out\000"
	.space	3
	.type	__func__.62414, %object
	.size	__func__.62414, 17
__func__.62414:
	.ascii	"conn_gadget_poll\000"
	.space	3
	.type	__func__.63059, %object
	.size	__func__.63059, 25
__func__.63059:
	.ascii	"ncm_function_bind_config\000"
	.space	3
	.type	__func__.63074, %object
	.size	__func__.63074, 13
__func__.63074:
	.ascii	"is_ncm_ready\000"
	.space	3
	.type	__func__.63078, %object
	.size	__func__.63078, 26
__func__.63078:
	.ascii	"set_ncm_device_descriptor\000"
	.space	2
	.type	__func__.63082, %object
	.size	__func__.63082, 14
__func__.63082:
	.ascii	"set_ncm_ready\000"
	.space	2
	.type	__func__.63097, %object
	.size	__func__.63097, 23
__func__.63097:
	.ascii	"terminal_version_store\000"
	.space	1
	.type	__func__.63111, %object
	.size	__func__.63111, 22
__func__.63111:
	.ascii	"terminal_ctrl_request\000"
	.space	2
	.type	__func__.63167, %object
	.size	__func__.63167, 33
__func__.63167:
	.ascii	"schedule_usb_gadget_connect_work\000"
	.space	3
	.type	__func__.64353, %object
	.size	__func__.64353, 14
__func__.64353:
	.ascii	"usb30en_store\000"
	.space	2
	.type	__func__.64156, %object
	.size	__func__.64156, 13
__func__.64156:
	.ascii	"enable_store\000"
	.space	3
	.type	__func__.63180, %object
	.size	__func__.63180, 15
__func__.63180:
	.ascii	"android_enable\000"
	.space	1
	.type	__func__.53606, %object
	.size	__func__.53606, 9
__func__.53606:
	.ascii	"adb_open\000"
	.space	3
	.type	mirrorlink_shortname, %object
	.size	mirrorlink_shortname, 8
mirrorlink_shortname:
	.ascii	"usb_ncm\000"
	.type	conn_gadget_shortname, %object
	.size	conn_gadget_shortname, 17
conn_gadget_shortname:
	.ascii	"android_ssusbcon\000"
	.space	3
	.type	__param_str_audio_capture_buf_size, %object
	.size	__param_str_audio_capture_buf_size, 31
__param_str_audio_capture_buf_size:
	.ascii	"android.audio_capture_buf_size\000"
	.space	1
	.type	__param_str_req_capture_count, %object
	.size	__param_str_req_capture_count, 26
__param_str_req_capture_count:
	.ascii	"android.req_capture_count\000"
	.space	2
	.type	__param_str_req_capture_buf_size, %object
	.size	__param_str_req_capture_buf_size, 29
__param_str_req_capture_buf_size:
	.ascii	"android.req_capture_buf_size\000"
	.space	3
	.type	__param_str_audio_playback_buf_size, %object
	.size	__param_str_audio_playback_buf_size, 32
__param_str_audio_playback_buf_size:
	.ascii	"android.audio_playback_buf_size\000"
	.type	__param_str_req_playback_count, %object
	.size	__param_str_req_playback_count, 27
__param_str_req_playback_count:
	.ascii	"android.req_playback_count\000"
	.space	1
	.type	__param_str_req_playback_buf_size, %object
	.size	__param_str_req_playback_buf_size, 30
__param_str_req_playback_buf_size:
	.ascii	"android.req_playback_buf_size\000"
	.space	2
	.type	__param_str_fn_cntl, %object
	.size	__param_str_fn_cntl, 16
__param_str_fn_cntl:
	.ascii	"android.fn_cntl\000"
	.type	__param_str_fn_cap, %object
	.size	__param_str_fn_cap, 15
__param_str_fn_cap:
	.ascii	"android.fn_cap\000"
	.space	1
	.type	__param_str_fn_play, %object
	.size	__param_str_fn_play, 16
__param_str_fn_play:
	.ascii	"android.fn_play\000"
	.type	__param_str_qc_host_addr, %object
	.size	__param_str_qc_host_addr, 21
__param_str_qc_host_addr:
	.ascii	"android.qc_host_addr\000"
	.space	3
	.type	__param_str_qc_dev_addr, %object
	.size	__param_str_qc_dev_addr, 20
__param_str_qc_dev_addr:
	.ascii	"android.qc_dev_addr\000"
	.type	__param_str_host_addr, %object
	.size	__param_str_host_addr, 18
__param_str_host_addr:
	.ascii	"android.host_addr\000"
	.space	2
	.type	__param_str_dev_addr, %object
	.size	__param_str_dev_addr, 17
__param_str_dev_addr:
	.ascii	"android.dev_addr\000"
	.space	3
	.type	__param_str_qmult, %object
	.size	__param_str_qmult, 14
__param_str_qmult:
	.ascii	"android.qmult\000"
	.space	2
	.type	__param_str_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_str_rndis_ul_max_xfer_size_rcvd, 36
__param_str_rndis_ul_max_xfer_size_rcvd:
	.ascii	"android.rndis_ul_max_xfer_size_rcvd\000"
	.type	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer_rcvd, 39
__param_str_rndis_ul_max_pkt_per_xfer_rcvd:
	.ascii	"android.rndis_ul_max_pkt_per_xfer_rcvd\000"
	.space	1
	.type	__param_str_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_str_rndis_ul_max_pkt_per_xfer, 34
__param_str_rndis_ul_max_pkt_per_xfer:
	.ascii	"android.rndis_ul_max_pkt_per_xfer\000"
	.space	2
	.type	__param_str_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_str_rndis_dl_max_pkt_per_xfer, 34
__param_str_rndis_dl_max_pkt_per_xfer:
	.ascii	"android.rndis_dl_max_pkt_per_xfer\000"
	.space	2
	.type	acc_hid_table, %object
	.size	acc_hid_table, 32
acc_hid_table:
	.short	3
	.space	2
	.word	-1
	.word	-1
	.space	4
	.space	16
	.type	mtp_shortname, %object
	.size	mtp_shortname, 8
mtp_shortname:
	.ascii	"mtp_usb\000"
	.type	__param_str_mtp_tx_reqs, %object
	.size	__param_str_mtp_tx_reqs, 20
__param_str_mtp_tx_reqs:
	.ascii	"android.mtp_tx_reqs\000"
	.type	__param_str_mtp_tx_req_len, %object
	.size	__param_str_mtp_tx_req_len, 23
__param_str_mtp_tx_req_len:
	.ascii	"android.mtp_tx_req_len\000"
	.space	1
	.type	__param_str_mtp_rx_req_len, %object
	.size	__param_str_mtp_rx_req_len, 23
__param_str_mtp_rx_req_len:
	.ascii	"android.mtp_rx_req_len\000"
	.space	1
	.type	adb_shortname, %object
	.size	adb_shortname, 12
adb_shortname:
	.ascii	"android_adb\000"
	.type	__param_str_ghsuart_data_tx_intr_thld, %object
	.size	__param_str_ghsuart_data_tx_intr_thld, 34
__param_str_ghsuart_data_tx_intr_thld:
	.ascii	"android.ghsuart_data_tx_intr_thld\000"
	.space	2
	.type	__param_str_ghsuart_data_rx_req_size, %object
	.size	__param_str_ghsuart_data_rx_req_size, 33
__param_str_ghsuart_data_rx_req_size:
	.ascii	"android.ghsuart_data_rx_req_size\000"
	.space	3
	.type	__param_str_ghsuart_data_serial_rx_q_size, %object
	.size	__param_str_ghsuart_data_serial_rx_q_size, 38
__param_str_ghsuart_data_serial_rx_q_size:
	.ascii	"android.ghsuart_data_serial_rx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_serial_tx_q_size, %object
	.size	__param_str_ghsuart_data_serial_tx_q_size, 38
__param_str_ghsuart_data_serial_tx_q_size:
	.ascii	"android.ghsuart_data_serial_tx_q_size\000"
	.space	2
	.type	__param_str_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_rx_q_size, 37
__param_str_ghsuart_data_rmnet_rx_q_size:
	.ascii	"android.ghsuart_data_rmnet_rx_q_size\000"
	.space	3
	.type	__param_str_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsuart_data_rmnet_tx_q_size, 37
__param_str_ghsuart_data_rmnet_tx_q_size:
	.ascii	"android.ghsuart_data_rmnet_tx_q_size\000"
	.space	3
	.type	__param_str_record_timestamp, %object
	.size	__param_str_record_timestamp, 25
__param_str_record_timestamp:
	.ascii	"android.record_timestamp\000"
	.space	3
	.type	__param_str_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_str_ghsic_data_pend_limit_with_bridge, 42
__param_str_ghsic_data_pend_limit_with_bridge:
	.ascii	"android.ghsic_data_pend_limit_with_bridge\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_dis_thld, %object
	.size	__param_str_ghsic_data_fctrl_dis_thld, 34
__param_str_ghsic_data_fctrl_dis_thld:
	.ascii	"android.ghsic_data_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_ghsic_data_fctrl_en_thld, %object
	.size	__param_str_ghsic_data_fctrl_en_thld, 33
__param_str_ghsic_data_fctrl_en_thld:
	.ascii	"android.ghsic_data_fctrl_en_thld\000"
	.space	3
	.type	__param_str_ghsic_data_fctrl_support, %object
	.size	__param_str_ghsic_data_fctrl_support, 33
__param_str_ghsic_data_fctrl_support:
	.ascii	"android.ghsic_data_fctrl_support\000"
	.space	3
	.type	__param_str_ghsic_data_tx_intr_thld, %object
	.size	__param_str_ghsic_data_tx_intr_thld, 32
__param_str_ghsic_data_tx_intr_thld:
	.ascii	"android.ghsic_data_tx_intr_thld\000"
	.type	__param_str_ghsic_data_rx_req_size, %object
	.size	__param_str_ghsic_data_rx_req_size, 31
__param_str_ghsic_data_rx_req_size:
	.ascii	"android.ghsic_data_rx_req_size\000"
	.space	1
	.type	__param_str_ghsic_data_serial_rx_q_size, %object
	.size	__param_str_ghsic_data_serial_rx_q_size, 36
__param_str_ghsic_data_serial_rx_q_size:
	.ascii	"android.ghsic_data_serial_rx_q_size\000"
	.type	__param_str_ghsic_data_serial_tx_q_size, %object
	.size	__param_str_ghsic_data_serial_tx_q_size, 36
__param_str_ghsic_data_serial_tx_q_size:
	.ascii	"android.ghsic_data_serial_tx_q_size\000"
	.type	__param_str_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_rx_q_size, 35
__param_str_ghsic_data_rmnet_rx_q_size:
	.ascii	"android.ghsic_data_rmnet_rx_q_size\000"
	.space	1
	.type	__param_str_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_str_ghsic_data_rmnet_tx_q_size, 35
__param_str_ghsic_data_rmnet_tx_q_size:
	.ascii	"android.ghsic_data_rmnet_tx_q_size\000"
	.space	1
	.type	__param_str_dl_intr_threshold, %object
	.size	__param_str_dl_intr_threshold, 26
__param_str_dl_intr_threshold:
	.ascii	"android.dl_intr_threshold\000"
	.space	2
	.type	__param_str_bam_mux_rx_req_size, %object
	.size	__param_str_bam_mux_rx_req_size, 28
__param_str_bam_mux_rx_req_size:
	.ascii	"android.bam_mux_rx_req_size\000"
	.type	__param_str_bam_mux_rx_q_size, %object
	.size	__param_str_bam_mux_rx_q_size, 26
__param_str_bam_mux_rx_q_size:
	.ascii	"android.bam_mux_rx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_tx_q_size, %object
	.size	__param_str_bam_mux_tx_q_size, 26
__param_str_bam_mux_tx_q_size:
	.ascii	"android.bam_mux_tx_q_size\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_dis_thld, 34
__param_str_bam_mux_rx_fctrl_dis_thld:
	.ascii	"android.bam_mux_rx_fctrl_dis_thld\000"
	.space	2
	.type	__param_str_bam_mux_rx_fctrl_support, %object
	.size	__param_str_bam_mux_rx_fctrl_support, 33
__param_str_bam_mux_rx_fctrl_support:
	.ascii	"android.bam_mux_rx_fctrl_support\000"
	.space	3
	.type	__param_str_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_str_bam_mux_rx_fctrl_en_thld, 33
__param_str_bam_mux_rx_fctrl_en_thld:
	.ascii	"android.bam_mux_rx_fctrl_en_thld\000"
	.space	3
	.type	__param_str_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_str_bam_mux_tx_pkt_drop_thld, 33
__param_str_bam_mux_tx_pkt_drop_thld:
	.ascii	"android.bam_mux_tx_pkt_drop_thld\000"
	.space	3
	.type	__param_str_bam_pending_limit, %object
	.size	__param_str_bam_pending_limit, 26
__param_str_bam_pending_limit:
	.ascii	"android.bam_pending_limit\000"
	.space	2
	.type	fsg_string_interface, %object
	.size	fsg_string_interface, 13
fsg_string_interface:
	.ascii	"Mass Storage\000"
	.space	3
	.type	__param_str_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_dis_thld, 35
__param_str_mux_sdio_rx_fctrl_dis_thld:
	.ascii	"android.mux_sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_mux_sdio_rx_fctrl_en_thld, 34
__param_str_mux_sdio_rx_fctrl_en_thld:
	.ascii	"android.mux_sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_mux_sdio_tx_pkt_drop_thld, 34
__param_str_mux_sdio_tx_pkt_drop_thld:
	.ascii	"android.mux_sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_mux_smd_data_ch, %object
	.size	__param_str_rmnet_mux_smd_data_ch, 30
__param_str_rmnet_mux_smd_data_ch:
	.ascii	"android.rmnet_mux_smd_data_ch\000"
	.space	2
	.type	__param_str_rmnet_mux_sdio_data_ch, %object
	.size	__param_str_rmnet_mux_sdio_data_ch, 31
__param_str_rmnet_mux_sdio_data_ch:
	.ascii	"android.rmnet_mux_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_str_rmnet_mux_sdio_ctl_ch, 30
__param_str_rmnet_mux_sdio_ctl_ch:
	.ascii	"android.rmnet_mux_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_sdio_rx_fctrl_dis_thld, %object
	.size	__param_str_sdio_rx_fctrl_dis_thld, 31
__param_str_sdio_rx_fctrl_dis_thld:
	.ascii	"android.sdio_rx_fctrl_dis_thld\000"
	.space	1
	.type	__param_str_sdio_rx_fctrl_en_thld, %object
	.size	__param_str_sdio_rx_fctrl_en_thld, 30
__param_str_sdio_rx_fctrl_en_thld:
	.ascii	"android.sdio_rx_fctrl_en_thld\000"
	.space	2
	.type	__param_str_sdio_tx_pkt_drop_thld, %object
	.size	__param_str_sdio_tx_pkt_drop_thld, 30
__param_str_sdio_tx_pkt_drop_thld:
	.ascii	"android.sdio_tx_pkt_drop_thld\000"
	.space	2
	.type	__param_str_rmnet_sdio_data_ch, %object
	.size	__param_str_rmnet_sdio_data_ch, 27
__param_str_rmnet_sdio_data_ch:
	.ascii	"android.rmnet_sdio_data_ch\000"
	.space	1
	.type	__param_str_rmnet_sdio_ctl_ch, %object
	.size	__param_str_rmnet_sdio_ctl_ch, 26
__param_str_rmnet_sdio_ctl_ch:
	.ascii	"android.rmnet_sdio_ctl_ch\000"
	.space	2
	.type	__param_str_rmnet_data_ch, %object
	.size	__param_str_rmnet_data_ch, 22
__param_str_rmnet_data_ch:
	.ascii	"android.rmnet_data_ch\000"
	.space	2
	.type	__param_str_rmnet_ctl_ch, %object
	.size	__param_str_rmnet_ctl_ch, 21
__param_str_rmnet_ctl_ch:
	.ascii	"android.rmnet_ctl_ch\000"
	.space	3
	.type	__param_str_iSerialNumber, %object
	.size	__param_str_iSerialNumber, 22
__param_str_iSerialNumber:
	.ascii	"android.iSerialNumber\000"
	.space	2
	.type	__param_str_iProduct, %object
	.size	__param_str_iProduct, 17
__param_str_iProduct:
	.ascii	"android.iProduct\000"
	.space	3
	.type	__param_str_iManufacturer, %object
	.size	__param_str_iManufacturer, 22
__param_str_iManufacturer:
	.ascii	"android.iManufacturer\000"
	.space	2
	.type	__param_str_bcdDevice, %object
	.size	__param_str_bcdDevice, 18
__param_str_bcdDevice:
	.ascii	"android.bcdDevice\000"
	.space	2
	.type	__param_str_idProduct, %object
	.size	__param_str_idProduct, 18
__param_str_idProduct:
	.ascii	"android.idProduct\000"
	.space	2
	.type	__param_str_idVendor, %object
	.size	__param_str_idVendor, 17
__param_str_idVendor:
	.ascii	"android.idVendor\000"
	.section	.exitcall.exit,"aw",%progbits
	.align	2
	.type	__exitcall_cleanup, %object
	.size	__exitcall_cleanup, 4
__exitcall_cleanup:
	.word	cleanup
	.type	__exitcall_gether_exit, %object
	.size	__exitcall_gether_exit, 4
__exitcall_gether_exit:
	.word	gether_exit
	.type	__exitcall_ghsuart_data_exit, %object
	.size	__exitcall_ghsuart_data_exit, 4
__exitcall_ghsuart_data_exit:
	.word	ghsuart_data_exit
	.type	__exitcall_ghsuart_ctrl_exit, %object
	.size	__exitcall_ghsuart_ctrl_exit, 4
__exitcall_ghsuart_ctrl_exit:
	.word	ghsuart_ctrl_exit
	.type	__exitcall_ghsic_data_exit, %object
	.size	__exitcall_ghsic_data_exit, 4
__exitcall_ghsic_data_exit:
	.word	ghsic_data_exit
	.type	__exitcall_gctrl_exit, %object
	.size	__exitcall_gctrl_exit, 4
__exitcall_gctrl_exit:
	.word	gctrl_exit
	.type	__exitcall_gqti_ctrl_cleanup, %object
	.size	__exitcall_gqti_ctrl_cleanup, 4
__exitcall_gqti_ctrl_cleanup:
	.word	gqti_ctrl_cleanup
	.type	__exitcall_gsmd_ctrl_exit, %object
	.size	__exitcall_gsmd_ctrl_exit, 4
__exitcall_gsmd_ctrl_exit:
	.word	gsmd_ctrl_exit
	.section	__modver,"aw",%progbits
	.align	2
	.type	__modver_attr, %object
	.size	__modver_attr, 4
__modver_attr:
	.word	___modver_attr
	.section	.data.rel.ro,"aw",%progbits
	.align	2
.LANCHOR6 = . + 0
	.type	ffs_sb_operations, %object
	.size	ffs_sb_operations, 104
ffs_sb_operations:
	.space	16
	.word	generic_delete_inode
	.space	24
	.word	simple_statfs
	.space	56
	.type	ffs_ep0_operations, %object
	.size	ffs_ep0_operations, 108
ffs_ep0_operations:
	.word	0
	.word	no_llseek
	.word	ffs_ep0_read
	.word	ffs_ep0_write
	.space	16
	.word	ffs_ep0_ioctl
	.space	8
	.word	ffs_ep0_open
	.space	4
	.word	ffs_ep0_release
	.space	52
	.type	rndis_proc_fops, %object
	.size	rndis_proc_fops, 108
rndis_proc_fops:
	.word	0
	.word	seq_lseek
	.word	seq_read
	.word	rndis_proc_write
	.space	28
	.word	rndis_proc_open
	.space	4
	.word	single_release
	.space	52
	.type	eth_netdev_ops, %object
	.size	eth_netdev_ops, 136
eth_netdev_ops:
	.space	8
	.word	eth_open
	.word	eth_stop
	.word	eth_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_change_mtu
	.space	84
	.type	ops, %object
	.size	ops, 164
ops:
	.space	8
	.word	eth_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	eth_qc_netdev_ops, %object
	.size	eth_qc_netdev_ops, 136
eth_qc_netdev_ops:
	.space	8
	.word	eth_qc_open
	.word	eth_qc_stop
	.word	eth_qc_start_xmit
	.space	12
	.word	eth_mac_addr
	.word	eth_validate_addr
	.space	8
	.word	ueth_qc_change_mtu
	.space	84
	.type	qc_ethtool_ops, %object
	.size	qc_ethtool_ops, 164
qc_ethtool_ops:
	.space	8
	.word	eth_qc_get_drvinfo
	.space	28
	.word	ethtool_op_get_link
	.space	120
	.type	ffs_epfile_operations, %object
	.size	ffs_epfile_operations, 108
ffs_epfile_operations:
	.word	0
	.word	no_llseek
	.word	ffs_epfile_read
	.word	ffs_epfile_write
	.space	16
	.word	ffs_epfile_ioctl
	.space	8
	.word	ffs_epfile_open
	.space	4
	.word	ffs_epfile_release
	.space	52
	.type	modem_fops, %object
	.size	modem_fops, 108
modem_fops:
	.word	0
	.word	no_llseek
	.word	modem_read
	.space	16
	.word	modem_poll
	.word	modem_ioctl
	.space	8
	.word	modem_open
	.space	4
	.word	modem_close
	.space	52
	.type	rmnet_mux_ctrl_fops, %object
	.size	rmnet_mux_ctrl_fops, 108
rmnet_mux_ctrl_fops:
	.word	0
	.space	4
	.word	usb_rmnet_mux_ctrl_read
	.word	usb_rmnet_mux_ctrl_write
	.space	16
	.word	usb_rmnet_mux_ctrl_ioctl
	.space	8
	.word	usb_rmnet_mux_ctrl_open
	.space	4
	.word	usb_rmnet_mux_ctrl_release
	.space	52
	.section	.devinit.rodata,"a",%progbits
	.align	2
	.type	android_id_table, %object
	.size	android_id_table, 48
android_id_table:
	.ascii	"android_usb\000"
	.space	8
	.space	4
	.ascii	"android_usb_hsic\000"
	.space	3
	.space	4
	.section	.data.unlikely,"aw",%progbits
.LANCHOR8 = . + 0
	.type	__warned.11081, %object
	.size	__warned.11081, 1
__warned.11081:
	.space	1
	.section	.data.rel.ro.local,"aw",%progbits
	.align	2
.LANCHOR5 = . + 0
	.type	ghsuart_ctrl_stats_ops, %object
	.size	ghsuart_ctrl_stats_ops, 108
ghsuart_ctrl_stats_ops:
	.space	8
	.word	ghsuart_ctrl_read_stats
	.word	ghsuart_ctrl_reset_stats
	.space	92
	.type	debug_fdiag_ops, %object
	.size	debug_fdiag_ops, 108
debug_fdiag_ops:
	.space	8
	.word	debug_read_stats
	.word	debug_reset_stats
	.space	28
	.word	debug_open
	.space	60
	.type	gs_tty_ops, %object
	.size	gs_tty_ops, 124
gs_tty_ops:
	.space	12
	.word	gs_open
	.word	gs_close
	.space	8
	.word	gs_write
	.word	gs_put_char
	.word	gs_flush_chars
	.word	gs_write_room
	.word	gs_chars_in_buffer
	.space	16
	.word	gs_unthrottle
	.space	12
	.word	gs_break_ctl
	.space	16
	.word	gs_tiocmget
	.word	gs_tiocmset
	.space	16
	.type	debug_gsdio_ops, %object
	.size	debug_gsdio_ops, 108
debug_gsdio_ops:
	.space	8
	.word	debug_sdio_read_stats
	.word	debug_sdio_reset_stats
	.space	28
	.word	debug_sdio_open
	.space	60
	.type	debug_gsmd_ops, %object
	.size	debug_gsmd_ops, 108
debug_gsmd_ops:
	.space	8
	.word	debug_smd_read_stats
	.word	debug_smd_reset_stats
	.space	28
	.word	debug_smd_open
	.space	60
	.type	ctrl_names, %object
	.size	ctrl_names, 24
ctrl_names:
	.word	.LC1082
	.word	.LC1083
	.word	.LC1084
	.word	.LC1083
	.space	8
	.type	ghsuart_data_names, %object
	.size	ghsuart_data_names, 8
ghsuart_data_names:
	.word	.LC1079
	.word	.LC1080
	.type	conn_gadget_fops, %object
	.size	conn_gadget_fops, 108
conn_gadget_fops:
	.word	0
	.space	4
	.word	conn_gadget_read
	.word	conn_gadget_write
	.space	12
	.word	conn_gadget_poll
	.word	conn_gadget_ioctl
	.space	8
	.word	conn_gadget_open
	.word	conn_gadget_flush
	.word	conn_gadget_release
	.space	52
	.type	rndis_qc_fops, %object
	.size	rndis_qc_fops, 108
rndis_qc_fops:
	.word	0
	.space	28
	.word	rndis_qc_ioctl
	.space	8
	.word	rndis_qc_open_dev
	.space	4
	.word	rndis_qc_release_dev
	.space	52
	.type	mbim_fops, %object
	.size	mbim_fops, 108
mbim_fops:
	.word	0
	.space	4
	.word	mbim_read
	.word	mbim_write
	.space	16
	.word	mbim_ioctl
	.space	8
	.word	mbim_open
	.space	4
	.word	mbim_release
	.space	52
	.type	acc_fops, %object
	.size	acc_fops, 108
acc_fops:
	.word	0
	.space	4
	.word	acc_read
	.word	acc_write
	.space	16
	.word	acc_ioctl
	.space	8
	.word	acc_open
	.space	4
	.word	acc_release
	.space	52
	.type	mtp_fops, %object
	.size	mtp_fops, 108
mtp_fops:
	.word	0
	.space	4
	.word	mtp_read
	.word	mtp_write
	.space	16
	.word	mtp_ioctl
	.space	8
	.word	mtp_open
	.space	4
	.word	mtp_release
	.space	52
	.type	ccid_ctrl_fops, %object
	.size	ccid_ctrl_fops, 108
ccid_ctrl_fops:
	.word	0
	.space	4
	.word	ccid_ctrl_read
	.space	20
	.word	ccid_ctrl_ioctl
	.space	8
	.word	ccid_ctrl_open
	.space	4
	.word	ccid_ctrl_release
	.space	52
	.type	ccid_bulk_fops, %object
	.size	ccid_bulk_fops, 108
ccid_bulk_fops:
	.word	0
	.space	4
	.word	ccid_bulk_read
	.word	ccid_bulk_write
	.space	28
	.word	ccid_bulk_open
	.space	4
	.word	ccid_bulk_release
	.space	52
	.type	adb_fops, %object
	.size	adb_fops, 108
adb_fops:
	.word	0
	.space	4
	.word	adb_read
	.word	adb_write
	.space	28
	.word	adb_open
	.space	4
	.word	adb_release
	.space	52
	.type	ghsuart_data_stats_ops, %object
	.size	ghsuart_data_stats_ops, 108
ghsuart_data_stats_ops:
	.space	8
	.word	ghsuart_data_read_stats
	.word	ghsuart_data_reset_stats
	.space	92
	.type	ghsic_stats_ops, %object
	.size	ghsic_stats_ops, 108
ghsic_stats_ops:
	.space	8
	.word	ghsic_data_read_stats
	.word	ghsic_data_reset_stats
	.space	92
	.type	gdata_timestamp_ops, %object
	.size	gdata_timestamp_ops, 108
gdata_timestamp_ops:
	.space	8
	.word	show_timestamp
	.space	96
	.type	gctrl_stats_ops, %object
	.size	gctrl_stats_ops, 108
gctrl_stats_ops:
	.space	8
	.word	gctrl_read_stats
	.word	gctrl_reset_stats
	.space	92
	.type	rmnet_ctrl_fops, %object
	.size	rmnet_ctrl_fops, 108
rmnet_ctrl_fops:
	.word	0
	.space	4
	.word	rmnet_ctrl_read
	.word	rmnet_ctrl_write
	.space	12
	.word	rmnet_ctrl_poll
	.word	rmnet_ctrl_ioctl
	.space	8
	.word	rmnet_ctrl_open
	.space	4
	.word	rmnet_ctrl_release
	.space	52
	.type	gsmd_ctrl_stats_ops, %object
	.size	gsmd_ctrl_stats_ops, 108
gsmd_ctrl_stats_ops:
	.space	8
	.word	gsmd_ctrl_read_stats
	.word	gsmd_ctrl_reset_stats
	.space	92
	.type	gbam_stats_ops, %object
	.size	gbam_stats_ops, 108
gbam_stats_ops:
	.space	8
	.word	gbam_read_stats
	.word	gbam_reset_stats
	.space	92
	.type	debug_adb_ops, %object
	.size	debug_adb_ops, 108
debug_adb_ops:
	.space	8
	.word	debug_read_status
	.space	32
	.word	serial_debug_open
	.space	60
	.type	debug_rst_ops, %object
	.size	debug_rst_ops, 108
debug_rst_ops:
	.space	12
	.word	debug_write_reset
	.space	28
	.word	serial_debug_open
	.space	60
	.type	rmnet_mux_svlte_debug_stats_ops, %object
	.size	rmnet_mux_svlte_debug_stats_ops, 108
rmnet_mux_svlte_debug_stats_ops:
	.space	8
	.word	rmnet_mux_read_stats
	.word	rmnet_mux_reset_stats
	.space	28
	.word	dbg_rmnet_mux_open
	.space	60
	.type	debug_rmnet_sdio_stats_ops, %object
	.size	debug_rmnet_sdio_stats_ops, 108
debug_rmnet_sdio_stats_ops:
	.space	8
	.word	rmnet_sdio_read_stats
	.word	rmnet_sdio_reset_stats
	.space	28
	.word	debug_rmnet_sdio_open
	.space	60
	.type	rmnet_smd_debug_stats_ops, %object
	.size	rmnet_smd_debug_stats_ops, 108
rmnet_smd_debug_stats_ops:
	.space	8
	.word	rmnet_smd_debug_read_stats
	.word	rmnet_smd_debug_reset_stats
	.space	28
	.word	rmnet_smd_debug_open
	.space	60
	.section	.data.rel.local,"aw",%progbits
	.align	3
.LANCHOR0 = . + 0
	.type	usb_diag_ch_list, %object
	.size	usb_diag_ch_list, 8
usb_diag_ch_list:
	.word	usb_diag_ch_list
	.word	usb_diag_ch_list
	.type	dev_attr_suspended, %object
	.size	dev_attr_suspended, 16
dev_attr_suspended:
	.word	.LC1100
	.short	292
	.space	2
	.word	composite_show_suspended
	.word	0
	.type	usb_qdss_ch_list, %object
	.size	usb_qdss_ch_list, 8
usb_qdss_ch_list:
	.word	usb_qdss_ch_list
	.word	usb_qdss_ch_list
	.type	android_platform_driver, %object
	.size	android_platform_driver, 80
android_platform_driver:
	.word	android_probe
	.word	android_remove
	.space	12
	.word	.LC628
	.space	16
	.word	usb_android_dt_match
	.space	32
	.word	android_id_table
	.type	rmnet_device, %object
	.size	rmnet_device, 36
rmnet_device:
	.word	255
	.word	.LC1081
	.word	rmnet_ctrl_fops
	.space	24
	.type	acc_device, %object
	.size	acc_device, 36
acc_device:
	.word	255
	.word	.LC1069
	.word	acc_fops
	.space	24
	.type	rndis_qc_device, %object
	.size	rndis_qc_device, 36
rndis_qc_device:
	.word	255
	.word	.LC1058
	.word	rndis_qc_fops
	.space	24
	.type	mtp_device, %object
	.size	mtp_device, 36
mtp_device:
	.word	255
	.word	mtp_shortname
	.word	mtp_fops
	.space	24
	.type	adb_device, %object
	.size	adb_device, 36
adb_device:
	.word	255
	.word	adb_shortname
	.word	adb_fops
	.space	24
	.type	rmnet_mux_ctrl_dev, %object
	.size	rmnet_mux_ctrl_dev, 36
rmnet_mux_ctrl_dev:
	.word	255
	.word	.LC1095
	.word	rmnet_mux_ctrl_fops
	.space	24
	.type	mirrorlink_device, %object
	.size	mirrorlink_device, 36
mirrorlink_device:
	.word	255
	.word	mirrorlink_shortname
	.space	28
	.type	ccid_bulk_device, %object
	.size	ccid_bulk_device, 36
ccid_bulk_device:
	.word	255
	.word	.LC1074
	.word	ccid_bulk_fops
	.space	24
	.type	ccid_ctrl_device, %object
	.size	ccid_ctrl_device, 36
ccid_ctrl_device:
	.word	255
	.word	.LC1073
	.word	ccid_ctrl_fops
	.space	24
	.type	mbim_device, %object
	.size	mbim_device, 36
mbim_device:
	.word	255
	.word	.LC1065
	.word	mbim_fops
	.space	24
	.type	conn_gadget_device, %object
	.size	conn_gadget_device, 36
conn_gadget_device:
	.word	255
	.word	conn_gadget_shortname
	.word	conn_gadget_fops
	.space	24
	.type	acc_hid_ll_driver, %object
	.size	acc_hid_ll_driver, 28
acc_hid_ll_driver:
	.word	acc_hid_start
	.word	acc_hid_stop
	.word	acc_hid_open
	.word	acc_hid_close
	.space	8
	.word	acc_hid_parse
	.type	ffs_fs_type, %object
	.size	ffs_fs_type, 36
ffs_fs_type:
	.word	.LC1093
	.space	4
	.word	ffs_fs_mount
	.space	8
	.word	ffs_fs_kill_sb
	.word	0
	.space	8
	.type	composite_driver, %object
	.size	composite_driver, 88
composite_driver:
	.space	8
	.word	composite_unbind
	.word	composite_setup
	.word	composite_disconnect
	.word	composite_suspend
	.word	composite_resume
	.space	8
	.word	0
	.space	44
	.space	4
	.type	acc_hid_driver, %object
	.size	acc_hid_driver, 132
acc_hid_driver:
	.word	.LC1068
	.word	acc_hid_table
	.space	12
	.word	acc_hid_probe
	.space	108
	.type	rmnet_ctl_ch, %object
	.size	rmnet_ctl_ch, 4
rmnet_ctl_ch:
	.word	.LC342
	.type	rmnet_data_ch, %object
	.size	rmnet_data_ch, 4
rmnet_data_ch:
	.word	.LC342
	.type	dev_attr_cdrom, %object
	.size	dev_attr_cdrom, 16
dev_attr_cdrom:
	.word	.LC1089
	.short	420
	.space	2
	.word	fsg_show_cdrom
	.word	fsg_store_cdrom
	.type	dev_attr_nofua, %object
	.size	dev_attr_nofua, 16
dev_attr_nofua:
	.word	.LC1091
	.short	420
	.space	2
	.word	fsg_show_nofua
	.word	fsg_store_nofua
	.type	dev_attr_ro, %object
	.size	dev_attr_ro, 16
dev_attr_ro:
	.word	.LC1092
	.short	420
	.space	2
	.word	fsg_show_ro
	.word	fsg_store_ro
	.type	dev_attr_file, %object
	.size	dev_attr_file, 16
dev_attr_file:
	.word	.LC1090
	.short	420
	.space	2
	.word	fsg_show_file
	.word	fsg_store_file
	.type	ecm_string_defs, %object
	.size	ecm_string_defs, 40
ecm_string_defs:
	.space	4
	.word	.LC1062
	.space	4
	.word	0
	.space	4
	.word	.LC1063
	.space	4
	.word	.LC1064
	.space	8
	.type	ncm_string_defs, %object
	.size	ncm_string_defs, 40
ncm_string_defs:
	.space	4
	.word	.LC1036
	.space	4
	.word	0
	.space	4
	.word	.LC1037
	.space	4
	.word	.LC1038
	.space	8
	.type	fs_conn_gadget_descs, %object
	.size	fs_conn_gadget_descs, 16
fs_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_fullspeed_in_desc
	.word	conn_gadget_fullspeed_out_desc
	.word	0
	.type	hs_conn_gadget_descs, %object
	.size	hs_conn_gadget_descs, 16
hs_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_highspeed_in_desc
	.word	conn_gadget_highspeed_out_desc
	.word	0
	.type	ss_conn_gadget_descs, %object
	.size	ss_conn_gadget_descs, 24
ss_conn_gadget_descs:
	.word	conn_gadget_interface_desc
	.word	conn_gadget_superspeed_in_desc
	.word	conn_gadget_superspeed_bulk_comp_desc
	.word	conn_gadget_superspeed_out_desc
	.word	conn_gadget_superspeed_bulk_comp_desc
	.word	0
	.type	ccid_fs_descs, %object
	.size	ccid_fs_descs, 24
ccid_fs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_fs_notify_desc
	.word	ccid_fs_in_desc
	.word	ccid_fs_out_desc
	.word	0
	.type	ccid_hs_descs, %object
	.size	ccid_hs_descs, 24
ccid_hs_descs:
	.word	ccid_interface_desc
	.word	ccid_class_desc
	.word	ccid_hs_notify_desc
	.word	ccid_hs_in_desc
	.word	ccid_hs_out_desc
	.word	0
	.type	fs_adb_descs, %object
	.size	fs_adb_descs, 16
fs_adb_descs:
	.word	adb_interface_desc
	.word	adb_fullspeed_in_desc
	.word	adb_fullspeed_out_desc
	.word	0
	.type	hs_adb_descs, %object
	.size	hs_adb_descs, 16
hs_adb_descs:
	.word	adb_interface_desc
	.word	adb_highspeed_in_desc
	.word	adb_highspeed_out_desc
	.word	0
	.type	ss_adb_descs, %object
	.size	ss_adb_descs, 24
ss_adb_descs:
	.word	adb_interface_desc
	.word	adb_superspeed_in_desc
	.word	adb_superspeed_in_comp_desc
	.word	adb_superspeed_out_desc
	.word	adb_superspeed_out_comp_desc
	.word	0
	.type	rmnet_mux_strings, %object
	.size	rmnet_mux_strings, 8
rmnet_mux_strings:
	.word	rmnet_mux_string_table
	.word	0
	.type	rmnet_mux_fs_function, %object
	.size	rmnet_mux_fs_function, 20
rmnet_mux_fs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_fs_notify_desc
	.word	rmnet_mux_fs_in_desc
	.word	rmnet_mux_fs_out_desc
	.word	0
	.type	rmnet_mux_hs_function, %object
	.size	rmnet_mux_hs_function, 20
rmnet_mux_hs_function:
	.word	rmnet_mux_interface_desc
	.word	rmnet_mux_hs_notify_desc
	.word	rmnet_mux_hs_in_desc
	.word	rmnet_mux_hs_out_desc
	.word	0
	.type	fs_diag_desc, %object
	.size	fs_diag_desc, 16
fs_diag_desc:
	.word	intf_desc
	.word	fs_bulk_in_desc
	.word	fs_bulk_out_desc
	.word	0
	.type	hs_diag_desc, %object
	.size	hs_diag_desc, 16
hs_diag_desc:
	.word	intf_desc
	.word	hs_bulk_in_desc
	.word	hs_bulk_out_desc
	.word	0
	.type	ss_diag_desc, %object
	.size	ss_diag_desc, 24
ss_diag_desc:
	.word	intf_desc
	.word	ss_bulk_in_desc
	.word	ss_bulk_in_comp_desc
	.word	ss_bulk_out_desc
	.word	ss_bulk_out_comp_desc
	.word	0
	.type	ecm_qc_fs_function, %object
	.size	ecm_qc_fs_function, 40
ecm_qc_fs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_fs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_fs_in_desc
	.word	ecm_qc_fs_out_desc
	.word	0
	.type	ecm_qc_hs_function, %object
	.size	ecm_qc_hs_function, 40
ecm_qc_hs_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_hs_notify_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_hs_in_desc
	.word	ecm_qc_hs_out_desc
	.word	0
	.type	ecm_qc_ss_function, %object
	.size	ecm_qc_ss_function, 52
ecm_qc_ss_function:
	.word	ecm_qc_control_intf
	.word	ecm_qc_header_desc
	.word	ecm_qc_union_desc
	.word	ecm_qc_desc
	.word	ecm_qc_ss_notify_desc
	.word	ecm_qc_ss_notify_comp_desc
	.word	ecm_qc_data_nop_intf
	.word	ecm_qc_data_intf
	.word	ecm_qc_ss_in_desc
	.word	ecm_qc_ss_in_comp_desc
	.word	ecm_qc_ss_out_desc
	.word	ecm_qc_ss_out_comp_desc
	.word	0
	.type	mbim_fs_function, %object
	.size	mbim_fs_function, 48
mbim_fs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	fs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	fs_mbim_in_desc
	.word	fs_mbim_out_desc
	.word	0
	.type	mbim_hs_function, %object
	.size	mbim_hs_function, 48
mbim_hs_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	hs_mbim_notify_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	hs_mbim_in_desc
	.word	hs_mbim_out_desc
	.word	0
	.type	mbim_ss_function, %object
	.size	mbim_ss_function, 60
mbim_ss_function:
	.word	mbim_iad_desc
	.word	mbim_control_intf
	.word	mbim_header_desc
	.word	mbim_union_desc
	.word	mbb_desc
	.word	ext_mbb_desc
	.word	ss_mbim_notify_desc
	.word	ss_mbim_notify_comp_desc
	.word	mbim_data_nop_intf
	.word	mbim_data_intf
	.word	ss_mbim_in_desc
	.word	ss_mbim_in_comp_desc
	.word	ss_mbim_out_desc
	.word	ss_mbim_out_comp_desc
	.word	0
	.type	ecm_fs_function, %object
	.size	ecm_fs_function, 44
ecm_fs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	fs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	fs_ecm_in_desc
	.word	fs_ecm_out_desc
	.word	0
	.type	ecm_hs_function, %object
	.size	ecm_hs_function, 44
ecm_hs_function:
	.word	ecm_iad_descriptor
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	hs_ecm_notify_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	hs_ecm_in_desc
	.word	hs_ecm_out_desc
	.word	0
	.type	ecm_ss_function, %object
	.size	ecm_ss_function, 52
ecm_ss_function:
	.word	ecm_control_intf
	.word	ecm_header_desc
	.word	ecm_union_desc
	.word	ecm_desc
	.word	ss_ecm_notify_desc
	.word	ss_ecm_intr_comp_desc
	.word	ecm_data_nop_intf
	.word	ecm_data_intf
	.word	ss_ecm_in_desc
	.word	ss_ecm_bulk_comp_desc
	.word	ss_ecm_out_desc
	.word	ss_ecm_bulk_comp_desc
	.word	0
	.type	microphone_as_iso_in, %object
	.size	microphone_as_iso_in, 32
microphone_as_iso_in:
	.word	microphone_as_iso_in
	.word	microphone_as_iso_in
	.space	12
	.word	.LC1044
	.byte	1
	.space	3
	.word	microphone_as_iso_in_desc
	.type	speaker_as_iso_out, %object
	.size	speaker_as_iso_out, 32
speaker_as_iso_out:
	.word	speaker_as_iso_out
	.word	speaker_as_iso_out
	.space	12
	.word	.LC1046
	.byte	1
	.space	3
	.word	speaker_as_iso_out_desc
	.type	ncm_fs_function, %object
	.size	ncm_fs_function, 48
ncm_fs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	fs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	fs_ncm_in_desc
	.word	fs_ncm_out_desc
	.word	0
	.type	ncm_hs_function, %object
	.size	ncm_hs_function, 48
ncm_hs_function:
	.word	ncm_iad_desc
	.word	ncm_control_intf
	.word	ncm_header_desc
	.word	ncm_union_desc
	.word	necm_desc
	.word	ncm_desc
	.word	hs_ncm_notify_desc
	.word	ncm_data_nop_intf
	.word	ncm_data_intf
	.word	hs_ncm_in_desc
	.word	hs_ncm_out_desc
	.word	0
	.type	fsg_fs_function, %object
	.size	fsg_fs_function, 16
fsg_fs_function:
	.word	fsg_intf_desc
	.word	fsg_fs_bulk_in_desc
	.word	fsg_fs_bulk_out_desc
	.word	0
	.type	fsg_hs_function, %object
	.size	fsg_hs_function, 16
fsg_hs_function:
	.word	fsg_intf_desc
	.word	fsg_hs_bulk_in_desc
	.word	fsg_hs_bulk_out_desc
	.word	0
	.type	fsg_ss_function, %object
	.size	fsg_ss_function, 24
fsg_ss_function:
	.word	fsg_intf_desc
	.word	fsg_ss_bulk_in_desc
	.word	fsg_ss_bulk_in_comp_desc
	.word	fsg_ss_bulk_out_desc
	.word	fsg_ss_bulk_out_comp_desc
	.word	0
	.type	qdss_hs_desc, %object
	.size	qdss_hs_desc, 24
qdss_hs_desc:
	.word	qdss_data_intf_desc
	.word	qdss_hs_data_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_hs_ctrl_in_desc
	.word	qdss_hs_ctrl_out_desc
	.word	0
	.type	qdss_ss_desc, %object
	.size	qdss_ss_desc, 36
qdss_ss_desc:
	.word	qdss_data_intf_desc
	.word	qdss_ss_data_desc
	.word	qdss_data_ep_comp_desc
	.word	qdss_ctrl_intf_desc
	.word	qdss_ss_ctrl_in_desc
	.word	qdss_ctrl_in_ep_comp_desc
	.word	qdss_ss_ctrl_out_desc
	.word	qdss_ctrl_out_ep_comp_desc
	.word	0
	.type	adb_function, %object
	.size	adb_function, 52
adb_function:
	.word	.LC551
	.space	20
	.word	adb_function_init
	.word	adb_function_cleanup
	.word	adb_android_function_enable
	.word	adb_android_function_disable
	.word	adb_function_bind_config
	.space	8
	.type	ffs_function, %object
	.size	ffs_function, 52
ffs_function:
	.word	.LC286
	.space	12
	.word	ffs_function_attributes
	.space	4
	.word	ffs_function_init
	.word	ffs_function_cleanup
	.word	ffs_function_enable
	.word	ffs_function_disable
	.word	ffs_function_bind_config
	.space	8
	.type	midi_string_defs, %object
	.size	midi_string_defs, 16
midi_string_defs:
	.space	4
	.word	.LC1072
	.space	8
	.type	strings_dev, %object
	.size	strings_dev, 32
strings_dev:
	.space	4
	.word	manufacturer_string
	.space	4
	.word	product_string
	.space	4
	.word	serial_string
	.space	8
	.type	acc_string_defs, %object
	.size	acc_string_defs, 16
acc_string_defs:
	.space	4
	.word	.LC1070
	.space	8
	.type	acc_strings, %object
	.size	acc_strings, 8
acc_strings:
	.word	acc_string_table
	.word	0
	.type	fs_acc_descs, %object
	.size	fs_acc_descs, 16
fs_acc_descs:
	.word	acc_interface_desc
	.word	acc_fullspeed_in_desc
	.word	acc_fullspeed_out_desc
	.word	0
	.type	hs_acc_descs, %object
	.size	hs_acc_descs, 16
hs_acc_descs:
	.word	acc_interface_desc
	.word	acc_highspeed_in_desc
	.word	acc_highspeed_out_desc
	.word	0
	.type	ss_acc_descs, %object
	.size	ss_acc_descs, 24
ss_acc_descs:
	.word	acc_interface_desc
	.word	acc_superspeed_in_desc
	.word	acc_superspeed_in_comp_desc
	.word	acc_superspeed_out_desc
	.word	acc_superspeed_out_comp_desc
	.word	0
	.type	fsg_strings, %object
	.size	fsg_strings, 16
fsg_strings:
	.byte	0
	.space	3
	.word	fsg_string_interface
	.space	8
	.type	fsg_strings_array, %object
	.size	fsg_strings_array, 8
fsg_strings_array:
	.word	fsg_stringtab
	.word	0
	.type	mtp_string_defs, %object
	.size	mtp_string_defs, 16
mtp_string_defs:
	.space	4
	.word	.LC1071
	.space	8
	.type	mtp_strings, %object
	.size	mtp_strings, 8
mtp_strings:
	.word	mtp_string_table
	.word	0
	.type	fs_ptp_descs, %object
	.size	fs_ptp_descs, 20
fs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_ptp_descs, %object
	.size	hs_ptp_descs, 20
hs_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_ptp_descs, %object
	.size	ss_ptp_descs, 32
ss_ptp_descs:
	.word	ptp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	qdss_string_defs, %object
	.size	qdss_string_defs, 24
qdss_string_defs:
	.space	4
	.word	.LC1098
	.space	4
	.word	.LC1099
	.space	8
	.type	qdss_strings, %object
	.size	qdss_strings, 8
qdss_strings:
	.word	qdss_string_table
	.word	0
	.type	fs_mtp_descs, %object
	.size	fs_mtp_descs, 20
fs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_fullspeed_in_desc
	.word	mtp_fullspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	hs_mtp_descs, %object
	.size	hs_mtp_descs, 20
hs_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_highspeed_in_desc
	.word	mtp_highspeed_out_desc
	.word	mtp_intr_desc
	.word	0
	.type	ss_mtp_descs, %object
	.size	ss_mtp_descs, 32
ss_mtp_descs:
	.word	mtp_interface_desc
	.word	mtp_superspeed_in_desc
	.word	mtp_superspeed_in_comp_desc
	.word	mtp_superspeed_out_desc
	.word	mtp_superspeed_out_comp_desc
	.word	mtp_intr_desc
	.word	mtp_superspeed_intr_comp_desc
	.word	0
	.type	android_usb_attributes, %object
	.size	android_usb_attributes, 76
android_usb_attributes:
	.word	dev_attr_idVendor
	.word	dev_attr_idProduct
	.word	dev_attr_bcdDevice
	.word	dev_attr_bDeviceClass
	.word	dev_attr_bDeviceSubClass
	.word	dev_attr_bDeviceProtocol
	.word	dev_attr_iManufacturer
	.word	dev_attr_iProduct
	.word	dev_attr_iSerial
	.word	dev_attr_functions
	.word	dev_attr_enable
	.word	dev_attr_pm_qos
	.word	dev_attr_state
	.word	dev_attr_bcdUSB
	.word	dev_attr_usb30en
	.word	dev_attr_ss_host_available
	.word	dev_attr_macos
	.word	dev_attr_remote_wakeup
	.word	0
	.type	dev_attr_terminal_version, %object
	.size	dev_attr_terminal_version, 16
dev_attr_terminal_version:
	.word	.LC1035
	.short	420
	.space	2
	.word	terminal_version_show
	.word	terminal_version_store
	.type	android_usb_driver, %object
	.size	android_usb_driver, 44
android_usb_driver:
	.word	.LC628
	.space	8
	.word	device_desc
	.word	dev_strings
	.word	5
	.space	4
	.word	android_usb_unbind
	.space	12
	.type	modem_device, %object
	.size	modem_device, 36
modem_device:
	.word	123
	.word	.LC1078
	.word	modem_fops
	.space	24
	.type	rmnet_smd_strings, %object
	.size	rmnet_smd_strings, 8
rmnet_smd_strings:
	.word	rmnet_smd_string_table
	.word	0
	.type	rmnet_smd_fs_function, %object
	.size	rmnet_smd_fs_function, 20
rmnet_smd_fs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_fs_notify_desc
	.word	rmnet_smd_fs_in_desc
	.word	rmnet_smd_fs_out_desc
	.word	0
	.type	rmnet_smd_hs_function, %object
	.size	rmnet_smd_hs_function, 20
rmnet_smd_hs_function:
	.word	rmnet_smd_interface_desc
	.word	rmnet_smd_hs_notify_desc
	.word	rmnet_smd_hs_in_desc
	.word	rmnet_smd_hs_out_desc
	.word	0
	.type	rmnet_sdio_strings, %object
	.size	rmnet_sdio_strings, 8
rmnet_sdio_strings:
	.word	rmnet_sdio_string_table
	.word	0
	.type	rmnet_sdio_fs_function, %object
	.size	rmnet_sdio_fs_function, 20
rmnet_sdio_fs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_fs_notify_desc
	.word	rmnet_sdio_fs_in_desc
	.word	rmnet_sdio_fs_out_desc
	.word	0
	.type	rmnet_sdio_hs_function, %object
	.size	rmnet_sdio_hs_function, 20
rmnet_sdio_hs_function:
	.word	rmnet_sdio_interface_desc
	.word	rmnet_sdio_hs_notify_desc
	.word	rmnet_sdio_hs_in_desc
	.word	rmnet_sdio_hs_out_desc
	.word	0
	.type	rmnet_fs_function, %object
	.size	rmnet_fs_function, 20
rmnet_fs_function:
	.word	rmnet_interface_desc
	.word	rmnet_fs_notify_desc
	.word	rmnet_fs_in_desc
	.word	rmnet_fs_out_desc
	.word	0
	.type	rmnet_hs_function, %object
	.size	rmnet_hs_function, 20
rmnet_hs_function:
	.word	rmnet_interface_desc
	.word	rmnet_hs_notify_desc
	.word	rmnet_hs_in_desc
	.word	rmnet_hs_out_desc
	.word	0
	.type	rmnet_ss_function, %object
	.size	rmnet_ss_function, 32
rmnet_ss_function:
	.word	rmnet_interface_desc
	.word	rmnet_ss_notify_desc
	.word	rmnet_ss_notify_comp_desc
	.word	rmnet_ss_in_desc
	.word	rmnet_ss_in_comp_desc
	.word	rmnet_ss_out_desc
	.word	rmnet_ss_out_comp_desc
	.word	0
	.space	4
	.type	_audio_dev, %object
	.size	_audio_dev, 160
_audio_dev:
	.word	.LC710
	.space	4
	.word	hs_audio_desc
	.space	4
	.word	fs_audio_desc
	.space	12
	.word	audio_bind
	.word	audio_unbind
	.word	audio_set_alt
	.space	4
	.word	audio_disable
	.word	audio_setup
	.space	28
	.space	12
	.word	_audio_dev+96
	.word	_audio_dev+96
	.space	4
	.word	0
	.space	48
	.type	rmnet_string_defs, %object
	.size	rmnet_string_defs, 16
rmnet_string_defs:
	.space	4
	.word	.LC1094
	.space	8
	.type	rmnet_strings, %object
	.size	rmnet_strings, 8
rmnet_strings:
	.word	rmnet_string_table
	.word	0
	.type	acm_fs_function, %object
	.size	acm_fs_function, 44
acm_fs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_fs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_fs_in_desc
	.word	acm_fs_out_desc
	.word	0
	.type	acm_hs_function, %object
	.size	acm_hs_function, 44
acm_hs_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_data_interface_desc
	.word	acm_hs_in_desc
	.word	acm_hs_out_desc
	.word	0
	.type	acm_ss_function, %object
	.size	acm_ss_function, 56
acm_ss_function:
	.word	acm_iad_descriptor
	.word	acm_control_interface_desc
	.word	acm_header_desc
	.word	acm_call_mgmt_descriptor
	.word	acm_descriptor
	.word	acm_union_desc
	.word	acm_hs_notify_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_data_interface_desc
	.word	acm_ss_in_desc
	.word	acm_ss_bulk_comp_desc
	.word	acm_ss_out_desc
	.word	acm_ss_bulk_comp_desc
	.word	0
	.type	acm_string_defs, %object
	.size	acm_string_defs, 32
acm_string_defs:
	.space	4
	.word	.LC1075
	.space	4
	.word	.LC1076
	.space	4
	.word	.LC1077
	.space	8
	.type	acm_strings, %object
	.size	acm_strings, 8
acm_strings:
	.word	acm_string_table
	.word	0
	.type	ops.54469, %object
	.size	ops.54469, 12
ops.54469:
	.word	f_midi_snd_free
	.space	8
	.type	gmidi_in_ops, %object
	.size	gmidi_in_ops, 16
gmidi_in_ops:
	.word	f_midi_in_open
	.word	f_midi_in_close
	.word	f_midi_in_trigger
	.space	4
	.type	gmidi_out_ops, %object
	.size	gmidi_out_ops, 16
gmidi_out_ops:
	.word	f_midi_out_open
	.word	f_midi_out_close
	.word	f_midi_out_trigger
	.space	4
	.type	midi_strings, %object
	.size	midi_strings, 8
midi_strings:
	.word	midi_stringtab
	.word	0
	.type	eth_fs_function, %object
	.size	eth_fs_function, 44
eth_fs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	fs_notify_desc
	.word	rndis_data_intf
	.word	fs_in_desc
	.word	fs_out_desc
	.word	0
	.type	eth_hs_function, %object
	.size	eth_hs_function, 44
eth_hs_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	hs_notify_desc
	.word	rndis_data_intf
	.word	hs_in_desc
	.word	hs_out_desc
	.word	0
	.type	eth_ss_function, %object
	.size	eth_ss_function, 56
eth_ss_function:
	.word	rndis_iad_descriptor
	.word	rndis_control_intf
	.word	header_desc
	.word	call_mgmt_descriptor
	.word	rndis_acm_descriptor
	.word	rndis_union_desc
	.word	ss_notify_desc
	.word	ss_intr_comp_desc
	.word	rndis_data_intf
	.word	ss_in_desc
	.word	ss_bulk_comp_desc
	.word	ss_out_desc
	.word	ss_bulk_comp_desc
	.word	0
	.type	eth_qc_fs_function, %object
	.size	eth_qc_fs_function, 44
eth_qc_fs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_fs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_fs_in_desc
	.word	rndis_qc_fs_out_desc
	.word	0
	.type	eth_qc_hs_function, %object
	.size	eth_qc_hs_function, 44
eth_qc_hs_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_hs_notify_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_hs_in_desc
	.word	rndis_qc_hs_out_desc
	.word	0
	.type	eth_qc_ss_function, %object
	.size	eth_qc_ss_function, 56
eth_qc_ss_function:
	.word	rndis_qc_iad_descriptor
	.word	rndis_qc_control_intf
	.word	rndis_qc_header_desc
	.word	rndis_qc_call_mgmt_descriptor
	.word	rndis_qc_acm_descriptor
	.word	rndis_qc_union_desc
	.word	rndis_qc_ss_notify_desc
	.word	rndis_qc_ss_intr_comp_desc
	.word	rndis_qc_data_intf
	.word	rndis_qc_ss_in_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	rndis_qc_ss_out_desc
	.word	rndis_qc_ss_bulk_comp_desc
	.word	0
	.type	rndis_string_defs, %object
	.size	rndis_string_defs, 32
rndis_string_defs:
	.space	4
	.word	.LC1059
	.space	4
	.word	.LC1060
	.space	4
	.word	.LC1061
	.space	8
	.type	rndis_strings, %object
	.size	rndis_strings, 8
rndis_strings:
	.word	rndis_string_table
	.word	0
	.type	ecm_qc_string_defs, %object
	.size	ecm_qc_string_defs, 32
ecm_qc_string_defs:
	.space	4
	.word	.LC1062
	.space	4
	.word	0
	.space	4
	.word	.LC1063
	.space	8
	.type	mbim_string_defs, %object
	.size	mbim_string_defs, 24
mbim_string_defs:
	.space	4
	.word	.LC1066
	.space	4
	.word	.LC1067
	.space	8
	.type	mbim_strings, %object
	.size	mbim_strings, 8
mbim_strings:
	.word	mbim_string_table
	.word	0
	.type	ecm_strings, %object
	.size	ecm_strings, 8
ecm_strings:
	.word	ecm_string_table
	.word	0
	.type	rndis_qc_string_defs, %object
	.size	rndis_qc_string_defs, 32
rndis_qc_string_defs:
	.space	4
	.word	.LC1059
	.space	4
	.word	.LC1060
	.space	4
	.word	.LC1061
	.space	8
	.type	rndis_qc_strings, %object
	.size	rndis_qc_strings, 8
rndis_qc_strings:
	.word	rndis_qc_string_table
	.word	0
	.type	gadget_type, %object
	.size	gadget_type, 24
gadget_type:
	.word	.LC1057
	.space	20
	.type	ecm_qc_strings, %object
	.size	ecm_qc_strings, 8
ecm_qc_strings:
	.word	ecm_qc_string_table
	.word	0
	.type	qc_gadget_type, %object
	.size	qc_gadget_type, 24
qc_gadget_type:
	.word	.LC1057
	.space	20
	.type	fn_cntl, %object
	.size	fn_cntl, 4
fn_cntl:
	.word	.LC1054
	.type	fn_play, %object
	.size	fn_play, 4
fn_play:
	.word	.LC1056
	.type	fn_cap, %object
	.size	fn_cap, 4
fn_cap:
	.word	.LC1055
	.type	microphone_fu_controls, %object
	.size	microphone_fu_controls, 32
microphone_fu_controls:
	.word	microphone_fu_controls
	.word	microphone_fu_controls
	.space	12
	.word	.LC1048
	.space	8
	.type	speaker_fu_controls, %object
	.size	speaker_fu_controls, 32
speaker_fu_controls:
	.word	speaker_fu_controls
	.word	speaker_fu_controls
	.space	12
	.word	.LC1051
	.space	8
	.type	microphone_mute_control, %object
	.size	microphone_mute_control, 44
microphone_mute_control:
	.word	microphone_mute_control
	.word	microphone_mute_control
	.word	.LC1050
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_volume_control, %object
	.size	microphone_volume_control, 44
microphone_volume_control:
	.word	microphone_volume_control
	.word	microphone_volume_control
	.word	.LC1049
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_mute_control, %object
	.size	speaker_mute_control, 44
speaker_mute_control:
	.word	speaker_mute_control
	.word	speaker_mute_control
	.word	.LC1053
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_volume_control, %object
	.size	speaker_volume_control, 44
speaker_volume_control:
	.word	speaker_volume_control
	.word	speaker_volume_control
	.word	.LC1052
	.byte	2
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	microphone_sample_freq_control, %object
	.size	microphone_sample_freq_control, 44
microphone_sample_freq_control:
	.word	microphone_sample_freq_control
	.word	microphone_sample_freq_control
	.word	.LC1045
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	speaker_sample_freq_control, %object
	.size	speaker_sample_freq_control, 44
speaker_sample_freq_control:
	.word	speaker_sample_freq_control
	.word	speaker_sample_freq_control
	.word	.LC1047
	.byte	1
	.space	23
	.word	generic_set_cmd
	.word	generic_get_cmd
	.type	audio_strings, %object
	.size	audio_strings, 8
audio_strings:
	.word	audio_stringtab_dev
	.word	0
	.type	ncm_strings, %object
	.size	ncm_strings, 8
ncm_strings:
	.word	ncm_string_table
	.word	0
	.type	dev_attr_remote_wakeup, %object
	.size	dev_attr_remote_wakeup, 16
dev_attr_remote_wakeup:
	.word	.LC990
	.short	420
	.space	2
	.word	remote_wakeup_show
	.word	remote_wakeup_store
	.type	dev_attr_state, %object
	.size	dev_attr_state, 16
dev_attr_state:
	.word	.LC991
	.short	292
	.space	2
	.word	state_show
	.word	0
	.type	dev_attr_pm_qos, %object
	.size	dev_attr_pm_qos, 16
dev_attr_pm_qos:
	.word	.LC992
	.short	420
	.space	2
	.word	pm_qos_show
	.word	pm_qos_store
	.type	dev_attr_enable, %object
	.size	dev_attr_enable, 16
dev_attr_enable:
	.word	.LC993
	.short	420
	.space	2
	.word	enable_show
	.word	enable_store
	.type	dev_attr_functions, %object
	.size	dev_attr_functions, 16
dev_attr_functions:
	.word	.LC994
	.short	420
	.space	2
	.word	functions_show
	.word	functions_store
	.type	dev_attr_macos, %object
	.size	dev_attr_macos, 16
dev_attr_macos:
	.word	.LC995
	.short	420
	.space	2
	.word	macos_show
	.word	0
	.type	dev_attr_ss_host_available, %object
	.size	dev_attr_ss_host_available, 16
dev_attr_ss_host_available:
	.word	.LC996
	.short	420
	.space	2
	.word	ss_host_available_show
	.word	0
	.type	dev_attr_usb30en, %object
	.size	dev_attr_usb30en, 16
dev_attr_usb30en:
	.word	.LC997
	.short	420
	.space	2
	.word	usb30en_show
	.word	usb30en_store
	.type	dev_attr_bcdUSB, %object
	.size	dev_attr_bcdUSB, 16
dev_attr_bcdUSB:
	.word	.LC998
	.short	420
	.space	2
	.word	bcdUSB_show
	.word	0
	.type	dev_attr_iSerial, %object
	.size	dev_attr_iSerial, 16
dev_attr_iSerial:
	.word	.LC999
	.short	420
	.space	2
	.word	iSerial_show
	.word	iSerial_store
	.type	dev_attr_iProduct, %object
	.size	dev_attr_iProduct, 16
dev_attr_iProduct:
	.word	.LC1000
	.short	420
	.space	2
	.word	iProduct_show
	.word	iProduct_store
	.type	dev_attr_iManufacturer, %object
	.size	dev_attr_iManufacturer, 16
dev_attr_iManufacturer:
	.word	.LC1001
	.short	420
	.space	2
	.word	iManufacturer_show
	.word	iManufacturer_store
	.type	dev_attr_bDeviceProtocol, %object
	.size	dev_attr_bDeviceProtocol, 16
dev_attr_bDeviceProtocol:
	.word	.LC1002
	.short	420
	.space	2
	.word	bDeviceProtocol_show
	.word	bDeviceProtocol_store
	.type	dev_attr_bDeviceSubClass, %object
	.size	dev_attr_bDeviceSubClass, 16
dev_attr_bDeviceSubClass:
	.word	.LC1003
	.short	420
	.space	2
	.word	bDeviceSubClass_show
	.word	bDeviceSubClass_store
	.type	dev_attr_bDeviceClass, %object
	.size	dev_attr_bDeviceClass, 16
dev_attr_bDeviceClass:
	.word	.LC1004
	.short	420
	.space	2
	.word	bDeviceClass_show
	.word	bDeviceClass_store
	.type	dev_attr_bcdDevice, %object
	.size	dev_attr_bcdDevice, 16
dev_attr_bcdDevice:
	.word	.LC1005
	.short	420
	.space	2
	.word	bcdDevice_show
	.word	bcdDevice_store
	.type	dev_attr_idProduct, %object
	.size	dev_attr_idProduct, 16
dev_attr_idProduct:
	.word	.LC1006
	.short	420
	.space	2
	.word	idProduct_show
	.word	idProduct_store
	.type	dev_attr_idVendor, %object
	.size	dev_attr_idVendor, 16
dev_attr_idVendor:
	.word	.LC1007
	.short	420
	.space	2
	.word	idVendor_show
	.word	idVendor_store
	.type	uasp_function, %object
	.size	uasp_function, 52
uasp_function:
	.word	.LC1008
	.space	20
	.word	uasp_function_init
	.word	uasp_function_cleanup
	.space	8
	.word	uasp_function_bind_config
	.space	8
	.type	audio_source_function, %object
	.size	audio_source_function, 52
audio_source_function:
	.word	.LC710
	.space	12
	.word	audio_source_function_attributes
	.space	4
	.word	audio_source_function_init
	.word	audio_source_function_cleanup
	.space	8
	.word	audio_source_function_bind_config
	.word	audio_source_function_unbind_config
	.space	4
	.type	audio_source_function_attributes, %object
	.size	audio_source_function_attributes, 8
audio_source_function_attributes:
	.word	dev_attr_pcm
	.word	0
	.type	dev_attr_pcm, %object
	.size	dev_attr_pcm, 16
dev_attr_pcm:
	.word	.LC1009
	.short	420
	.space	2
	.word	audio_source_pcm_show
	.word	0
	.type	accessory_function, %object
	.size	accessory_function, 52
accessory_function:
	.word	.LC613
	.space	20
	.word	accessory_function_init
	.word	accessory_function_cleanup
	.space	8
	.word	accessory_function_bind_config
	.space	4
	.word	accessory_function_ctrlrequest
	.type	mass_storage_function, %object
	.size	mass_storage_function, 52
mass_storage_function:
	.word	.LC1010
	.space	12
	.word	mass_storage_function_attributes
	.space	4
	.word	mass_storage_function_init
	.word	mass_storage_function_cleanup
	.space	8
	.word	mass_storage_function_bind_config
	.space	8
	.type	mass_storage_function_attributes, %object
	.size	mass_storage_function_attributes, 20
mass_storage_function_attributes:
	.word	dev_attr_inquiry_string
	.word	dev_attr_vendor_string
	.word	dev_attr_product_string
	.word	dev_attr_sua_version_info
	.word	0
	.type	dev_attr_sua_version_info, %object
	.size	dev_attr_sua_version_info, 16
dev_attr_sua_version_info:
	.word	.LC1011
	.short	420
	.space	2
	.word	sua_version_info_show
	.word	sua_version_info_store
	.type	dev_attr_product_string, %object
	.size	dev_attr_product_string, 16
dev_attr_product_string:
	.word	.LC1012
	.short	420
	.space	2
	.word	mass_storage_product_show
	.word	mass_storage_product_store
	.type	dev_attr_vendor_string, %object
	.size	dev_attr_vendor_string, 16
dev_attr_vendor_string:
	.word	.LC1013
	.short	420
	.space	2
	.word	mass_storage_vendor_show
	.word	mass_storage_vendor_store
	.type	dev_attr_inquiry_string, %object
	.size	dev_attr_inquiry_string, 16
dev_attr_inquiry_string:
	.word	.LC1014
	.short	420
	.space	2
	.word	mass_storage_inquiry_show
	.word	mass_storage_inquiry_store
	.type	ecm_function, %object
	.size	ecm_function, 52
ecm_function:
	.word	.LC882
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_function_bind_config
	.word	ecm_function_unbind_config
	.space	4
	.type	rndis_qc_function, %object
	.size	rndis_qc_function, 52
rndis_qc_function:
	.word	.LC1015
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_qc_function_init
	.word	rndis_qc_function_cleanup
	.space	8
	.word	rndis_qc_function_bind_config
	.word	rndis_qc_function_unbind_config
	.space	4
	.type	rndis_function, %object
	.size	rndis_function, 52
rndis_function:
	.word	.LC826
	.space	12
	.word	rndis_function_attributes
	.space	4
	.word	rndis_function_init
	.word	rndis_function_cleanup
	.space	8
	.word	rndis_function_bind_config
	.word	rndis_function_unbind_config
	.space	4
	.type	rndis_function_attributes, %object
	.size	rndis_function_attributes, 24
rndis_function_attributes:
	.word	dev_attr_manufacturer
	.word	dev_attr_wceis
	.word	dev_attr_ethaddr
	.word	dev_attr_vendorID
	.word	dev_attr_max_pkt_per_xfer
	.word	0
	.type	dev_attr_max_pkt_per_xfer, %object
	.size	dev_attr_max_pkt_per_xfer, 16
dev_attr_max_pkt_per_xfer:
	.word	.LC1016
	.short	420
	.space	2
	.word	rndis_max_pkt_per_xfer_show
	.word	rndis_max_pkt_per_xfer_store
	.type	dev_attr_vendorID, %object
	.size	dev_attr_vendorID, 16
dev_attr_vendorID:
	.word	.LC1017
	.short	420
	.space	2
	.word	rndis_vendorID_show
	.word	rndis_vendorID_store
	.type	dev_attr_ethaddr, %object
	.size	dev_attr_ethaddr, 16
dev_attr_ethaddr:
	.word	.LC1018
	.short	420
	.space	2
	.word	rndis_ethaddr_show
	.word	rndis_ethaddr_store
	.type	dev_attr_wceis, %object
	.size	dev_attr_wceis, 16
dev_attr_wceis:
	.word	.LC1019
	.short	420
	.space	2
	.word	rndis_wceis_show
	.word	rndis_wceis_store
	.type	dev_attr_manufacturer, %object
	.size	dev_attr_manufacturer, 16
dev_attr_manufacturer:
	.word	.LC1020
	.short	420
	.space	2
	.word	rndis_manufacturer_show
	.word	rndis_manufacturer_store
	.type	ptp_function, %object
	.size	ptp_function, 52
ptp_function:
	.word	.LC1021
	.space	20
	.word	ptp_function_init
	.word	ptp_function_cleanup
	.space	8
	.word	ptp_function_bind_config
	.space	4
	.word	mtp_function_ctrlrequest
	.type	mtp_function, %object
	.size	mtp_function, 52
mtp_function:
	.word	.LC616
	.space	20
	.word	mtp_function_init
	.word	mtp_function_cleanup
	.space	8
	.word	mtp_function_bind_config
	.space	4
	.word	mtp_function_ctrlrequest
	.type	ccid_function, %object
	.size	ccid_function, 52
ccid_function:
	.word	.LC549
	.space	20
	.word	ccid_function_init
	.word	ccid_function_cleanup
	.space	8
	.word	ccid_function_bind_config
	.space	8
	.type	qdss_function, %object
	.size	qdss_function, 52
qdss_function:
	.word	.LC617
	.space	20
	.word	qdss_function_init
	.word	qdss_function_cleanup
	.space	8
	.word	qdss_function_bind_config
	.space	8
	.type	diag_function, %object
	.size	diag_function, 52
diag_function:
	.word	.LC1022
	.space	12
	.word	diag_function_attributes
	.space	4
	.word	diag_function_init
	.word	diag_function_cleanup
	.space	8
	.word	diag_function_bind_config
	.space	8
	.type	diag_function_attributes, %object
	.size	diag_function_attributes, 8
diag_function_attributes:
	.word	dev_attr_clients
	.word	0
	.type	dev_attr_clients, %object
	.size	dev_attr_clients, 16
dev_attr_clients:
	.word	.LC1023
	.short	128
	.space	2
	.word	0
	.word	clients_store
	.type	audio_function, %object
	.size	audio_function, 52
audio_function:
	.word	.LC921
	.space	36
	.word	audio_function_bind_config
	.space	8
	.type	mbim_function, %object
	.size	mbim_function, 52
mbim_function:
	.word	.LC865
	.space	12
	.word	mbim_function_attributes
	.space	4
	.word	mbim_function_init
	.word	mbim_function_cleanup
	.space	8
	.word	mbim_function_bind_config
	.space	4
	.word	mbim_function_ctrlrequest
	.type	mbim_function_attributes, %object
	.size	mbim_function_attributes, 8
mbim_function_attributes:
	.word	dev_attr_mbim_transports
	.word	0
	.type	dev_attr_mbim_transports, %object
	.size	dev_attr_mbim_transports, 16
dev_attr_mbim_transports:
	.word	.LC1024
	.short	420
	.space	2
	.word	mbim_transports_show
	.word	mbim_transports_store
	.type	ecm_qc_function, %object
	.size	ecm_qc_function, 52
ecm_qc_function:
	.word	.LC1025
	.space	12
	.word	ecm_function_attributes
	.space	4
	.word	ecm_function_init
	.word	ecm_function_cleanup
	.space	8
	.word	ecm_qc_function_bind_config
	.word	ecm_qc_function_unbind_config
	.space	4
	.type	ecm_function_attributes, %object
	.size	ecm_function_attributes, 12
ecm_function_attributes:
	.word	dev_attr_ecm_transports
	.word	dev_attr_ecm_ethaddr
	.word	0
	.type	dev_attr_ecm_transports, %object
	.size	dev_attr_ecm_transports, 16
dev_attr_ecm_transports:
	.word	.LC1026
	.short	420
	.space	2
	.word	ecm_transports_show
	.word	ecm_transports_store
	.type	dev_attr_ecm_ethaddr, %object
	.size	dev_attr_ecm_ethaddr, 16
dev_attr_ecm_ethaddr:
	.word	.LC1027
	.short	420
	.space	2
	.word	ecm_ethaddr_show
	.word	ecm_ethaddr_store
	.type	rmnet_function, %object
	.size	rmnet_function, 52
rmnet_function:
	.word	.LC703
	.space	12
	.word	rmnet_function_attributes
	.space	8
	.word	rmnet_function_cleanup
	.space	8
	.word	rmnet_function_bind_config
	.space	8
	.type	rmnet_function_attributes, %object
	.size	rmnet_function_attributes, 12
rmnet_function_attributes:
	.word	dev_attr_rmnet_transports
	.word	dev_attr_rmnet_xport_names
	.word	0
	.type	dev_attr_rmnet_xport_names, %object
	.size	dev_attr_rmnet_xport_names, 16
dev_attr_rmnet_xport_names:
	.word	.LC1028
	.short	420
	.space	2
	.word	rmnet_xport_names_show
	.word	rmnet_xport_names_store
	.type	dev_attr_rmnet_transports, %object
	.size	dev_attr_rmnet_transports, 16
dev_attr_rmnet_transports:
	.word	.LC1029
	.short	420
	.space	2
	.word	rmnet_transports_show
	.word	rmnet_transports_store
	.type	rmnet_smd_sdio_function, %object
	.size	rmnet_smd_sdio_function, 52
rmnet_smd_sdio_function:
	.word	.LC552
	.space	12
	.word	rmnet_smd_sdio_attributes
	.space	4
	.word	rmnet_smd_sdio_function_init
	.word	rmnet_smd_sdio_function_cleanup
	.space	8
	.word	rmnet_smd_sdio_bind_config
	.space	8
	.type	rmnet_smd_sdio_attributes, %object
	.size	rmnet_smd_sdio_attributes, 8
rmnet_smd_sdio_attributes:
	.word	dev_attr_transport
	.word	0
	.type	rmnet_sdio_function, %object
	.size	rmnet_sdio_function, 52
rmnet_sdio_function:
	.word	.LC705
	.space	36
	.word	rmnet_sdio_function_bind_config
	.space	8
	.type	rmnet_smd_function, %object
	.size	rmnet_smd_function, 52
rmnet_smd_function:
	.word	.LC1030
	.space	36
	.word	rmnet_smd_function_bind_config
	.space	8
	.type	acm_function, %object
	.size	acm_function, 52
acm_function:
	.word	.LC973
	.space	12
	.word	acm_function_attributes
	.space	4
	.word	acm_function_init
	.word	acm_function_cleanup
	.space	8
	.word	acm_function_bind_config
	.space	8
	.type	acm_function_attributes, %object
	.size	acm_function_attributes, 8
acm_function_attributes:
	.word	dev_attr_instances
	.word	0
	.type	dev_attr_instances, %object
	.size	dev_attr_instances, 16
dev_attr_instances:
	.word	.LC1031
	.short	420
	.space	2
	.word	acm_instances_show
	.word	acm_instances_store
	.type	midi_function, %object
	.size	midi_function, 52
midi_function:
	.word	.LC1032
	.space	12
	.word	midi_function_attributes
	.space	4
	.word	midi_function_init
	.word	midi_function_cleanup
	.space	8
	.word	midi_function_bind_config
	.space	8
	.type	midi_function_attributes, %object
	.size	midi_function_attributes, 8
midi_function_attributes:
	.word	dev_attr_alsa
	.word	0
	.type	dev_attr_alsa, %object
	.size	dev_attr_alsa, 16
dev_attr_alsa:
	.word	.LC1033
	.short	292
	.space	2
	.word	midi_alsa_show
	.word	0
	.type	ffs_function_attributes, %object
	.size	ffs_function_attributes, 8
ffs_function_attributes:
	.word	dev_attr_aliases
	.word	0
	.type	dev_attr_aliases, %object
	.size	dev_attr_aliases, 16
dev_attr_aliases:
	.word	.LC1034
	.short	420
	.space	2
	.word	ffs_aliases_show
	.word	ffs_aliases_store
	.type	dev_strings, %object
	.size	dev_strings, 8
dev_strings:
	.word	stringtab_dev
	.word	0
	.type	stringtab_dev, %object
	.size	stringtab_dev, 8
stringtab_dev:
	.short	1033
	.space	2
	.word	strings_dev
	.type	ncm_function, %object
	.size	ncm_function, 52
ncm_function:
	.word	.LC500
	.space	20
	.word	ncm_function_init
	.word	ncm_function_cleanup
	.space	8
	.word	ncm_function_bind_config
	.word	ncm_function_unbind_config
	.space	4
	.type	ncm_string_table, %object
	.size	ncm_string_table, 8
ncm_string_table:
	.short	1033
	.space	2
	.word	ncm_string_defs
	.type	conn_gadget_function, %object
	.size	conn_gadget_function, 52
conn_gadget_function:
	.word	.LC548
	.space	12
	.word	conn_gadget_function_attributes
	.space	4
	.word	conn_gadget_function_init
	.word	conn_gadget_function_cleanup
	.space	8
	.word	conn_gadget_function_bind_config
	.space	8
	.type	conn_gadget_function_attributes, %object
	.size	conn_gadget_function_attributes, 16
conn_gadget_function_attributes:
	.word	dev_attr_usb_buffer_size
	.word	dev_attr_out_max_packet_size
	.word	dev_attr_in_max_packet_size
	.word	0
	.type	dev_attr_in_max_packet_size, %object
	.size	dev_attr_in_max_packet_size, 16
dev_attr_in_max_packet_size:
	.word	.LC1039
	.short	420
	.space	2
	.word	conn_gadget_in_max_packet_size_show
	.word	conn_gadget_in_max_packet_size_store
	.type	dev_attr_out_max_packet_size, %object
	.size	dev_attr_out_max_packet_size, 16
dev_attr_out_max_packet_size:
	.word	.LC1040
	.short	420
	.space	2
	.word	conn_gadget_out_max_packet_size_show
	.word	conn_gadget_out_max_packet_size_store
	.type	dev_attr_usb_buffer_size, %object
	.size	dev_attr_usb_buffer_size, 16
dev_attr_usb_buffer_size:
	.word	.LC1041
	.short	420
	.space	2
	.word	conn_gadget_usb_buffer_size_show
	.word	conn_gadget_usb_buffer_size_store
	.type	audio_stringtab_dev, %object
	.size	audio_stringtab_dev, 8
audio_stringtab_dev:
	.short	1033
	.space	2
	.word	audio_string_defs
	.type	rndis_qc_string_table, %object
	.size	rndis_qc_string_table, 8
rndis_qc_string_table:
	.short	1033
	.space	2
	.word	rndis_qc_string_defs
	.type	ecm_string_table, %object
	.size	ecm_string_table, 8
ecm_string_table:
	.short	1033
	.space	2
	.word	ecm_string_defs
	.type	mbim_string_table, %object
	.size	mbim_string_table, 8
mbim_string_table:
	.short	1033
	.space	2
	.word	mbim_string_defs
	.type	ecm_qc_string_table, %object
	.size	ecm_qc_string_table, 8
ecm_qc_string_table:
	.short	1033
	.space	2
	.word	ecm_qc_string_defs
	.type	rndis_string_table, %object
	.size	rndis_string_table, 8
rndis_string_table:
	.short	1033
	.space	2
	.word	rndis_string_defs
	.type	acc_string_table, %object
	.size	acc_string_table, 8
acc_string_table:
	.short	1033
	.space	2
	.word	acc_string_defs
	.type	mtp_string_table, %object
	.size	mtp_string_table, 8
mtp_string_table:
	.short	1033
	.space	2
	.word	mtp_string_defs
	.type	midi_stringtab, %object
	.size	midi_stringtab, 8
midi_stringtab:
	.short	1033
	.space	2
	.word	midi_string_defs
	.type	acm_string_table, %object
	.size	acm_string_table, 8
acm_string_table:
	.short	1033
	.space	2
	.word	acm_string_defs
	.type	smd_pi, %object
	.size	smd_pi, 24
smd_pi:
	.space	4
	.word	.LC1085
	.space	4
	.space	4
	.word	.LC1086
	.space	4
	.type	sport_info, %object
	.size	sport_info, 24
sport_info:
	.word	.LC1087
	.space	4
	.word	9
	.word	.LC1088
	.space	4
	.word	10
	.type	fsg_stringtab, %object
	.size	fsg_stringtab, 8
fsg_stringtab:
	.short	1033
	.space	2
	.word	fsg_strings
	.type	fs_audio_desc, %object
	.size	fs_audio_desc, 48
fs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	fs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	hs_audio_desc, %object
	.size	hs_audio_desc, 48
hs_audio_desc:
	.word	audio_source_ac_interface_desc
	.word	audio_source_ac_header_desc
	.word	input_terminal_desc
	.word	output_terminal_desc
	.word	feature_unit_desc
	.word	as_interface_alt_0_desc
	.word	as_interface_alt_1_desc
	.word	as_header_desc
	.word	as_type_i_desc
	.word	hs_as_in_ep_desc
	.word	as_iso_in_desc
	.word	0
	.type	rmnet_string_table, %object
	.size	rmnet_string_table, 8
rmnet_string_table:
	.short	1033
	.space	2
	.word	rmnet_string_defs
	.type	dev_attr_transport, %object
	.size	dev_attr_transport, 16
dev_attr_transport:
	.word	.LC1096
	.short	420
	.space	2
	.word	0
	.word	transport_store
	.type	rmnet_mux_string_table, %object
	.size	rmnet_mux_string_table, 8
rmnet_mux_string_table:
	.short	1033
	.space	2
	.word	rmnet_mux_string_defs
	.type	rmnet_mux_string_defs, %object
	.size	rmnet_mux_string_defs, 16
rmnet_mux_string_defs:
	.space	4
	.word	.LC1094
	.space	8
	.type	rmnet_sdio_string_table, %object
	.size	rmnet_sdio_string_table, 8
rmnet_sdio_string_table:
	.short	1033
	.space	2
	.word	rmnet_sdio_string_defs
	.type	rmnet_sdio_string_defs, %object
	.size	rmnet_sdio_string_defs, 16
rmnet_sdio_string_defs:
	.space	4
	.word	.LC1097
	.space	8
	.type	rmnet_smd_string_table, %object
	.size	rmnet_smd_string_table, 8
rmnet_smd_string_table:
	.short	1033
	.space	2
	.word	rmnet_smd_string_defs
	.type	rmnet_smd_string_defs, %object
	.size	rmnet_smd_string_defs, 16
rmnet_smd_string_defs:
	.space	4
	.word	.LC1097
	.space	8
	.type	qdss_string_table, %object
	.size	qdss_string_table, 8
qdss_string_table:
	.short	1033
	.space	2
	.word	qdss_string_defs
	.section	.initcall6.init,"aw",%progbits
	.align	2
	.type	__initcall_init6, %object
	.size	__initcall_init6, 4
__initcall_init6:
	.word	init
	.type	__initcall_gether_init6, %object
	.size	__initcall_gether_init6, 4
__initcall_gether_init6:
	.word	gether_init
	.type	__initcall_ghsuart_data_init6, %object
	.size	__initcall_ghsuart_data_init6, 4
__initcall_ghsuart_data_init6:
	.word	ghsuart_data_init
	.type	__initcall_ghsuart_ctrl_init6, %object
	.size	__initcall_ghsuart_ctrl_init6, 4
__initcall_ghsuart_ctrl_init6:
	.word	ghsuart_ctrl_init
	.type	__initcall_ghsic_data_init6, %object
	.size	__initcall_ghsic_data_init6, 4
__initcall_ghsic_data_init6:
	.word	ghsic_data_init
	.type	__initcall_gctrl_init6, %object
	.size	__initcall_gctrl_init6, 4
__initcall_gctrl_init6:
	.word	gctrl_init
	.type	__initcall_gqti_ctrl_init6, %object
	.size	__initcall_gqti_ctrl_init6, 4
__initcall_gqti_ctrl_init6:
	.word	gqti_ctrl_init
	.type	__initcall_gsmd_ctrl_init6, %object
	.size	__initcall_gsmd_ctrl_init6, 4
__initcall_gsmd_ctrl_init6:
	.word	gsmd_ctrl_init
	.data
	.align	2
.LANCHOR2 = . + 0
	.type	ntb_parameters, %object
	.size	ntb_parameters, 28
ntb_parameters:
	.short	28
	.short	3
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.type	mbim_ntb_parameters, %object
	.size	mbim_ntb_parameters, 28
mbim_ntb_parameters:
	.short	28
	.short	1
	.word	16384
	.short	4
	.short	0
	.short	4
	.space	2
	.word	4096
	.short	4
	.short	0
	.short	4
	.short	0
	.type	ndp16_opts, %object
	.size	ndp16_opts, 44
ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	ndp32_opts, %object
	.size	ndp32_opts, 44
ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	mbim_ext_config_desc, %object
	.size	mbim_ext_config_desc, 40
mbim_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.byte	65
	.byte	76
	.byte	84
	.byte	82
	.byte	67
	.byte	70
	.byte	71
	.space	1
	.space	14
	.type	mbim_os_string, %object
	.size	mbim_os_string, 18
mbim_os_string:
	.byte	18
	.byte	3
	.byte	77
	.byte	0
	.byte	83
	.byte	0
	.byte	70
	.byte	0
	.byte	84
	.byte	0
	.byte	49
	.byte	0
	.byte	48
	.byte	0
	.byte	48
	.byte	0
	.byte	-91
	.byte	0
	.space	2
	.type	_rs.52541, %object
	.size	_rs.52541, 24
_rs.52541:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	audio_playback_buf_size, %object
	.size	audio_playback_buf_size, 4
audio_playback_buf_size:
	.word	8192
	.type	audio_capture_buf_size, %object
	.size	audio_capture_buf_size, 4
audio_capture_buf_size:
	.word	8192
	.type	mtp_os_string, %object
	.size	mtp_os_string, 18
mtp_os_string:
	.byte	18
	.byte	3
	.byte	77
	.byte	0
	.byte	83
	.byte	0
	.byte	70
	.byte	0
	.byte	84
	.byte	0
	.byte	49
	.byte	0
	.byte	48
	.byte	0
	.byte	48
	.byte	0
	.byte	1
	.byte	0
	.space	2
	.type	ccid_class_desc, %object
	.size	ccid_class_desc, 54
ccid_class_desc:
	.byte	54
	.byte	33
	.short	272
	.byte	0
	.byte	2
	.4byte	1
	.4byte	3580
	.4byte	3580
	.byte	0
	.4byte	9600
	.4byte	9600
	.byte	0
	.word	0
	.word	0
	.word	0
	.word	131198
	.word	512
	.byte	0
	.byte	0
	.short	0
	.byte	0
	.byte	1
	.space	2
	.type	dl_intr_threshold, %object
	.size	dl_intr_threshold, 4
dl_intr_threshold:
	.word	20
	.type	ghsic_data_fctrl_support, %object
	.size	ghsic_data_fctrl_support, 4
ghsic_data_fctrl_support:
	.word	1
	.type	ghsic_data_fctrl_en_thld, %object
	.size	ghsic_data_fctrl_en_thld, 4
ghsic_data_fctrl_en_thld:
	.word	500
	.type	qmult, %object
	.size	qmult, 4
qmult:
	.word	10
	.type	_rs.52879, %object
	.size	_rs.52879, 24
_rs.52879:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	ghsuart_data_rx_req_size, %object
	.size	ghsuart_data_rx_req_size, 4
ghsuart_data_rx_req_size:
	.word	2048
	.type	_rs.52930, %object
	.size	_rs.52930, 24
_rs.52930:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	bam_mux_rx_fctrl_support, %object
	.size	bam_mux_rx_fctrl_support, 4
bam_mux_rx_fctrl_support:
	.word	1
	.type	bam_mux_rx_fctrl_en_thld, %object
	.size	bam_mux_rx_fctrl_en_thld, 4
bam_mux_rx_fctrl_en_thld:
	.word	500
	.type	bam_mux_rx_req_size, %object
	.size	bam_mux_rx_req_size, 4
bam_mux_rx_req_size:
	.word	2048
	.type	device_desc, %object
	.size	device_desc, 18
device_desc:
	.byte	18
	.byte	1
	.short	512
	.byte	0
	.space	3
	.short	6353
	.short	1
	.short	-1
	.space	3
	.byte	1
	.space	2
	.type	bam_pending_limit, %object
	.size	bam_pending_limit, 4
bam_pending_limit:
	.word	220
	.type	bam_mux_rx_fctrl_dis_thld, %object
	.size	bam_mux_rx_fctrl_dis_thld, 4
bam_mux_rx_fctrl_dis_thld:
	.word	300
	.type	last_vote.63131, %object
	.size	last_vote.63131, 4
last_vote.63131:
	.word	-1
	.type	req_capture_buf_size, %object
	.size	req_capture_buf_size, 4
req_capture_buf_size:
	.word	32
	.type	req_playback_count, %object
	.size	req_playback_count, 4
req_playback_count:
	.word	48
	.type	req_playback_buf_size, %object
	.size	req_playback_buf_size, 4
req_playback_buf_size:
	.word	32
	.type	ghsic_data_fctrl_dis_thld, %object
	.size	ghsic_data_fctrl_dis_thld, 4
ghsic_data_fctrl_dis_thld:
	.word	300
	.type	_rs.52013, %object
	.size	_rs.52013, 24
_rs.52013:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	ghsic_data_pend_limit_with_bridge, %object
	.size	ghsic_data_pend_limit_with_bridge, 4
ghsic_data_pend_limit_with_bridge:
	.word	500
	.type	ghsic_data_rx_req_size, %object
	.size	ghsic_data_rx_req_size, 4
ghsic_data_rx_req_size:
	.word	2048
	.type	_rs.52070, %object
	.size	_rs.52070, 24
_rs.52070:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	mbim_ndp16_opts, %object
	.size	mbim_ndp16_opts, 44
mbim_ndp16_opts:
	.word	1213023054
	.word	810369870
	.word	12
	.word	8
	.word	4
	.word	1
	.word	1
	.word	1
	.word	0
	.word	0
	.word	1
	.type	mbim_ndp32_opts, %object
	.size	mbim_ndp32_opts, 44
mbim_ndp32_opts:
	.word	1751999342
	.word	812475246
	.word	16
	.word	16
	.word	8
	.word	2
	.word	2
	.word	2
	.word	1
	.word	2
	.word	2
	.type	mux_sdio_rx_fctrl_en_thld, %object
	.size	mux_sdio_rx_fctrl_en_thld, 4
mux_sdio_rx_fctrl_en_thld:
	.word	1000
	.type	bam_mux_rx_q_size, %object
	.size	bam_mux_rx_q_size, 4
bam_mux_rx_q_size:
	.word	16
	.type	bam_mux_tx_q_size, %object
	.size	bam_mux_tx_q_size, 4
bam_mux_tx_q_size:
	.word	200
	.type	_rs.38197, %object
	.size	_rs.38197, 24
_rs.38197:
	.word	0
	.word	500
	.word	10
	.space	12
	.type	as_interface_alt_1_desc, %object
	.size	as_interface_alt_1_desc, 9
as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	mtp_intr_desc, %object
	.size	mtp_intr_desc, 9
mtp_intr_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	28
	.byte	6
	.space	2
	.space	3
	.type	intf_desc, %object
	.size	intf_desc, 9
intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	-1
	.byte	16
	.byte	1
	.space	1
	.space	3
	.type	fs_bulk_in_desc, %object
	.size	fs_bulk_in_desc, 9
fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	fs_bulk_out_desc, %object
	.size	fs_bulk_out_desc, 9
fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.byte	0
	.space	2
	.space	3
	.type	hs_bulk_in_desc, %object
	.size	hs_bulk_in_desc, 9
hs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	hs_bulk_out_desc, %object
	.size	hs_bulk_out_desc, 9
hs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.byte	0
	.space	2
	.space	3
	.type	ss_bulk_in_desc, %object
	.size	ss_bulk_in_desc, 9
ss_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_bulk_out_desc, %object
	.size	ss_bulk_out_desc, 9
ss_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_smd_interface_desc, %object
	.size	rmnet_smd_interface_desc, 9
rmnet_smd_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_smd_fs_in_desc, %object
	.size	rmnet_smd_fs_in_desc, 9
rmnet_smd_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_out_desc, %object
	.size	rmnet_smd_fs_out_desc, 9
rmnet_smd_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_smd_fs_notify_desc, %object
	.size	rmnet_smd_fs_notify_desc, 9
rmnet_smd_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_smd_hs_in_desc, %object
	.size	rmnet_smd_hs_in_desc, 9
rmnet_smd_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_out_desc, %object
	.size	rmnet_smd_hs_out_desc, 9
rmnet_smd_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_smd_hs_notify_desc, %object
	.size	rmnet_smd_hs_notify_desc, 9
rmnet_smd_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_sdio_interface_desc, %object
	.size	rmnet_sdio_interface_desc, 9
rmnet_sdio_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_sdio_fs_in_desc, %object
	.size	rmnet_sdio_fs_in_desc, 9
rmnet_sdio_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_out_desc, %object
	.size	rmnet_sdio_fs_out_desc, 9
rmnet_sdio_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_sdio_fs_notify_desc, %object
	.size	rmnet_sdio_fs_notify_desc, 9
rmnet_sdio_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_sdio_hs_in_desc, %object
	.size	rmnet_sdio_hs_in_desc, 9
rmnet_sdio_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_out_desc, %object
	.size	rmnet_sdio_hs_out_desc, 9
rmnet_sdio_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_sdio_hs_notify_desc, %object
	.size	rmnet_sdio_hs_notify_desc, 9
rmnet_sdio_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	input_terminal_desc, %object
	.size	input_terminal_desc, 12
input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	0
	.space	1
	.short	3
	.space	2
	.type	as_type_i_desc, %object
	.size	as_type_i_desc, 11
as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	audio_source_ac_interface_desc, %object
	.size	audio_source_ac_interface_desc, 9
audio_source_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	as_interface_alt_0_desc, %object
	.size	as_interface_alt_0_desc, 9
as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	fs_as_in_ep_desc, %object
	.size	fs_as_in_ep_desc, 9
fs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	1
	.space	2
	.space	3
	.type	hs_as_in_ep_desc, %object
	.size	hs_as_in_ep_desc, 9
hs_as_in_ep_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	13
	.short	256
	.byte	4
	.space	2
	.space	3
	.type	ecm_qc_control_intf, %object
	.size	ecm_qc_control_intf, 9
ecm_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_union_desc, %object
	.size	ecm_qc_union_desc, 5
ecm_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_qc_data_nop_intf, %object
	.size	ecm_qc_data_nop_intf, 9
ecm_qc_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_data_intf, %object
	.size	ecm_qc_data_intf, 9
ecm_qc_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_qc_fs_in_desc, %object
	.size	ecm_qc_fs_in_desc, 9
ecm_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_out_desc, %object
	.size	ecm_qc_fs_out_desc, 9
ecm_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	ecm_qc_fs_notify_desc, %object
	.size	ecm_qc_fs_notify_desc, 9
ecm_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	ecm_qc_hs_in_desc, %object
	.size	ecm_qc_hs_in_desc, 9
ecm_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_out_desc, %object
	.size	ecm_qc_hs_out_desc, 9
ecm_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ecm_qc_hs_notify_desc, %object
	.size	ecm_qc_hs_notify_desc, 9
ecm_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ecm_qc_ss_in_desc, %object
	.size	ecm_qc_ss_in_desc, 9
ecm_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_out_desc, %object
	.size	ecm_qc_ss_out_desc, 9
ecm_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ecm_qc_ss_notify_desc, %object
	.size	ecm_qc_ss_notify_desc, 9
ecm_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	mbim_iad_desc, %object
	.size	mbim_iad_desc, 8
mbim_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.type	mbim_control_intf, %object
	.size	mbim_control_intf, 9
mbim_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	14
	.byte	0
	.space	1
	.space	3
	.type	mbim_union_desc, %object
	.size	mbim_union_desc, 5
mbim_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	mbim_data_nop_intf, %object
	.size	mbim_data_nop_intf, 9
mbim_data_nop_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	mbim_data_intf, %object
	.size	mbim_data_intf, 9
mbim_data_intf:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	2
	.space	1
	.space	3
	.type	fs_mbim_in_desc, %object
	.size	fs_mbim_in_desc, 9
fs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_out_desc, %object
	.size	fs_mbim_out_desc, 9
fs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_mbim_notify_desc, %object
	.size	fs_mbim_notify_desc, 9
fs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	32
	.space	2
	.space	3
	.type	mbb_desc, %object
	.size	mbb_desc, 12
mbb_desc:
	.byte	12
	.byte	36
	.byte	27
	.2byte	256
	.2byte	4096
	.byte	32
	.byte	-128
	.2byte	4064
	.byte	32
	.type	hs_mbim_in_desc, %object
	.size	hs_mbim_in_desc, 9
hs_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_out_desc, %object
	.size	hs_mbim_out_desc, 9
hs_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_mbim_notify_desc, %object
	.size	hs_mbim_notify_desc, 9
hs_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	ss_mbim_in_desc, %object
	.size	ss_mbim_in_desc, 9
ss_mbim_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_out_desc, %object
	.size	ss_mbim_out_desc, 9
ss_mbim_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_mbim_notify_desc, %object
	.size	ss_mbim_notify_desc, 9
ss_mbim_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	64
	.byte	9
	.space	2
	.space	3
	.type	ecm_iad_descriptor, %object
	.size	ecm_iad_descriptor, 8
ecm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	ecm_control_intf, %object
	.size	ecm_control_intf, 9
ecm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.space	3
	.type	ecm_union_desc, %object
	.size	ecm_union_desc, 5
ecm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ecm_data_nop_intf, %object
	.size	ecm_data_nop_intf, 9
ecm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ecm_data_intf, %object
	.size	ecm_data_intf, 9
ecm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	fs_ecm_in_desc, %object
	.size	fs_ecm_in_desc, 9
fs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_out_desc, %object
	.size	fs_ecm_out_desc, 9
fs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ecm_notify_desc, %object
	.size	fs_ecm_notify_desc, 9
fs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ecm_in_desc, %object
	.size	hs_ecm_in_desc, 9
hs_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_out_desc, %object
	.size	hs_ecm_out_desc, 9
hs_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ecm_notify_desc, %object
	.size	hs_ecm_notify_desc, 9
hs_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	ss_ecm_in_desc, %object
	.size	ss_ecm_in_desc, 9
ss_ecm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_out_desc, %object
	.size	ss_ecm_out_desc, 9
ss_ecm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_ecm_notify_desc, %object
	.size	ss_ecm_notify_desc, 9
ss_ecm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	speaker_as_type_i_desc, %object
	.size	speaker_as_type_i_desc, 11
speaker_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.space	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	microphone_input_terminal_desc, %object
	.size	microphone_input_terminal_desc, 12
microphone_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	1
	.short	513
	.byte	2
	.byte	1
	.short	3
	.space	2
	.type	microphone_as_type_i_desc, %object
	.size	microphone_as_type_i_desc, 11
microphone_as_type_i_desc:
	.byte	11
	.byte	36
	.byte	2
	.byte	1
	.byte	1
	.byte	2
	.byte	16
	.byte	1
	.space	3
	.space	1
	.type	microphone_as_interface_alt_0_desc, %object
	.size	microphone_as_interface_alt_0_desc, 9
microphone_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_interface_alt_1_desc, %object
	.size	microphone_as_interface_alt_1_desc, 9
microphone_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_0_desc, %object
	.size	speaker_as_interface_alt_0_desc, 9
speaker_as_interface_alt_0_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	0
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	speaker_as_interface_alt_1_desc, %object
	.size	speaker_as_interface_alt_1_desc, 9
speaker_as_interface_alt_1_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	1
	.byte	1
	.byte	1
	.byte	2
	.space	2
	.space	3
	.type	microphone_as_ep_in_desc, %object
	.size	microphone_as_ep_in_desc, 9
microphone_as_ep_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	5
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	speaker_as_ep_out_desc, %object
	.size	speaker_as_ep_out_desc, 9
speaker_as_ep_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	9
	.short	32
	.byte	4
	.space	2
	.space	3
	.type	ncm_iad_desc, %object
	.size	ncm_iad_desc, 8
ncm_iad_desc:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.type	ncm_control_intf, %object
	.size	ncm_control_intf, 9
ncm_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	13
	.byte	0
	.space	1
	.space	3
	.type	ncm_union_desc, %object
	.size	ncm_union_desc, 5
ncm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	ncm_data_nop_intf, %object
	.size	ncm_data_nop_intf, 9
ncm_data_nop_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	0
	.byte	0
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	ncm_data_intf, %object
	.size	ncm_data_intf, 9
ncm_data_intf:
	.byte	9
	.byte	4
	.byte	1
	.byte	1
	.byte	2
	.byte	10
	.byte	0
	.byte	1
	.space	1
	.space	3
	.type	fs_ncm_in_desc, %object
	.size	fs_ncm_in_desc, 9
fs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_out_desc, %object
	.size	fs_ncm_out_desc, 9
fs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_ncm_notify_desc, %object
	.size	fs_ncm_notify_desc, 9
fs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	32
	.space	2
	.space	3
	.type	hs_ncm_in_desc, %object
	.size	hs_ncm_in_desc, 9
hs_ncm_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_out_desc, %object
	.size	hs_ncm_out_desc, 9
hs_ncm_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_ncm_notify_desc, %object
	.size	hs_ncm_notify_desc, 9
hs_ncm_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	16
	.byte	9
	.space	2
	.space	3
	.type	acc_interface_desc, %object
	.size	acc_interface_desc, 9
acc_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	acc_fullspeed_in_desc, %object
	.size	acc_fullspeed_in_desc, 9
acc_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acc_fullspeed_out_desc, %object
	.size	acc_fullspeed_out_desc, 9
acc_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acc_highspeed_in_desc, %object
	.size	acc_highspeed_in_desc, 9
acc_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_highspeed_out_desc, %object
	.size	acc_highspeed_out_desc, 9
acc_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acc_superspeed_in_desc, %object
	.size	acc_superspeed_in_desc, 9
acc_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acc_superspeed_out_desc, %object
	.size	acc_superspeed_out_desc, 9
acc_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_intf_desc, %object
	.size	fsg_intf_desc, 9
fsg_intf_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	8
	.byte	6
	.byte	80
	.byte	0
	.space	3
	.type	fsg_fs_bulk_in_desc, %object
	.size	fsg_fs_bulk_in_desc, 9
fsg_fs_bulk_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fsg_fs_bulk_out_desc, %object
	.size	fsg_fs_bulk_out_desc, 9
fsg_fs_bulk_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fsg_hs_bulk_in_desc, %object
	.size	fsg_hs_bulk_in_desc, 9
fsg_hs_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	fsg_hs_bulk_out_desc, %object
	.size	fsg_hs_bulk_out_desc, 9
fsg_hs_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.byte	1
	.space	2
	.space	3
	.type	fsg_ss_bulk_in_desc, %object
	.size	fsg_ss_bulk_in_desc, 9
fsg_ss_bulk_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_in_comp_desc, %object
	.size	fsg_ss_bulk_in_comp_desc, 6
fsg_ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	fsg_ss_bulk_out_desc, %object
	.size	fsg_ss_bulk_out_desc, 9
fsg_ss_bulk_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	fsg_ss_bulk_out_comp_desc, %object
	.size	fsg_ss_bulk_out_comp_desc, 6
fsg_ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	mtp_interface_desc, %object
	.size	mtp_interface_desc, 9
mtp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	-1
	.byte	-1
	.byte	0
	.space	1
	.space	3
	.type	mtp_fullspeed_in_desc, %object
	.size	mtp_fullspeed_in_desc, 9
mtp_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	mtp_fullspeed_out_desc, %object
	.size	mtp_fullspeed_out_desc, 9
mtp_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	mtp_highspeed_in_desc, %object
	.size	mtp_highspeed_in_desc, 9
mtp_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_highspeed_out_desc, %object
	.size	mtp_highspeed_out_desc, 9
mtp_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	mtp_superspeed_in_desc, %object
	.size	mtp_superspeed_in_desc, 9
mtp_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	mtp_superspeed_out_desc, %object
	.size	mtp_superspeed_out_desc, 9
mtp_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ccid_interface_desc, %object
	.size	ccid_interface_desc, 9
ccid_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	11
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	ccid_fs_notify_desc, %object
	.size	ccid_fs_notify_desc, 9
ccid_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	32
	.space	2
	.space	3
	.type	ccid_fs_in_desc, %object
	.size	ccid_fs_in_desc, 9
ccid_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_fs_out_desc, %object
	.size	ccid_fs_out_desc, 9
ccid_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	ccid_hs_in_desc, %object
	.size	ccid_hs_in_desc, 9
ccid_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_out_desc, %object
	.size	ccid_hs_out_desc, 9
ccid_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	ccid_hs_notify_desc, %object
	.size	ccid_hs_notify_desc, 9
ccid_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	4
	.byte	9
	.space	2
	.space	3
	.type	qdss_data_intf_desc, %object
	.size	qdss_data_intf_desc, 9
qdss_data_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	1
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_ctrl_intf_desc, %object
	.size	qdss_ctrl_intf_desc, 9
qdss_ctrl_intf_desc:
	.byte	9
	.byte	4
	.space	1
	.byte	0
	.byte	2
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	qdss_ss_data_desc, %object
	.size	qdss_ss_data_desc, 9
qdss_ss_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_data_ep_comp_desc, %object
	.size	qdss_data_ep_comp_desc, 6
qdss_data_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	1
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_in_desc, %object
	.size	qdss_ss_ctrl_in_desc, 9
qdss_ss_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_in_ep_comp_desc, %object
	.size	qdss_ctrl_in_ep_comp_desc, 6
qdss_ctrl_in_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_ss_ctrl_out_desc, %object
	.size	qdss_ss_ctrl_out_desc, 9
qdss_ss_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	qdss_ctrl_out_ep_comp_desc, %object
	.size	qdss_ctrl_out_ep_comp_desc, 6
qdss_ctrl_out_ep_comp_desc:
	.byte	6
	.byte	48
	.byte	0
	.byte	0
	.short	0
	.space	2
	.type	qdss_hs_data_desc, %object
	.size	qdss_hs_data_desc, 9
qdss_hs_data_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_in_desc, %object
	.size	qdss_hs_ctrl_in_desc, 9
qdss_hs_ctrl_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	qdss_hs_ctrl_out_desc, %object
	.size	qdss_hs_ctrl_out_desc, 9
qdss_hs_ctrl_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_interface_desc, %object
	.size	rmnet_mux_interface_desc, 9
rmnet_mux_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-1
	.byte	-1
	.space	1
	.space	3
	.type	rmnet_mux_fs_in_desc, %object
	.size	rmnet_mux_fs_in_desc, 9
rmnet_mux_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_out_desc, %object
	.size	rmnet_mux_fs_out_desc, 9
rmnet_mux_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_mux_fs_notify_desc, %object
	.size	rmnet_mux_fs_notify_desc, 9
rmnet_mux_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_mux_hs_in_desc, %object
	.size	rmnet_mux_hs_in_desc, 9
rmnet_mux_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_out_desc, %object
	.size	rmnet_mux_hs_out_desc, 9
rmnet_mux_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_mux_hs_notify_desc, %object
	.size	rmnet_mux_hs_notify_desc, 9
rmnet_mux_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rl.53611, %object
	.size	rl.53611, 24
rl.53611:
	.word	0
	.word	1000
	.word	1
	.space	12
	.type	midi_ac_interface_desc, %object
	.size	midi_ac_interface_desc, 9
midi_ac_interface_desc:
	.byte	9
	.byte	4
	.space	3
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	midi_ms_interface_desc, %object
	.size	midi_ms_interface_desc, 9
midi_ms_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	1
	.byte	3
	.space	2
	.space	3
	.type	midi_ac_header_desc, %object
	.size	midi_ac_header_desc, 9
midi_ac_header_desc:
	.byte	9
	.byte	36
	.byte	1
	.2byte	256
	.2byte	9
	.byte	1
	.space	1
	.space	3
	.type	midi_bulk_in_desc, %object
	.size	midi_bulk_in_desc, 9
midi_bulk_in_desc:
	.byte	9
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	midi_bulk_out_desc, %object
	.size	midi_bulk_out_desc, 9
midi_bulk_out_desc:
	.byte	9
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	midi_ms_header_desc, %object
	.size	midi_ms_header_desc, 7
midi_ms_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.2byte	256
	.space	2
	.space	1
	.type	midi_ms_in_desc, %object
	.size	midi_ms_in_desc, 20
midi_ms_in_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	midi_ms_out_desc, %object
	.size	midi_ms_out_desc, 20
midi_ms_out_desc:
	.space	1
	.byte	37
	.byte	1
	.space	17
	.type	rl.25977, %object
	.size	rl.25977, 24
rl.25977:
	.word	0
	.word	1000
	.word	1
	.space	12
	.type	rl.25995, %object
	.size	rl.25995, 24
rl.25995:
	.word	0
	.word	1000
	.word	1
	.space	12
	.type	rmnet_interface_desc, %object
	.size	rmnet_interface_desc, 9
rmnet_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	3
	.byte	-1
	.byte	-32
	.byte	0
	.space	1
	.space	3
	.type	rmnet_fs_in_desc, %object
	.size	rmnet_fs_in_desc, 9
rmnet_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_out_desc, %object
	.size	rmnet_fs_out_desc, 9
rmnet_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	64
	.space	3
	.space	3
	.type	rmnet_fs_notify_desc, %object
	.size	rmnet_fs_notify_desc, 9
rmnet_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rmnet_hs_in_desc, %object
	.size	rmnet_hs_in_desc, 9
rmnet_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_out_desc, %object
	.size	rmnet_hs_out_desc, 9
rmnet_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rmnet_hs_notify_desc, %object
	.size	rmnet_hs_notify_desc, 9
rmnet_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rmnet_ss_in_desc, %object
	.size	rmnet_ss_in_desc, 9
rmnet_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_out_desc, %object
	.size	rmnet_ss_out_desc, 9
rmnet_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rmnet_ss_notify_desc, %object
	.size	rmnet_ss_notify_desc, 9
rmnet_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	bam_mux_tx_pkt_drop_thld, %object
	.size	bam_mux_tx_pkt_drop_thld, 4
bam_mux_tx_pkt_drop_thld:
	.word	1000
	.type	ghsic_data_serial_tx_q_size, %object
	.size	ghsic_data_serial_tx_q_size, 4
ghsic_data_serial_tx_q_size:
	.word	20
	.type	ghsic_data_serial_rx_q_size, %object
	.size	ghsic_data_serial_rx_q_size, 4
ghsic_data_serial_rx_q_size:
	.word	10
	.type	ghsic_data_rmnet_tx_q_size, %object
	.size	ghsic_data_rmnet_tx_q_size, 4
ghsic_data_rmnet_tx_q_size:
	.word	300
	.type	ghsic_data_rmnet_rx_q_size, %object
	.size	ghsic_data_rmnet_rx_q_size, 4
ghsic_data_rmnet_rx_q_size:
	.word	50
	.type	ghsuart_data_serial_tx_q_size, %object
	.size	ghsuart_data_serial_tx_q_size, 4
ghsuart_data_serial_tx_q_size:
	.word	5
	.type	ghsuart_data_serial_rx_q_size, %object
	.size	ghsuart_data_serial_rx_q_size, 4
ghsuart_data_serial_rx_q_size:
	.word	5
	.type	ghsuart_data_rmnet_tx_q_size, %object
	.size	ghsuart_data_rmnet_tx_q_size, 4
ghsuart_data_rmnet_tx_q_size:
	.word	20
	.type	ghsuart_data_rmnet_rx_q_size, %object
	.size	ghsuart_data_rmnet_rx_q_size, 4
ghsuart_data_rmnet_rx_q_size:
	.word	10
	.type	acm_iad_descriptor, %object
	.size	acm_iad_descriptor, 8
acm_iad_descriptor:
	.byte	8
	.byte	11
	.space	1
	.byte	2
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.type	acm_control_interface_desc, %object
	.size	acm_control_interface_desc, 9
acm_control_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	1
	.space	1
	.space	3
	.type	acm_union_desc, %object
	.size	acm_union_desc, 5
acm_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	acm_data_interface_desc, %object
	.size	acm_data_interface_desc, 9
acm_data_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	acm_call_mgmt_descriptor, %object
	.size	acm_call_mgmt_descriptor, 5
acm_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.space	1
	.space	3
	.type	acm_fs_in_desc, %object
	.size	acm_fs_in_desc, 9
acm_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_out_desc, %object
	.size	acm_fs_out_desc, 9
acm_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	acm_fs_notify_desc, %object
	.size	acm_fs_notify_desc, 9
acm_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	32
	.space	2
	.space	3
	.type	acm_hs_in_desc, %object
	.size	acm_hs_in_desc, 9
acm_hs_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_out_desc, %object
	.size	acm_hs_out_desc, 9
acm_hs_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	acm_hs_notify_desc, %object
	.size	acm_hs_notify_desc, 9
acm_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	10
	.byte	9
	.space	2
	.space	3
	.type	acm_ss_in_desc, %object
	.size	acm_ss_in_desc, 9
acm_ss_in_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	acm_ss_out_desc, %object
	.size	acm_ss_out_desc, 9
acm_ss_out_desc:
	.byte	7
	.byte	5
	.space	1
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	adb_interface_desc, %object
	.size	adb_interface_desc, 9
adb_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	66
	.byte	1
	.space	1
	.space	3
	.type	adb_fullspeed_in_desc, %object
	.size	adb_fullspeed_in_desc, 9
adb_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	adb_fullspeed_out_desc, %object
	.size	adb_fullspeed_out_desc, 9
adb_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	adb_highspeed_in_desc, %object
	.size	adb_highspeed_in_desc, 9
adb_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_highspeed_out_desc, %object
	.size	adb_highspeed_out_desc, 9
adb_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	adb_superspeed_in_desc, %object
	.size	adb_superspeed_in_desc, 9
adb_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	adb_superspeed_out_desc, %object
	.size	adb_superspeed_out_desc, 9
adb_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_iad_descriptor, %object
	.size	rndis_iad_descriptor, 8
rndis_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_control_intf, %object
	.size	rndis_control_intf, 9
rndis_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_union_desc, %object
	.size	rndis_union_desc, 5
rndis_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	rndis_data_intf, %object
	.size	rndis_data_intf, 9
rndis_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	fs_in_desc, %object
	.size	fs_in_desc, 9
fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	fs_out_desc, %object
	.size	fs_out_desc, 9
fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	fs_notify_desc, %object
	.size	fs_notify_desc, 9
fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	hs_in_desc, %object
	.size	hs_in_desc, 9
hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_out_desc, %object
	.size	hs_out_desc, 9
hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	hs_notify_desc, %object
	.size	hs_notify_desc, 9
hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	ss_in_desc, %object
	.size	ss_in_desc, 9
ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_out_desc, %object
	.size	ss_out_desc, 9
ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	ss_notify_desc, %object
	.size	ss_notify_desc, 9
ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rndis_ul_max_pkt_per_xfer, %object
	.size	rndis_ul_max_pkt_per_xfer, 4
rndis_ul_max_pkt_per_xfer:
	.word	3
	.type	rndis_qc_iad_descriptor, %object
	.size	rndis_qc_iad_descriptor, 8
rndis_qc_iad_descriptor:
	.byte	8
	.byte	11
	.byte	0
	.byte	2
	.byte	2
	.byte	6
	.byte	0
	.space	1
	.type	rndis_qc_control_intf, %object
	.size	rndis_qc_control_intf, 9
rndis_qc_control_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	1
	.byte	2
	.byte	2
	.byte	-1
	.space	1
	.space	3
	.type	rndis_qc_union_desc, %object
	.size	rndis_qc_union_desc, 5
rndis_qc_union_desc:
	.byte	5
	.byte	36
	.byte	6
	.space	2
	.space	3
	.type	rndis_qc_data_intf, %object
	.size	rndis_qc_data_intf, 9
rndis_qc_data_intf:
	.byte	9
	.byte	4
	.space	2
	.byte	2
	.byte	10
	.byte	0
	.byte	0
	.space	1
	.space	3
	.type	rndis_qc_fs_in_desc, %object
	.size	rndis_qc_fs_in_desc, 9
rndis_qc_fs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_out_desc, %object
	.size	rndis_qc_fs_out_desc, 9
rndis_qc_fs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	rndis_qc_fs_notify_desc, %object
	.size	rndis_qc_fs_notify_desc, 9
rndis_qc_fs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	32
	.space	2
	.space	3
	.type	rndis_qc_hs_in_desc, %object
	.size	rndis_qc_hs_in_desc, 9
rndis_qc_hs_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_out_desc, %object
	.size	rndis_qc_hs_out_desc, 9
rndis_qc_hs_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	rndis_qc_hs_notify_desc, %object
	.size	rndis_qc_hs_notify_desc, 9
rndis_qc_hs_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rndis_qc_ss_in_desc, %object
	.size	rndis_qc_ss_in_desc, 9
rndis_qc_ss_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_out_desc, %object
	.size	rndis_qc_ss_out_desc, 9
rndis_qc_ss_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	rndis_qc_ss_notify_desc, %object
	.size	rndis_qc_ss_notify_desc, 9
rndis_qc_ss_notify_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	3
	.short	8
	.byte	9
	.space	2
	.space	3
	.type	rndis_dl_max_pkt_per_xfer, %object
	.size	rndis_dl_max_pkt_per_xfer, 4
rndis_dl_max_pkt_per_xfer:
	.word	3
	.type	ecm_desc, %object
	.size	ecm_desc, 13
ecm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	ecm_qc_desc, %object
	.size	ecm_qc_desc, 13
ecm_qc_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	1514
	.short	0
	.byte	0
	.space	3
	.type	conn_gadget_interface_desc, %object
	.size	conn_gadget_interface_desc, 9
conn_gadget_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	2
	.byte	-1
	.byte	64
	.byte	1
	.space	1
	.space	3
	.type	conn_gadget_fullspeed_in_desc, %object
	.size	conn_gadget_fullspeed_in_desc, 9
conn_gadget_fullspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.space	5
	.space	3
	.type	conn_gadget_fullspeed_out_desc, %object
	.size	conn_gadget_fullspeed_out_desc, 9
conn_gadget_fullspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.space	5
	.space	3
	.type	conn_gadget_highspeed_in_desc, %object
	.size	conn_gadget_highspeed_in_desc, 9
conn_gadget_highspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	conn_gadget_highspeed_out_desc, %object
	.size	conn_gadget_highspeed_out_desc, 9
conn_gadget_highspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	512
	.space	3
	.space	3
	.type	conn_gadget_superspeed_in_desc, %object
	.size	conn_gadget_superspeed_in_desc, 9
conn_gadget_superspeed_in_desc:
	.byte	7
	.byte	5
	.byte	-128
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	conn_gadget_superspeed_out_desc, %object
	.size	conn_gadget_superspeed_out_desc, 9
conn_gadget_superspeed_out_desc:
	.byte	7
	.byte	5
	.byte	0
	.byte	2
	.short	1024
	.space	3
	.space	3
	.type	necm_desc, %object
	.size	necm_desc, 13
necm_desc:
	.byte	13
	.byte	36
	.byte	15
	.space	1
	.word	0
	.short	9014
	.short	0
	.byte	0
	.space	3
	.type	rl.64145, %object
	.size	rl.64145, 24
rl.64145:
	.word	0
	.word	1000
	.word	1
	.space	12
	.type	rl.53604, %object
	.size	rl.53604, 24
rl.53604:
	.word	0
	.word	1000
	.word	1
	.space	12
	.type	usb_android_dt_match, %object
	.size	usb_android_dt_match, 392
usb_android_dt_match:
	.space	64
	.ascii	"qcom,android-usb\000"
	.space	111
	.space	4
	.space	196
	.type	ncm_desc, %object
	.size	ncm_desc, 6
ncm_desc:
	.byte	6
	.byte	36
	.byte	26
	.2byte	256
	.byte	9
	.space	2
	.type	ncm_header_desc, %object
	.size	ncm_header_desc, 5
ncm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	conn_gadget_superspeed_bulk_comp_desc, %object
	.size	conn_gadget_superspeed_bulk_comp_desc, 6
conn_gadget_superspeed_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	microphone_as_iso_in_desc, %object
	.size	microphone_as_iso_in_desc, 7
microphone_as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_as_header_desc, %object
	.size	microphone_as_header_desc, 7
microphone_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	2
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_iso_out_desc, %object
	.size	speaker_as_iso_out_desc, 7
speaker_as_iso_out_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	speaker_as_header_desc, %object
	.size	speaker_as_header_desc, 7
speaker_as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	3
	.byte	1
	.2byte	1
	.space	1
	.type	microphone_output_terminal_desc, %object
	.size	microphone_output_terminal_desc, 9
microphone_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	2
	.short	257
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	speaker_output_terminal_desc, %object
	.size	speaker_output_terminal_desc, 9
speaker_output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	4
	.short	769
	.byte	3
	.byte	3
	.space	1
	.space	3
	.type	speaker_input_terminal_desc, %object
	.size	speaker_input_terminal_desc, 12
speaker_input_terminal_desc:
	.byte	12
	.byte	36
	.byte	2
	.byte	3
	.short	257
	.byte	4
	.space	1
	.short	3
	.space	2
	.type	uac1_ac_header_desc, %object
	.size	uac1_ac_header_desc, 10
uac1_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	52
	.byte	2
	.space	2
	.space	2
	.type	uac1_ac_interface_desc, %object
	.size	uac1_ac_interface_desc, 9
uac1_ac_interface_desc:
	.byte	9
	.byte	4
	.space	2
	.byte	0
	.byte	1
	.byte	1
	.space	2
	.space	3
	.type	req_capture_count, %object
	.size	req_capture_count, 4
req_capture_count:
	.word	48
	.type	rndis_qc_ss_bulk_comp_desc, %object
	.size	rndis_qc_ss_bulk_comp_desc, 6
rndis_qc_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rndis_qc_ss_intr_comp_desc, %object
	.size	rndis_qc_ss_intr_comp_desc, 6
rndis_qc_ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_qc_acm_descriptor, %object
	.size	rndis_qc_acm_descriptor, 4
rndis_qc_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	rndis_qc_call_mgmt_descriptor, %object
	.size	rndis_qc_call_mgmt_descriptor, 5
rndis_qc_call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	rndis_qc_header_desc, %object
	.size	rndis_qc_header_desc, 5
rndis_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ss_ecm_bulk_comp_desc, %object
	.size	ss_ecm_bulk_comp_desc, 6
ss_ecm_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_ecm_intr_comp_desc, %object
	.size	ss_ecm_intr_comp_desc, 6
ss_ecm_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_header_desc, %object
	.size	ecm_header_desc, 5
ecm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ss_mbim_out_comp_desc, %object
	.size	ss_mbim_out_comp_desc, 6
ss_mbim_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_in_comp_desc, %object
	.size	ss_mbim_in_comp_desc, 6
ss_mbim_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_mbim_notify_comp_desc, %object
	.size	ss_mbim_notify_comp_desc, 6
ss_mbim_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	64
	.space	2
	.type	ext_mbb_desc, %object
	.size	ext_mbb_desc, 8
ext_mbb_desc:
	.byte	8
	.byte	36
	.byte	28
	.2byte	256
	.byte	64
	.short	1500
	.type	mbim_header_desc, %object
	.size	mbim_header_desc, 5
mbim_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ecm_qc_ss_out_comp_desc, %object
	.size	ecm_qc_ss_out_comp_desc, 6
ecm_qc_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_in_comp_desc, %object
	.size	ecm_qc_ss_in_comp_desc, 6
ecm_qc_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ecm_qc_ss_notify_comp_desc, %object
	.size	ecm_qc_ss_notify_comp_desc, 6
ecm_qc_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	16
	.space	2
	.type	ecm_qc_header_desc, %object
	.size	ecm_qc_header_desc, 5
ecm_qc_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ss_bulk_comp_desc, %object
	.size	ss_bulk_comp_desc, 6
ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_intr_comp_desc, %object
	.size	ss_intr_comp_desc, 6
ss_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	rndis_acm_descriptor, %object
	.size	rndis_acm_descriptor, 4
rndis_acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	0
	.type	call_mgmt_descriptor, %object
	.size	call_mgmt_descriptor, 5
call_mgmt_descriptor:
	.byte	5
	.byte	36
	.byte	1
	.byte	0
	.byte	1
	.space	3
	.type	header_desc, %object
	.size	header_desc, 5
header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	acc_superspeed_out_comp_desc, %object
	.size	acc_superspeed_out_comp_desc, 6
acc_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acc_superspeed_in_comp_desc, %object
	.size	acc_superspeed_in_comp_desc, 6
acc_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	mtp_ext_config_desc, %object
	.size	mtp_ext_config_desc, 40
mtp_ext_config_desc:
	.word	40
	.short	256
	.short	4
	.byte	1
	.space	7
	.byte	0
	.byte	1
	.byte	77
	.byte	84
	.byte	80
	.space	5
	.space	14
	.type	mtp_superspeed_intr_comp_desc, %object
	.size	mtp_superspeed_intr_comp_desc, 6
mtp_superspeed_intr_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	28
	.space	2
	.type	mtp_superspeed_out_comp_desc, %object
	.size	mtp_superspeed_out_comp_desc, 6
mtp_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	mtp_superspeed_in_comp_desc, %object
	.size	mtp_superspeed_in_comp_desc, 6
mtp_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.byte	2
	.space	3
	.space	2
	.type	ptp_interface_desc, %object
	.size	ptp_interface_desc, 9
ptp_interface_desc:
	.byte	9
	.byte	4
	.byte	0
	.space	1
	.byte	3
	.byte	6
	.byte	1
	.byte	1
	.space	1
	.space	3
	.type	mtp_tx_reqs, %object
	.size	mtp_tx_reqs, 4
mtp_tx_reqs:
	.word	8
	.type	mtp_tx_req_len, %object
	.size	mtp_tx_req_len, 4
mtp_tx_req_len:
	.word	16384
	.type	mtp_rx_req_len, %object
	.size	mtp_rx_req_len, 4
mtp_rx_req_len:
	.word	16384
	.type	adb_superspeed_out_comp_desc, %object
	.size	adb_superspeed_out_comp_desc, 6
adb_superspeed_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	adb_superspeed_in_comp_desc, %object
	.size	adb_superspeed_in_comp_desc, 6
adb_superspeed_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_ss_bulk_comp_desc, %object
	.size	acm_ss_bulk_comp_desc, 6
acm_ss_bulk_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	acm_descriptor, %object
	.size	acm_descriptor, 4
acm_descriptor:
	.byte	4
	.byte	36
	.byte	2
	.byte	2
	.type	acm_header_desc, %object
	.size	acm_header_desc, 5
acm_header_desc:
	.byte	5
	.byte	36
	.byte	0
	.2byte	272
	.space	3
	.type	ghsuart_data_tx_intr_thld, %object
	.size	ghsuart_data_tx_intr_thld, 4
ghsuart_data_tx_intr_thld:
	.word	1
	.type	ghsic_data_tx_intr_thld, %object
	.size	ghsic_data_tx_intr_thld, 4
ghsic_data_tx_intr_thld:
	.word	20
	.type	as_iso_in_desc, %object
	.size	as_iso_in_desc, 7
as_iso_in_desc:
	.byte	7
	.byte	37
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	as_header_desc, %object
	.size	as_header_desc, 7
as_header_desc:
	.byte	7
	.byte	36
	.byte	1
	.byte	1
	.byte	1
	.2byte	1
	.space	1
	.type	output_terminal_desc, %object
	.size	output_terminal_desc, 9
output_terminal_desc:
	.byte	9
	.byte	36
	.byte	3
	.byte	3
	.short	257
	.byte	2
	.byte	2
	.space	1
	.space	3
	.type	feature_unit_desc, %object
	.size	feature_unit_desc, 9
feature_unit_desc:
	.byte	9
	.byte	36
	.byte	6
	.byte	2
	.byte	1
	.byte	2
	.space	3
	.space	3
	.type	audio_source_ac_header_desc, %object
	.size	audio_source_ac_header_desc, 10
audio_source_ac_header_desc:
	.byte	10
	.byte	36
	.byte	1
	.2byte	256
	.2byte	40
	.byte	2
	.byte	0
	.byte	1
	.space	2
	.type	rmnet_ss_out_comp_desc, %object
	.size	rmnet_ss_out_comp_desc, 6
rmnet_ss_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_in_comp_desc, %object
	.size	rmnet_ss_in_comp_desc, 6
rmnet_ss_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	rmnet_ss_notify_comp_desc, %object
	.size	rmnet_ss_notify_comp_desc, 6
rmnet_ss_notify_comp_desc:
	.byte	6
	.byte	48
	.space	2
	.short	8
	.space	2
	.type	mux_sdio_rx_fctrl_dis_thld, %object
	.size	mux_sdio_rx_fctrl_dis_thld, 4
mux_sdio_rx_fctrl_dis_thld:
	.word	500
	.type	mux_sdio_tx_pkt_drop_thld, %object
	.size	mux_sdio_tx_pkt_drop_thld, 4
mux_sdio_tx_pkt_drop_thld:
	.word	1000
	.type	sdio_rx_fctrl_dis_thld, %object
	.size	sdio_rx_fctrl_dis_thld, 4
sdio_rx_fctrl_dis_thld:
	.word	500
	.type	sdio_rx_fctrl_en_thld, %object
	.size	sdio_rx_fctrl_en_thld, 4
sdio_rx_fctrl_en_thld:
	.word	1000
	.type	sdio_tx_pkt_drop_thld, %object
	.size	sdio_tx_pkt_drop_thld, 4
sdio_tx_pkt_drop_thld:
	.word	1000
	.type	ss_bulk_out_comp_desc, %object
	.size	ss_bulk_out_comp_desc, 6
ss_bulk_out_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.space	2
	.type	ss_bulk_in_comp_desc, %object
	.size	ss_bulk_in_comp_desc, 6
ss_bulk_in_comp_desc:
	.byte	6
	.byte	48
	.space	4
	.section	.rodata.str1.4,"aMS",%progbits,1
	.align	2
.LC0:
	.ascii	"TTY\000"
.LC1:
	.ascii	"SDIO\000"
	.space	3
.LC2:
	.ascii	"SMD\000"
.LC3:
	.ascii	"QTI\000"
.LC4:
	.ascii	"BAM\000"
.LC5:
	.ascii	"BAM2BAM\000"
.LC6:
	.ascii	"BAM2BAM_IPA\000"
.LC7:
	.ascii	"HSIC\000"
	.space	3
.LC8:
	.ascii	"HSUART\000"
	.space	1
.LC9:
	.ascii	"NONE\000"
	.space	3
.LC10:
	.ascii	"UNDEFINED\000"
	.space	2
.LC11:
	.ascii	"rmnet notify ep error %d\012\000"
	.space	2
.LC12:
	.ascii	"rmnet notify ep enqueue error %d\012\000"
	.space	2
.LC13:
	.ascii	"rmnet notifyep error %d\012\000"
	.space	3
.LC14:
	.ascii	"rmnet notify ep enq error %d\012\000"
	.space	2
.LC15:
	.ascii	"ecm req %02x.%02x response err %d\012\000"
	.space	1
.LC16:
	.ascii	"rmnet_mux notifyep error %d\012\000"
	.space	3
.LC17:
	.ascii	"rmnet control SDIO write failed\012\000"
	.space	3
.LC18:
	.ascii	"rmnet_mux ep0 enqueue err %d\012\000"
	.space	2
.LC19:
	.ascii	"<3>%s: device is already opened\012\000"
	.space	3
.LC20:
	.ascii	"<3>audio response on err %d\012\000"
	.space	3
.LC21:
	.ascii	"<3>%s: port is null\012\000"
	.space	3
.LC22:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d\012"
	.ascii	"\000"
	.space	3
.LC23:
	.ascii	"<3>%s: port->port_usb is NULL\000"
	.space	2
.LC24:
	.ascii	"<3>%s: error dequeuing transfer, %d\012\000"
	.space	3
.LC25:
	.ascii	"<3>%s: Invalid portno#%d\012\000"
	.space	2
.LC26:
	.ascii	"<3>%s: ecm req %02x.%02x response err %d\012\000"
	.space	2
.LC27:
	.ascii	"<3>%s: Bad control-OUT transfer\012\000"
	.space	3
.LC28:
	.ascii	"<3>%s: Illegal INPUT SIZE (%d) from host\012\000"
	.space	2
.LC29:
	.ascii	"<3>%s: Illegal NTB length %d\012\000"
	.space	2
.LC30:
	.ascii	"<3>%s: %s: Failed\012\000"
	.space	1
.LC31:
	.ascii	"<3>%s: %s: error dequeuing transfer, %d\012\000"
	.space	3
.LC32:
	.ascii	"<3>%s: %s(): cdev or config is NULL.\012\000"
	.space	2
.LC33:
	.ascii	"<6>%s: RNDIS %s response error %d, %d/%d\012\000"
	.space	2
.LC34:
	.ascii	"<6>%s: notify/0 --> %d\012\000"
.LC35:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf\000"
.LC36:
	.ascii	"<3>%s: Failed to allocate playback_copy_buf buffer\000"
	.space	1
.LC37:
	.ascii	"<3>%s: Unknown command\000"
	.space	1
.LC38:
	.ascii	"<3>%s: Unknown control request %02x.%02x v%04x i%04"
	.ascii	"x l%d\012\000"
	.space	2
.LC39:
	.ascii	"<3>%s: audio response failed on err %d\012\000"
.LC40:
	.ascii	"<3>%s: STALL\012\000"
	.space	2
.LC41:
	.ascii	"<6>conn_gadget_release\012\000"
.LC42:
	.ascii	"<6>list_for_each...\012\000"
	.space	3
.LC43:
	.ascii	"<3>usb:%s * Host asked current MaxDatagramSize, sen"
	.ascii	"ding %d *\012\000"
	.space	2
.LC44:
	.ascii	"ncm req %02x.%02x response err %d\012\000"
	.space	1
.LC45:
	.ascii	"<3>usb:%s * Bad control-OUT transfer *\012\000"
.LC46:
	.ascii	"<3>usb:%s * Got wrong MTU SIZE (%d) from host *\012"
	.ascii	"\000"
	.space	3
.LC47:
	.ascii	"<3>usb:%s * MTU SIZE is larger than NTB SIZE (%d) f"
	.ascii	"rom host * \012\000"
.LC48:
	.ascii	"<3>************************************************"
	.ascii	"*\012\000"
	.space	2
.LC49:
	.ascii	"<3>usb:%s * Set MTU SIZE %d *\012\000"
	.space	1
.LC50:
	.ascii	"<3>%s: %s: %s failed\012\000"
	.space	2
.LC51:
	.ascii	"<3>%s: %s is enabled in other device\012\000"
	.space	2
.LC52:
	.ascii	"<3>%s: Failed to alloc f_holder\012\000"
	.space	3
.LC53:
	.ascii	"<3>acc_complete_set_string, err %d\012\000"
.LC54:
	.ascii	"<3>unknown accessory string index %d\012\000"
	.space	2
.LC55:
	.ascii	"<6>acc_release\012\000"
.LC56:
	.ascii	"/root/lol//drivers/usb/gadget/f_accessory.c\000"
.LC57:
	.ascii	"<6>acc_open\012\000"
	.space	3
.LC58:
	.ascii	"<7>usb: %s buf=%s[%d], %s\012\000"
	.space	1
.LC59:
	.ascii	"<6>%s: Close rndis QC file\000"
	.space	1
.LC60:
	.ascii	"<3>%s: rndis_qc_dev not present\012\000"
	.space	3
.LC61:
	.ascii	"<6>%s: Open rndis QC driver\012\000"
	.space	3
.LC62:
	.ascii	"<3>%s: rndis_qc_dev not created yet\012\000"
	.space	3
.LC63:
	.ascii	"<3>%s: Already opened\012\000"
	.space	1
.LC64:
	.ascii	"<6>%s: rndis QC file opened\012\000"
	.space	3
.LC65:
	.ascii	"<6>mtp_release\012\000"
.LC66:
	.ascii	"<3>CCID notify ep error %d\012\000"
.LC67:
	.ascii	"<3>ctrl resp queue empty  req%02x.%02x v%04x i%04x "
	.ascii	"l%d\012\000"
.LC68:
	.ascii	"rmnet ep0 enqueue err %d\012\000"
	.space	2
.LC69:
	.ascii	"<3>rmnet notify ep error %d\012\000"
	.space	3
.LC70:
	.ascii	"<3>%s: Invalid notify_count=%lu to decrement\012\000"
	.space	2
.LC71:
	.ascii	"<3>%s: response queue error: %d\000"
.LC72:
	.ascii	"<6>%s: Close mbim file\000"
	.space	1
.LC73:
	.ascii	"<3>%s: port:%pK port#%d unable to open sdio ch:%s\012"
	.ascii	"\000"
	.space	1
.LC74:
	.ascii	"rmnet %s response error %d, %d/%d\012\000"
	.space	1
.LC75:
	.ascii	"rmnet_mux %s response error %d, %d/%d\012\000"
	.space	1
.LC76:
	.ascii	"%d\012\000"
.LC77:
	.ascii	"%01x\012\000"
	.space	2
.LC78:
	.ascii	"%u\012\000"
.LC79:
	.ascii	", H%c=%u\000"
	.space	3
.LC80:
	.ascii	"%s\015\012\000"
	.space	3
.LC81:
	.ascii	"<7>usb: %s version %s\012\000"
	.space	1
.LC82:
	.ascii	"%s\012\000"
.LC83:
	.ascii	"%d %d\012\000"
	.space	1
.LC84:
	.ascii	"/root/lol//drivers/usb/gadget/composite.c\000"
	.space	2
.LC85:
	.ascii	"/root/lol//include/linux/netdevice.h\000"
	.space	3
.LC86:
	.ascii	"<6>netif_stop_queue() cannot be called before regis"
	.ascii	"ter_netdev()\012\000"
	.space	3
.LC87:
	.ascii	"<3>%s: write error:%d\012\000"
	.space	1
.LC88:
	.ascii	"<4>%s: port:%pK port#%d unexpected %s status %d\012"
	.ascii	"\000"
	.space	3
.LC89:
	.ascii	"<3>%s: invalid portno#%d\012\000"
	.space	2
.LC90:
	.ascii	"<3>%s: gser is null\012\000"
	.space	3
.LC91:
	.ascii	"<3>%s: port:%pK port#%d sdio not connected\012\000"
.LC92:
	.ascii	"<3>%s: Failed to queue %s req: err - %d\012\000"
	.space	3
.LC93:
	.ascii	"<3>%s: Failed completion: status %d\000"
.LC94:
	.ascii	"<3>acc_complete_set_hid_report_desc, err %d\012\000"
	.space	3
.LC95:
	.ascii	"qmi resp empty  req%02x.%02x v%04x i%04x l%d\012\000"
	.space	2
.LC96:
	.ascii	"<3>%s: invalid port: %d\012\000"
	.space	3
.LC97:
	.ascii	"smd_control_ch_opened: %lu\012smd_data_ch_opened: %"
	.ascii	"lu\012usb online : %d\012dpkts_from_modem: %lu\012d"
	.ascii	"pkts_to_host: %lu\012pending_dpkts_to_host: %lu\012"
	.ascii	"dpkts_from_host: %lu\012dpkts_to_modem: %lu\012pend"
	.ascii	"ing_dpkts_to_modem: %lu\012cpkts_from_modem: %lu\012"
	.ascii	"cpkts_to_host: %lu\012pending_cpkts_to_host: %lu\012"
	.ascii	"cpkts_from_host: %lu\012cpkts_to_modem: %lu\012pend"
	.ascii	"ing_cpkts_to_modem: %lu\012smd_read_avail_ctrl: %d\012"
	.ascii	"smd_write_avail_ctrl: %d\012smd_read_avail_data: %d"
	.ascii	"\012smd_write_avail_data: %d\012\000"
.LC98:
	.ascii	"-*-DATA-*-\012dpkts_tohost:%lu epInPool:%u tx_size:"
	.ascii	"%u drp_cnt:%lu\012dpkts_tomodem:%lu epOutPool:%u rx"
	.ascii	"_size:%u pending:%u\012-*-QMI-*-\012cpkts_tomodem:%"
	.ascii	"lu  qmi_req_q:%u cbits:%d\012cpkts_tolaptop:%lu qmi"
	.ascii	"_resp_q:%u notify_cnt:%d\012-*-MISC-*-\012data_ch_s"
	.ascii	"tatus: %lu ctrl_ch_status: %lu\012\000"
	.space	2
.LC99:
	.ascii	"<3>usb: tty or gser is NULL !!\012\000"
.LC100:
	.ascii	"nbytes_from_host: %lu\012\000"
	.space	1
.LC101:
	.ascii	"nbytes_to_tty: %lu\012\000"
.LC102:
	.ascii	"nbytes_with_usb_OUT_txr: %lu\012\000"
	.space	2
.LC103:
	.ascii	"nbytes_from_tty: %lu\012\000"
	.space	2
.LC104:
	.ascii	"nbytes_to_host: %lu\012\000"
	.space	3
.LC105:
	.ascii	"nbytes_with_usb_IN_txr: %lu\012\000"
	.space	3
.LC106:
	.ascii	"tty_flags: %lu\012\000"
.LC107:
	.ascii	"DTR_status: %d\012\000"
.LC108:
	.ascii	"###PORT:%d port:%pK###\012nbytes_tolaptop: %lu\012n"
	.ascii	"bytes_tomodem:  %lu\012cbits_to_modem:  %u\012cbits"
	.ascii	"_to_laptop: %u\012read_pool_len:   %lu\012read_queu"
	.ascii	"e_len:  %lu\012write_pool_len:  %lu\012n_read:     "
	.ascii	"     %u\012sdio_open:       %d\012sdio_probe:      "
	.ascii	"%d\012\000"
	.space	3
.LC109:
	.ascii	"###PORT:%d###\012nbytes_tolaptop: %lu\012nbytes_tom"
	.ascii	"odem:  %lu\012cbits_to_modem:  %u\012cbits_to_lapto"
	.ascii	"p: %u\012n_read: %u\012smd_read_avail: %d\012smd_wr"
	.ascii	"ite_avail: %d\012CH_OPENED: %d\012CH_READY: %d\012\000"
	.space	2
.LC110:
	.ascii	"#PORT:%d port:%pK data_ch:%pK#\012dpkts_to_usbhost:"
	.ascii	" %lu\012dpkts_to_modem:  %lu\012dpkts_pwith_bam: %u"
	.ascii	"\012to_usbhost_dcnt:  %u\012tomodem__dcnt:  %u\012r"
	.ascii	"x_flow_control_disable_count: %u\012rx_flow_control"
	.ascii	"_enable_count: %u\012rx_flow_control_triggered: %u\012"
	.ascii	"max_num_pkts_pending_with_bam: %u\012tx_buf_len:\011"
	.ascii	" %u\012rx_buf_len:\011 %u\012data_ch_open:   %d\012"
	.ascii	"data_ch_ready:  %d\012\000"
.LC111:
	.ascii	"HIGH\000"
	.space	3
.LC112:
	.ascii	"LOW\000"
.LC113:
	.ascii	"#PORT:%d port:%pK ctrl_ch:%pK#\012to_usbhost: %lu\012"
	.ascii	"to_modem:   %lu\012DTR:        %s\012ch_open:    %d"
	.ascii	"\012ch_ready:   %d\012read_avail: %d\012write_avail"
	.ascii	":%d\012\000"
	.space	1
.LC114:
	.ascii	"\012Name:        %s\012#PORT:%d port: %pK\012to_usb"
	.ascii	"host:    %lu\012to_modem:      %lu\012cpkt_drp_cnt:"
	.ascii	"  %lu\012DTR:           %s\012ch_open:       %d\012"
	.ascii	"ch_ready:      %d\012\000"
.LC115:
	.ascii	"\012Name:           %s\012#PORT:%d port#:   %pK\012"
	.ascii	"data_ch_open:\011   %d\012data_ch_ready:    %d\012\012"
	.ascii	"******UL INFO*****\012\012dpkts_to_modem:   %lu\012"
	.ascii	"tomodem_drp_cnt:  %u\012rx_buf_len:       %u\012tx "
	.ascii	"thld cnt       %u\012tx unthld cnt     %u\012TX_THR"
	.ascii	"OTTLED      %d\012\000"
.LC116:
	.ascii	"\012******DL INFO******\012\012dpkts_to_usbhost: %l"
	.ascii	"u\012tx_buf_len:\011   %u\012rx thld cnt\011   %u\012"
	.ascii	"rx unthld cnt\011   %u\012uthld pnd skbs    %u\012R"
	.ascii	"X_THROTTLED\011   %d\012\000"
	.space	3
.LC117:
	.ascii	"#PORT:%d port: %pK\012to_usbhost:    %lu\012to_mode"
	.ascii	"m:      %lu\012cpkt_drp_cnt:  %lu\012DTR:          "
	.ascii	" %s\012\000"
	.space	1
.LC118:
	.ascii	"\012Name:           %s\012#PORT:%d port#:   %pK\012"
	.ascii	"data_ch_open:\011   %d\012data_ch_ready:    %d\012d"
	.ascii	"ata_ch_connected: %d\012\012******UL INFO*****\012\012"
	.ascii	"dpkts_to_modem:   %lu\012tomodem_drp_cnt:  %u\012rx"
	.ascii	"_buf_len:       %u\012TX_THROTTLED      %d\012\000"
.LC119:
	.ascii	"\012******DL INFO******\012\012dpkts_to_usbhost: %l"
	.ascii	"u\012tx_buf_len:\011   %u\012RX_THROTTLED\011   %d\012"
	.ascii	"\000"
	.space	2
.LC120:
	.ascii	"---Name: %s---\012endpoints: %s, %s\012dpkts_tolapt"
	.ascii	"op: %lu\012dpkts_tomodem:  %lu\012pkts_tolaptop_pen"
	.ascii	"ding: %u\012\000"
.LC121:
	.ascii	"rmnet command error %d\012\000"
.LC122:
	.ascii	"rmnet control smd write failed\012\000"
.LC123:
	.ascii	"rmnet QMI pool is empty\012\000"
	.space	3
.LC124:
	.ascii	"RMNET %s response error %d, %d/%d\012\000"
	.space	1
.LC125:
	.ascii	"rmnet data smd write failed\012\000"
	.space	3
.LC126:
	.ascii	"rmnet data rx enqueue err %d\012\000"
	.space	2
.LC127:
	.ascii	"<3>%s: smd_write failed err:%d\012\000"
.LC128:
	.ascii	"rmnet data tx ep error %d\012\000"
	.space	1
.LC129:
	.ascii	"rmnet tx data enqueue err %d\012\000"
	.space	2
.LC130:
	.ascii	"rmnet QMI Tx buffers full\012\000"
	.space	1
.LC131:
	.ascii	"<3>%s:smd read_avail failure:%d or channel closed c"
	.ascii	"h=%pK\000"
	.space	3
.LC132:
	.ascii	"<3>%s: SMD sending incorrect pkt\012\000"
	.space	2
.LC133:
	.ascii	"<3>%s: smd read failure %d\012\000"
.LC134:
	.ascii	"<3>conn_gadget_function_disable cdev %pK\012\000"
	.space	2
.LC135:
	.ascii	"%s: response queue error\012\000"
	.space	2
.LC136:
	.ascii	"<3>ccid ep0 enqueue err %d\012\000"
.LC137:
	.ascii	"usb_rmnet_ctrl_smd\000"
	.space	1
.LC138:
	.ascii	"status\000"
	.space	1
.LC139:
	.ascii	"ghsic_ctrl_xport\000"
	.space	3
.LC140:
	.ascii	"ghsic_data_xport\000"
	.space	3
.LC141:
	.ascii	"timestamp\000"
	.space	2
.LC142:
	.ascii	"ghsuart_ctrl_xport\000"
	.space	1
.LC143:
	.ascii	"ghsuart_data_xport\000"
	.space	1
.LC144:
	.ascii	"usb_diag\000"
	.space	3
.LC145:
	.ascii	"<6>%s: sdio data ch not open\012\000"
	.space	2
.LC146:
	.ascii	"rmnet SDIO data write failed\012\000"
	.space	2
.LC147:
	.ascii	"<3>%s: usb epIn failed with %d\012\000"
.LC148:
	.ascii	"<3>%s: data tx ep error %d\012\000"
.LC149:
	.ascii	"rmnet_mux SDIO data write failed\012\000"
	.space	2
.LC150:
	.ascii	"<3>%s: rx queue failed\012\000"
.LC151:
	.ascii	"<3>%s: unable to open smd port:%s err:%d\012\000"
	.space	2
.LC152:
	.ascii	"Unable to open SDIO DATA channel\012\000"
	.space	2
.LC153:
	.ascii	"<3>%s: rx queue failed %d\012\000"
	.space	1
.LC154:
	.ascii	"<3>%s: %s response error %d, %d/%d\012\000"
.LC155:
	.ascii	"<3>%s: data rx enqueue err %d\012\000"
	.space	1
.LC156:
	.ascii	"<3>copying to user space failed\000"
.LC157:
	.ascii	"<3>wrong parameter\000"
	.space	1
.LC158:
	.ascii	"<3>%s: copying to user space failed\000"
.LC159:
	.ascii	"<6>%s: Sent max packets per xfer %d\000"
.LC160:
	.ascii	"<3>%s: Unsupported IOCTL\000"
	.space	3
.LC161:
	.ascii	"<6>%s: Received command %d\012\000"
.LC162:
	.ascii	"<6>%s: Sent NTB size %d\000"
.LC163:
	.ascii	"<6>%s: Sent NTB datagrams count %d\000"
	.space	1
.LC164:
	.ascii	"<3>%s: wrong parameter\000"
	.space	1
.LC165:
	.ascii	"<3>%s: cpkt size:%d > buf size:%d\012\000"
	.space	1
.LC166:
	.ascii	"<3>Buffer size is too big %d, should be at most %d\012"
	.ascii	"\000"
.LC167:
	.ascii	"<3>Previous reading is not finished yet\012\000"
	.space	3
.LC168:
	.ascii	"<3>cpkt size too big:%d > buf size:%d\012\000"
	.space	1
.LC169:
	.ascii	"<3>copy_to_user failed: err %d\012\000"
.LC170:
	.ascii	"<3>%s: zero length ctrl pkt\012\000"
	.space	3
.LC171:
	.ascii	"<3>%s: max_pkt_size:%d given_pkt_size:%d\012\000"
	.space	2
.LC172:
	.ascii	"<3>%s: copy_from_user failed err:%d\012\000"
	.space	3
.LC173:
	.ascii	"rmnet_mux notify ep enqueue error %d\012\000"
	.space	2
.LC174:
	.ascii	"<3>%s: cannot allocate rmnet_mux ctrl pkt\012\000"
	.space	1
.LC175:
	.ascii	"<3>Previous writing not finished yet\012\000"
	.space	2
.LC176:
	.ascii	"<3>failed to allocate ctrl pkt\012\000"
.LC177:
	.ascii	"<3>copy_from_user failed err:%d\012\000"
	.space	3
.LC178:
	.ascii	"<3>failed to send ctrl packet. error=%d\012\000"
	.space	3
.LC179:
	.ascii	"<3>send_cpkt_response callback is NULL\012\000"
.LC180:
	.ascii	"<3>ccid notify ep enqueue error %d\012\000"
.LC181:
	.ascii	"g_ether\000"
.LC182:
	.ascii	"29-May-2008\000"
.LC183:
	.ascii	"g_qc_ether\000"
	.space	1
.LC184:
	.ascii	"<3>usb_ep_queue failed ret: %d\012\000"
.LC185:
	.ascii	"/root/lol//drivers/usb/gadget/f_fs.c\000"
	.space	3
.LC186:
	.ascii	"<3>%s: usb ep out queue failedport:%pK, port#%d err"
	.ascii	":%d\012\000"
.LC187:
	.ascii	"<4>%s: port:%pK port#%d Unexpected Rx Status:%d\012"
	.ascii	"\000"
	.space	3
.LC188:
	.ascii	"<3>%s: smd write failed err:%d\012\000"
.LC189:
	.ascii	"CONFIGURED\000"
	.space	1
.LC190:
	.ascii	"DISCONNECTED\000"
	.space	3
.LC191:
	.ascii	"CONNECTED\000"
	.space	2
.LC192:
	.ascii	"<7>usb: %s buf=%s\012\000"
	.space	1
.LC193:
	.ascii	"<7>usb: %s dev->enabled=%d\012\000"
.LC194:
	.ascii	"%s,\000"
.LC195:
	.ascii	"%s\000"
	.space	1
.LC196:
	.ascii	"%04x\012\000"
	.space	2
.LC197:
	.ascii	"%02x:%02x:%02x:%02x:%02x:%02x\012\000"
	.space	1
.LC198:
	.ascii	"bam_dmux_ch_8\000"
	.space	2
.LC199:
	.ascii	"<3>%s: usb_ep_enable failed eptype:IN ep:%pK\000"
	.space	3
.LC200:
	.ascii	"<3>%s: usb_ep_enable failed eptype:OUT ep:%pK\000"
	.space	2
.LC201:
	.ascii	"<3>%s: error enqueuing transfer, %d\012\000"
	.space	3
.LC202:
	.ascii	"<3>%s: BAM reset failed %d\012\000"
.LC203:
	.ascii	"<3>%s: %s: BAM reset failed %d\012\000"
.LC204:
	.ascii	"<3>Failed to allocate rmnet control device\012\000"
.LC205:
	.ascii	"&port->read_wq\000"
	.space	1
.LC206:
	.ascii	"<3>rmnet control driver failed to register\000"
	.space	1
.LC207:
	.ascii	"&dev->read_wq\000"
	.space	2
.LC208:
	.ascii	"&dev->write_wq\000"
	.space	1
.LC209:
	.ascii	"<3>USB accessory gadget driver failed to initialize"
	.ascii	"\012\000"
	.space	3
.LC210:
	.ascii	"<6>%s: initialize rndis QC instance\012\000"
	.space	3
.LC211:
	.ascii	"<3>%s: rndis QC driver failed to register\000"
	.space	2
.LC212:
	.ascii	"&dev->intr_wq\000"
	.space	2
.LC213:
	.ascii	"f_mtp\000"
	.space	2
.LC214:
	.ascii	"<3>mtp gadget driver failed to initialize\012\000"
	.space	1
.LC215:
	.ascii	"<3>adb gadget driver failed to initialize\012\000"
	.space	1
.LC216:
	.ascii	"k_rmnet_mux_work\000"
	.space	3
.LC217:
	.ascii	"&smd_dev->smd_data.wait\000"
.LC218:
	.ascii	"&ctrl_dev->tx_wait_q\000"
	.space	3
.LC219:
	.ascii	"<3>%s: failed to register misc device\012\000"
	.space	1
.LC220:
	.ascii	"usb_rmnet_mux\000"
	.space	2
.LC221:
	.ascii	"<6>%s: rndis QC cleanup\000"
.LC222:
	.ascii	"<6>%s: Enter\000"
	.space	3
.LC223:
	.ascii	"gmidi_transmit: midi_alloc_ep_request failed\012\000"
	.space	2
.LC224:
	.ascii	"<3>usb:%s tx queue err %d\012\000"
	.space	1
.LC225:
	.ascii	"<3>invalid rndis pkt: skblen:%u hdr_len:%u\000"
	.space	1
.LC226:
	.ascii	"<3>invalid rndis message: %d/%d/%d/%d, len:%d\012\000"
	.space	1
.LC227:
	.ascii	"<3>%s:skb clone failed\012\000"
.LC228:
	.ascii	"y\000"
	.space	2
.LC229:
	.ascii	"n\000"
	.space	2
.LC230:
	.ascii	"?\000"
	.space	2
.LC231:
	.ascii	"RNDIS_UNINITIALIZED\000"
.LC232:
	.ascii	"RNDIS_INITIALIZED\000"
	.space	2
.LC233:
	.ascii	"RNDIS_DATA_INITIALIZED\000"
	.space	1
.LC234:
	.ascii	"connected\000"
	.space	2
.LC235:
	.ascii	"disconnected\000"
	.space	3
.LC236:
	.ascii	"Config Nr. %d\012used      : %s\012state     : %s\012"
	.ascii	"medium    : 0x%08X\012speed     : %d\012cable     :"
	.ascii	" %s\012vendor ID : 0x%08X\012vendor    : %s\012ul-m"
	.ascii	"ax-xfer-size:%d max-xfer-size-rcvd: %d\012ul-max-pk"
	.ascii	"ts-per-xfer:%d max-pkts-per-xfer-rcvd:%d\012\000"
	.space	3
.LC237:
	.ascii	"unable to open backing file: %s\012\000"
	.space	3
.LC238:
	.ascii	"invalid file type: %s\012\000"
	.space	1
.LC239:
	.ascii	"file not readable: %s\012\000"
	.space	1
.LC240:
	.ascii	"unable to find file size: %s\012\000"
	.space	2
.LC241:
	.ascii	"file too big: %s\012\000"
	.space	2
.LC242:
	.ascii	"using only first %d blocks\012\000"
.LC243:
	.ascii	"file too small: %s\012\000"
.LC244:
	.ascii	"<3>%s(#) call conn_gadget_cleanup\012\000"
	.space	1
.LC245:
	.ascii	"<6>conn_gadget_cleanup\012\000"
.LC246:
	.ascii	"<3>%s() _conn_gadget_dev is not allocated\012\000"
	.space	1
.LC247:
	.ascii	"<3>%s(#) call conn_gadget_setup\012\000"
	.space	3
.LC248:
	.ascii	"<6>conn_gadget_setup\012\000"
	.space	2
.LC249:
	.ascii	"<3>alloc conn_gadget_dev F\012\000"
.LC250:
	.ascii	"&dev->ioctl_wq\000"
	.space	1
.LC251:
	.ascii	"<3>%s: error rd_queue vmalloc\012\000"
	.space	1
.LC252:
	.ascii	"<3>%s: misc_register f %d\012\000"
	.space	1
.LC253:
	.ascii	"<3>%s() conn_gadget gadget driver failed to initial"
	.ascii	"ize\012\000"
.LC254:
	.ascii	"<3>%s() _conn_gadget_dev is NULL\012\000"
	.space	2
.LC255:
	.ascii	"<3>%s() _conn_gaddget_dev onlined\012\000"
	.space	1
.LC256:
	.ascii	"%d\000"
	.space	1
.LC257:
	.ascii	"<3>%s() rd_queue_buf vmalloc f\012\000"
.LC258:
	.ascii	"<7>%s: product %s\000"
	.space	2
.LC259:
	.ascii	"<7>%s: vendor %s\000"
	.space	3
.LC260:
	.ascii	"%28s\000"
	.space	3
.LC261:
	.ascii	"%04x\000"
	.space	3
.LC262:
	.ascii	"%255s\000"
	.space	2
.LC263:
	.ascii	"Wrong NTH SIGN, skblen %d\012\000"
	.space	1
.LC264:
	.ascii	"<6>\000"
.LC265:
	.ascii	"HEAD:\000"
	.space	2
.LC266:
	.ascii	"Wrong NTB headersize\012\000"
	.space	2
.LC267:
	.ascii	"OUT size exceeded\012\000"
	.space	1
.LC268:
	.ascii	"Bad index: %x\012\000"
	.space	1
.LC269:
	.ascii	"Wrong NDP SIGN\012\000"
.LC270:
	.ascii	"Bad NDP length: %x\012\000"
.LC271:
	.ascii	"Bad dgram length: %x\012\000"
	.space	2
.LC272:
	.ascii	"Bad CRC\012\000"
	.space	3
.LC273:
	.ascii	"<3>usb: force short packet %d  \012\000"
	.space	3
.LC274:
	.ascii	"<3>Dropped skb \012\000"
	.space	3
.LC275:
	.ascii	"<3>usb:%s final Expanding the buffer %d \012\000"
	.space	2
.LC276:
	.ascii	"ACCESSORY=START\000"
.LC277:
	.ascii	"NCM_DEVICE=START\000"
	.space	3
.LC278:
	.ascii	"NCM_DEVICE=RELEASE\000"
	.space	1
.LC279:
	.ascii	"<7>usb: %s ncm_connect=%d\012\000"
	.space	1
.LC280:
	.ascii	"<3>usb: %s superspeed available \012\000"
	.space	2
.LC281:
	.ascii	"<3>usb: %s ss_host_available(%d), windowsos(%d)\012"
	.ascii	"\000"
	.space	3
.LC282:
	.ascii	"<3>usb: %s gadget not available \012\000"
	.space	2
.LC283:
	.ascii	":\000"
	.space	2
.LC284:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android con"
	.ascii	"f\012\000"
	.space	2
.LC285:
	.ascii	",\000"
	.space	2
.LC286:
	.ascii	"ffs\000"
.LC287:
	.ascii	"<3>%s: android_usb: Cannot enable ffs (%d)\000"
	.space	1
.LC288:
	.ascii	"<3>%s: android_usb: Cannot enable '%s' (%d)\000"
.LC289:
	.ascii	"USB_STATE=DISCONNECTED\000"
	.space	1
.LC290:
	.ascii	"USB_STATE=CONNECTED\000"
.LC291:
	.ascii	"USB_STATE=CONFIGURED\000"
	.space	3
.LC292:
	.ascii	"USB_STATE=SUSPENDED\000"
.LC293:
	.ascii	"USB_STATE=RESUMED\000"
	.space	2
.LC294:
	.ascii	"USB_CONNECTION=CONNECTED\000"
	.space	3
.LC295:
	.ascii	"low\000"
.LC296:
	.ascii	"<6>%s: %s: sent missed DISCONNECT event\012\000"
	.space	3
.LC297:
	.ascii	"<6>%s: %s: sent uevent %s\012\000"
	.space	1
.LC298:
	.ascii	"<6>%s: %s: did not send uevent (%d %d %pK)\012\000"
.LC299:
	.ascii	"<3>acc_complete_send_hid_event, err %d\012\000"
.LC300:
	.ascii	"<3>can't add hid device: %d\012\000"
	.space	3
.LC301:
	.ascii	"<3>can't add HID device %pK\012\000"
	.space	3
.LC302:
	.ascii	"<6>%s (%s)\012\000"
.LC303:
	.ascii	"SWITCH_NAME=USB_MESSAGE\000"
.LC304:
	.ascii	"SWITCH_STATE=%s\000"
.LC305:
	.ascii	"usb_msg\000"
.LC306:
	.ascii	"<6>unloading\012\000"
	.space	2
.LC307:
	.ascii	"<6>file system registered\012\000"
	.space	1
.LC308:
	.ascii	"<3>failed registering file system (%d)\012\000"
.LC309:
	.ascii	"pxa25x_udc\000"
	.space	1
.LC310:
	.ascii	"<3>Physical address or size of buf is NULL\000"
	.space	1
.LC311:
	.ascii	"<3>%s on a NULL device\012\000"
.LC312:
	.ascii	"<3>%s: FAILED: d_port == NULL\000"
	.space	2
.LC313:
	.ascii	"<3>%s: FAILED: d_port->cdev == NULL\000"
.LC314:
	.ascii	"<3>%s: FAILED: d_port->cdev->gadget == NULL\000"
.LC315:
	.ascii	"<6>mtp_open\012\000"
	.space	3
.LC316:
	.ascii	"<3>%s: Invalid grmnet:%pK\012\000"
	.space	1
.LC317:
	.ascii	"<3>%s: rmnet notify ep enqueue error %d\012\000"
	.space	3
.LC318:
	.ascii	"<3>%s: rmnet dev is null\012\000"
	.space	2
.LC319:
	.ascii	"<6>%s: Open mbim driver\012\000"
	.space	3
.LC320:
	.ascii	"<3>%s: mbim_dev not created yet\012\000"
	.space	3
.LC321:
	.ascii	"<3>%s: USB cable not connected\012\000"
.LC322:
	.ascii	"<6>%s: Exit, mbim file opened\012\000"
	.space	1
.LC323:
	.ascii	"<6>%s: Lock mbim_dev->open_excl for open\012\000"
	.space	2
.LC324:
	.ascii	"major %x minor %x vendor %x\012\000"
	.space	3
.LC325:
	.ascii	"<7>usb: %s terminal_mode %s\012\000"
	.space	3
.LC326:
	.ascii	"<3>%s: ctrl bridge open failed :%d\012\000"
.LC327:
	.ascii	"uether\000"
	.space	1
.LC328:
	.ascii	"<3>%s: %s: Unable to create workqueue: uether\012\000"
	.space	1
.LC329:
	.ascii	"<3>%s: grmnet is null\012\000"
	.space	1
.LC330:
	.ascii	"<3>%s: %s(): Failed to register androidplatform dri"
	.ascii	"ver\012\000"
.LC331:
	.ascii	"<6>conn_gadget_flush\012\000"
	.space	2
.LC332:
	.ascii	"<3>%s() _conn_gadget_dev is invalid\012\000"
	.space	3
.LC333:
	.ascii	"<3>%s: usb epIn failed\012\000"
.LC334:
	.ascii	"<6>%s: %s: speaker_status: %d, speaker_check_count "
	.ascii	"%d\012\000"
	.space	1
.LC335:
	.ascii	"<6>%s: name:%s is not found\012\000"
	.space	3
.LC336:
	.ascii	"<3>%s: usb_bam_disconnect_ipa failed: err:%d\012\000"
	.space	2
.LC337:
	.ascii	"usb: %s - usb_ncm misc driver fail \012\000"
	.space	3
.LC338:
	.ascii	"<3>%s: unable open bridge ch:%d err:%d\012\000"
.LC339:
	.ascii	"<3>%s: smux close timedout\012\000"
.LC340:
	.ascii	"<3> %s smux_open failed\012\000"
	.space	3
.LC341:
	.ascii	"<3>%s: unable to open smux ch:%d err:%d\012\000"
	.space	3
.LC342:
	.ascii	"\000"
	.space	3
.LC343:
	.ascii	"<6>%s: initialize %d instances\012\000"
.LC344:
	.ascii	"<3>%s: Failed to allocate mbim dev\012\000"
.LC345:
	.ascii	"<3>%s: mbim driver failed to register\000"
	.space	2
.LC346:
	.ascii	"<6>%s: Initialized %d ports\012\000"
	.space	3
.LC347:
	.ascii	"<3>%s: Failed\000"
	.space	2
.LC348:
	.ascii	"<4>%s: query unknown OID 0x%08X\012\000"
	.space	3
.LC349:
	.ascii	"<3>%s: ccid_ctrl_device_init failed, err:%d\012\000"
	.space	3
.LC350:
	.ascii	"<3>%s: ccid_bulk_device_init failed, err:%d\012\000"
	.space	3
.LC351:
	.ascii	"<3>ccid gadget driver failed to initialize\012\000"
.LC352:
	.ascii	"&bulk_dev->read_wq\000"
	.space	1
.LC353:
	.ascii	"&bulk_dev->write_wq\000"
.LC354:
	.ascii	"acm ttyGS%d can't notify serial state, %d\012\000"
	.space	1
.LC355:
	.ascii	"<3>%s: Unable to allocate ctrl pkt\012\000"
.LC356:
	.ascii	"<3>%s: Invalid grmnet/buf, grmnet:%pK buf:%pK\012\000"
	.space	1
.LC357:
	.ascii	"unable to allocate memory for QMI req\012\000"
	.space	1
.LC358:
	.ascii	"<3>%s: Failed to enable capture ep\000"
	.space	1
.LC359:
	.ascii	"<3>%s: request allocation failed\012\000"
	.space	2
.LC360:
	.ascii	"<3>%s: request buffer allocation failed\012\000"
	.space	3
.LC361:
	.ascii	"<3>%s: Failed to queue %s req: err %d\012\000"
	.space	1
.LC362:
	.ascii	"<3>%s: Failed to enable playback ep\000"
.LC363:
	.ascii	"<3>%s: Failed to queue %s queue req: err %d\012\000"
	.space	3
.LC364:
	.ascii	"<3>%s: Schedule playback_work\000"
	.space	2
.LC365:
	.ascii	"<3>%s: playback_buf is empty. Stop.\000"
.LC366:
	.ascii	"<3>%s: Interface %d. Do nothing. Return %d\012\000"
.LC367:
	.ascii	"dwc3-gadget\000"
.LC368:
	.ascii	"<3>%s:Unable to close smux channel: %d\012\000"
.LC369:
	.ascii	"<6>%s: ESHUTDOWN/ECONNRESET, connection gone\000"
	.space	3
.LC370:
	.ascii	"<3>%s: Unknown event %02x --> %d\012\000"
	.space	2
.LC371:
	.ascii	"<3>%s: Pending notifications in MBIM_NOTIFY_NONE\012"
	.ascii	"\000"
	.space	2
.LC372:
	.ascii	"<3>%s: Queue notify request failed, err: %d\000"
.LC373:
	.ascii	"<3>%s: usb_ep_queue failed, err: %d\000"
.LC374:
	.ascii	"ep0\000"
.LC375:
	.ascii	"<3>%s() cmd is not proper ioctl type %c\012\000"
	.space	3
.LC376:
	.ascii	"<3>%s() cmd is not proper ioctl number %d\012\000"
	.space	1
.LC377:
	.ascii	"<3>%s() cmd has no buffer\012\000"
	.space	1
.LC378:
	.ascii	"<3>%s() cmd has invalid direction\012\000"
	.space	1
.LC379:
	.ascii	"<3>%s() SUPPORT_LIST copy_to_user f %d\012\000"
.LC380:
	.ascii	"<3>%s() close called\012\000"
	.space	2
.LC381:
	.ascii	"<3>%s() copy_to_user f %d\012\000"
	.space	1
.LC382:
	.ascii	"<3>%s() WAIT_NOTIFY copy_to_user f %d\012\000"
	.space	1
.LC383:
	.ascii	"<3>%s() GET_STATUS copy_to_user f %d\012\000"
	.space	2
.LC384:
	.ascii	"<7>acm ttyGS%d serial state %04x\012\000"
	.space	2
.LC385:
	.ascii	"/root/lol//drivers/usb/gadget/u_serial.c\000"
	.space	3
.LC386:
	.ascii	"<3>%s: rmnet ctrl file handler %pK is not open\000"
	.space	1
.LC387:
	.ascii	"<3>%s: kevent %d may have been dropped\012\000"
.LC388:
	.ascii	"<6>%s: usb cable is not connected\012\000"
	.space	1
.LC389:
	.ascii	"<3>%s: w_length > 0: %d\000"
.LC390:
	.ascii	"<3>%s: ctrl resp queue empty\012\000"
	.space	2
.LC391:
	.ascii	"<3>%s: wrong NTB length %d\000"
	.space	1
.LC392:
	.ascii	"<3>%s: invalid control req: %02x.%02x v%04x i%04x l"
	.ascii	"%d\012\000"
	.space	1
.LC393:
	.ascii	"<3>%s: queueing req failed: %02x.%02x, err %d\012\000"
	.space	1
.LC394:
	.ascii	"<3>%s: ctrl req err %d: %02x.%02x v%04x i%04x l%d\012"
	.ascii	"\000"
	.space	1
.LC395:
	.ascii	"rmnet_mux data tx ep error %d\012\000"
	.space	1
.LC396:
	.ascii	"<7>usb: %s\012\000"
.LC397:
	.ascii	"delayed status mismatch..resetting\012\000"
.LC398:
	.ascii	"<3>%s: USB not connected\012\000"
	.space	2
.LC399:
	.ascii	"<6>%s: usb rmnet sdio channels are open retry_cnt:%"
	.ascii	"d\012\000"
	.space	2
.LC400:
	.ascii	"Unable to open control SDIO channel\012\000"
	.space	3
.LC401:
	.ascii	"Unable to open DATA SDIO channel\012\000"
	.space	2
.LC402:
	.ascii	"<3>%s: Received NULL mbim pointer\012\000"
	.space	1
.LC403:
	.ascii	"<3>%s: Buffer size is too big %d, should be at most"
	.ascii	" %d\012\000"
.LC404:
	.ascii	"<3>%s: Previous reading is not finished yet\012\000"
	.space	3
.LC405:
	.ascii	"<3>%s: USB cable not connected. Wait.\012\000"
	.space	1
.LC406:
	.ascii	"<3>%s: cpkt size too big:%d > buf size:%d\012\000"
	.space	1
.LC407:
	.ascii	"<3>%s: copy_to_user failed: err %d\012\000"
.LC408:
	.ascii	"<3>%s: Waiting failed\012\000"
	.space	1
.LC409:
	.ascii	"common->fsg is NULL in %s at %u\012\000"
	.space	3
.LC410:
	.ascii	"/root/lol//drivers/usb/gadget/f_mass_storage.c\000"
	.space	1
.LC411:
	.ascii	"error in submission: %s --> %d\012\000"
.LC412:
	.ascii	"RMNET_MUX %s response error %d, %d/%d\012\000"
	.space	1
.LC413:
	.ascii	"rmnet_mux data rx enqueue err %d\012\000"
	.space	2
.LC414:
	.ascii	"<3>%s: usb_bam_connect (src) failed: err:%d\012\000"
	.space	3
.LC415:
	.ascii	"<3>%s: usb_bam_connect (dst) failed: err:%d\012\000"
	.space	3
.LC416:
	.ascii	"<3>%s:teth_bridge_init() failed\012\000"
	.space	3
.LC417:
	.ascii	"<3>%s: out of memory\012\000"
	.space	2
.LC418:
	.ascii	"<3>%s: usb_bam_client_ready failed: err:%d\012\000"
.LC419:
	.ascii	"<3>%s: usb cable is not connected\012\000"
	.space	1
.LC420:
	.ascii	"<3>%s: given_xport:%s cur_xport:%s doing nothing\012"
	.ascii	"\000"
	.space	2
.LC421:
	.ascii	"Unable to open data smd channel\012\000"
	.space	3
.LC422:
	.ascii	"<3>%s: undefined transport\012\000"
.LC423:
	.ascii	"<3>%s: usb alloc request failed\012\000"
	.space	3
.LC424:
	.ascii	"<3>%s: request buf allocation failed\012\000"
	.space	2
.LC425:
	.ascii	"<3>%s: unable to allocate IN requests\012\000"
	.space	1
.LC426:
	.ascii	"<3>%s: unable to allocate out requests\012\000"
.LC427:
	.ascii	"dpkts_tomsm:  %lu\012dpkts_tomdm: %lu\012cpkts_tomd"
	.ascii	"m: %lu\012dpkts_tolaptop: %lu\012cpkts_tolaptop:  %"
	.ascii	"lu\012cbits_to_modem: %lu\012tx skb size:     %u\012"
	.ascii	"rx_skb_size:     %u\012dpkts_pending_at_dmux: %u\012"
	.ascii	"tx drp cnt: %lu\012cpkts_drp_cnt: %lu\012cpkt_tx_ql"
	.ascii	"en: %lu\012cpkt_rx_qlen_to_modem: %lu\012xport: %s\012"
	.ascii	"ctr_ch_opened:\011%d\012\000"
.LC428:
	.ascii	"<3>%s: unable open bam ch:%d err:%d\012\000"
	.space	3
.LC429:
	.ascii	"<3>%s: rx req allocation failed\012\000"
	.space	3
.LC430:
	.ascii	"<3>%s: tx req allocation failed\012\000"
	.space	3
.LC431:
	.ascii	"<3>%s: max_buffer_size:%d given_pkt_size:%d\012\000"
	.space	3
.LC432:
	.ascii	"<3> %s dev->error\012\000"
	.space	1
.LC433:
	.ascii	"write %u @ %llu beyond end %llu\012\000"
	.space	3
.LC434:
	.ascii	"Unable to open control smd channel: %d\012\000"
.LC435:
	.ascii	"pdrv %s register failed %d\012\000"
.LC436:
	.ascii	"lun%d\000"
	.space	2
.LC437:
	.ascii	"Linux\000"
	.space	2
.LC438:
	.ascii	"File-CD Gadget\000"
	.space	1
.LC439:
	.ascii	"File-Stor Gadget\000"
	.space	3
.LC440:
	.ascii	"file-storage\000"
	.space	3
.LC441:
	.ascii	"(no medium)\000"
.LC442:
	.ascii	"(error)\000"
.LC443:
	.ascii	"removable \000"
	.space	1
.LC444:
	.ascii	"read only \000"
	.space	1
.LC445:
	.ascii	"CD-ROM \000"
.LC446:
	.ascii	"lun\000"
.LC447:
	.ascii	"&common->filesem\000"
	.space	3
.LC448:
	.ascii	"failed to register LUN%d: %d\012\000"
	.space	2
.LC449:
	.ascii	"no file given for LUN%d\012\000"
	.space	3
.LC450:
	.ascii	"net2280\000"
.LC451:
	.ascii	"dummy_udc\000"
	.space	2
.LC452:
	.ascii	"goku_udc\000"
	.space	3
.LC453:
	.ascii	"omap_udc\000"
	.space	3
.LC454:
	.ascii	"pxa27x_udc\000"
	.space	1
.LC455:
	.ascii	"s3c2410_udc\000"
.LC456:
	.ascii	"at91_udc\000"
	.space	3
.LC457:
	.ascii	"imx_udc\000"
.LC458:
	.ascii	"musb-hdrc\000"
	.space	2
.LC459:
	.ascii	"atmel_usba_udc\000"
	.space	1
.LC460:
	.ascii	"fsl-usb2-udc\000"
	.space	3
.LC461:
	.ascii	"amd5536udc\000"
	.space	1
.LC462:
	.ascii	"m66592_udc\000"
	.space	1
.LC463:
	.ascii	"fsl_qe_udc\000"
	.space	1
.LC464:
	.ascii	"ci13xxx_pci\000"
.LC465:
	.ascii	"langwell_udc\000"
	.space	3
.LC466:
	.ascii	"r8a66597_udc\000"
	.space	3
.LC467:
	.ascii	"s3c-hsotg\000"
	.space	2
.LC468:
	.ascii	"pch_udc\000"
.LC469:
	.ascii	"ci13xxx_msm\000"
.LC470:
	.ascii	"renesas_usbhs_udc\000"
	.space	2
.LC471:
	.ascii	"s3c-hsudc\000"
	.space	2
.LC472:
	.ascii	"net2272\000"
.LC473:
	.ascii	"msm72k_udc\000"
	.space	1
.LC474:
	.ascii	"ci13xxx_msm_hsic\000"
	.space	3
.LC475:
	.ascii	"%-8s%-16s%04x\000"
	.space	2
.LC476:
	.ascii	"SAMSUNG\000"
.LC477:
	.ascii	"&x->wait\000"
	.space	3
.LC478:
	.ascii	"&common->fsg_wait\000"
	.space	2
.LC479:
	.ascii	"Mass Storage Function, version: 2009/09/11\012\000"
.LC480:
	.ascii	"Number of LUNs=%d\012\000"
	.space	1
.LC481:
	.ascii	"LUN: %s%s%sfile: %s\012\000"
	.space	3
.LC482:
	.ascii	"controller '%s' not recognized\012\000"
.LC483:
	.ascii	"%s setup response queue error\012\000"
	.space	1
.LC484:
	.ascii	"rmnet SMD data write failed\012\000"
	.space	3
.LC485:
	.ascii	"rmnet_mux SMD data write failed\012\000"
	.space	3
.LC486:
	.ascii	"rmnet_mux data smd write failed\012\000"
	.space	3
.LC487:
	.ascii	"<3>%s: mbim dev is null\012\000"
	.space	3
.LC488:
	.ascii	"<3>%s: mbim command error %d\012\000"
	.space	2
.LC489:
	.ascii	"<3>given pkt size too big:%d > max_pkt_size:%d\012\000"
.LC490:
	.ascii	"<3>rmnet file handler %pK is not open\000"
	.space	2
.LC491:
	.ascii	"rmnet_mux command error %d\012\000"
.LC492:
	.ascii	"<3>%s: ctrl pkts dropped: cpkts_drp_cnt: %lu\012\000"
	.space	2
.LC493:
	.ascii	"unable to allocate memory for ctrl req\012\000"
.LC494:
	.ascii	"<3>%s bulk_dev_error\012\000"
	.space	2
.LC495:
	.ascii	"<3>%s usb ep queue failed\012\000"
	.space	1
.LC496:
	.ascii	"can't allocate request for %s\012\000"
	.space	1
.LC497:
	.ascii	"<3>usb: %s  drop incase of NCM rx length %d\012\000"
	.space	3
.LC498:
	.ascii	"<3>usb: %s  Dont drop incase of NCM rx length %d\012"
	.ascii	"\000"
	.space	2
.LC499:
	.ascii	"<3>usb: %s Drop rx length %d\012\000"
	.space	2
.LC500:
	.ascii	"ncm\000"
.LC501:
	.ascii	"kill %s:  resubmit %d bytes --> %d\012\000"
.LC502:
	.ascii	"<3>%s: given pkt size too big:%d > max_pkt_size:%d\012"
	.ascii	"\000"
.LC503:
	.ascii	"<3>%s: Previous writing not finished yet\012\000"
	.space	2
.LC504:
	.ascii	"<3>%s: dev:%pK is not connected\012\000"
	.space	3
.LC505:
	.ascii	"<3>%s: dev:%pK state=%d, recover!!\012\000"
.LC506:
	.ascii	"<3>%s: dev:%pK is not online\012\000"
	.space	2
.LC507:
	.ascii	"<3>%s: dev:%pK req is NULL\012\000"
.LC508:
	.ascii	"<3>%s: dev:%pK req->buf is NULL\012\000"
	.space	3
.LC509:
	.ascii	"<3>%s: ep enqueue error %d\012\000"
.LC510:
	.ascii	"<6>%s: setting notify count to zero\012\000"
	.space	3
.LC511:
	.ascii	"<7>usb: GET_DES\012\000"
	.space	3
.LC512:
	.ascii	"<7>usb: %s failed to change configuration\012\000"
	.space	1
.LC513:
	.ascii	"%s config #%d: %s\012\000"
	.space	1
.LC514:
	.ascii	"battery\000"
.LC515:
	.ascii	"<3>%s(): No SS desc for function:%s\012\000"
	.space	3
.LC516:
	.ascii	"<3>%s: fail to get %s psy\012\000"
	.space	1
.LC517:
	.ascii	"<7>usb: SET_CON\012\000"
	.space	3
.LC518:
	.ascii	"unconfigured\000"
	.space	3
.LC519:
	.ascii	"<6>%s sec_qcom_usb_rdrv = %d, disable\012\000"
	.space	1
.LC520:
	.ascii	"<6>Redriver OFF in Mac OS\012\000"
	.space	1
.LC521:
	.ascii	"func_suspend() returned error %d\012\000"
	.space	2
.LC522:
	.ascii	"%s: Delayed status not supported for w_length != 0\000"
	.space	1
.LC523:
	.ascii	"/root/lol//include/linux/kref.h\000"
.LC524:
	.ascii	"ep-e\000"
	.space	3
.LC525:
	.ascii	"ep-f\000"
	.space	3
.LC526:
	.ascii	"ep3-bulk\000"
	.space	3
.LC527:
	.ascii	"ep2-bulk\000"
	.space	3
.LC528:
	.ascii	"ep0 bMaxBurst must be 0\012\000"
	.space	3
.LC529:
	.ascii	"can't enable %s, result %d\012\000"
.LC530:
	.ascii	"config_ep_by_speed failed for ep %s, result %d\012\000"
.LC531:
	.ascii	"config_ep_by_speed failes for ep %s, result %d\012\000"
.LC532:
	.ascii	"<3>%s: unable to allocate memory for notify ep\012\000"
.LC533:
	.ascii	"config_ep fail ep %s, result %d\012\000"
	.space	3
.LC534:
	.ascii	"failedto enable ep%s, result %d\012\000"
	.space	3
.LC535:
	.ascii	"failed to enable ep %s, result %d\012\000"
	.space	1
.LC536:
	.ascii	"<3>%s: unable to allocate memory for notify req\012"
	.ascii	"\000"
	.space	3
.LC537:
	.ascii	"<3>%s: unable to allocate memory for out req\012\000"
	.space	2
.LC538:
	.ascii	"<3>%s: unable to allocate memory for in req\012\000"
	.space	3
.LC539:
	.ascii	"<3>%s: config_ep_by_speed failed for ep#%s, err#%d\012"
	.ascii	"\000"
.LC540:
	.ascii	"<3>%s: usb ep#%s enable failed, err#%d\012\000"
.LC541:
	.ascii	"<3>qdss_st_alt: qdss supportes HS or SS only\012\000"
	.space	2
.LC542:
	.ascii	"<3>qdss_set_alt failed\012\000"
.LC543:
	.ascii	"can't configure %s: %d\012\000"
.LC544:
	.ascii	"can't start %s: %d\012\000"
.LC545:
	.ascii	"%s queue req: %d\012\000"
	.space	2
.LC546:
	.ascii	"<3>%s(#) call conn_gadget_bind_config\012\000"
	.space	1
.LC547:
	.ascii	"<6>conn_gadget_bind_config\012\000"
.LC548:
	.ascii	"conn_gadget\000"
.LC549:
	.ascii	"ccid\000"
	.space	3
.LC550:
	.ascii	"<6>adb_bind_config\012\000"
.LC551:
	.ascii	"adb\000"
.LC552:
	.ascii	"rmnet_smd_sdio\000"
	.space	1
.LC553:
	.ascii	"<3>%s: %s: can't bind, err %d\012\000"
	.space	1
.LC554:
	.ascii	"dual\000"
	.space	3
.LC555:
	.ascii	"full\000"
	.space	3
.LC556:
	.ascii	"<3>%s: usb epin autoconfig failed\012\000"
	.space	1
.LC557:
	.ascii	"<6>%s: usb epin autoconfig succeeded\012\000"
	.space	2
.LC558:
	.ascii	"<3>%s: usb epout autoconfig failed\012\000"
.LC559:
	.ascii	"<6>%s: usb epout autoconfig succeeded\012\000"
	.space	1
.LC560:
	.ascii	"<3>%s: usb notify ep autoconfig failed\012\000"
.LC561:
	.ascii	"<6>%s: usb notify ep autoconfig succeeded\012\000"
	.space	1
.LC562:
	.ascii	"<6>%s: allocated notify ep request & request buffer"
	.ascii	"\012\000"
	.space	3
.LC563:
	.ascii	"<6>%s: mbim(%d): %s speed IN/%s OUT/%s NOTIFY/%s\012"
	.ascii	"\000"
	.space	2
.LC564:
	.ascii	"<3>%s: %s failed to bind, err %d\012\000"
	.space	2
.LC565:
	.ascii	"<6>%s: failed to allocate notify request\012\000"
	.space	2
.LC566:
	.ascii	"%s: can't bind, err %d\012\000"
.LC567:
	.ascii	"<3>%s: %s: failed to allocate desc interface\000"
	.space	3
.LC568:
	.ascii	"<3>%s: %s: failed to allocate alt interface\000"
.LC569:
	.ascii	"<3>%s: %s: failed to autoconfig in endpoint\000"
.LC570:
	.ascii	"<3>%s: %s: failed to autoconfig out endpoint\000"
	.space	3
.LC571:
	.ascii	"android\000"
.LC572:
	.ascii	"<3>acc_bind() could not allocate requests\012\000"
	.space	1
.LC573:
	.ascii	"unable to autoconfigure all endpoints\012\000"
	.space	1
.LC574:
	.ascii	"<3>mtp_bind() could not allocate requests\012\000"
	.space	1
.LC575:
	.ascii	"<3>%s: unable to allocate ifc id, err:%d\000"
	.space	3
.LC576:
	.ascii	"<3>%s: usb epnotify autoconfig failed\012\000"
	.space	1
.LC577:
	.ascii	"<3>qdss_bind: full-speed is not supported\012\000"
	.space	1
.LC578:
	.ascii	"<3>interface allocation error\012\000"
	.space	1
.LC579:
	.ascii	"<3>ep_autoconfig error\012\000"
.LC580:
	.ascii	"<3>usb_copy_descriptors error\012\000"
	.space	1
.LC581:
	.ascii	"<7>usb: %s cdev->config=%pK, config=%pK\012\000"
	.space	3
.LC582:
	.ascii	"<6>adb_release\012\000"
.LC583:
	.ascii	"<3>%s: adb_closed_callback: data->dev is NULL\000"
	.space	2
.LC584:
	.ascii	"<3>%s: adb_closed_callback: config->dev is NULL\000"
.LC585:
	.ascii	"<6>%s(): freeing\012\000"
	.space	2
.LC586:
	.ascii	"Function FS Gadget\000"
	.space	1
.LC587:
	.ascii	"<3>'=' missing in %s\012\000"
	.space	2
.LC588:
	.ascii	"<3>%s: invalid value: %s\012\000"
	.space	2
.LC589:
	.ascii	"rmode\000"
	.space	2
.LC590:
	.ascii	"fmode\000"
	.space	2
.LC591:
	.ascii	"mode\000"
	.space	3
.LC592:
	.ascii	"uid\000"
.LC593:
	.ascii	"gid\000"
.LC594:
	.ascii	"<3>%s: invalid option\012\000"
	.space	1
.LC595:
	.ascii	"&ffs->mutex\000"
.LC596:
	.ascii	"&ffs->ev.waitq\000"
	.space	1
.LC597:
	.ascii	"failed to override string ID\012\000"
	.space	2
.LC598:
	.ascii	"<7>usb: %s idVendor=0x%x, idProduct=0x%x\012\000"
	.space	2
.LC599:
	.ascii	"<7>usb: %s bcdDevice=0x%x\012\000"
	.space	1
.LC600:
	.ascii	"%s %s with %s\000"
	.space	2
.LC601:
	.ascii	"<7>usb: %s composite_manufacturer=%s\012\000"
	.space	2
.LC602:
	.ascii	"userspace failed to provide iSerialNumber\012\000"
	.space	1
.LC603:
	.ascii	"%s ready\012\000"
	.space	2
.LC604:
	.ascii	"<7>usb: %s disconnect\012\000"
	.space	1
.LC605:
	.ascii	"f_%s\000"
	.space	3
.LC606:
	.ascii	"<3>%s: %s: Failed to create dev %s\000"
	.space	1
.LC607:
	.ascii	"<3>%s: %s: Failed to init %s\000"
	.space	3
.LC608:
	.ascii	"<3>%s: %s: Failed to create function %s attributes\000"
	.space	1
.LC609:
	.ascii	"Android\000"
.LC610:
	.ascii	"0123456789ABCDEF\000"
	.space	3
.LC611:
	.ascii	"<4>%s: %s: controller '%s' not recognized\012\000"
	.space	1
.LC612:
	.ascii	"<6>acc_bind_config\012\000"
.LC613:
	.ascii	"accessory\000"
	.space	2
.LC614:
	.ascii	"Mass Storage Function\000"
	.space	2
.LC615:
	.ascii	"<6>mtp_bind_config\012\000"
.LC616:
	.ascii	"mtp\000"
.LC617:
	.ascii	"qdss\000"
	.space	3
.LC618:
	.ascii	"<3>qdss_bind_config: allocating channel failed\012\000"
.LC619:
	.ascii	"<3>qdss usb_add_function failed\012\000"
	.space	3
.LC620:
	.ascii	"<3>%s: qdss: Cannot open channel qdss\000"
	.space	2
.LC621:
	.ascii	"composite\000"
	.space	2
.LC622:
	.ascii	"<3>%s: unable to allocate platform data\012\000"
	.space	3
.LC623:
	.ascii	"qcom,android-usb-swfi-latency\000"
	.space	2
.LC624:
	.ascii	"qcom,android-usb-cdrom\000"
	.space	1
.LC625:
	.ascii	"qcom,android-usb-internal-ums\000"
	.space	2
.LC626:
	.ascii	"qcom,streaming-func\000"
.LC627:
	.ascii	"<3>%s: Invalid number of functions used.\012\000"
	.space	2
.LC628:
	.ascii	"android_usb\000"
.LC629:
	.ascii	"<3>%s: %s(): Failed to alloc memory for android_dev"
	.ascii	"\012\000"
	.space	3
.LC630:
	.ascii	"&android_dev->mutex\000"
.LC631:
	.ascii	"ioremap failed\012\000"
.LC632:
	.ascii	"android%d\000"
	.space	2
.LC633:
	.ascii	"<3>%s: %s(): android_create_device failed\012\000"
	.space	1
.LC634:
	.ascii	"<7>usb: %s error pdev(%pK)\012\000"
.LC635:
	.ascii	"<7>usb: %s failed to create attr\012\000"
	.space	2
.LC636:
	.ascii	"<3>usb: %s To create terminal_atttrr is failed\012\000"
.LC637:
	.ascii	"<3>%s: %s(): Failed to register android composite d"
	.ascii	"river\012\000"
	.space	2
.LC638:
	.ascii	"high\000"
	.space	3
.LC639:
	.ascii	"<3>DUN register is failed, ret = %d\012\000"
	.space	3
.LC640:
	.ascii	"<3>usb: %s modem misc register is failed\012\000"
	.space	2
.LC641:
	.ascii	"&modem_wait_q\000"
	.space	2
.LC642:
	.ascii	"%s: Unexpected call\012\000"
	.space	3
.LC643:
	.ascii	"usb_ep_set_wedge -> %d\012\000"
.LC644:
	.ascii	"usb_ep_set_halt -> %d\012\000"
	.space	1
.LC645:
	.ascii	"INQUIRY\000"
.LC646:
	.ascii	" Card\000"
	.space	2
.LC647:
	.ascii	"MODE SELECT(6)\000"
	.space	1
.LC648:
	.ascii	"MODE SELECT(10)\000"
.LC649:
	.ascii	"MODE SENSE(6)\000"
	.space	2
.LC650:
	.ascii	"MODE SENSE(10)\000"
	.space	1
.LC651:
	.ascii	"PREVENT-ALLOW MEDIUM REMOVAL\000"
	.space	3
.LC652:
	.ascii	"READ(6)\000"
.LC653:
	.ascii	"READ(10)\000"
	.space	3
.LC654:
	.ascii	"READ(12)\000"
	.space	3
.LC655:
	.ascii	"READ CAPACITY\000"
	.space	2
.LC656:
	.ascii	"READ HEADER\000"
.LC657:
	.ascii	"READ TOC\000"
	.space	3
.LC658:
	.ascii	"READ FORMAT CAPACITIES\000"
	.space	1
.LC659:
	.ascii	"REQUEST SENSE\000"
	.space	2
.LC660:
	.ascii	"START-STOP UNIT\000"
.LC661:
	.ascii	"Load AT\000"
.LC662:
	.ascii	"Load User\000"
	.space	2
.LC663:
	.ascii	"SYNCHRONIZE CACHE\000"
	.space	2
.LC664:
	.ascii	"TEST UNIT READY\000"
.LC665:
	.ascii	"VERIFY\000"
	.space	1
.LC666:
	.ascii	"WRITE(6)\000"
	.space	3
.LC667:
	.ascii	"WRITE(10)\000"
	.space	2
.LC668:
	.ascii	"WRITE(12)\000"
	.space	2
.LC669:
	.ascii	"<6>%s called\012\000"
	.space	2
.LC670:
	.ascii	"time stop\000"
	.space	2
.LC671:
	.ascii	"time reset\000"
	.space	1
.LC672:
	.ascii	"READ CD\000"
.LC673:
	.ascii	"usb: %s : common->version_string[%d]=%s\015\012\000"
	.space	2
.LC674:
	.ascii	"Unknown x%02x\000"
	.space	2
.LC675:
	.ascii	"%s: no requests available\012\000"
	.space	1
.LC676:
	.ascii	"%s: cannot queue read request\012\000"
	.space	1
.LC677:
	.ascii	"usb_add_function failed\012\000"
	.space	3
.LC678:
	.ascii	"unable to get diag usb channel\012\000"
.LC679:
	.ascii	"<3>%s: diag: Cannot open channel '%s'\000"
	.space	2
.LC680:
	.ascii	"<3>usb_ep_alloc_request failed\012\000"
.LC681:
	.ascii	"<3>send_sps_req: usb_ep_queue error\012\000"
	.space	3
.LC682:
	.ascii	"<3>msm_ep_config failed\012\000"
	.space	3
.LC683:
	.ascii	"<3>init_data error\000"
	.space	1
.LC684:
	.ascii	"<3>qdss_data_connection: memory alloc failed\012\000"
	.space	2
.LC685:
	.ascii	"<3>set_qdss_data_connection error\000"
	.space	2
.LC686:
	.ascii	"<3>send_sps_req error\012\000"
	.space	1
.LC687:
	.ascii	"<3>uninit_data\012\000"
.LC688:
	.ascii	"<3>msm_ep_unconfig failed\012\000"
	.space	1
.LC689:
	.ascii	"<3>%s: uninit_data error\012\000"
	.space	2
.LC690:
	.ascii	"<3>usb_bam_disconnection error\012\000"
.LC691:
	.ascii	"<3>qdss_disconnect error\000"
	.space	3
.LC692:
	.ascii	"<3>usb_qdss_free_req: qdss ctx is NULL\012\000"
.LC693:
	.ascii	"<3>usb_qdss_alloc_req: missing params\012\000"
	.space	1
.LC694:
	.ascii	"<3>usb_qdss_alloc_req: ctrl_in allocation err\012\000"
	.space	1
.LC695:
	.ascii	"<3>usb_qdss_alloc_req:ctrl_out allocation err\012\000"
	.space	1
.LC696:
	.ascii	"<3>error: usb_qdss_ctrl_read list is empty\012\000"
.LC697:
	.ascii	"<3>qdss usb_ep_queue failed\012\000"
	.space	3
.LC698:
	.ascii	"<3>error: usb_qdss_ctrl_write list is empty\012\000"
	.space	3
.LC699:
	.ascii	"<3>usb_qdss_open: notification func is missing\012\000"
.LC700:
	.ascii	"k_rmnet_work\000"
	.space	3
.LC701:
	.ascii	"&dev->smd_ctl.wait\000"
	.space	1
.LC702:
	.ascii	"&dev->smd_data.wait\000"
.LC703:
	.ascii	"rmnet\000"
	.space	2
.LC704:
	.ascii	"usb_rmnet_smd\000"
	.space	2
.LC705:
	.ascii	"rmnet_sdio\000"
	.space	1
.LC706:
	.ascii	"usb_rmnet_sdio\000"
	.space	1
.LC707:
	.ascii	"<6>%s: RmNet(%d) %s Speed, IN:%s OUT:%s\012\000"
	.space	3
.LC708:
	.ascii	"USB audio source\000"
	.space	3
.LC709:
	.ascii	"USB gadget audio\000"
	.space	3
.LC710:
	.ascii	"audio_source\000"
	.space	3
.LC711:
	.ascii	"USB accessory audio source\000"
	.space	1
.LC712:
	.ascii	"<3>%s: %s err %d\012\000"
	.space	2
.LC713:
	.ascii	"queue\000"
	.space	2
.LC714:
	.ascii	"<4>%s: unexpected %s status %d\012\000"
.LC715:
	.ascii	"<3>usb:[%s] port_usb or port_tty is NULL!! started("
	.ascii	"%d)\012\000"
.LC716:
	.ascii	"<4>ttyGS%d: unexpected RX status %d\012\000"
	.space	3
.LC717:
	.ascii	"<4>ttyGS%d: RX not scheduled?\012\000"
	.space	1
.LC718:
	.ascii	"g_serial\000"
	.space	3
.LC719:
	.ascii	"ttyGS\000"
	.space	2
.LC720:
	.ascii	"k_gserial\000"
	.space	2
.LC721:
	.ascii	"&ports[i].lock\000"
	.space	1
.LC722:
	.ascii	"&port->close_wait\000"
	.space	2
.LC723:
	.ascii	"&port->drain_wait\000"
	.space	2
.LC724:
	.ascii	"<3>%s: cannot register, err %d\012\000"
.LC725:
	.ascii	"<4>%s: no classdev for port %d, err %ld\012\000"
	.space	3
.LC726:
	.ascii	"usb_serial%d\000"
	.space	3
.LC727:
	.ascii	"readstatus\000"
	.space	1
.LC728:
	.ascii	"reset\000"
	.space	2
.LC729:
	.ascii	"<3>%s: usb request is null port#%d\012\000"
.LC730:
	.ascii	"<3>%s: port#%d sdio write failed err:%d\000"
.LC731:
	.ascii	"<3>%s: sio channel is not open\012\000"
.LC732:
	.ascii	"<3>%s: usb disconnected\012\000"
	.space	3
.LC733:
	.ascii	"<3>%s: port:%pK port#%d sdio read failed err:%d\000"
.LC734:
	.ascii	"<3>%s: unable to allocate out reqs\012\000"
.LC735:
	.ascii	"<3>%s: unable to allocate in reqs\012\000"
	.space	1
.LC736:
	.ascii	"<3>%s: port allocation failed\012\000"
	.space	1
.LC737:
	.ascii	"<3>%s: failed to enable in ep w/ err:%d\012\000"
	.space	3
.LC738:
	.ascii	"<3>%s: invalid number of ports count:%d max_ports:%"
	.ascii	"d\012\000"
	.space	2
.LC739:
	.ascii	"usb_gsdio\000"
	.space	2
.LC740:
	.ascii	"<3>%s: unable to create workqueue gsdio_wq\012\000"
.LC741:
	.ascii	"&sdio_ports[i].lock\000"
.LC742:
	.ascii	"<3>%s: sdio logical port allocation failed\012\000"
.LC743:
	.ascii	"<3>%s: Invalid port no#%d\000"
	.space	2
.LC744:
	.ascii	"<3>%s: Invalid num of ports count:%d gadget:%pK\012"
	.ascii	"\000"
	.space	3
.LC745:
	.ascii	"k_gsmd\000"
	.space	1
.LC746:
	.ascii	"usb_gsmd\000"
	.space	3
.LC747:
	.ascii	"<3>%s: Unable to create workqueue gsmd_wq\012\000"
	.space	1
.LC748:
	.ascii	"&smd_ports[i].lock\000"
	.space	1
.LC749:
	.ascii	"<3>%s: Unable to alloc port:%d\012\000"
.LC750:
	.ascii	"<3>%s: tx pkt dropped: tx_drop_cnt:%u\012\000"
	.space	1
.LC751:
	.ascii	"<3>%s: invalid bam portno#%d\012\000"
	.space	2
.LC752:
	.ascii	"<3>%s: invalid bam2bam portno#%d\012\000"
	.space	2
.LC753:
	.ascii	"<3>%s: grmnet port is null\012\000"
.LC754:
	.ascii	"<3>%s: usb_bam_client_ready failed\012\000"
.LC755:
	.ascii	"<3>%s: Invalid num of ports count:%d,%d\012\000"
	.space	3
.LC756:
	.ascii	"k_gbam\000"
	.space	1
.LC757:
	.ascii	"<3>%s: Unable to create workqueue gbam_wq\012\000"
	.space	1
.LC758:
	.ascii	"usb_rmnet\000"
	.space	2
.LC759:
	.ascii	"<3>%s: Un-supported transport: %s\012\000"
	.space	1
.LC760:
	.ascii	"<3>%s: Invalid port_num#%d\012\000"
.LC761:
	.ascii	"<3>%s: Invalid client:%d\012\000"
	.space	2
.LC762:
	.ascii	"<3>%s: Invalid num of ports count:%d\012\000"
	.space	2
.LC763:
	.ascii	"gsmd_ctrl\000"
	.space	2
.LC764:
	.ascii	"<3>%s: Unable to create workqueue grmnet_ctrl\012\000"
	.space	1
.LC765:
	.ascii	"&c->wait\000"
	.space	3
.LC766:
	.ascii	"&c->smd_wait_q\000"
	.space	1
.LC767:
	.ascii	"<3>%s: setting xport name for invalid port num %d\012"
	.ascii	"\000"
	.space	1
.LC768:
	.ascii	"_ctrl\000"
	.space	2
.LC769:
	.ascii	"<3>%s: Unable to create workqueue:%s\012\000"
	.space	2
.LC770:
	.ascii	"_data\000"
	.space	2
.LC771:
	.ascii	"SMUX_RMNET_CTL_HSUART\000"
	.space	2
.LC772:
	.ascii	"SMUX_CONNECTED\000"
	.space	1
.LC773:
	.ascii	"SMUX_DISCONNECTED\000"
	.space	2
.LC774:
	.ascii	"SMUX_READ_DONE\000"
	.space	1
.LC775:
	.ascii	"SMUX_READ_FAIL\000"
	.space	1
.LC776:
	.ascii	"SMUX_WRITE_DONE\000"
.LC777:
	.ascii	"SMUX_WRITE_FAIL\000"
.LC778:
	.ascii	"SMUX_HIGH_WM_HIT\000"
	.space	3
.LC779:
	.ascii	"SMUX_LOW_WM_HIT\000"
.LC780:
	.ascii	"SMUX_TIOCM_UPDATE\000"
	.space	2
.LC781:
	.ascii	"<3>%s: gsmd_ctrl_connect failed: err:%d\012\000"
	.space	3
.LC782:
	.ascii	"<3>%s: gqti_ctrl_connect failed: err:%d\012\000"
	.space	3
.LC783:
	.ascii	"<3>%s: ghsic_ctrl_connect failed: err:%d\012\000"
	.space	2
.LC784:
	.ascii	"<3>%s: ghsuart_ctrl_connect failed: err:%d\012\000"
.LC785:
	.ascii	"<3>%s: usb_bam_get_connection_idx failed\012\000"
	.space	2
.LC786:
	.ascii	"<3>%s: gbam_connect failed: err:%d\012\000"
.LC787:
	.ascii	"<3>%s: ghsic_data_connect failed: err:%d\012\000"
	.space	2
.LC788:
	.ascii	"<3>%s: ghsuart_data_connect failed: err:%d\012\000"
.LC789:
	.ascii	"<3>%s: Max-%d instances supported\012\000"
	.space	1
.LC790:
	.ascii	"<3>%s: Unable to allocate rmnet device\012\000"
.LC791:
	.ascii	"<3>%s: Un-supported transport: %u\012\000"
	.space	1
.LC792:
	.ascii	"<3>%s: supporting ports#%u port_id:%u\000"
	.space	2
.LC793:
	.ascii	"<3>%s: failed to get string id, err:%d\012\000"
.LC794:
	.ascii	"rmnet%d\000"
.LC795:
	.ascii	"<3>%s: cannot allocate memory for name\012\000"
.LC796:
	.ascii	"<3>%s: usb add function failed: %d\012\000"
.LC797:
	.ascii	"<3>%s: rmnet: Cannot open ctrl port:'%s' data port:"
	.ascii	"'%s'\012\000"
	.space	3
.LC798:
	.ascii	"<3>%s: rmnet: Cannot setup transports\000"
	.space	2
.LC799:
	.ascii	"<3>%s: Could not bind rmnet%u config\012\000"
	.space	2
.LC800:
	.ascii	"acm response on ttyGS%d, err %d\012\000"
	.space	3
.LC801:
	.ascii	"<1>DUN : DTR %d\012\000"
	.space	3
.LC802:
	.ascii	"<6>modem_ioctl: Unknown ioctl cmd(0x%x).\012\000"
	.space	2
.LC803:
	.ascii	"<6>DUN register failed. data is null.\012\000"
	.space	1
.LC804:
	.ascii	"<6>DUN is registerd\012\000"
	.space	3
.LC805:
	.ascii	"%s/%pK: can't bind, err %d\012\000"
.LC806:
	.ascii	"<6>DUN is unregisterd\012\000"
	.space	1
.LC807:
	.ascii	"acm%u\000"
	.space	2
.LC808:
	.ascii	"<3>%s: Could not bind acm%u config\012\000"
.LC809:
	.ascii	"<3>adb_bind() could not allocate requests\012\000"
	.space	1
.LC810:
	.ascii	"snd_card_create() failed\012\000"
	.space	2
.LC811:
	.ascii	"snd_device_new() failed: error %d\012\000"
	.space	1
.LC814:
	.ascii	"MIDI\000"
	.space	3
.LC815:
	.ascii	"snd_rawmidi_new() failed: error %d\012\000"
.LC816:
	.ascii	"snd_card_register() failed\012\000"
.LC817:
	.ascii	"gmidi function\000"
	.space	1
.LC812:
	.ascii	"MIDI Gadget\000"
.LC813:
	.ascii	"f_midi\000"
	.space	1
.LC818:
	.ascii	"<3>RNDIS header is NULL.\012\000"
	.space	2
.LC819:
	.ascii	"rndis response on err %d\012\000"
	.space	2
.LC820:
	.ascii	"<3>%s: rndis response on err %d\012\000"
	.space	3
.LC821:
	.ascii	"<4>%s: set unknown OID 0x%08X, size %d\012\000"
.LC822:
	.ascii	"<4>%s: unknown RNDIS message 0x%08X len %d\012\000"
.LC823:
	.ascii	"RNDIS command error %d, %d/%d\012\000"
	.space	1
.LC824:
	.ascii	"<3>%s: RNDIS command error %d, %d/%d\012\000"
	.space	2
.LC825:
	.ascii	"driver/rndis-%03d\000"
	.space	2
.LC826:
	.ascii	"rndis\000"
	.space	2
.LC827:
	.ascii	"<3>%s: %s:teth_bridge_init() failed\012\000"
	.space	3
.LC828:
	.ascii	"<3>%s: %s: usb_bam_connect_ipa failed: err:%d\012\000"
	.space	1
.LC829:
	.ascii	"<3>%s: %s:teth_bridge_connect() failed\012\000"
.LC830:
	.ascii	"<3>%s: port_usb is NULL\000"
.LC831:
	.ascii	"<3>%s: port_usb->out (bulk out ep) is NULL\000"
	.space	1
.LC832:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed: err:%d\012\000"
.LC833:
	.ascii	"<3>%s: %s: teth_bridge_set_aggr_params failed\012\000"
	.space	1
.LC834:
	.ascii	"<3>%s: data port is null\012\000"
	.space	2
.LC835:
	.ascii	"<3>%s: %s: usb_bam_client_ready failed\012\000"
.LC836:
	.ascii	"<6>%s: SET DEVICE OFFLINE\000"
	.space	2
.LC837:
	.ascii	"<6>%s: dev:%pK port:%d. Do nothing.\012\000"
	.space	3
.LC838:
	.ascii	"<6>%s: mbim deactivated\012\000"
	.space	3
.LC839:
	.ascii	"<6>%s: CONTROL_INTERFACE\000"
	.space	3
.LC840:
	.ascii	"<6>%s: reset mbim control %d\012\000"
	.space	2
.LC841:
	.ascii	"<3>%s: Failed configuring notify ep %s: err %d\012\000"
.LC842:
	.ascii	"<6>%s: DATA_INTERFACE\000"
	.space	2
.LC843:
	.ascii	"<6>%s: reset mbim\012\000"
	.space	1
.LC844:
	.ascii	"<6>%s: Alt set 1, initialize ports\000"
	.space	1
.LC845:
	.ascii	"<6>%s: Choose endpoints\000"
.LC846:
	.ascii	"<3>%s: IN ep %s failed: %d\012\000"
.LC847:
	.ascii	"<6>%s: Set mbim port in_desc = 0x%pK\012\000"
	.space	2
.LC848:
	.ascii	"<3>%s: OUT ep %s failed: %d\012\000"
	.space	3
.LC849:
	.ascii	"<6>%s: Set mbim port out_desc = 0x%pK\012\000"
	.space	1
.LC850:
	.ascii	"<6>%s: dev:%pK portno:%d\012\000"
	.space	2
.LC851:
	.ascii	"<3>%s: bam_data_setup failed: err:%d\012\000"
	.space	2
.LC852:
	.ascii	"<6>%s: mbim bam connected\012\000"
	.space	1
.LC853:
	.ascii	"<6>%s: PORTS already SET\000"
	.space	3
.LC854:
	.ascii	"<6>%s: SET DEVICE ONLINE\000"
	.space	3
.LC855:
	.ascii	"<3>%s: ERROR: Illegal Interface\000"
.LC856:
	.ascii	"k_bam_data\000"
	.space	1
.LC857:
	.ascii	"<3>%s: Failed to create workqueue\012\000"
	.space	1
.LC858:
	.ascii	"<3>%s: Failed to alloc port:%d\012\000"
.LC859:
	.ascii	"<6>%s: port number %u\000"
	.space	2
.LC860:
	.ascii	"<3>%s: Can not add port %u. Max ports = %d\000"
	.space	1
.LC861:
	.ascii	"<6>%s: no_ports:%d\012\000"
.LC862:
	.ascii	"<3>%s: bam_data_setup failed err: %d\012\000"
	.space	2
.LC863:
	.ascii	"<3>%s: bam setup failed\000"
.LC864:
	.ascii	"<6>%s: mbim struct not allocated\000"
	.space	3
.LC865:
	.ascii	"usb_mbim\000"
	.space	3
.LC866:
	.ascii	"<6>%s: Exit status %d\000"
	.space	2
.LC867:
	.ascii	"<6>%s: mbim suspended\012\000"
	.space	1
.LC868:
	.ascii	"<6>%s: mbim resumed\012\000"
	.space	3
.LC869:
	.ascii	"%02X%02X%02X%02X%02X%02X\000"
	.space	3
.LC870:
	.ascii	"cdc_ethernet\000"
	.space	3
.LC871:
	.ascii	"%s%%d\000"
	.space	2
.LC872:
	.ascii	"using random %s ethernet address\012\000"
	.space	2
.LC873:
	.ascii	"self\000"
	.space	3
.LC874:
	.ascii	"<7>usb: set unique host mac\012\000"
	.space	3
.LC875:
	.ascii	"<6>%s: MAC %pM\012\000"
.LC876:
	.ascii	"<6>%s: HOST MAC %pM\012\000"
	.space	3
.LC877:
	.ascii	"usb\000"
.LC878:
	.ascii	"<3>%s: %s: rndis_pdata\012\000"
.LC879:
	.ascii	"<6>%s: %s MAC: %02X:%02X:%02X:%02X:%02X:%02X\012\000"
	.space	2
.LC880:
	.ascii	"<3>%s: %s: gether_setup failed\012\000"
.LC881:
	.ascii	"<3>%s: %s: ecm_pdata\012\000"
	.space	2
.LC882:
	.ascii	"ecm\000"
.LC883:
	.ascii	"<3>%s: %s: ecm_bind_config failed\012\000"
	.space	1
.LC884:
	.ascii	"<3>%s: RNDIS header memory allocation failed.\012\000"
	.space	1
.LC885:
	.ascii	"<7>usb: %s gather_disconnect\012\000"
	.space	2
.LC886:
	.ascii	"<3>activate ncm setting MTU size (%d)\012\000"
	.space	1
.LC887:
	.ascii	"<3>%s: failed to add function\000"
	.space	2
.LC888:
	.ascii	"<3>%s: failed to initialize ecm_ipa\000"
.LC889:
	.ascii	"host\000"
	.space	3
.LC890:
	.ascii	"rndis0\000"
	.space	1
.LC891:
	.ascii	"ecm0\000"
	.space	3
.LC892:
	.ascii	"<3>%s: bam_data_connect failed: err:%d\012\000"
.LC893:
	.ascii	"<6>%s: rndis deactivated\012\000"
	.space	2
.LC894:
	.ascii	"<6>%s: rndis bam connected\012\000"
.LC895:
	.ascii	"<3>%s: %s: Card is NULL\000"
.LC896:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_DROP failed: %d\012\000"
.LC897:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_HW_PARAMS failed: %d\012\000"
	.space	3
.LC898:
	.ascii	"<3>%s: Preparing playback failed: %d\012\000"
	.space	2
.LC899:
	.ascii	"<3>%s: Failed to allocate hw params\000"
.LC900:
	.ascii	"<3>%s: Preparing capture failed: %d\012\000"
	.space	3
.LC901:
	.ascii	"<3>%s: Failed to allocate sw params\000"
.LC902:
	.ascii	"<3>%s: SNDRV_PCM_IOCTL_SW_PARAMS failed: %d\012\000"
	.space	3
.LC903:
	.ascii	"<3>%s: Setting capture params failed: err %d\000"
	.space	3
.LC904:
	.ascii	"<6>%s: Initialized capture params\000"
	.space	2
.LC905:
	.ascii	"<3>%s: Setting playback params failed: err %d\000"
	.space	2
.LC906:
	.ascii	"<3>%s: %s: buffer alloc failed\012\000"
.LC907:
	.ascii	"<3>%s: Failed to init audio streams: err %d\000"
.LC908:
	.ascii	"<3>%s: copying failed\000"
	.space	2
.LC909:
	.ascii	"<3>%s: Capture error: %d\012\000"
	.space	2
.LC910:
	.ascii	"<3>%s: playback_buf is empty\000"
	.space	3
.LC911:
	.ascii	"<3>%s: Buffer is empty, no data to play\000"
.LC912:
	.ascii	"<3>%s: Failed to init audio streams\000"
.LC913:
	.ascii	"<3>%s: SND failure - runtime->frame_bits == 0\000"
	.space	2
.LC914:
	.ascii	"<3>%s: snd_pcm_lib_write failed with err %d\012\000"
	.space	3
.LC915:
	.ascii	"<3>%s: unable to open sound control device file: %s"
	.ascii	"\012\000"
	.space	3
.LC916:
	.ascii	"<3>%s: No such PCM playback device: %s\012\000"
.LC917:
	.ascii	"<3>%s: No such PCM capture device: %s\012\000"
	.space	1
.LC918:
	.ascii	"<3>%s: Failed to open snd devices\012\000"
	.space	1
.LC919:
	.ascii	"<3>%s: Setting playback HW params failed: err %d\000"
	.space	3
.LC920:
	.ascii	"<3>%s: Setting capture HW params failed: err %d\000"
.LC921:
	.ascii	"audio\000"
	.space	2
.LC922:
	.ascii	"<3>%s: %s: Failed to add usb audio function, err = "
	.ascii	"%d\000"
	.space	2
.LC923:
	.ascii	"<3>%s() req->status f %d\012\000"
	.space	2
.LC924:
	.ascii	"super\000"
	.space	2
.LC925:
	.ascii	"<3>conn_gadget_function_bind dev: %pK\012\000"
	.space	1
.LC926:
	.ascii	"<3>usb_ep_autoconfig for ep_in failed\012\000"
	.space	1
.LC927:
	.ascii	"<3>usb_ep_autoconfig for ep_out failed\012\000"
.LC928:
	.ascii	"<3>%s speed %s: IN/%s, OUT/%s\012\000"
	.space	1
.LC929:
	.ascii	"<3>%s() conn_gadget_bind() could not allocate reque"
	.ascii	"sts\012\000"
.LC930:
	.ascii	"<3>%s() failed to queue req %pK (%d)\012\000"
	.space	2
.LC931:
	.ascii	"<3>%s: intf: %d alt: %d\012\000"
	.space	3
.LC932:
	.ascii	"<3>%s() kfifo_reset\012\000"
	.space	3
.LC933:
	.ascii	"<6>conn_gadget_open\012\000"
	.space	3
.LC934:
	.ascii	"<3>%s() handle closing now. open again\012\000"
.LC935:
	.ascii	"<3>%s() conn_gadget_lock(open_excl) f\012\000"
	.space	1
.LC936:
	.ascii	"<3>conn_gadget_function_unbind\012\000"
.LC937:
	.ascii	"<3>%s() conn_gadget_lock(write_excl) f\012\000"
.LC938:
	.ascii	"<3>%s() conn_gadget_write dev->error\012\000"
	.space	2
.LC939:
	.ascii	"<3>%s: copy_from_user failed\012\000"
	.space	2
.LC940:
	.ascii	"<3>%s() xfer error %d\012\000"
	.space	1
.LC941:
	.ascii	"<3>%s: wait_event_interruptible(wrwq,reqget) failed"
	.ascii	" %d\012\000"
.LC942:
	.ascii	"<3>%s() count is too large (%d)\012\000"
	.space	3
.LC943:
	.ascii	"<3>%s() conn_gadget_lock(read_excl) f\012\000"
	.space	1
.LC944:
	.ascii	"<3>%s() waiting for online state\012\000"
	.space	2
.LC945:
	.ascii	"<3>%s() dev->error has value\012\000"
	.space	2
.LC946:
	.ascii	"<3>%s() zero queue\012\000"
.LC947:
	.ascii	"<3>%s() kfifo_to_user f %d\012\000"
.LC948:
	.ascii	"<3>%s() wait_event_interruptible f %d\012\000"
	.space	1
.LC949:
	.ascii	"<3>%s() _conn_gadget_dev is offlined\012\000"
	.space	2
.LC950:
	.ascii	"<3>%s: %s: ncm_pdata\012\000"
	.space	2
.LC951:
	.ascii	"<7>usb: %s MAC:%02X:%02X:%02X:%02X:%02X:%02X\012\000"
	.space	2
.LC952:
	.ascii	"<7>usb: %s before MAC:%02X:%02X:%02X:%02X:%02X:%02X"
	.ascii	"\012\000"
	.space	3
.LC953:
	.ascii	"<7>usb: %s after MAC:%02X:%02X:%02X:%02X:%02X:%02X\012"
	.ascii	"\000"
.LC954:
	.ascii	"<7>usb: %s ncm ready (%s)\012\000"
	.space	1
.LC955:
	.ascii	"<7>usb: %s idProduct=0x%x, DeviceClass=0x%x\012\000"
	.space	3
.LC956:
	.ascii	"<7>usb: %s old status=%d, new status=%d\012\000"
	.space	3
.LC957:
	.ascii	"%x\000"
	.space	1
.LC958:
	.ascii	"<7>usb: %s ver=0x%x vendor_id=0x%x\012\000"
.LC959:
	.ascii	"<7>usb: %s failed usb_ep_queue\012\000"
.LC960:
	.ascii	"USB_CONNECTION=READY\000"
	.space	3
.LC961:
	.ascii	"<6>%s: %s\012\000"
	.space	1
.LC962:
	.ascii	"<6>%s: %s  canceling the work\012\000"
	.space	1
.LC963:
	.ascii	"<3>usb: %s MAC host is always disabled \012\000"
	.space	3
.LC964:
	.ascii	"<6>usb: %s ignore!! usb30en(%d), value(%d)\012\000"
.LC965:
	.ascii	"<7>usb: %s B4 disconectng gadget\012\000"
	.space	2
.LC966:
	.ascii	"<7>usb: %s after usb_gadget_connect\012\000"
	.space	3
.LC967:
	.ascii	"<3>usb: %s Failed to set the usb30_en value\012\000"
	.space	3
.LC968:
	.ascii	"enabled\000"
.LC969:
	.ascii	"disabled\000"
	.space	3
.LC970:
	.ascii	"<6>usb: enabled: %d, dev->enabled: %d\012\000"
	.space	1
.LC971:
	.ascii	"SAMSUNG_Android\000"
.LC972:
	.ascii	"<7>usb: %s f_holder->f:%s\012\000"
	.space	1
.LC973:
	.ascii	"acm\000"
.LC974:
	.ascii	"<7>usb: acm is enabled. (bcdDevice=0x400)\012\000"
	.space	1
.LC975:
	.ascii	"<7>usb: conn_gadget + kies (bcdDevice=0xC00)\012\000"
	.space	2
.LC976:
	.ascii	"<7>usb: conn_gadget only (bcdDevice=0x800)\012\000"
.LC977:
	.ascii	"<7>usb: %s vendor=%x,product=%x,bcdDevice=%x\000"
	.space	3
.LC978:
	.ascii	"<7>,Class=%x,SubClass=%x,Protocol=%x\012\000"
	.space	2
.LC979:
	.ascii	"<7>usb: %s next cmd : usb_add_config\012\000"
	.space	2
.LC980:
	.ascii	"/root/lol//drivers/usb/gadget/android.c\000"
.LC981:
	.ascii	"<3>%s: %s: usb_add_config failed : err: %d\012\000"
.LC982:
	.ascii	"<3>%s: %s: android_enable failed\012\000"
	.space	2
.LC983:
	.ascii	"<3>%s: android_usb: already %s\012\000"
.LC984:
	.ascii	"<6>adb_open\012\000"
	.space	3
.LC985:
	.ascii	"<6>read descriptors\012\000"
	.space	3
.LC986:
	.ascii	"<6>read strings\012\000"
	.space	3
.LC987:
	.ascii	"&epfile->mutex\000"
	.space	1
.LC988:
	.ascii	"&epfile->wait\000"
	.space	2
.LC989:
	.ascii	"ep%u\000"
	.space	3
.LC990:
	.ascii	"remote_wakeup\000"
	.space	2
.LC991:
	.ascii	"state\000"
	.space	2
.LC992:
	.ascii	"pm_qos\000"
	.space	1
.LC993:
	.ascii	"enable\000"
	.space	1
.LC994:
	.ascii	"functions\000"
	.space	2
.LC995:
	.ascii	"macos\000"
	.space	2
.LC996:
	.ascii	"ss_host_available\000"
	.space	2
.LC997:
	.ascii	"usb30en\000"
.LC998:
	.ascii	"bcdUSB\000"
	.space	1
.LC999:
	.ascii	"iSerial\000"
.LC1000:
	.ascii	"iProduct\000"
	.space	3
.LC1001:
	.ascii	"iManufacturer\000"
	.space	2
.LC1002:
	.ascii	"bDeviceProtocol\000"
.LC1003:
	.ascii	"bDeviceSubClass\000"
.LC1004:
	.ascii	"bDeviceClass\000"
	.space	3
.LC1005:
	.ascii	"bcdDevice\000"
	.space	2
.LC1006:
	.ascii	"idProduct\000"
	.space	2
.LC1007:
	.ascii	"idVendor\000"
	.space	3
.LC1008:
	.ascii	"uasp\000"
	.space	3
.LC1009:
	.ascii	"pcm\000"
.LC1010:
	.ascii	"mass_storage\000"
	.space	3
.LC1011:
	.ascii	"sua_version_info\000"
	.space	3
.LC1012:
	.ascii	"product_string\000"
	.space	1
.LC1013:
	.ascii	"vendor_string\000"
	.space	2
.LC1014:
	.ascii	"inquiry_string\000"
	.space	1
.LC1015:
	.ascii	"rndis_qc\000"
	.space	3
.LC1016:
	.ascii	"max_pkt_per_xfer\000"
	.space	3
.LC1017:
	.ascii	"vendorID\000"
	.space	3
.LC1018:
	.ascii	"ethaddr\000"
.LC1019:
	.ascii	"wceis\000"
	.space	2
.LC1020:
	.ascii	"manufacturer\000"
	.space	3
.LC1021:
	.ascii	"ptp\000"
.LC1022:
	.ascii	"diag\000"
	.space	3
.LC1023:
	.ascii	"clients\000"
.LC1024:
	.ascii	"mbim_transports\000"
.LC1025:
	.ascii	"ecm_qc\000"
	.space	1
.LC1026:
	.ascii	"ecm_transports\000"
	.space	1
.LC1027:
	.ascii	"ecm_ethaddr\000"
.LC1028:
	.ascii	"transport_names\000"
.LC1029:
	.ascii	"transports\000"
	.space	1
.LC1030:
	.ascii	"rmnet_smd\000"
	.space	2
.LC1031:
	.ascii	"instances\000"
	.space	2
.LC1032:
	.ascii	"midi\000"
	.space	3
.LC1033:
	.ascii	"alsa\000"
	.space	3
.LC1034:
	.ascii	"aliases\000"
.LC1035:
	.ascii	"terminal_version\000"
	.space	3
.LC1036:
	.ascii	"CDC Network Control Model (NCM)\000"
.LC1037:
	.ascii	"CDC Network Data\000"
	.space	3
.LC1038:
	.ascii	"CDC NCM\000"
.LC1039:
	.ascii	"in_max_packet_size\000"
	.space	1
.LC1040:
	.ascii	"out_max_packet_size\000"
.LC1041:
	.ascii	"usb_buffer_size\000"
.LC1042:
	.ascii	"version\000"
.LC1043:
	.ascii	"1.0\000"
.LC1044:
	.ascii	"Microphone Iso-IN Endpoint Control\000"
	.space	1
.LC1045:
	.ascii	"Microphone Sampling Frequency Control\000"
	.space	2
.LC1046:
	.ascii	"Speaker Iso-out Endpoint Control\000"
	.space	3
.LC1047:
	.ascii	"Speaker Sampling Frequency Control\000"
	.space	1
.LC1048:
	.ascii	"Microphone Feature Unit Controls\000"
	.space	3
.LC1049:
	.ascii	"Microphone Volume Control\000"
	.space	2
.LC1050:
	.ascii	"Microphone Mute Control\000"
.LC1051:
	.ascii	"Speaker Function Unit Controls\000"
	.space	1
.LC1052:
	.ascii	"Speaker Volume Control\000"
	.space	1
.LC1053:
	.ascii	"Speaker Mute Control\000"
	.space	3
.LC1054:
	.ascii	"/dev/snd/controlC0\000"
	.space	1
.LC1055:
	.ascii	"/dev/snd/pcmC0D6c\000"
	.space	2
.LC1056:
	.ascii	"/dev/snd/pcmC0D5p\000"
	.space	2
.LC1057:
	.ascii	"gadget\000"
	.space	1
.LC1058:
	.ascii	"android_rndis_qc\000"
	.space	3
.LC1059:
	.ascii	"RNDIS Communications Control\000"
	.space	3
.LC1060:
	.ascii	"RNDIS Ethernet Data\000"
.LC1061:
	.ascii	"RNDIS\000"
	.space	2
.LC1062:
	.ascii	"CDC Ethernet Control Model (ECM)\000"
	.space	3
.LC1063:
	.ascii	"CDC Ethernet Data\000"
	.space	2
.LC1064:
	.ascii	"CDC ECM\000"
.LC1065:
	.ascii	"android_mbim\000"
	.space	3
.LC1066:
	.ascii	"MBIM Control\000"
	.space	3
.LC1067:
	.ascii	"MBIM Data\000"
	.space	2
.LC1068:
	.ascii	"USB accessory\000"
	.space	2
.LC1069:
	.ascii	"usb_accessory\000"
	.space	2
.LC1070:
	.ascii	"Android Accessory Interface\000"
.LC1071:
	.ascii	"MTP\000"
.LC1072:
	.ascii	"MIDI function\000"
	.space	2
.LC1073:
	.ascii	"ccid_ctrl\000"
	.space	2
.LC1074:
	.ascii	"ccid_bulk\000"
	.space	2
.LC1075:
	.ascii	"CDC Abstract Control Model (ACM)\000"
	.space	3
.LC1076:
	.ascii	"CDC ACM Data\000"
	.space	3
.LC1077:
	.ascii	"CDC Serial\000"
	.space	1
.LC1078:
	.ascii	"dun\000"
.LC1079:
	.ascii	"SMUX_DUN_DATA_HSUART\000"
	.space	3
.LC1080:
	.ascii	"SMUX_RMNET_DATA_HSUART\000"
	.space	1
.LC1081:
	.ascii	"rmnet_ctrl\000"
	.space	1
.LC1082:
	.ascii	"DATA40_CNTL\000"
.LC1083:
	.ascii	"DATA39_CNTL\000"
.LC1084:
	.ascii	"DATA38_CNTL\000"
.LC1085:
	.ascii	"DS\000"
	.space	1
.LC1086:
	.ascii	"UNUSED\000"
	.space	1
.LC1087:
	.ascii	"SDIO_DUN\000"
	.space	3
.LC1088:
	.ascii	"SDIO_NMEA\000"
	.space	2
.LC1089:
	.ascii	"cdrom\000"
	.space	2
.LC1090:
	.ascii	"file\000"
	.space	3
.LC1091:
	.ascii	"nofua\000"
	.space	2
.LC1092:
	.ascii	"ro\000"
	.space	1
.LC1093:
	.ascii	"functionfs\000"
	.space	1
.LC1094:
	.ascii	"RmNet\000"
	.space	2
.LC1095:
	.ascii	"rmnet_mux_ctrl\000"
	.space	1
.LC1096:
	.ascii	"transport\000"
	.space	2
.LC1097:
	.ascii	"QMI RmNet\000"
	.space	2
.LC1098:
	.ascii	"QDSS DATA\000"
	.space	2
.LC1099:
	.ascii	"QDSS CTRL\000"
	.space	2
.LC1100:
	.ascii	"suspended\000"
	.section	__param,"aw",%progbits
	.align	2
	.type	__param_audio_capture_buf_size, %object
	.size	__param_audio_capture_buf_size, 16
__param_audio_capture_buf_size:
	.word	__param_str_audio_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_capture_buf_size
	.type	__param_req_capture_count, %object
	.size	__param_req_capture_count, 16
__param_req_capture_count:
	.word	__param_str_req_capture_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_count
	.type	__param_req_capture_buf_size, %object
	.size	__param_req_capture_buf_size, 16
__param_req_capture_buf_size:
	.word	__param_str_req_capture_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_capture_buf_size
	.type	__param_audio_playback_buf_size, %object
	.size	__param_audio_playback_buf_size, 16
__param_audio_playback_buf_size:
	.word	__param_str_audio_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	audio_playback_buf_size
	.type	__param_req_playback_count, %object
	.size	__param_req_playback_count, 16
__param_req_playback_count:
	.word	__param_str_req_playback_count
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_count
	.type	__param_req_playback_buf_size, %object
	.size	__param_req_playback_buf_size, 16
__param_req_playback_buf_size:
	.word	__param_str_req_playback_buf_size
	.word	param_ops_int
	.short	292
	.short	-1
	.word	req_playback_buf_size
	.type	__param_fn_cntl, %object
	.size	__param_fn_cntl, 16
__param_fn_cntl:
	.word	__param_str_fn_cntl
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cntl
	.type	__param_fn_cap, %object
	.size	__param_fn_cap, 16
__param_fn_cap:
	.word	__param_str_fn_cap
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_cap
	.type	__param_fn_play, %object
	.size	__param_fn_play, 16
__param_fn_play:
	.word	__param_str_fn_play
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	fn_play
	.type	__param_qc_host_addr, %object
	.size	__param_qc_host_addr, 16
__param_qc_host_addr:
	.word	__param_str_qc_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_host_addr
	.type	__param_qc_dev_addr, %object
	.size	__param_qc_dev_addr, 16
__param_qc_dev_addr:
	.word	__param_str_qc_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	qc_dev_addr
	.type	__param_host_addr, %object
	.size	__param_host_addr, 16
__param_host_addr:
	.word	__param_str_host_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	host_addr
	.type	__param_dev_addr, %object
	.size	__param_dev_addr, 16
__param_dev_addr:
	.word	__param_str_dev_addr
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	dev_addr
	.type	__param_qmult, %object
	.size	__param_qmult, 16
__param_qmult:
	.word	__param_str_qmult
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	qmult
	.type	__param_rndis_ul_max_xfer_size_rcvd, %object
	.size	__param_rndis_ul_max_xfer_size_rcvd, 16
__param_rndis_ul_max_xfer_size_rcvd:
	.word	__param_str_rndis_ul_max_xfer_size_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_xfer_size_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	__param_rndis_ul_max_pkt_per_xfer_rcvd, 16
__param_rndis_ul_max_pkt_per_xfer_rcvd:
	.word	__param_str_rndis_ul_max_pkt_per_xfer_rcvd
	.word	param_ops_int
	.short	292
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer_rcvd
	.type	__param_rndis_ul_max_pkt_per_xfer, %object
	.size	__param_rndis_ul_max_pkt_per_xfer, 16
__param_rndis_ul_max_pkt_per_xfer:
	.word	__param_str_rndis_ul_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_ul_max_pkt_per_xfer
	.type	__param_rndis_dl_max_pkt_per_xfer, %object
	.size	__param_rndis_dl_max_pkt_per_xfer, 16
__param_rndis_dl_max_pkt_per_xfer:
	.word	__param_str_rndis_dl_max_pkt_per_xfer
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	rndis_dl_max_pkt_per_xfer
	.type	__param_mtp_tx_reqs, %object
	.size	__param_mtp_tx_reqs, 16
__param_mtp_tx_reqs:
	.word	__param_str_mtp_tx_reqs
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_reqs
	.type	__param_mtp_tx_req_len, %object
	.size	__param_mtp_tx_req_len, 16
__param_mtp_tx_req_len:
	.word	__param_str_mtp_tx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_tx_req_len
	.type	__param_mtp_rx_req_len, %object
	.size	__param_mtp_rx_req_len, 16
__param_mtp_rx_req_len:
	.word	__param_str_mtp_rx_req_len
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mtp_rx_req_len
	.type	__param_ghsuart_data_tx_intr_thld, %object
	.size	__param_ghsuart_data_tx_intr_thld, 16
__param_ghsuart_data_tx_intr_thld:
	.word	__param_str_ghsuart_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_tx_intr_thld
	.type	__param_ghsuart_data_rx_req_size, %object
	.size	__param_ghsuart_data_rx_req_size, 16
__param_ghsuart_data_rx_req_size:
	.word	__param_str_ghsuart_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rx_req_size
	.type	__param_ghsuart_data_serial_rx_q_size, %object
	.size	__param_ghsuart_data_serial_rx_q_size, 16
__param_ghsuart_data_serial_rx_q_size:
	.word	__param_str_ghsuart_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_rx_q_size
	.type	__param_ghsuart_data_serial_tx_q_size, %object
	.size	__param_ghsuart_data_serial_tx_q_size, 16
__param_ghsuart_data_serial_tx_q_size:
	.word	__param_str_ghsuart_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_serial_tx_q_size
	.type	__param_ghsuart_data_rmnet_rx_q_size, %object
	.size	__param_ghsuart_data_rmnet_rx_q_size, 16
__param_ghsuart_data_rmnet_rx_q_size:
	.word	__param_str_ghsuart_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_rx_q_size
	.type	__param_ghsuart_data_rmnet_tx_q_size, %object
	.size	__param_ghsuart_data_rmnet_tx_q_size, 16
__param_ghsuart_data_rmnet_tx_q_size:
	.word	__param_str_ghsuart_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsuart_data_rmnet_tx_q_size
	.type	__param_record_timestamp, %object
	.size	__param_record_timestamp, 16
__param_record_timestamp:
	.word	__param_str_record_timestamp
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	record_timestamp
	.type	__param_ghsic_data_pend_limit_with_bridge, %object
	.size	__param_ghsic_data_pend_limit_with_bridge, 16
__param_ghsic_data_pend_limit_with_bridge:
	.word	__param_str_ghsic_data_pend_limit_with_bridge
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_pend_limit_with_bridge
	.type	__param_ghsic_data_fctrl_dis_thld, %object
	.size	__param_ghsic_data_fctrl_dis_thld, 16
__param_ghsic_data_fctrl_dis_thld:
	.word	__param_str_ghsic_data_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_dis_thld
	.type	__param_ghsic_data_fctrl_en_thld, %object
	.size	__param_ghsic_data_fctrl_en_thld, 16
__param_ghsic_data_fctrl_en_thld:
	.word	__param_str_ghsic_data_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_en_thld
	.type	__param_ghsic_data_fctrl_support, %object
	.size	__param_ghsic_data_fctrl_support, 16
__param_ghsic_data_fctrl_support:
	.word	__param_str_ghsic_data_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_fctrl_support
	.type	__param_ghsic_data_tx_intr_thld, %object
	.size	__param_ghsic_data_tx_intr_thld, 16
__param_ghsic_data_tx_intr_thld:
	.word	__param_str_ghsic_data_tx_intr_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_tx_intr_thld
	.type	__param_ghsic_data_rx_req_size, %object
	.size	__param_ghsic_data_rx_req_size, 16
__param_ghsic_data_rx_req_size:
	.word	__param_str_ghsic_data_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rx_req_size
	.type	__param_ghsic_data_serial_rx_q_size, %object
	.size	__param_ghsic_data_serial_rx_q_size, 16
__param_ghsic_data_serial_rx_q_size:
	.word	__param_str_ghsic_data_serial_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_rx_q_size
	.type	__param_ghsic_data_serial_tx_q_size, %object
	.size	__param_ghsic_data_serial_tx_q_size, 16
__param_ghsic_data_serial_tx_q_size:
	.word	__param_str_ghsic_data_serial_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_serial_tx_q_size
	.type	__param_ghsic_data_rmnet_rx_q_size, %object
	.size	__param_ghsic_data_rmnet_rx_q_size, 16
__param_ghsic_data_rmnet_rx_q_size:
	.word	__param_str_ghsic_data_rmnet_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_rx_q_size
	.type	__param_ghsic_data_rmnet_tx_q_size, %object
	.size	__param_ghsic_data_rmnet_tx_q_size, 16
__param_ghsic_data_rmnet_tx_q_size:
	.word	__param_str_ghsic_data_rmnet_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	ghsic_data_rmnet_tx_q_size
	.type	__param_dl_intr_threshold, %object
	.size	__param_dl_intr_threshold, 16
__param_dl_intr_threshold:
	.word	__param_str_dl_intr_threshold
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	dl_intr_threshold
	.type	__param_bam_mux_rx_req_size, %object
	.size	__param_bam_mux_rx_req_size, 16
__param_bam_mux_rx_req_size:
	.word	__param_str_bam_mux_rx_req_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_req_size
	.type	__param_bam_mux_rx_q_size, %object
	.size	__param_bam_mux_rx_q_size, 16
__param_bam_mux_rx_q_size:
	.word	__param_str_bam_mux_rx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_q_size
	.type	__param_bam_mux_tx_q_size, %object
	.size	__param_bam_mux_tx_q_size, 16
__param_bam_mux_tx_q_size:
	.word	__param_str_bam_mux_tx_q_size
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_q_size
	.type	__param_bam_mux_rx_fctrl_dis_thld, %object
	.size	__param_bam_mux_rx_fctrl_dis_thld, 16
__param_bam_mux_rx_fctrl_dis_thld:
	.word	__param_str_bam_mux_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_dis_thld
	.type	__param_bam_mux_rx_fctrl_support, %object
	.size	__param_bam_mux_rx_fctrl_support, 16
__param_bam_mux_rx_fctrl_support:
	.word	__param_str_bam_mux_rx_fctrl_support
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_support
	.type	__param_bam_mux_rx_fctrl_en_thld, %object
	.size	__param_bam_mux_rx_fctrl_en_thld, 16
__param_bam_mux_rx_fctrl_en_thld:
	.word	__param_str_bam_mux_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_rx_fctrl_en_thld
	.type	__param_bam_mux_tx_pkt_drop_thld, %object
	.size	__param_bam_mux_tx_pkt_drop_thld, 16
__param_bam_mux_tx_pkt_drop_thld:
	.word	__param_str_bam_mux_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_mux_tx_pkt_drop_thld
	.type	__param_bam_pending_limit, %object
	.size	__param_bam_pending_limit, 16
__param_bam_pending_limit:
	.word	__param_str_bam_pending_limit
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	bam_pending_limit
	.type	__param_mux_sdio_rx_fctrl_dis_thld, %object
	.size	__param_mux_sdio_rx_fctrl_dis_thld, 16
__param_mux_sdio_rx_fctrl_dis_thld:
	.word	__param_str_mux_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_dis_thld
	.type	__param_mux_sdio_rx_fctrl_en_thld, %object
	.size	__param_mux_sdio_rx_fctrl_en_thld, 16
__param_mux_sdio_rx_fctrl_en_thld:
	.word	__param_str_mux_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_rx_fctrl_en_thld
	.type	__param_mux_sdio_tx_pkt_drop_thld, %object
	.size	__param_mux_sdio_tx_pkt_drop_thld, 16
__param_mux_sdio_tx_pkt_drop_thld:
	.word	__param_str_mux_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	mux_sdio_tx_pkt_drop_thld
	.type	__param_rmnet_mux_smd_data_ch, %object
	.size	__param_rmnet_mux_smd_data_ch, 16
__param_rmnet_mux_smd_data_ch:
	.word	__param_str_rmnet_mux_smd_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_mux_smd_data_ch
	.type	__param_rmnet_mux_sdio_data_ch, %object
	.size	__param_rmnet_mux_sdio_data_ch, 16
__param_rmnet_mux_sdio_data_ch:
	.word	__param_str_rmnet_mux_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_data_ch
	.type	__param_rmnet_mux_sdio_ctl_ch, %object
	.size	__param_rmnet_mux_sdio_ctl_ch, 16
__param_rmnet_mux_sdio_ctl_ch:
	.word	__param_str_rmnet_mux_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_mux_sdio_ctl_ch
	.type	__param_sdio_rx_fctrl_dis_thld, %object
	.size	__param_sdio_rx_fctrl_dis_thld, 16
__param_sdio_rx_fctrl_dis_thld:
	.word	__param_str_sdio_rx_fctrl_dis_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_dis_thld
	.type	__param_sdio_rx_fctrl_en_thld, %object
	.size	__param_sdio_rx_fctrl_en_thld, 16
__param_sdio_rx_fctrl_en_thld:
	.word	__param_str_sdio_rx_fctrl_en_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_rx_fctrl_en_thld
	.type	__param_sdio_tx_pkt_drop_thld, %object
	.size	__param_sdio_tx_pkt_drop_thld, 16
__param_sdio_tx_pkt_drop_thld:
	.word	__param_str_sdio_tx_pkt_drop_thld
	.word	param_ops_uint
	.short	420
	.short	-1
	.word	sdio_tx_pkt_drop_thld
	.type	__param_rmnet_sdio_data_ch, %object
	.size	__param_rmnet_sdio_data_ch, 16
__param_rmnet_sdio_data_ch:
	.word	__param_str_rmnet_sdio_data_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_data_ch
	.type	__param_rmnet_sdio_ctl_ch, %object
	.size	__param_rmnet_sdio_ctl_ch, 16
__param_rmnet_sdio_ctl_ch:
	.word	__param_str_rmnet_sdio_ctl_ch
	.word	param_ops_uint
	.short	292
	.short	-1
	.word	rmnet_sdio_ctl_ch
	.type	__param_rmnet_data_ch, %object
	.size	__param_rmnet_data_ch, 16
__param_rmnet_data_ch:
	.word	__param_str_rmnet_data_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_data_ch
	.type	__param_rmnet_ctl_ch, %object
	.size	__param_rmnet_ctl_ch, 16
__param_rmnet_ctl_ch:
	.word	__param_str_rmnet_ctl_ch
	.word	param_ops_charp
	.short	292
	.short	-1
	.word	rmnet_ctl_ch
	.type	__param_iSerialNumber, %object
	.size	__param_iSerialNumber, 16
__param_iSerialNumber:
	.word	__param_str_iSerialNumber
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iSerialNumber
	.type	__param_iProduct, %object
	.size	__param_iProduct, 16
__param_iProduct:
	.word	__param_str_iProduct
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iProduct
	.type	__param_iManufacturer, %object
	.size	__param_iManufacturer, 16
__param_iManufacturer:
	.word	__param_str_iManufacturer
	.word	param_ops_charp
	.short	0
	.short	-1
	.word	iManufacturer
	.type	__param_bcdDevice, %object
	.size	__param_bcdDevice, 16
__param_bcdDevice:
	.word	__param_str_bcdDevice
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	bcdDevice
	.type	__param_idProduct, %object
	.size	__param_idProduct, 16
__param_idProduct:
	.word	__param_str_idProduct
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idProduct
	.type	__param_idVendor, %object
	.size	__param_idVendor, 16
__param_idVendor:
	.word	__param_str_idVendor
	.word	param_ops_ushort
	.short	0
	.short	-1
	.word	idVendor
	.bss
	.align	2
.LANCHOR1 = . + 0
.LANCHOR4 = . + 8184
	.type	read_state, %object
	.size	read_state, 4
read_state:
	.space	4
	.type	modem_wait_q, %object
	.size	modem_wait_q, 12
modem_wait_q:
	.space	12
	.type	android_dev_list, %object
	.size	android_dev_list, 8
android_dev_list:
	.space	8
	.type	composite, %object
	.size	composite, 4
composite:
	.space	4
	.type	serial_string, %object
	.size	serial_string, 256
serial_string:
	.space	256
	.type	n_sdio_ports, %object
	.size	n_sdio_ports, 4
n_sdio_ports:
	.space	4
	.type	sdio_ports, %object
	.size	sdio_ports, 208
sdio_ports:
	.space	208
	.type	n_smd_ports, %object
	.size	n_smd_ports, 4
n_smd_ports:
	.space	4
	.type	smd_ports, %object
	.size	smd_ports, 208
smd_ports:
	.space	208
	.type	ctrl_smd_ports, %object
	.size	ctrl_smd_ports, 504
ctrl_smd_ports:
	.space	504
	.type	no_ctrl_ports, %object
	.size	no_ctrl_ports, 4
no_ctrl_ports:
	.space	4
	.type	gctrl_ports, %object
	.size	gctrl_ports, 416
gctrl_ports:
	.space	416
	.type	no_data_ports, %object
	.size	no_data_ports, 4
no_data_ports:
	.space	4
	.type	gdata_ports, %object
	.size	gdata_ports, 416
gdata_ports:
	.space	416
	.type	num_ctrl_ports, %object
	.size	num_ctrl_ports, 4
num_ctrl_ports:
	.space	4
	.type	ghsuart_ctrl_ports, %object
	.size	ghsuart_ctrl_ports, 168
ghsuart_ctrl_ports:
	.space	168
	.type	num_data_ports, %object
	.size	num_data_ports, 4
num_data_ports:
	.space	4
	.type	ghsuart_data_ports, %object
	.size	ghsuart_data_ports, 168
ghsuart_data_ports:
	.space	168
	.type	_ccid_dev, %object
	.size	_ccid_dev, 4
_ccid_dev:
	.space	4
	.type	n_bam_ports, %object
	.size	n_bam_ports, 4
n_bam_ports:
	.space	4
	.type	bam_ports, %object
	.size	bam_ports, 84
bam_ports:
	.space	84
	.type	rmux_dev, %object
	.size	rmux_dev, 4
rmux_dev:
	.space	4
	.type	_conn_gadget_dev, %object
	.size	_conn_gadget_dev, 4
_conn_gadget_dev:
	.space	4
	.type	_acc_dev, %object
	.size	_acc_dev, 4
_acc_dev:
	.space	4
	.type	rndis_lock, %object
	.size	rndis_lock, 4
rndis_lock:
	.space	4
	.type	_mtp_dev, %object
	.size	_mtp_dev, 4
_mtp_dev:
	.space	4
	.type	rmnet_ports, %object
	.size	rmnet_ports, 72
rmnet_ports:
	.space	72
	.type	_mbim_dev, %object
	.size	_mbim_dev, 4
_mbim_dev:
	.space	4
	.type	rmnet_smd, %object
	.size	rmnet_smd, 4
rmnet_smd:
	.space	4
	.type	gserial_wq, %object
	.size	gserial_wq, 4
gserial_wq:
	.space	4
	.type	gsdio_wq, %object
	.size	gsdio_wq, 4
gsdio_wq:
	.space	4
	.type	debug_buffer, %object
	.size	debug_buffer, 4096
debug_buffer:
	.space	4096
	.type	uether_wq, %object
	.size	uether_wq, 4
uether_wq:
	.space	4
	.type	d_lock, %object
	.size	d_lock, 4
d_lock:
	.space	4
	.type	ghsuart_ctrl_dent, %object
	.size	ghsuart_ctrl_dent, 4
ghsuart_ctrl_dent:
	.space	4
	.type	ghsuart_data_dent, %object
	.size	ghsuart_data_dent, 4
ghsuart_data_dent:
	.space	4
	.type	ch_lock, %object
	.size	ch_lock, 4
ch_lock:
	.space	4
	.type	_adb_dev, %object
	.size	_adb_dev, 4
_adb_dev:
	.space	4
	.type	grmnet_ctrl_wq, %object
	.size	grmnet_ctrl_wq, 4
grmnet_ctrl_wq:
	.space	4
	.type	gdata_dent, %object
	.size	gdata_dent, 4
gdata_dent:
	.space	4
	.type	gdata_dfile_stats, %object
	.size	gdata_dfile_stats, 4
gdata_dfile_stats:
	.space	4
	.type	gdata_dfile_tstamp, %object
	.size	gdata_dfile_tstamp, 4
gdata_dfile_tstamp:
	.space	4
	.type	diag_dev_list, %object
	.size	diag_dev_list, 8
diag_dev_list:
	.space	8
	.type	n_tx_req_queued, %object
	.size	n_tx_req_queued, 4
n_tx_req_queued:
	.space	4
	.type	gbam_wq, %object
	.size	gbam_wq, 4
gbam_wq:
	.space	4
	.type	retry_cnt.38316, %object
	.size	retry_cnt.38316, 4
retry_cnt.38316:
	.space	4
	.type	control_line_state, %object
	.size	control_line_state, 4
control_line_state:
	.space	4
	.type	ecm_transports, %object
	.size	ecm_transports, 50
ecm_transports:
	.space	50
	.space	2
	.type	diag_clients, %object
	.size	diag_clients, 32
diag_clients:
	.space	32
	.type	rmnet_xport_names, %object
	.size	rmnet_xport_names, 50
rmnet_xport_names:
	.space	50
	.space	2
	.type	rmnet_transports, %object
	.size	rmnet_transports, 50
rmnet_transports:
	.space	50
	.space	2
	.type	mbim_transports, %object
	.size	mbim_transports, 50
mbim_transports:
	.space	50
	.space	2
	.type	gsmd_wq, %object
	.size	gsmd_wq, 4
gsmd_wq:
	.space	4
	.type	product_string, %object
	.size	product_string, 256
product_string:
	.space	256
	.type	manufacturer_string, %object
	.size	manufacturer_string, 256
manufacturer_string:
	.space	256
	.type	__key.50726, %object
	.size	__key.50726, 0
__key.50726:
	.type	ctrl_port, %object
	.size	ctrl_port, 4
ctrl_port:
	.space	4
	.type	__key.55534, %object
	.size	__key.55534, 0
__key.55534:
	.type	__key.55535, %object
	.size	__key.55535, 0
__key.55535:
	.type	__key.55003, %object
	.size	__key.55003, 0
__key.55003:
	.type	__key.55004, %object
	.size	__key.55004, 0
__key.55004:
	.type	__key.55005, %object
	.size	__key.55005, 0
__key.55005:
	.type	__key.53661, %object
	.size	__key.53661, 0
__key.53661:
	.type	__key.53662, %object
	.size	__key.53662, 0
__key.53662:
	.type	__key.38411, %object
	.size	__key.38411, 0
__key.38411:
	.type	__key.38537, %object
	.size	__key.38537, 0
__key.38537:
	.type	_ncm_dev, %object
	.size	_ncm_dev, 4
_ncm_dev:
	.space	4
	.type	nr_mbim_ports, %object
	.size	nr_mbim_ports, 4
nr_mbim_ports:
	.space	4
	.type	mbim_ports, %object
	.size	mbim_ports, 8
mbim_ports:
	.space	8
	.type	__key.62587, %object
	.size	__key.62587, 0
__key.62587:
	.type	__key.62588, %object
	.size	__key.62588, 0
__key.62588:
	.type	__key.62589, %object
	.size	__key.62589, 0
__key.62589:
	.type	ncm_connect, %object
	.size	ncm_connect, 1
ncm_connect:
	.space	1
	.space	3
	.type	next_state.63147, %object
	.size	next_state.63147, 4
next_state.63147:
	.space	4
	.type	last_uevent.63146, %object
	.size	last_uevent.63146, 4
last_uevent.63146:
	.space	4
	.type	__key.46343, %object
	.size	__key.46343, 0
__key.46343:
	.type	epnum, %object
	.size	epnum, 4
epnum:
	.space	4
	.type	android_dev_count, %object
	.size	android_dev_count, 4
android_dev_count:
	.space	4
	.type	record_timestamp, %object
	.size	record_timestamp, 4
record_timestamp:
	.space	4
	.type	dbg_data, %object
	.size	dbg_data, 4104
dbg_data:
	.space	4104
	.type	__key.57216, %object
	.size	__key.57216, 0
__key.57216:
	.type	__key.57217, %object
	.size	__key.57217, 0
__key.57217:
	.type	rndis_per_dev_params, %object
	.size	rndis_per_dev_params, 60
rndis_per_dev_params:
	.space	60
	.type	__key.54020, %object
	.size	__key.54020, 0
__key.54020:
	.type	__key.53963, %object
	.size	__key.53963, 0
__key.53963:
	.type	__key.53964, %object
	.size	__key.53964, 0
__key.53964:
	.type	retry_cnt.37560, %object
	.size	retry_cnt.37560, 4
retry_cnt.37560:
	.space	4
	.type	rmnet_mux_smd_data_ch, %object
	.size	rmnet_mux_smd_data_ch, 4
rmnet_mux_smd_data_ch:
	.space	4
	.type	write_error_after_csw_sent, %object
	.size	write_error_after_csw_sent, 4
write_error_after_csw_sent:
	.space	4
	.type	csw_hack_sent, %object
	.size	csw_hack_sent, 4
csw_hack_sent:
	.space	4
	.type	android_class, %object
	.size	android_class, 4
android_class:
	.space	4
	.type	__key.46992, %object
	.size	__key.46992, 0
__key.46992:
	.type	__key.8203, %object
	.size	__key.8203, 0
__key.8203:
	.type	__key.47001, %object
	.size	__key.47001, 0
__key.47001:
	.type	composite_manufacturer, %object
	.size	composite_manufacturer, 50
composite_manufacturer:
	.space	50
	.space	2
	.type	iManufacturer, %object
	.size	iManufacturer, 4
iManufacturer:
	.space	4
	.type	iProduct, %object
	.size	iProduct, 4
iProduct:
	.space	4
	.type	iSerialNumber, %object
	.size	iSerialNumber, 4
iSerialNumber:
	.space	4
	.type	__key.45454, %object
	.size	__key.45454, 0
__key.45454:
	.type	__key.45456, %object
	.size	__key.45456, 0
__key.45456:
	.type	composite_gadget_bind, %object
	.size	composite_gadget_bind, 4
composite_gadget_bind:
	.space	4
	.type	idVendor, %object
	.size	idVendor, 2
idVendor:
	.space	2
	.type	idProduct, %object
	.size	idProduct, 2
idProduct:
	.space	2
	.type	bcdDevice, %object
	.size	bcdDevice, 2
bcdDevice:
	.space	2
	.space	2
	.type	composite_string_index, %object
	.size	composite_string_index, 4
composite_string_index:
	.space	4
	.type	__key.64547, %object
	.size	__key.64547, 0
__key.64547:
	.type	__key.64552, %object
	.size	__key.64552, 0
__key.64552:
	.type	__key.53269, %object
	.size	__key.53269, 0
__key.53269:
	.type	new_product_name.46620, %object
	.size	new_product_name.46620, 17
new_product_name.46620:
	.space	17
	.space	3
	.type	unknown.46810, %object
	.size	unknown.46810, 16
unknown.46810:
	.space	16
	.type	bam_info, %object
	.size	bam_info, 16
bam_info:
	.space	16
	.type	__key.32059, %object
	.size	__key.32059, 0
__key.32059:
	.type	__key.32060, %object
	.size	__key.32060, 0
__key.32060:
	.type	prev_len.47995, %object
	.size	prev_len.47995, 4
prev_len.47995:
	.space	4
	.type	ports, %object
	.size	ports, 192
ports:
	.space	192
	.type	gs_tty_driver, %object
	.size	gs_tty_driver, 4
gs_tty_driver:
	.space	4
	.type	__key.48277, %object
	.size	__key.48277, 0
__key.48277:
	.type	__key.48223, %object
	.size	__key.48223, 0
__key.48223:
	.type	__key.48224, %object
	.size	__key.48224, 0
__key.48224:
	.type	n_ports, %object
	.size	n_ports, 4
n_ports:
	.space	4
	.type	__key.49183, %object
	.size	__key.49183, 0
__key.49183:
	.type	__key.49519, %object
	.size	__key.49519, 0
__key.49519:
	.type	n_bam2bam_ports, %object
	.size	n_bam2bam_ports, 4
n_bam2bam_ports:
	.space	4
	.type	nr_rmnet_ports, %object
	.size	nr_rmnet_ports, 4
nr_rmnet_ports:
	.space	4
	.type	no_ctrl_smd_ports, %object
	.size	no_ctrl_smd_ports, 4
no_ctrl_smd_ports:
	.space	4
	.type	no_ctrl_qti_ports, %object
	.size	no_ctrl_qti_ports, 4
no_ctrl_qti_ports:
	.space	4
	.type	no_data_bam_ports, %object
	.size	no_data_bam_ports, 4
no_data_bam_ports:
	.space	4
	.type	no_data_bam2bam_ports, %object
	.size	no_data_bam2bam_ports, 4
no_data_bam2bam_ports:
	.space	4
	.type	no_ctrl_hsic_ports, %object
	.size	no_ctrl_hsic_ports, 4
no_ctrl_hsic_ports:
	.space	4
	.type	no_data_hsic_ports, %object
	.size	no_data_hsic_ports, 4
no_data_hsic_ports:
	.space	4
	.type	no_ctrl_hsuart_ports, %object
	.size	no_ctrl_hsuart_ports, 4
no_ctrl_hsuart_ports:
	.space	4
	.type	no_data_hsuart_ports, %object
	.size	no_data_hsuart_ports, 4
no_data_hsuart_ports:
	.space	4
	.type	__key.50492, %object
	.size	__key.50492, 0
__key.50492:
	.type	__key.50493, %object
	.size	__key.50493, 0
__key.50493:
	.type	port_num.51664, %object
	.size	port_num.51664, 4
port_num.51664:
	.space	4
	.type	port_num.52322, %object
	.size	port_num.52322, 4
port_num.52322:
	.space	4
	.type	rmnet_initialized.63405, %object
	.size	rmnet_initialized.63405, 4
rmnet_initialized.63405:
	.space	4
	.type	ports.63406, %object
	.size	ports.63406, 4
ports.63406:
	.space	4
	.type	acm_data, %object
	.size	acm_data, 4
acm_data:
	.space	4
	.type	rndis_initialized, %object
	.size	rndis_initialized, 1
rndis_initialized:
	.space	1
	.space	3
	.type	rndis_connect_state, %object
	.size	rndis_connect_state, 4
rndis_connect_state:
	.space	4
	.type	ipa_params, %object
	.size	ipa_params, 28
ipa_params:
	.space	28
	.type	n_bam2bam_data_ports, %object
	.size	n_bam2bam_data_ports, 4
n_bam2bam_data_ports:
	.space	4
	.type	bam_data_wq, %object
	.size	bam_data_wq, 4
bam_data_wq:
	.space	4
	.type	the_dev, %object
	.size	the_dev, 4
the_dev:
	.space	4
	.type	dev_addr, %object
	.size	dev_addr, 4
dev_addr:
	.space	4
	.type	qc_dev_addr, %object
	.size	qc_dev_addr, 4
qc_dev_addr:
	.space	4
	.type	qc_host_addr, %object
	.size	qc_host_addr, 4
qc_host_addr:
	.space	4
	.type	the_card, %object
	.size	the_card, 4
the_card:
	.space	4
	.type	audio_reinit, %object
	.size	audio_reinit, 1
audio_reinit:
	.space	1
	.space	3
	.type	__key.45491, %object
	.size	__key.45491, 0
__key.45491:
	.type	__key.45492, %object
	.size	__key.45492, 0
__key.45492:
	.type	terminal_mode_vendor_id, %object
	.size	terminal_mode_vendor_id, 2
terminal_mode_vendor_id:
	.space	2
	.type	terminal_mode_version, %object
	.size	terminal_mode_version, 2
terminal_mode_version:
	.space	2
	.type	diag_dload, %object
	.size	diag_dload, 4
diag_dload:
	.space	4
	.type	usb30en, %object
	.size	usb30en, 1
usb30en:
	.space	1
	.space	3
	.type	audio_string_defs, %object
	.size	audio_string_defs, 8
audio_string_defs:
	.space	8
	.type	host_addr, %object
	.size	host_addr, 4
host_addr:
	.space	4
	.type	_rndis_qc, %object
	.size	_rndis_qc, 4
_rndis_qc:
	.space	4
	.type	bam2bam_data_ports, %object
	.size	bam2bam_data_ports, 4
bam2bam_data_ports:
	.space	4
	.type	rndis_ul_max_xfer_size_rcvd, %object
	.size	rndis_ul_max_xfer_size_rcvd, 4
rndis_ul_max_xfer_size_rcvd:
	.space	4
	.type	rndis_ul_max_pkt_per_xfer_rcvd, %object
	.size	rndis_ul_max_pkt_per_xfer_rcvd, 4
rndis_ul_max_pkt_per_xfer_rcvd:
	.space	4
	.type	gctrl_dfile, %object
	.size	gctrl_dfile, 4
gctrl_dfile:
	.space	4
	.type	gctrl_dent, %object
	.size	gctrl_dent, 4
gctrl_dent:
	.space	4
	.type	smd_ctrl_dfile, %object
	.size	smd_ctrl_dfile, 4
smd_ctrl_dfile:
	.space	4
	.type	smd_ctrl_dent, %object
	.size	smd_ctrl_dent, 4
smd_ctrl_dent:
	.space	4
	.type	online_clients, %object
	.size	online_clients, 1
online_clients:
	.space	1
	.space	3
	.type	gbam_dent, %object
	.size	gbam_dent, 4
gbam_dent:
	.space	4
	.type	bam2bam_ports, %object
	.size	bam2bam_ports, 12
bam2bam_ports:
	.space	12
	.type	gs_dent, %object
	.size	gs_dent, 4
gs_dent:
	.space	4
	.type	dent_rmnet_mux, %object
	.size	dent_rmnet_mux, 4
dent_rmnet_mux:
	.space	4
	.type	rmnet_mux_sdio_data_ch, %object
	.size	rmnet_mux_sdio_data_ch, 4
rmnet_mux_sdio_data_ch:
	.space	4
	.type	rmnet_mux_sdio_ctl_ch, %object
	.size	rmnet_mux_sdio_ctl_ch, 4
rmnet_mux_sdio_ctl_ch:
	.space	4
	.type	rmnet_sdio_data_ch, %object
	.size	rmnet_sdio_data_ch, 4
rmnet_sdio_data_ch:
	.space	4
	.type	rmnet_sdio_ctl_ch, %object
	.size	rmnet_sdio_ctl_ch, 4
rmnet_sdio_ctl_ch:
	.space	4
	.type	dent_smd, %object
	.size	dent_smd, 4
dent_smd:
	.space	4
	.type	dent_diag, %object
	.size	dent_diag, 4
dent_diag:
	.space	4
	.section	.data.rel,"aw",%progbits
	.align	2
.LANCHOR7 = . + 0
	.type	f_audio_desc, %object
	.size	f_audio_desc, 76
f_audio_desc:
	.word	uac1_ac_interface_desc
	.word	uac1_ac_header_desc
	.word	microphone_input_terminal_desc
	.word	microphone_output_terminal_desc
	.word	speaker_input_terminal_desc
	.word	speaker_output_terminal_desc
	.word	microphone_as_interface_alt_0_desc
	.word	microphone_as_interface_alt_1_desc
	.word	microphone_as_header_desc
	.word	microphone_as_type_i_desc
	.word	microphone_as_ep_in_desc
	.word	microphone_as_iso_in_desc
	.word	speaker_as_interface_alt_0_desc
	.word	speaker_as_interface_alt_1_desc
	.word	speaker_as_header_desc
	.word	speaker_as_type_i_desc
	.word	speaker_as_ep_out_desc
	.word	speaker_as_iso_out_desc
	.word	0
	.type	supported_functions, %object
	.size	supported_functions, 104
supported_functions:
	.word	ffs_function
	.word	mbim_function
	.word	ecm_qc_function
	.word	audio_function
	.word	rmnet_smd_function
	.word	rmnet_sdio_function
	.word	rmnet_smd_sdio_function
	.word	rmnet_function
	.word	diag_function
	.word	qdss_function
	.word	adb_function
	.word	midi_function
	.word	ccid_function
	.word	acm_function
	.word	mtp_function
	.word	ptp_function
	.word	rndis_function
	.word	rndis_qc_function
	.word	ecm_function
	.word	ncm_function
	.word	mass_storage_function
	.word	accessory_function
	.word	conn_gadget_function
	.word	audio_source_function
	.word	uasp_function
	.word	0
	.type	audio_playback_ops, %object
	.size	audio_playback_ops, 56
audio_playback_ops:
	.word	audio_pcm_open
	.word	audio_pcm_close
	.word	snd_pcm_lib_ioctl
	.word	audio_pcm_hw_params
	.word	audio_pcm_hw_free
	.word	audio_pcm_prepare
	.word	audio_pcm_playback_trigger
	.word	audio_pcm_pointer
	.space	12
	.word	audio_pcm_mmap
	.space	8
	.type	___modver_attr, %object
	.size	___modver_attr, 36
___modver_attr:
	.word	.LC1042
	.short	292
	.space	2
	.word	__modver_version_show
	.space	16
	.word	.LC571
	.word	.LC1043
	.ident	"GCC: (GNU) 4.9.x 20150123 (prerelease)"
	.section	.note.GNU-stack,"",%progbits
// GENERATED BY LOLZ KERNEL
